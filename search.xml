<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[置顶 THUWC2020游记]]></title>
    <url>%2F9102%2F12%2F19%2F%E7%BD%AE%E9%A1%B6-THUWC2020%E6%B8%B8%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[咫尺之外 $Day -\infty$这次 THUWC 有点早,报名的时候 CSP 官方成绩都还没发布,发现自己没什么奖可以填,结果还是过审了. 考前没感冒,身体状况良好,实属罕见. $Day\ 0$中午从学校出发,晚上成功入住了豪华包间. 甚至找不到热水壶,喝水还要跑到二楼去接. 稍微颓了会隔膜就睡觉了. $Day\ 1$上午去试机,发了条围巾当纪念品, Sublime Text 3 好评,但键盘似乎并不是很顺手. 北京的室外是真的冷,室内是真的热,有点不太适应. 试机题目貌似是 THUWC2018 的题,发现 T1 很签到,后面两道都不会做,打了个 NTT 板子练手就走了. 下午考试,看了题之后,根据历史规律,猜了一下 T1 应该可做,冷静思考了一波,发现是个签到题,写了一发就 pp 了. 后面两个题没想出什么高论,打了几个暴力,还有 40 分钟的时候就差不多弃疗了. 然后还有 5 分钟的时候发现 T2 的环套树非常可做,把树的做法拿来随便改一改就好了,只是没时间写了,淦. 于是 T2 白给了 15 分,最后得分大概 170 多点. $Day\ 2$看了题,感觉都比较神仙. 冷静思考了一波,还是啥也不会,写了 T1,T2 的暴力,跑去找 T3 的性质. 把表打出来了,结果还是没找出来什么性质,喜提 5 分. 感觉今天智力出了点问题,最后喜提 91 的好成绩. $Day\ 2+$上午智力出了问题,晚上心态也出问题了. 刚开考的几分钟学习手册没发下来,就看了看问题,感觉 T1 好像比较好做,于是拿到手册后就去学 T1 的做法. 冷静思考了一波,发现是个模拟题,但是感觉歧义有点多,提个问就 no response. 于是写代码就写了 1 个小时左右,直接过了样例,交上去直接 WA 了. 小样例过水,又没有大样例,感觉 T1 都花了这么久,开后面的题应该也不太能做. 于是头铁了一波,对着代码和学习手册硬调,前后写了 10 来个版本的题意理解,都能过小样例,交上去都 WA . 快结束的时候浑身上下都在冒汗,最后还是没能调出来,于是工业场就报灵了. 后记我佛了, CSP 结束后基本上都在做数学题和多项式的数数题,结果直接给我整了 1 个 dp 和 5 个数据结构. 还有把我愉悦送走的模拟题.. 今年的比赛暂告一段落了,明年再来吧.]]></content>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20200417]]></title>
    <url>%2F2020%2F04%2F17%2Ftest20200417%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>贪心</tag>
        <tag>树状数组</tag>
        <tag>李超线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 6031 字符串]]></title>
    <url>%2F2020%2F04%2F16%2FLoj-6031-%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[SAM + 根号分治. 每次询问的 $k$ 都是一样的,可以记一个常数 $p=kq$ ,考虑根号分治,对 $k\le q$ 和 $k&gt;q$ 两种情况讨论. $k\le q$每次询问的串长不会超过 $\sqrt p$ ,可以直接枚举 $w$ 的每个子串 $w[l,r]$ . 算出这个子串在 $s$ 中出现的次数,再乘上 $[l,r]$ 这个区间在第 $a$ 到第 $b$ 个区间出现的次数,就是这个子串对询问贡献. 前者可以在串 $s$ 的 SAM 上找出 $w[l,r]$ 对应的状态,其 right 集合大小即为出现次数. 后者可以将 $[l,r]$ 在 $m$ 个区间中出现的所有位置存在 vector 中,二分找出 $a,b$ 的位置,做差即为所求. 时间复杂度 $O(qk^2\log m)=O(p\sqrt p \log m)$ . $k&gt; q$询问的次数不超过 $\sqrt p$ ,对于每次询问,我们都将第 $a$ 个区间到第 $b$ 个区间拿出来,考虑每个区间 $[l,r]$ 的贡献. $w[l,r]$ 在串 $s$ 中出现的次数等价于 $s$ 有多少个前缀与 $w[1,r]$ 的 LCS 长度不小于 $r-l+1$ . 将 $w[1,r]$ 在 SAM 上对应的位置找出,倍增查找出其深度最浅的满足 $maxlen\ge r-l+1$ 的祖先. 其 right 集合大小即为所求. 注意在给 $w[1,r]$ 定位时,若沿着失配边往回跳,有效的后缀长度就会改变. 时间复杂度 $O(q(k+m\log n))=O(p+m\sqrt p\log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out = 0, fh = 1; char jp = getchar(); while ((jp &gt; '9' || jp &lt; '0') &amp;&amp; jp != '-') jp = getchar(); if (jp == '-') fh = -1, jp = getchar(); while (jp &gt;= '0' &amp;&amp; jp &lt;= '9') out = out * 10 + jp - '0', jp = getchar(); return out * fh;&#125;const int N = 2e5 + 10, S = 26, K = 320;int fa[N], len[N], siz[N], ch[N][S], idx = 1, lst = 1;void Extend(int c)&#123; int p = lst, np = ++idx; lst = np; len[np] = len[p] + 1, siz[np] = 1; while (p &amp;&amp; !ch[p][c]) ch[p][c] = np, p = fa[p]; if (!p) fa[np] = 1; else &#123; int q = ch[p][c]; if (len[q] == len[p] + 1) fa[np] = q; else &#123; int nq = ++idx; len[nq] = len[p] + 1; fa[nq] = fa[q]; fa[q] = fa[np] = nq; memcpy(ch[nq], ch[q], sizeof ch[nq]); while (p &amp;&amp; ch[p][c] == q) ch[p][c] = nq, p = fa[p]; &#125; &#125;&#125;int A[N], t[N];void toposort()&#123; for (int i = 1; i &lt;= idx; ++i) ++t[len[i]]; for (int i = 1; i &lt;= idx; ++i) t[i] += t[i - 1]; for (int i = 1; i &lt;= idx; ++i) A[t[len[i]]--] = i;&#125;char s[N], w[N];int n, m, q, k, L[N], R[N];namespace Case1&#123; vector&lt;int&gt; vc[K][K]; int calc(int a, int b, int l, int r) &#123; int x = lower_bound(vc[l][r].begin(), vc[l][r].end(), a) - vc[l][r].begin(); int y = upper_bound(vc[l][r].begin(), vc[l][r].end(), b) - vc[l][r].begin() - 1; return y - x + 1; &#125; void solve() &#123; for (int i = 1; i &lt;= m; ++i) if (1 &lt;= L[i] &amp;&amp; L[i] &lt;= R[i] &amp;&amp; R[i] &lt;= k) vc[L[i]][R[i]].push_back(i); while (q--) &#123; scanf("%s", w + 1); int a = read() + 1, b = read() + 1; ll ans = 0; for (int l = 1; l &lt;= k; ++l) &#123; int x = 1; for (int r = l; r &lt;= k; ++r) &#123; x = ch[x][w[r] - 'a']; if (!siz[x]) break; if (vc[l][r].empty()) continue; if (vc[l][r].back() &lt; a || vc[l][r].front() &gt; b) continue; ans += 1LL * siz[x] * calc(a, b, l, r); &#125; &#125; printf("%lld\n", ans); &#125; &#125;&#125;namespace Case2&#123; const int D = 18; int Fa[N][D], dep[N]; vector&lt;int&gt; tmp[N]; int query(int x, int bound) &#123; if (len[x] &lt; bound) return 0; for (int i = D - 1; i &gt;= 0; --i) if ((1 &lt;&lt; i) &lt;= dep[x] &amp;&amp; len[Fa[x][i]] &gt;= bound) x = Fa[x][i]; return siz[x]; &#125; int tot[N]; void solve() &#123; for (int i = 2; i &lt;= idx; ++i) &#123; int x = A[i]; dep[x] = dep[fa[x]] + 1, Fa[x][0] = fa[x]; for (int j = 1; (1 &lt;&lt; j) &lt;= dep[x]; ++j) Fa[x][j] = Fa[Fa[x][j - 1]][j - 1]; &#125; while (q--) &#123; scanf("%s", w + 1); int a = read() + 1, b = read() + 1; for (int i = a; i &lt;= b; ++i) tmp[R[i]].push_back(L[i]); ll ans = 0; int x = 1, cnt = 0; for (int r = 1; r &lt;= k; ++r) &#123; int c = w[r] - 'a'; if (ch[x][c]) &#123; x = ch[x][c]; ++cnt; &#125; else &#123; while (x &amp;&amp; !ch[x][c]) x = fa[x]; if (!x) x = 1, cnt = 0; else cnt = len[x] + 1, x = ch[x][c]; &#125; for (int l : tmp[r]) if (cnt &gt;= r - l + 1) ans += query(x, r - l + 1); &#125; printf("%lld\n", ans); for (int i = a; i &lt;= b; ++i) tmp[R[i]].clear(); &#125; &#125;&#125;int main()&#123; n = read(), m = read(), q = read(), k = read(); scanf("%s", s + 1); for (int i = 1; i &lt;= n; ++i) Extend(s[i] - 'a'); toposort(); for (int i = idx; i &gt;= 2; --i) siz[fa[A[i]]] += siz[A[i]]; for (int i = 1; i &lt;= m; ++i) L[i] = read() + 1, R[i] = read() + 1; if (k &lt;= q) Case1::solve(); else Case2::solve(); return 0;&#125;]]></content>
      <tags>
        <tag>倍增</tag>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20200415]]></title>
    <url>%2F2020%2F04%2F15%2Ftest20200415%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>博弈论</tag>
        <tag>test</tag>
        <tag>点分治</tag>
        <tag>dsu on tree</tag>
        <tag>二分图匹配</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2564 原题识别]]></title>
    <url>%2F2020%2F04%2F14%2FLoj-2564-%E5%8E%9F%E9%A2%98%E8%AF%86%E5%88%AB%2F</url>
    <content type="text"><![CDATA[比较麻烦的二维数点. 随机生成数据带来的性质首先需要注意数据的生成方式是给出的,表面上是减少输入量,实际上蕴含了这棵树的一些有用的性质. 前 $p$ 个点形成一条主链,后面的点随机向前面的点连边,那么每个点到主链的距离期望是 $O(\log n)$ 的. 于是对于树上任意两个点 $x,y$ 和它们的最近公共祖先 $l$ , $\min(dis(x,l),dis(y,l))$ 的期望也是 $O(\log n)$ 的. 此外,由于每个点颜色是在 $[1,n]$ 中随机的,所以在期望意义下,每种颜色只会有 $O(1)$ 个点. 第一问先考虑第一问怎么做,求区间内颜色数目通常可以找出 $p_i$ 表示上一个和 $i$ 颜色相同的点,然后二维数点. 现在是在树上,就令 $p_i$ 表示 $i$ 的所有真祖先中,颜色与 $i​$ 相同且深度最大的点. 不妨令 $dis(x,l) &lt;dis(y,l)$ ,我们可以先求出 $[l, y]$ 这条链上的颜色数目,这可以用主席树二维数点 $O(\log n)$ 求出. 再枚举 $(l,x]​$ 链上的每个点 $i​$ ,若 $i​$ 的颜色是 $c​$ ,就找出所有颜色是 $c​$ 的点,如果都没有在 $[l,y]​$ 上出现, $i​$ 就有贡献 $1​$. 检查某个点是否在 $[l,y]$ 这条链上可以直接用欧拉序判断. $(l,x]​$ 这条链上期望只会有 $O(\log n)​$ 个点,而每个点期望只会有 $O(1)​$ 个点和它颜色相同,每次判断也是 $O(1)​$ 的. 于是单次第一种询问的时间复杂度为 $O(\log n)​$ . 第二问仍然令 $dis(x,l) &lt;dis(y,l)$ ,可以讨论 $a,b$ 所在的位置,拆成三个子问题. Case 1$a\in [1,l), b\in [1,y]$ .这等价于在一条链上询问,点 $i$ 能产生贡献,当且仅当 $L\in[p_i+1,i], R\ge i$ . 于是可以对 $i​$ 分段,将贡献大力拆开,用主席树维护一下区间的 $\sum 1, \sum i,\sum p_i,\sum i\cdot p_i​$ 就可以支持询问. Case 2$a\in [l,x],b\in[1,l)$ .我们把 $a\in [1,x],b\in[1,l) $ 的贡献算出来,再减去 $a\in [1,l),b\in[1,l) $ 的贡献. 这两种贡献和 Case 1 的形式是一样的. Case 3$a\in [l,x],b\in[l,y]$ .先计算 $[l,y]$ 上的点的贡献,此时不考虑 $[l,x]$ 内的点的颜色,贡献拆开后就是一个二维数点. 再考虑 $[l,x]$ 上的每个点 $i$ ,它有贡献当且仅当 $p_i&lt;l$ 且 $[l,b]$ 内没有和它颜色相同的点. 找出 $q_i$ 表示 $[l,y]$ 中第一个和 $i$ 颜色相同的点(没有就记作 $y+1$ ). 当 $p_i&lt;l$ 时,就有贡献 $(x-i+1)(q_i-l)$ ,仍然可以用二维数点计算. 每种情况都可以在 $O(\log n)$ 的时间内求出贡献,总复杂度 $O(n \log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline unsigned int read()&#123; unsigned int out = 0, fh = 1; char jp = getchar(); while ((jp &gt; '9' || jp &lt; '0') &amp;&amp; jp != '-') jp = getchar(); if (jp == '-') fh = -1, jp = getchar(); while (jp &gt;= '0' &amp;&amp; jp &lt;= '9') out = out * 10 + jp - '0', jp = getchar(); return out * fh;&#125;unsigned int SA, SB, SC;unsigned int rng61()&#123; SA ^= SA &lt;&lt; 16; SA ^= SA &gt;&gt; 5; SA ^= SA &lt;&lt; 1; unsigned int t = SA; SA = SB; SB = SC; SC ^= t ^ SA; return SC;&#125;const int N = 4e5 + 10, K = 19;int n, m, len, ecnt, head[N], to[N], nx[N], col[N], fa[N];void addedge(int u, int v)&#123; ++ecnt; to[ecnt] = v; nx[ecnt] = head[u]; head[u] = ecnt;&#125;void gen()&#123; for (int i = 2; i &lt;= n; ++i) &#123; if (i &lt;= len) fa[i] = i - 1; else fa[i] = rng61() % (i - 1) + 1; addedge(fa[i], i); &#125; for (int i = 1; i &lt;= n; ++i) col[i] = rng61() % n + 1;&#125;vector&lt;int&gt; vec[N];int dfn[N], ed[N], Log[N], st[N][K], dep[N], app[N], ptot, tot;ll pre2[N], pre3[N];struct info&#123; ll sum1, sum2, sum3, sum4; info(ll sum1 = 0, ll sum2 = 0, ll sum3 = 0, ll sum4 = 0) : sum1(sum1), sum2(sum2), sum3(sum3), sum4(sum4) &#123;&#125; info&amp; operator += (const info &amp;rhs) &#123; sum1 += rhs.sum1, sum2 += rhs.sum2; sum3 += rhs.sum3, sum4 += rhs.sum4; return *this; &#125; info&amp; operator -= (const info &amp;rhs) &#123; sum1 -= rhs.sum1, sum2 -= rhs.sum2; sum3 -= rhs.sum3, sum4 -= rhs.sum4; return *this; &#125;&#125; tree[N * 20];int ls[N * 20], rs[N * 20];void upd(int &amp;o, int lst, int l, int r, int x, int y)&#123; o = ++ptot; tree[o] = tree[lst], ls[o] = ls[lst], rs[o] = rs[lst]; ++tree[o].sum1, tree[o].sum2 += y; tree[o].sum3 += x, tree[o].sum4 += 1LL * x * y; if (l == r) return; int mid = (l + r) &gt;&gt; 1; if (y &lt;= mid) upd(ls[o], ls[lst], l, mid, x, y); else upd(rs[o], rs[lst], mid + 1, r, x, y);&#125;void query(info &amp;res, int tl, int tr, int l, int r, int L, int R)&#123; if (tl == tr || l &gt; R || r &lt; L) return; if (L &lt;= l &amp;&amp; r &lt;= R) &#123; res += tree[tr]; res -= tree[tl]; return; &#125; int mid = (l + r) &gt;&gt; 1; if (L &lt;= mid) query(res, ls[tl], ls[tr], l, mid, L, R); if (R &gt; mid) query(res, rs[tl], rs[tr], mid + 1, r, L, R);&#125;int lst[N], rt[N];void dfs(int u, int Fa)&#123; st[dfn[u] = ++tot][0] = u, dep[u] = dep[Fa] + 1; vec[col[u]].push_back(u), lst[u] = app[col[u]]; int t = app[col[u]]; app[col[u]] = u; pre2[u] = pre2[Fa] + dep[u] - dep[lst[u]]; pre3[u] = pre3[Fa] + 1LL * (dep[u] - dep[lst[u]]) * dep[u]; upd(rt[u], rt[Fa], 0, n, dep[u], dep[lst[u]]); for (int i = head[u]; i; i = nx[i]) &#123; int v = to[i]; dfs(v, u); st[++tot][0] = u; &#125; app[col[u]] = t, ed[u] = tot;&#125;int LCA(int x, int y)&#123; x = dfn[x], y = dfn[y]; if (x &gt; y) swap(x, y); int k = Log[y - x + 1]; if (dep[st[x][k]] &lt; dep[st[y - (1 &lt;&lt; k) + 1][k]]) return st[x][k]; else return st[y - (1 &lt;&lt; k) + 1][k];&#125;int vis[N];bool onlink(int x, int y, int p)&#123; return dfn[x] &lt;= dfn[p] &amp;&amp; dfn[p] &lt;= ed[x] &amp;&amp; dfn[p] &lt;= dfn[y] &amp;&amp; dfn[y] &lt;= ed[p];&#125;ll calc1(int x, int y)&#123; ++tot; int la = LCA(x, len), lb = LCA(y, len); if (la &gt; lb) swap(x, y); int l = LCA(x, y); info tmp = info(0, 0, 0, 0); query(tmp, rt[fa[l]], rt[y], 0, n, 0, dep[l] - 1); int res = tmp.sum1; for (int i = x; i != l; i = fa[i]) if (vis[col[i]] != tot) &#123; vis[col[i]] = tot; int fl = 1, sz = vec[col[i]].size(); for (int j = 0; j &lt; sz &amp;&amp; fl; ++j) if (onlink(l, y, vec[col[i]][j])) fl = 0; res += fl; &#125; return res;&#125;ll calc(int x, int y, info res)&#123; int a = dep[x], b = dep[y]; ll s = (res.sum1 * a - res.sum2) * (b + 1) - res.sum3 * a + res.sum4; return s + 1LL * (a + b + 2) * pre2[x] - 2 * pre3[x] - a; &#125;ll calc2(int x, int y)&#123; ++tot; int la = LCA(x, len), lb = LCA(y, len); if (la &gt; lb) swap(x, y); int l = LCA(x, y), pl = fa[l], dl = dep[l]; info t1 = info(0, 0, 0, 0), t2 = t1; query(t1, rt[pl], rt[y], 0, n, 0, dl - 1); query(t2, rt[pl], rt[x], 0, n, 0, dl - 1); ll res = calc(pl, y, t1) + calc(pl, x, t2); res -= 2 * (1LL * dl * pre2[pl] - pre3[pl]) + dl - 1; res += (1LL * (dep[y] + 1) * t1.sum1 - t1.sum3) * (dep[x] - dl + 1); int tp = 0; for (int i = x; i != l; i = fa[i]) app[++tp] = i; app[++tp] = l; while (tp &gt; 0) &#123; int i = app[tp--]; if (vis[col[i]] != tot) &#123; vis[col[i]] = tot; int mn = dep[y] + 1, sz = vec[col[i]].size(); for (int j = 0; j &lt; sz; ++j) if (onlink(l, y, vec[col[i]][j]) &amp;&amp; mn &gt; dep[vec[col[i]][j]]) mn = dep[vec[col[i]][j]]; res += 1LL * (mn - dl) * (dep[x] - dep[i] + 1); &#125; &#125; return res;&#125;void solve()&#123; dfs(1, 0); Log[1] = 0; for (int i = 2; i &lt;= tot; ++i) Log[i] = Log[i &gt;&gt; 1] + 1; for (int j = 1; j &lt; K; ++j) for (int i = 1; i + (1 &lt;&lt; j) - 1 &lt;= tot; ++i) if (dep[st[i][j - 1]] &lt; dep[st[i + (1 &lt;&lt; j &gt;&gt; 1)][j - 1]]) st[i][j] = st[i][j - 1]; else st[i][j] = st[i + (1 &lt;&lt; j &gt;&gt; 1)][j - 1]; tot = 0; m = read(); for (int i = 1; i &lt;= m; ++i) &#123; int op = read(), x = read(), y = read(); if (op == 1) printf("%lld\n", calc1(x, y)); else printf("%lld\n", calc2(x, y)); &#125;&#125;void reset()&#123; ecnt = ptot = tot = 0; for (int i = 1; i &lt;= n; ++i) &#123; rt[i] = head[i] = vis[i] = app[i] = 0; vec[i].clear(); &#125; &#125;int main()&#123; int T = read(); while (T--) &#123; n = read(), len = read(); SA = read(), SB = read(), SC = read(); gen(); solve(); reset(); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2052 矿区]]></title>
    <url>%2F2020%2F04%2F14%2FLoj-2052-%E7%9F%BF%E5%8C%BA%2F</url>
    <content type="text"><![CDATA[平面图转对偶图. 先把平面图转成对偶图. 方法是把每条无向边拆成两条有向边,规定每个面都在围成它的有向边的左侧,这样每条有向边就只会被用一次. 对于每个边,按照极角序找它转动后下一条边,这样会形成一个置换. 分解后得到的每个环就对应了每个面,即对偶图中的每个点,再在有公共边的面之间连边即可. 找出面的时候用叉积顺便算一下面积,面积为负数的就是外面无穷大的面. 然后以最外面无穷大的面为根,做一棵生成树出来,询问时按照最外围边对子树和容斥一下即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out = 0, fh = 1; char jp = getchar(); while ((jp &gt; '9' || jp &lt; '0') &amp;&amp; jp != '-') jp = getchar(); if (jp == '-') fh = -1, jp = getchar(); while (jp &gt;= '0' &amp;&amp; jp &lt;= '9') out = out * 10 + jp - '0', jp = getchar(); return out * fh;&#125;ll Abs(ll x)&#123; return x &gt; 0 ? x : -x;&#125;const double eps = 1e-10;const int N = 4e6 + 10;int n, m, q, rt, cnt, tid[N];ll sum[N][2];struct v2&#123; int x, y; v2(int x = 0, int y = 0) : x(x), y(y) &#123;&#125; v2 operator - (const v2 &amp;rhs) const &#123; return v2(x - rhs.x, y - rhs.y); &#125; ll operator * (const v2 &amp;rhs) const &#123; return 1LL * x * rhs.y - 1LL * y * rhs.x; &#125; double angle() &#123; return atan2(y, x); &#125;&#125; p[N];double calc(int u, int v)&#123; return (p[v] - p[u]).angle();&#125;struct Edge&#123; int u, v, id; double slop; Edge(int u = 0, int v = 0, int id = 0, double slop = 0) : u(u), v(v), id(id), slop(slop) &#123;&#125; friend bool operator &lt; (Edge A, Edge B) &#123; if (fabs(A.slop - B.slop) &gt; eps) return A.slop &lt; B.slop; return A.v &lt; B.v; &#125;&#125; E[N];typedef vector&lt;Edge&gt;::iterator vit;vector&lt;Edge&gt; vec[N];namespace DualGraph&#123; int ecnt = 1, head[N], to[N], nx[N]; void addedge(int u, int v) &#123; ++ecnt; to[ecnt] = v; nx[ecnt] = head[u]; head[u] = ecnt; &#125; int fa[N], vis[N], ontree[N]; void dfs(int u, int F) &#123; fa[u] = F, vis[u] = 1; for (int i = head[u]; i; i = nx[i]) &#123; int v = to[i]; if (vis[v]) continue; ontree[i] = ontree[i ^ 1] = 1; dfs(v, u); sum[u][0] += sum[v][0], sum[u][1] += sum[v][1]; &#125; &#125; int np[N]; void solve() &#123; dfs(rt, 0); ll num = 0, deno = 0; for (int i = 1; i &lt;= q; ++i) &#123; ll c = (read() + num) % n + 1; for (int j = 1; j &lt;= c; ++j) &#123; ll x = (read() + num) % n + 1; np[j] = x; &#125; np[c + 1] = np[1]; num = deno = 0; for (int j = 1; j &lt;= c; ++j) &#123; int x = np[j], y = np[j + 1]; Edge tmp = Edge(x, y, 0, calc(x, y)); vit it = lower_bound(vec[x].begin(), vec[x].end(), tmp); int a = (*it).id, b = a ^ 1; if (!ontree[a]) continue; a = tid[a], b = tid[b]; if (fa[a] == b) &#123; deno += sum[a][0]; num += sum[a][1]; &#125; else if (fa[b] == a) &#123; deno -= sum[b][0]; num -= sum[b][1]; &#125; &#125; num = Abs(num), deno = Abs(deno); ll g = __gcd(num, deno); num /= g, deno /= g; printf("%lld %lld\n", num, deno); &#125; &#125;&#125;namespace PlanGraph&#123; int ecnt = 1, nx[N]; void addedge(int u, int v) &#123; ++ecnt; E[ecnt] = Edge(u, v, ecnt, calc(u, v)); vec[u].push_back(E[ecnt]); &#125; void Init() &#123; n = read(), m = read(), q = read(); for (int i = 1; i &lt;= n; ++i) p[i].x = read(), p[i].y = read(); for (int i = 1; i &lt;= m; ++i) &#123; int u = read(), v = read(); addedge(u, v); addedge(v, u); &#125; for (int i = 1; i &lt;= n; ++i) sort(vec[i].begin(), vec[i].end()); for (int i = 2; i &lt;= ecnt; ++i) &#123; int v = E[i].v; vit it = lower_bound(vec[v].begin(), vec[v].end(), E[i ^ 1]); if (it == vec[v].begin()) it = vec[v].end(); --it; nx[i] = (*it).id; &#125; for (int i = 2; i &lt;= ecnt; ++i) if (!tid[i]) &#123; tid[i] = ++cnt; ll Area = 0; v2 st = p[E[i].u]; for (int x = nx[i]; x != i; x = nx[x]) &#123; tid[x] = cnt; v2 a = p[E[x].u], b = p[E[x].v]; Area += (a - st) * (b - st); &#125; if (Area &lt; 0) rt = cnt; else &#123; sum[cnt][0] = Area * 2; sum[cnt][1] = Area * Area; &#125; &#125; for (int i = 2; i &lt;= ecnt; ++i) DualGraph::addedge(tid[i], tid[i ^ 1]); &#125;&#125;int main()&#123; PlanGraph::Init(); DualGraph::solve(); return 0;&#125;]]></content>
      <tags>
        <tag>对偶图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2882 两个人的星座]]></title>
    <url>%2F2020%2F04%2F13%2FLoj-2882-%E4%B8%A4%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%98%9F%E5%BA%A7%2F</url>
    <content type="text"><![CDATA[极角排序. 两个三角形如果相离,则一定可以用公切线分开. 枚举两个点的连线作为公切线,统计两个半平面中各类颜色点的数目,时间复杂度 $O(n^3)$ . 优化一下,先枚举一个点作为原点,对其他点极角排序. 再枚举另一个点,用前缀和询问两个半平面中各类颜色点的数目. 由于两个相离的三角形通过顶点相连可以产生 $4$ 根公切线,所以最后还需要将答案除掉 $4$ . 时间复杂度 $O(n^2\log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out = 0, fh = 1; char jp = getchar(); while ((jp &gt; '9' || jp &lt; '0') &amp;&amp; jp != '-') jp = getchar(); if (jp == '-') fh = -1, jp = getchar(); while (jp &gt;= '0' &amp;&amp; jp &lt;= '9') out = out * 10 + jp - '0', jp = getchar(); return out * fh;&#125;const int N = 3e3 + 10;int sgn(int x)&#123; return x &gt;= 0;&#125;struct v2&#123; int x, y, col; v2(int x = 0, int y = 0, int col = 0) : x(x), y(y), col(col) &#123;&#125; v2 operator + (const v2 &amp;rhs) const &#123; return v2(x + rhs.x, y + rhs.y, col); &#125; v2 operator - (const v2 &amp;rhs) const &#123; return v2(x - rhs.x, y - rhs.y, col); &#125; ll operator * (const v2 &amp;rhs) const &#123; return 1LL * x * rhs.y - 1LL * y * rhs.x; &#125; friend bool operator &lt; (v2 A, v2 B) &#123; if (sgn(A.y) != sgn(B.y)) return sgn(A.y) &gt; sgn(B.y); return A * B &gt; 0; &#125;&#125; p[N], a[N];int n, sum[N][3], pos[N], t[2][3];int query(int l, int r, int col)&#123; if (l &gt; r) return 0; return sum[r][col] - sum[l - 1][col];&#125;ll calc()&#123; for (int i = 2; i &lt;= n; ++i) a[i - 1] = p[i] - p[1]; sort(a + 1, a + n); for (int i = 1; i &lt; n; ++i) &#123; for (int j = 0; j &lt; 3; ++j) sum[i][j] = sum[i - 1][j]; ++sum[i][a[i].col]; &#125; ll s = 0; for (int i = 1; i &lt; n; ++i) &#123; v2 iv = v2(0, 0, 0) - a[i]; int l = i, r = lower_bound(a + 1, a + n, iv) - a; memset(t, 0, sizeof t); for (int j = 0; j &lt; 3; ++j) &#123; t[0][j] += query(r, n - 1, j); t[0][j] += query(1, l - 1, j); t[1][j] += query(l + 1, r - 1, j); &#125; int c = p[1].col, d = a[i].col; for (int id = 0; id &lt; 2; ++id) &#123; ll prod = 1; for (int j = 0; j &lt; 3; ++j) &#123; if (c != j) prod *= t[id][j]; if (d != j) prod *= t[id ^ 1][j]; &#125; s += prod; &#125; &#125; return s;&#125;int main()&#123; n = read(); for (int i = 1; i &lt;= n; ++i) &#123; p[i].x = read(), p[i].y = read(); p[i].col = read(); &#125; ll ans = 0; for (int i = 1; i &lt;= n; ++i) &#123; swap(p[1], p[i]); ans += calc(); swap(p[1], p[i]); &#125; ans /= 2; printf("%lld\n", ans); return 0;&#125;]]></content>
      <tags>
        <tag>极角排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 6358 前夕]]></title>
    <url>%2F2020%2F04%2F13%2FLoj-6358-%E5%89%8D%E5%A4%95%2F</url>
    <content type="text"><![CDATA[二项式定理 + 单位根反演. 在 $n$ 个元素组成的 $2^n$ 个集合中选出若干集合,使得它们交集大小为 $4$ 的倍数,求方案数. $n\le 10^7$ . 考虑容斥,钦定交集中包含了 $k$ 个元素的总方案数为$$g(k)=\binom n k (2^{2^{n-k}}-1)$$考虑构造出容斥系数 $f$ ,使得$$ans =\sum_{i=0}^n f(k)g(k)$$对于交集大小为 $x$ 的某种方案,对答案的贡献应当为 $[4|x]$ ,而按照 $ans=\sum f(k)g(k)$ 计算时,贡献为$$\sum_{i=0}^x \binom x if(i)$$于是可以得出 $[4|x]=\sum_{i=0}^x \binom x i f(i)$ . 利用二项式反演和单位根反演可以得到 $$f(x)=\sum_{i=0}^x (-1)^{x-i} \binom x i [4|i] \\=\sum_{i=0}^x(-1)^{x-i}\binom x i \frac{1}{4}\sum_{j=0}^3 (\omega_{4}^i)^j \\=\frac{1}{4} \sum_{j=0}^3 \sum_{i=0}^x\binom x i(-1)^{x-i}\ (\omega_{4}^j)^i \\=\frac{1}{4} \sum_{j=0}^3(\omega_4^j-1)^x$$注意选择一个技能都没有的集合和一个集合都不选择是不同的方案. 而上述分析只考虑了前者的贡献,最后答案还要加上 $1$ ,表示一个集合都不选. 时间复杂度 $O(n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out = 0, fh = 1; char jp = getchar(); while ((jp &gt; '9' || jp &lt; '0') &amp;&amp; jp != '-') jp = getchar(); if (jp == '-') fh = -1, jp = getchar(); while (jp &gt;= '0' &amp;&amp; jp &lt;= '9') out = out * 10 + jp - '0', jp = getchar(); return out * fh;&#125;const int P = 998244353, G = 3;int add(int a, int b)&#123; return a + b &gt;= P ? a + b - P : a + b;&#125;void inc(int &amp;a, int b)&#123; a = add(a, b);&#125;int mul(int a, int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a, int b)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = mul(res, a); a = mul(a, a); b &gt;&gt;= 1; &#125; return res;&#125;const int N = 1e7 + 10;int omega, n, f[N], g[N], invfac, fac = 1, ans = 0;int main()&#123; omega = fpow(G, (P - 1) / 4); n = read(); int k = 2, c, pw; for (int i = n; i &gt;= 0; --i) &#123; g[i] = add(k, P - 1); k = mul(k, k); &#125; for (int i = 2; i &lt;= n; ++i) fac = mul(fac, i); invfac = fpow(fac, P - 2); for (int i = n; i &gt;= 0; --i) &#123; g[i] = mul(g[i], invfac); g[n - i] = mul(g[n - i], invfac); invfac = mul(invfac, i); &#125; k = 1; for (int j = 0; j &lt; 4; ++j) &#123; c = add(k, P - 1), pw = 1; for (int i = 0; i &lt;= n; ++i) &#123; inc(f[i], pw); pw = mul(pw, c); &#125; k = mul(k, omega); &#125; for (int i = 0; i &lt;= n; ++i) inc(ans, mul(f[i], g[i])); ans = mul(ans, fpow(4, P - 2)); ans = mul(ans, fac); inc(ans, 1); printf("%d\n", ans); return 0;&#125;]]></content>
      <tags>
        <tag>容斥原理</tag>
        <tag>单位根反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 6360 复燃「恋之埋火」]]></title>
    <url>%2F2020%2F04%2F13%2FLoj-6360-%E5%A4%8D%E7%87%83%E3%80%8C%E6%81%8B%E4%B9%8B%E5%9F%8B%E7%81%AB%E3%80%8D%2F</url>
    <content type="text"><![CDATA[高维空间的最小圆覆盖. 题意就是要求 $m$ 维空间内 $n$ 个点的最小圆覆盖. 把二维的随机增量算法直接拓展到高维,不难发现复杂度的分析是类似的. 当我们已经加入 $k$ 个点时,需要在这 $k$ 个点所在的 $k-1$ 维平面上找一个圆心,使得它到这 $k$ 个点距离相等. 从这 $k$ 个点中选一个点作为原点,它到另外 $k-1$ 个点的 $k-1$ 个向量显然就是这个平面的一组基底. 只需要求出这些向量各自的系数即可确定圆心. 根据圆心到原点和到其他任意一个点的距离相同,可以列出 $k-1$ 个方程,高斯消元求出系数,进而确定圆心位置. 时间复杂度 $O(nm^3)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out = 0, fh = 1; char jp = getchar(); while ((jp &gt; '9' || jp &lt; '0') &amp;&amp; jp != '-') jp = getchar(); if (jp == '-') fh = -1, jp = getchar(); while (jp &gt;= '0' &amp;&amp; jp &lt;= '9') out = out * 10 + jp - '0', jp = getchar(); return out * fh;&#125;const double eps = 1e-8;double sq(double x)&#123; return x * x;&#125;const int N = 2e4 + 10, M = 10;int n, m;typedef vector&lt;double&gt; vm;vm operator + (vm A, vm B)&#123; vm C(m); for (int i = 0; i &lt; m; ++i) C[i] = A[i] + B[i]; return C;&#125;vm operator - (vm A, vm B)&#123; vm C(m); for (int i = 0; i &lt; m; ++i) C[i] = A[i] - B[i]; return C;&#125;vm operator * (vm A, double lambda)&#123; vm B(m); for (int i = 0; i &lt; m; ++i) B[i] = A[i] * lambda; return B;&#125;double dist(vm A, vm B)&#123; double s = 0; for (int i = 0; i &lt; m; ++i) s += sq(A[i] - B[i]); return s;&#125;int id[M], k = 0;vm p[N], centre, vec[M];double radius, a[M][M];void Gauss()&#123; for (int i = 1; i &lt; k; ++i) &#123; int pos = i; for (int j = i + 1; j &lt; k; ++j) if (fabs(a[j][i]) &gt; fabs(a[pos][i])) pos = j; if (pos != i) swap(a[i], a[pos]); for (int j = 1; j &lt; k; ++j) if (i != j) &#123; double t = a[j][i] / a[i][i]; if (fabs(t) &lt;= eps) continue; for (int l = 1; l &lt;= k; ++l) a[j][l] -= a[i][l] * t; &#125; &#125;&#125;void pr(vm x)&#123; for (int i = 0; i &lt; m; ++i) printf("%.6lf,", x[i]); puts("");&#125;void find_centre()&#123; for (int i = 0; i &lt;= k; ++i) for (int j = 0; j &lt;= k; ++j) a[i][j] = 0; for (int i = 1; i &lt; k; ++i) vec[i] = p[id[i]] - p[id[0]]; for (int i = 1; i &lt; k; ++i) for (int j = 0; j &lt; m; ++j) &#123; a[i][k] += sq(vec[i][j]); for (int l = 1; l &lt; k; ++l) a[i][l] += vec[i][j] * 2 * vec[l][j]; &#125; Gauss(); for (int i = 0; i &lt; m; ++i) centre[i] = 0; for (int i = 1; i &lt; k; ++i) centre = centre + vec[i] * (a[i][k] / a[i][i]); centre = centre + p[id[0]];&#125;void dfs(int x, int bound)&#123; if (x &gt; m) return; for (int i = 0; i &lt; bound; ++i) &#123; if (dist(centre, p[i]) - radius &gt; eps) &#123; id[k++] = i; find_centre(); radius = dist(centre, p[i]); dfs(x + 1, i); k--; &#125; &#125;&#125;int main()&#123; srand(1919810); n = read(), m = read(); for (int i = 0; i &lt; n; ++i) &#123; p[i].resize(m); for (int j = 0; j &lt; m; ++j) scanf("%lf", &amp;p[i][j]); &#125; random_shuffle(p, p + n); centre = p[0], radius = -1; dfs(0, n); for (int i = 0; i &lt; m; ++i) printf("%.6lf ", centre[i]); puts(""); return 0;&#125;]]></content>
      <tags>
        <tag>计算几何</tag>
        <tag>高斯消元</tag>
        <tag>随机化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自然数幂和学习笔记]]></title>
    <url>%2F2020%2F04%2F11%2F%E8%87%AA%E7%84%B6%E6%95%B0%E5%B9%82%E5%92%8C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[介绍了自然数幂和的几种常见求法. 自然数幂和定义 $S(n,k)=\sum_{i=0}^{n-1} i^k$ . 拉格朗日插值法$S(n,k)$ 是一个关于 $n$ 的 $k+1​$ 次多项式. 于是可以用拉格朗日插值在 $O(k^2)$ 内求出这个多项式,或者在 $O(k+\log P)$ 内求出某一个 $S(n,k)​$ 的值. 计算过程中需要利用逆元,所以要求模数为质数. 第二类斯特林数法自然数幂的求和不是很直接,但是下降幂求和的形式是十分简单的.$$\begin{aligned}\sum_{i=0}^{n-1} i^{\underline k} &amp;= \frac{1}{k+1}\sum_{i=0}^{n-1}(i+1)^{\underline {k+1}}-i^{\underline {k+1}} \\&amp;=\frac{n^{\underline {k+1}}}{k+1}\end{aligned}$$于是我们可以考虑用第二类斯特林数将自然数幂展开成下降幂进行求和.$$\begin{aligned}S(n,k)&amp;=\sum_{i=0}^{n-1}i^k \\&amp;=\sum_{i=0}^{n-1}\sum_{j=0}^k {k\brace j} i^{\underline j} \\&amp;=\sum_{j=0}^k {k\brace j}\sum_{i=0}^{n-1}i^{\underline j} \\&amp;=\sum_{j=0}^k {k\brace j} \frac{n^{\underline {j+1}}}{j + 1}\end{aligned}$$若多次询问的 $k$ 不同,我们可以 $O(k^2)$ 预处理第二类斯特林数, 然后 $O(k)​$ 回答每个询问. 若多次询问的 $k$ 都相同,根据$${n\brace m} = \frac{1}{m!}\sum_{i=0}^m (-1)^i \binom m i (m-i)^n$$ 可以用 NTT 优化卷积, 以 $O(k\log k)$ 的复杂度求出一行的第二类斯特林数,然后 $O(k)$ 回答每个询问. 若模数不是质数,逆元不一定存在,这个方法仍然可以计算 $S(n,k)$ ,不过复杂度只能做到 $O(k^2)$ . 考虑 $S(n,k)=\sum_{j=0}^k {k\brace j} \frac{n^{\underline {j+1}}}{j + 1}$ ,我们先 $O(k^2)​$ 预处理出第二类斯特林数. 计算时, $n^{\underline {j+1}}$ 是 $j+1$ 个连续自然数乘积,其中一定有 $j+1$ 的倍数,找出来后将它除掉 $j+1$ 即可. 如果把剩下的数暴力乘起来,单次询问的时间复杂度仍然为 $O(k^2)$ . 用线段树维护出 $n,n-1,n-2\dots,n-j$ 这个序列的前缀积,后缀积,就可以做到单次询问 $O(k\log k)$ . 伯努利数法定义伯努利数为对于任意非负整数 $n$ 满足以下等式$$[n=0]=\sum_{i=0}^n\binom{n + 1}{i} B_i$$的唯一实数列. 可以证明,伯努利数的 EGF 为 $$B(x)=\sum_{i\ge 0} \frac{B_i}{i!}=\frac{x}{e^x-1}$$ 并且满足$$S(n,k)=\frac{1}{k+1}\sum_{i=0}^k \binom{k}{i} B_i \cdot n^{k+1-i}$$于是可以先用多项式求逆求出前 $k+1$ 个 $B_i$ ,再用 NTT 对于某个固定的 $n$ ,对 $1$ 到 $k$ 内所有的 $i$ 求出 $S(n,i)$ . 一般适用于 $n$ 固定,而 $k$ 的询问有多个的情况,时间复杂度 $O(k\log k)​$ .]]></content>
      <tags>
        <tag>数学</tag>
        <tag>学习笔记</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2462 完美的集合]]></title>
    <url>%2F2020%2F04%2F10%2FLoj-2462-%E5%AE%8C%E7%BE%8E%E7%9A%84%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[树上连通块的 dp 技巧 + 奇怪的组合数取模. “点数减边数”对于树上满足某种性质 $P$ 的连通块计数,有一个巧妙的转化 “点数减边数” . 枚举树上的每个点 $x$ ,计算出包含 $x$ ,且满足性质 $P$ 的连通块数目,对所有 $x$ 求和得到 $a$ . 再枚举树上每条边 $(x,y)$ ,计算出同时包含 $x,y$ ,且满足性质 $P$ 的连通块数目,对所有 $(x,y)$ 求和得到 $b$ . 每个连通块对 $a$ 贡献是点数,对 $b$ 贡献是边数,而树上的连通块也是一棵树,点数 = 边数 + 1. 于是可以得出满足性质 $P$ 的连通块数目就是 $a-b$ . 这种转化常用于求若干连通块的交,因为这样转化就变成了每个连通块都包含枚举的点/边,连通块之间就独立了. 计算完美集合数目这道题就可以使用上面这个转化,计算选出能被 $x​$ 测试的完美集合方案,减去能被 $x,y​$ 同时测试的完美集合方案. 集合内肯定不能包含 $dist*v&gt;Max$ 的点,可以将它们去掉,对剩下的点做一个背包,维护最优解和最优解的数目. 树上背包可以按照 dfs 序转移,若选了 $i$ ,则考虑其子树,转移到 $f_{dfn(i)+1}$ ,否则跳过其子树,转移到 $f_{dfn(i)+siz(i)}$ . 于是我们可以在 $O(nm)$ 的时间复杂度内求出能被某一个点或某两个点同时测试的完美集合数目. 计算模意义下组合数如果没有再从集合中选出 $k$ 个的要求和 $5^{23}$ 这个奇怪的模数,这道题就已经优美地结束了. 出题人为了加大力度,还需要我们计算出 $\binom{s}{k}\bmod 5^{23}$ ,其中 $s$ 是计算出的集合数目,可以达到 $2^{60}$ , $k$ 可以达到 $10^9$ . 用拓展 Lucas 的思路,其实就是要设法算出 $p!$ 中含有的因子 $5$ 的个数以及 $\prod_{i\le p}[i\bmod 5\neq 0] i$ 的值. 前者可以直接 $O(\log p)​$ 计算,关键在于如何计算后者. 在拓展 Lucas 中,我们是 $O(mod)$ 暴力算出一个循环节的贡献,但这里 $mod=5^{23}$ ,显然行不通. 考虑构造多项式 $F_p(x)=\prod_{1\le i\le p} [i\bmod 5\neq 0] (x+i)$ ,要求的答案就是这个多项式展开后的常数项. 若 $p$ 不是 $10$ 的整数倍,就先将最后不超过 $9$ 个一次式的乘积暴力乘出来,就可以将 $p$ 凑成 $10k$ 的形式. 考虑 $F_{10k}(x)=F_{5k}(x)\cdot F_{5k}(x+5k)​$ ,其中 $F_{5k}​$ 的常数项可以递归下去算. 而 $F_{5k}(x+5k)​$ 在模 $5^{23}​$ 下可以表示成一个关于 $(x+5k)​$ 的多项式,形如 $\sum c_i\cdot (x+5k)^i​$ . 而我们只关心展开后不含 $x​$ 的常数项,可以发现当 $i\ge 23​$ 时, 将 $(x+5k)^i​$ 展开后常数项都为 $0​$ ,没有贡献. 那么递归求出 $F_{5k}$ 展开后的前 $23$ 项,将 $(x+5k)^i$ 代入,展开后即可求得 $F_{5k}(x+5k)$ 的前 $23$ 项. 再暴力卷积合并得到 $F_{10k}$ 的前 $23$ 项,这样只会需要求 $O(\log s)$ 个 $F_{5k}$ 的前 $23$ 项,复杂度可以接受. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out = 0, fh = 1; char jp = getchar(); while ((jp &gt; '9' || jp &lt; '0') &amp;&amp; jp != '-') jp = getchar(); if (jp == '-') fh = -1, jp = getchar(); while (jp &gt;= '0' &amp;&amp; jp &lt;= '9') out = out * 10 + jp - '0', jp = getchar(); return out * fh;&#125;const ll P = 11920928955078125;ll add(ll a, ll b)&#123; return a + b &gt;= P ? a + b - P : a + b;&#125;void inc(ll &amp;a, ll b)&#123; a = add(a, b);&#125;ll mul(ll a, ll b)&#123; ll res = a * b - (ll)((long double)a / P * b + 1e-8) * P; return res &lt; 0 ? res + P : res % P;&#125;ll fpow(ll a, ll b)&#123; ll res = 1; while (b) &#123; if (b &amp; 1LL) res = mul(res, a); a = mul(a, a); b &gt;&gt;= 1; &#125; return res;&#125;ll Inv(ll x)&#123; return fpow(x, P / 5 * 4 - 1);&#125;typedef pair&lt;ll, ll&gt; pll;typedef vector&lt;ll&gt; poly;poly operator * (poly a, poly b)&#123; poly c(23); for (int j = 0; j &lt; 23; ++j) if (b[j]) for (int i = 0; i + j &lt; 23; ++i) if (a[i]) inc(c[i + j], mul(a[i], b[j])); return c;&#125;poly p[10000];ll pw[23], binom[23][23];void init()&#123; binom[0][0] = 1; for (int i = 1; i &lt; 23; ++i) &#123; binom[i][0] = 1; for (int j = 1; j &lt;= i; ++j) binom[i][j] = add(binom[i - 1][j], binom[i - 1][j - 1]); &#125; p[0].resize(23); p[0][0] = 1; for (int i = 1; i &lt; 10000; ++i) &#123; if (i % 5) &#123; poly tmp(23); tmp[0] = i, tmp[1] = 1; p[i] = p[i - 1] * tmp; &#125; else p[i] = p[i - 1]; &#125;&#125;poly trans(poly a, ll k)&#123; pw[0] = 1; for (int i = 1; i &lt; 23; ++i) pw[i] = mul(pw[i - 1], k); poly b(23); for (int i = 0; i &lt; 23; ++i) for (int j = 0; j &lt;= i; ++j) inc(b[j], mul(a[i], mul(pw[i - j], binom[i][j]))); return b;&#125;poly facpoly(ll n)&#123; if (n &lt; 10000) return p[n]; ll k = n / 10 * 10; poly t1 = facpoly(k &gt;&gt; 1); poly t2 = trans(t1, k &gt;&gt; 1); t1 = t1 * t2; for (ll i = k + 1; i &lt;= n; ++i) if (i % 5) &#123; poly tmp(23); tmp[0] = i % P, tmp[1] = 1; t1 = t1 * tmp; &#125; return t1;&#125;pll Fac(ll n)&#123; pll res = make_pair(facpoly(n)[0], n / 5); if (n &gt;= 5) &#123; pll tmp = Fac(n / 5); res.first = mul(res.first, tmp.first); res.second += tmp.second; &#125; return res;&#125;ll Binom(ll n, ll k)&#123; if (n &lt; k) return 0; pll f1 = Fac(n), f2 = Fac(k), f3 = Fac(n - k); f1.second -= f2.second + f3.second; f1.first = mul(f1.first, mul(Inv(f2.first), Inv(f3.first))); if (f1.second &gt;= 23) return 0; return mul(f1.first, fpow(5, f1.second));&#125;const int N = 60 + 10, M = 1e4 + 10, inf = 1e9;int n, m, k, ecnt = 0, nx[N &lt;&lt; 1], to[N &lt;&lt; 1], head[N];ll Max;void addedge(int u, int v)&#123; ++ecnt; to[ecnt] = v; nx[ecnt] = head[u]; head[u] = ecnt;&#125;int w[N], val[N], dist[N][N], valid[N], rnk[N], siz[N], _fa[N], fa[N], idx = 0;void dfs(int u, int F)&#123; _fa[u] = F, siz[u] = 1, rnk[++idx] = u; for (int i = head[u]; i; i = nx[i]) &#123; int v = to[i]; if (v == F || !valid[v]) continue; dfs(v, u); siz[u] += siz[v]; &#125;&#125;ll f[N][M], g[N][M], mx = 0;pll calc(int x, int y)&#123; idx = 0; dfs(x, 0); for (int i = 0; i &lt;= m; ++i) &#123; f[idx + 1][i] = 0; g[idx + 1][i] = 1; &#125; for (int i = idx; i &gt;= 1; --i) &#123; int u = rnk[i]; for (int j = 0; j &lt;= m; ++j) &#123; ll v1 = j &gt;= w[u] ? f[i + 1][j - w[u]] + val[u] : 0; ll v2 = f[i + siz[u]][j]; if (u == y &amp;&amp; j &lt; w[u]) f[i][j] = g[i][j] = 0; else if (u == y || (j &gt;= w[u] &amp;&amp; v1 &gt; v2)) &#123; f[i][j] = f[i + 1][j - w[u]] + val[u]; g[i][j] = g[i + 1][j - w[u]]; &#125; else if (j &lt; w[u] || v1 &lt; v2) &#123; f[i][j] = f[i + siz[u]][j]; g[i][j] = g[i + siz[u]][j]; &#125; else &#123; f[i][j] = f[i + siz[u]][j]; g[i][j] = g[i + siz[u]][j] + g[i + 1][j - w[u]]; &#125; &#125; &#125; return make_pair(f[1][m], g[1][m]);&#125;ll solve(int x, int y)&#123; for (int i = 1; i &lt;= n; ++i) if (1LL * dist[x][i] * val[i] &gt; Max || (y &amp;&amp; 1LL * dist[y][i] * val[i] &gt; Max)) valid[i] = 0; else valid[i] = 1; if (!valid[x] || (y &amp;&amp; !valid[y])) return 0; pll tmp = calc(x, y); if (tmp.first &lt; mx) return 0; return Binom(tmp.second, k);&#125;int main()&#123; n = read(), m = read(), k = read(), Max = read(); init(); for (int i = 1; i &lt;= n; ++i) w[i] = read(); for (int i = 1; i &lt;= n; ++i) val[i] = read(); for (int i = 1; i &lt;= n; ++i) for (int j = 1; j &lt;= n; ++j) dist[i][j] = (i == j) ? 0 : inf; for (int i = 1; i &lt; n; ++i) &#123; int u = read(), v = read(), l = read(); addedge(u, v), addedge(v, u); dist[u][v] = dist[v][u] = l; &#125; for (int k = 1; k &lt;= n; ++k) for (int i = 1; i &lt;= n; ++i) if (dist[i][k] &lt; inf) for (int j = 1; j &lt;= n; ++j) if (dist[k][j] &lt; inf) dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]); for (int i = 1; i &lt;= n; ++i) valid[i] = 1; for (int i = 1; i &lt;= n; ++i) mx = max(mx, calc(i, 0).first); for (int i = 1; i &lt;= n; ++i) fa[i] = _fa[i]; ll ans = 0; for (int i = 1; i &lt;= n; ++i) inc(ans, add(solve(i, 0), P - (fa[i] ? solve(i, fa[i]) : 0))); printf("%lld\n", ans); return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>树形dp</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 3058 白兔之舞]]></title>
    <url>%2F2020%2F04%2F10%2FLoj-3058-%E7%99%BD%E5%85%94%E4%B9%8B%E8%88%9E%2F</url>
    <content type="text"><![CDATA[单位根反演 + 任意长度 DFT + MTT. 考虑某个 $t$ 的答案,记作 $b_t$ ,枚举白兔实际跳了 $i$ 步,得到$$b_t=\sum_{i=0}^L [i\bmod k=t] \binom L i A^i_{x,y}\\=\sum_{i=0}^L [k|(i-t)]\binom L i (A^i)_{x,y}$$其中 $A$ 是由读入给定的 $3\times 3$ 的转移矩阵. 考虑单位根反演,继续化简, $$b_t=\sum_{i=0}^L \frac 1 k\sum_{j=0}^{k-1}\omega_k^{j(i-t)} \binom L i A^i_{x,y}\\=\frac 1 k\sum_{j=0}^{k-1} \omega_k^{-jt}\sum_{i=0}^L \omega_k^{ij} A^i_{x,y} \\=\frac 1 k\sum_{j=0}^{k-1} \omega_k^{-jt}(\omega_k^j A + I)^L_{x,y}$$ 题目保证了 $k|(p-1)$ ,所以在模 $p$ 意义下 $\omega_k =g^{\frac{p-1} k}$ ,其中 $g$ 为 $p​$ 的原根. 记 $a_j=((\omega_k^j A + I)^L)_{x,y}$ ,这可以用矩阵快速幂在 $O(n^3k\log L)$ 的时间内将 $k$ 个 $a_j$ 全部求出.$$b_t=\frac 1 k\sum_{j=0}^{k-1}(\omega_k^{-j})^t a_j$$如果 $k$ 是 $2$ 的幂次,直接用 FFT 对 $a$ 做一次长度为 $k$ 的 IDFT 即可将 $b$ 求出. 如果不保证 $k$ 是 $2$ 的幂次,就需要用到一个叫 Bluestein’s Algorithm 的算法,它可以解决任意长度的 DFT. 由组合意义知 $\binom {j+t} 2=\binom j 2 + \binom t 2 +jt$ ,于是可以把 $jt$ 拆成仅和 $j,t,j+t$ 有关的几项. 原式可以化为$$b_t=\frac 1 k\sum_{j=0}^{k-1} \omega_k^{\binom t 2} \cdot \omega_k^{\binom j 2}\cdot \omega_k^{-\binom{j+t}{2}} a_j \\b_t=\frac 1 k \omega_k^{\binom t 2}\sum_{j=0}^{k-1} \omega_k^{-\binom{j+t}{2}}(a_j\cdot \omega_k^{\binom j 2})$$ 记 $f_i=\omega_k^{-\binom i 2},g_i=a_i\cdot \omega_k^{\binom i 2}$ ,则 $$b_t=\frac 1 k \omega_k^{\binom t 2}\sum_{j=0}^{k-1} g_j\cdot f_{j+t}$$ 后面已经差不多是一个卷积了,把 $g$ 翻转一下,就能得到$$b_t=\frac 1 k \omega_k^{\binom t 2}\sum_{j=0}^{k-1} g^R_{k-1-j}\cdot f_{j+t} \\b_t=\frac 1 k \omega_k^{\binom t 2}(g^R\otimes f)_{t+k-1}$$用 MTT 求出 $g^R$ 与 $f​$ 的卷积即可. 时间复杂度 $O(n^3k\log L+k\log k)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out = 0, fh = 1; char jp = getchar(); while ((jp &gt; '9' || jp &lt; '0') &amp;&amp; jp != '-') jp = getchar(); if (jp == '-') fh = -1, jp = getchar(); while (jp &gt;= '0' &amp;&amp; jp &lt;= '9') out = out * 10 + jp - '0', jp = getchar(); return out * fh;&#125;const double PI = acos(-1.0);const int N = (1 &lt;&lt; 18) + 10;int P;int add(int a, int b)&#123; return a + b &gt;= P ? a + b - P : a + b;&#125;void inc(int &amp;a, int b)&#123; a = add(a, b);&#125;int mul(int a, int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a, int b)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = mul(res, a); a = mul(a, a); b &gt;&gt;= 1; &#125; return res;&#125;struct Matrix&#123; ll v[3][3]; Matrix()&#123;memset(v, 0, sizeof v);&#125; ll *operator [](int x) &#123; return v[x]; &#125;&#125; I, A;Matrix operator * (Matrix a, Matrix b)&#123; Matrix c; for (int i = 0; i &lt; 3; ++i) for (int k = 0; k &lt; 3; ++k) if (a[i][k]) for (int j = 0; j &lt; 3; ++j) if (b[k][j]) c[i][j] += a[i][k] * b[k][j]; for (int i = 0; i &lt; 3; ++i) for (int j = 0; j &lt; 3; ++j) c[i][j] %= P; return c;&#125;Matrix operator * (Matrix a, int lambda)&#123; Matrix b; for (int i = 0; i &lt; 3; ++i) for (int j = 0; j &lt; 3; ++j) b[i][j] = a[i][j] * lambda % P; return b;&#125;Matrix operator + (Matrix a, Matrix b)&#123; Matrix c; for (int i = 0; i &lt; 3; ++i) for (int j = 0; j &lt; 3; ++j) c[i][j] = add(a[i][j], b[i][j]); return c;&#125;Matrix Fpow(Matrix a, int b)&#123; Matrix res = I; while (b) &#123; if (b &amp; 1) res = res * a; a = a * a; b &gt;&gt;= 1; &#125; return res;&#125;int getrt()&#123; vector&lt;int&gt; pr; int x = P - 1; for (int i = 2; i * i &lt;= x; ++i) if (x % i == 0) &#123; pr.push_back(i); while (x % i == 0) x /= i; &#125; for (int g = 2; ; ++g) &#123; bool f = true; for (int p : pr) if (fpow(g, (P - 1) / p) == 1) &#123; f = false; break; &#125; if (f) return g; &#125;&#125;struct cp&#123; double r, i; cp(double r = 0, double i = 0) : r(r), i(i) &#123;&#125; cp operator + (const cp &amp;rhs) const &#123; return cp(r + rhs.r, i + rhs.i); &#125; cp operator - (const cp &amp;rhs) const &#123; return cp(r - rhs.r, i - rhs.i); &#125; cp operator * (const cp &amp;rhs) const &#123; return cp(r * rhs.r - i * rhs.i, r * rhs.i + i * rhs.r); &#125; cp conj() &#123; return cp(r, -i); &#125;&#125; og[N];int rev[N];void DFT(cp *a, int n)&#123; for (int i = 0; i &lt; n; ++i) if (i &lt; rev[i]) swap(a[i], a[rev[i]]); for (int l = 2; l &lt;= n; l &lt;&lt;= 1) &#123; int m = l &gt;&gt; 1; for (cp *p = a; p != a + n; p += l) for (int i = 0; i &lt; m; ++i) &#123; cp t = og[n / m * i] * p[i + m]; p[i + m] = p[i] - t; p[i] = p[i] + t; &#125; &#125;&#125;void MTT(int *a, int *b, int *c, int n)&#123; static cp s1[N], s2[N], s3[N], s4[N], s5[N], s6[N]; for (int i = 0; i &lt; n; ++i) rev[i] = (rev[i &gt;&gt; 1] &gt;&gt; 1) | ((i &amp; 1) * (n &gt;&gt; 1)); for (int i = 0; i &lt; n; ++i) og[i] = cp(cos(PI * i / n), sin(PI * i / n)); for (int i = 0; i &lt; n; ++i) s1[i] = cp(a[i] &amp; 32767, a[i] &gt;&gt; 15); for (int i = 0; i &lt; n; ++i) s2[i] = cp(b[i] &amp; 32767, b[i] &gt;&gt; 15); DFT(s1, n); DFT(s2, n); for (int i = 0; i &lt; n; ++i) &#123; int j = (n - i) &amp; (n - 1); cp da = (s1[i] + s1[j].conj()) * cp(0.5, 0); cp db = (s1[i] - s1[j].conj()) * cp(0, -0.5); cp dc = (s2[i] + s2[j].conj()) * cp(0.5, 0); cp dd = (s2[i] - s2[j].conj()) * cp(0, -0.5); s3[j] = da * dc; s4[j] = da * dd; s5[j] = db * dc; s6[j] = db * dd; &#125; for (int i = 0; i &lt; n; ++i) &#123; s1[i] = s3[i] + s4[i] * cp(0, 1); s2[i] = s5[i] + s6[i] * cp(0, 1); &#125; DFT(s1, n); DFT(s2, n); for (int i = 0; i &lt; n; ++i) &#123; ll da = (ll)(s1[i].r / n + 0.5) % P; ll db = (ll)(s1[i].i / n + 0.5) % P; ll dc = (ll)(s2[i].r / n + 0.5) % P; ll dd = (ll)(s2[i].i / n + 0.5) % P; ll val = da + ((db + dc) &lt;&lt; 15) + (dd &lt;&lt; 30); c[i] = val % P; if (c[i] &lt; 0) c[i] += P; &#125;&#125;int n, k, L, st, ed, omega[N], f[N], g[N], h[N], res[N];int binom(int x)&#123; return 1LL * x * (x - 1) / 2 % k;&#125;int main()&#123; n = read(), k = read(), L = read(), st = read(), ed = read(), P = read(); for (int i = 0; i &lt; n; ++i) for (int j = 0; j &lt; n; ++j) A[i][j] = read(); for (int i = 0; i &lt; n; ++i) I[i][i] = 1; omega[0] = 1, omega[1] = fpow(getrt(), (P - 1) / k); for (int i = 2; i &lt;= k; ++i) omega[i] = mul(omega[i - 1], omega[1]); for (int i = 0; i &lt; k; ++i) g[k - 1 - i] = mul(Fpow(A * omega[i] + I, L)[st - 1][ed - 1], omega[binom(i)]); for (int i = 0; i &lt; 2 * k; ++i) f[i] = omega[k - binom(i)]; int len = 1; while (len &lt; 3 * k) len &lt;&lt;= 1; MTT(f, g, h, len); int invk = fpow(k, P - 2); for (int i = 0; i &lt; k; ++i) &#123; int res = mul(invk, mul(omega[binom(i)], h[i + k - 1])); printf("%d\n", res); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>多项式</tag>
        <tag>单位根反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20200409]]></title>
    <url>%2F2020%2F04%2F09%2Ftest20200409%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>最短路</tag>
        <tag>多项式</tag>
        <tag>test</tag>
        <tag>拉格朗日反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Uoj 390 百鸽笼]]></title>
    <url>%2F2020%2F04%2F08%2FUoj-390-%E7%99%BE%E9%B8%BD%E7%AC%BC%2F</url>
    <content type="text"><![CDATA[指数型生成函数. 像猎人杀那样,规定已经放满的列也可以继续被选,只是不会产生影响. 枚举 $i$ ,计算第 $i$ 列空出一个鸽笼的概率. 一个合法的操作序列需要满足 $i$ 被操作了 $a_i$ 次, 所有 $\neq i$ 的 $j$ 被操作了至少 $a_j$ 次,且最后一次操作的列为 $i$ . 若某一列被操作了 $t$ 次,就会有 $G(t)=\frac{x^t}{t!n^t}$ 的贡献. 目标函数 $F(i)​$ 就是把所有列可能产生的贡献卷在一起,若 $F(i) =\sum f_i\cdot x^i​$ ,则第 $i​$ 列的答案就是 $\sum f_i\cdot i!​$ . 具体而言,$$F(i)=\frac{G(a_i-1)}{n}\prod_{j\neq i} \sum_{t\ge a_j}G(t)$$注意到 $\sum_{t\ge 0}G(t)=e^{\frac x n}$ ,所以 $F(i)$ 可以写成$$F(i)=\frac{G(a_i-1)}{n}\prod_{j\neq i}(e^{\frac x n}-\sum_{t=0}^{a_j-1}G(t))$$把 $F(i)​$ 展开,会得到若干项形如 $c\cdot e^{\frac{mx}n}\cdot x^t​$ 的式子,将它展开,$$c\cdot e^{\frac{mx}n}\cdot x^t=c\cdot x^t\cdot\sum_{s\ge 0}(\frac m n)^s\frac{x^s}{s!}\\=c\cdot \sum_{s\ge 0}(\frac m n)^s\frac{x^{s+t}}{s!}\\$$考虑它对答案 $\sum f_i\cdot i!$ 的贡献,$$c\cdot \sum_{s\ge 0}(\frac m n)^s \frac{(s+t)!}{s!}\\=c\cdot t!\cdot\sum_{s\ge 0}(\frac m n)^s\binom{s+t}{t}$$记 $h(t)=\sum_{s\ge 0}(\frac m n)^s\binom{s+t}{t}$ ,则$$\begin{aligned}h(t) &amp;= \sum_{s\ge 0}(\frac m n)^s \binom{s+t}{t}\\&amp;=\sum_{s\ge 0}(\frac{m}{n})^s(\binom{(s-1)+t}{t}+\binom{s+(t-1)}{t-1}) \\&amp;=\frac{m}{n}\cdot h(t)+h(t-1)\\&amp;=\frac{n}{n-m}\cdot h(t-1)\end{aligned}$$边界有 $h(0)=\frac{n}{n-m}​$ ,可得 $h(t)=(\frac{n}{n-m})^{t+1}​$ . 如果把组合数展开成多项式,变成 $\sum s^k \cdot (\frac{m}{n})^s ​$ 的形式,就推不下去了. 于是可知 $c\cdot e^{\frac{mx}n}\cdot x^t$ 这一项对答案的贡献为 $c\cdot (\frac{n}{n-m})^{t+1}\cdot t!$ . 观察 $F(i)​$ 的形式$$F(i)=\frac{G(a_i-1)}{n}\prod_{j\neq i}(e^{\frac x n}-\sum_{t=0}^{a_j-1}G(t))$$可以发现只需要维护下面这个式子展开成 $c\cdot e^{\frac{mx}n}\cdot x^t$ 的形式,$$\frac{1}{n}\prod_{j=1}^n(e^{\frac x n}-\sum_{t=0}^{a_j-1}G(t))$$枚举 $i$ 时,将 $i$ 那一项的贡献撤去,再加入 $G(a_i-1)$ 的贡献就可以了. 可以看做是有两个容量维度的背包计数,撤掉某一项的贡献相当于撤掉某个物品,时间复杂度 $O(n^3\cdot (\max a_i)^2)$ . 实际上不去撤销,每次重新对 $n$ 个元素做一个背包, $O(n^4\cdot (\max a_i)^2)$ 也能跑过去.]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2549 战争]]></title>
    <url>%2F2020%2F04%2F08%2FLoj-2549-%E6%88%98%E4%BA%89%2F</url>
    <content type="text"><![CDATA[闵可夫斯基和. 对于给出的两个点集可以分别做出两个凸包 $A,B$ , 记询问给出的向量为 $w=(dx,dy)$ ,若存在向量 $a\in A,b\in B$ 满足 $a=b+w$ ,则会产生冲突. 即判断是否存在 $a\in A,b\in B$ 满足 $w=a-b$. 将 $B$ 中所有点关于原点对称得到 $-B$ ,那么 $A$ 与 $-B$ 的闵可夫斯基和就是所有 $a-b$ 的集合. 两个凸包的闵可夫斯基和仍是一个凸包,将两个凸包的边拿出来归并排序即可得到求和后的凸包. 有可能存在三点共线,所以归并排序后对点集再求一次凸包. 最后只需要判定 $w$ 是否在凸包内,将 $w$ 和凸包一起平移,使得凸包第一个点与原点重合. 先判断 $w$ 是否超出左右的边界,若在边界内,根据极角二分出凸包上相邻的两个点进行判断即可. 如图,红点和蓝点由叉积知在边界外,绿点可以用二分找出两个相邻的黄点,用叉积判断是否在凸包内. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out = 0, fh = 1; char jp = getchar(); while ((jp &gt; '9' || jp &lt; '0') &amp;&amp; jp != '-') jp = getchar(); if (jp == '-') fh = -1, jp = getchar(); while (jp &gt;= '0' &amp;&amp; jp &lt;= '9') out = out * 10 + jp - '0', jp = getchar(); return out * fh;&#125;struct v2&#123; int x, y; v2(int x = 0, int y = 0) : x(x), y(y) &#123;&#125; v2 operator + (const v2 &amp;rhs) const &#123; return v2(x + rhs.x, y + rhs.y); &#125; v2 operator - (const v2 &amp;rhs) const &#123; return v2(x - rhs.x, y - rhs.y); &#125; ll operator * (const v2 &amp;rhs) const &#123; return 1LL * x * rhs.y - 1LL * y * rhs.x; &#125; ll modulus() &#123; return 1LL * x * x + 1LL * y * y; &#125; friend bool operator &lt; (v2 A, v2 B) &#123; return A * B &gt; 0 || (A * B == 0 &amp;&amp; A.modulus() &lt; B.modulus()); &#125;&#125;;const int N = 2e5 + 10;v2 stk[N];int tp;void Convex(v2 *a, int &amp;n)&#123; tp = 0; for (int i = 2; i &lt;= n; ++i) if (a[i].y &lt; a[1].y || (a[i].y == a[1].y &amp;&amp; a[i].x &lt; a[1].x)) swap(a[i], a[1]); v2 tmp = a[1]; for (int i = 1; i &lt;= n; ++i) a[i] = a[i] - tmp; sort(a + 2, a + n + 1); for (int i = 1; i &lt;= n; ++i) &#123; while (tp &gt;= 2 &amp;&amp; (a[i] - stk[tp - 1]) * (stk[tp] - stk[tp - 1]) &gt;= 0) --tp; stk[++tp] = a[i]; &#125; n = tp; for (int i = 1; i &lt;= n; ++i) a[i] = stk[i] + tmp; a[n + 1] = a[1];&#125;bool InConvex(v2 p, v2 *a, int n)&#123; if (p * a[2] &gt; 0 || a[n] * p &gt; 0) return false; int pos = lower_bound(a + 1, a + 1 + n, p) - a - 1; return (p - a[pos]) * (a[pos + 1] - a[pos]) &lt;= 0;&#125;int n, m, q, tot = 0;v2 A[N], B[N], C[N], e1[N], e2[N];void Minkowski()&#123; for (int i = 1; i &lt;= n; ++i) e1[i] = A[i + 1] - A[i]; for (int i = 1; i &lt;= m; ++i) e2[i] = B[i + 1] - B[i]; C[tot = 1] = A[1] + B[1]; int p1 = 1, p2 = 1; while (p1 &lt;= n &amp;&amp; p2 &lt;= m) ++tot, C[tot] = C[tot - 1] + (e1[p1] * e2[p2] &gt;= 0 ? e1[p1++] : e2[p2++]); while (p1 &lt;= n) ++tot, C[tot] = C[tot - 1] + e1[p1++]; while (p2 &lt;= m) ++tot, C[tot] = C[tot - 1] + e2[p2++]; Convex(C, tot);&#125;int main()&#123; n = read(), m = read(), q = read(); for (int i = 1; i &lt;= n; ++i) A[i].x = read(), A[i].y = read(); Convex(A, n); for (int i = 1; i &lt;= m; ++i) B[i].x = -read(), B[i].y = -read(); Convex(B, m); Minkowski(); v2 tmp = C[1]; for (int i = 1; i &lt;= tot; ++i) C[i] = C[i] - tmp; for (int i = 1; i &lt;= q; ++i) &#123; v2 p; p.x = read(), p.y = read(); p = p - tmp; if (InConvex(p, C, tot)) puts("1"); else puts("0"); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>计算几何</tag>
        <tag>闵可夫斯基和</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学军信友队趣味网络邀请赛]]></title>
    <url>%2F2020%2F04%2F08%2F%E5%AD%A6%E5%86%9B%E4%BF%A1%E5%8F%8B%E9%98%9F%E8%B6%A3%E5%91%B3%E7%BD%91%E7%BB%9C%E9%82%80%E8%AF%B7%E8%B5%9B%2F</url>
    <content type="text"><![CDATA[被虐了. A 核酸检测$n​$ 为偶数和奇数时可以分别进行如下的构造. code B 齐心抗疫比较粗暴的方法是将所有点按照 $a$ 从小到大排序,依次激活,对每个点求出已激活的点到它的最大距离,更新答案. 用点分树实现,时间复杂度 $O(n\log^2 n)$ ,需要优秀的卡常才能通过. 注意观察性质,要求的是 $\max_{a_x\le a_y} \lbrace a_y\cdot dis(x,y)\rbrace$ ,如果我们将 $ a_x\cdot dis(x,y)$ 也统计上,并不会影响答案. 于是可以直接忽略掉 $a_x\le a_y​$ 的限制,只需要对每个点求出其他点到它的最大距离. 先找出树的一条直径 $u\to v​$ ,根据相关性质,点 $x​$ 到所有点的最大距离即为 $\max(dis(x,u),dis(x,v))​$ . 时间复杂度 $O(n)​$ . code C 病毒研究首先可以对 $m$ 种操作做一个完全背包,得到 $dp(i)$ 表示将活性恰好降低 $i$ 点所需要的最小花费. 只能确定活性在某一个区间内,可以设 $f(l,r)$ 表示确定活性在 $[l,r]$ 内,期望代价乘上 $r-l+1$ 的值. 要求的答案即为 $f(1,a_n)$ . 转移时分几种情况讨论: 若 $l,r$ 在属于不同状态,就将 $[l,r]$ 按照所在状态分成若干小区间, $f(l,r)$ 为这些小区间 $f$ 值之和. 否则,若 $l,r$ 都在状态 $1$ ,可得 $f(l,r)=0$ . 否则,$l,r$ 在同一不为 $1$ 的状态,枚举操作,得到 $f(l,r)=\min_{1\le i&lt; l}\lbrace f(l-i,r-i)+(r-l+1)\cdot dp(i) \rbrace$ . 如果直接 dp, 状态数为 $O(a_n^2)$ ,每次转移代价为 $O(a_n)$ ,无法通过. 考虑剪枝,计算 $f(l,r)$ 时,只用 $l-i,r-i$ 不在同一状态的 $f(l-i,r-i)$ 来更新,或者 $l-i,r-i$ 都在状态 $1$. 否则,若 $l-i,r-i$ 依然在同一不为 $1$ 的状态,就需要继续进行操作,而完全背包已经考虑了合并这两次操作的方案. 经过这样一个剪枝后,我们需要计算的 $f(l,r)$ 一定满足 $[l,r]$ 是某个状态的一段前缀或后缀,状态数降到了 $O(a_n)$ . code D 抗疫斗争首先考虑对于一个给定的 $m$ ,如何计算 $h_m$ . 若 $m$ 不是 $2$ 的倍数,先手只需要取 $1$ ,这样后面双方都只能取 $1$ ,最后先手一定胜利,即,此时 $h_m=1$ . 若 $m$ 是 $2$ 的倍数,容易证明双方都不会在某一步取奇数个,否则游戏一定未结束,另一方下一步取 $1$ 即可保证必胜. 那么我们不断将 $m$ 变为 $\frac m 2$ , $h_m$ 也会变成原来的 $\frac 1 2 $ ,直到当 $m$ 为奇数时, $h_m=1$ . 于是可以得出 $h_m={\rm lowbit} (m)​$ . 那么我们要求的答案就是$$ans=\sum_{i=1}^n {\rm lowbit}(i) \lfloor \frac n i\rfloor$$可以对 $\lfloor\frac n i \rfloor​$ 整除分块,每次 $O(\log n)​$ 计算 $\rm lowbit​$ 的前缀和,时间复杂度 $O(\sqrt n\log n)​$ . 进一步优化,可以把 ${\rm lowbit}(x)$ 拆成 $1+\sum_{k\ge 1} [2^k|x]2^{k-1}$ ,就可以枚举 $k$ 来计算每个 $k$ 的贡献. 记 $g(x)=\sum_{i=1}^n \lfloor \frac x i\rfloor$ ,由于 $\lfloor \frac n {ab}\rfloor=\lfloor \frac{\lfloor\frac n a\rfloor}{b}\rfloor$ ,可以得到 $$ans=g(n)+\sum_{k\ge 1} 2^{k-1}g(\lfloor\frac{n}{2^k}\rfloor)$$计算一个 $g(x)$ 的时间复杂度为 $\sqrt x$ ,由等比数列的求和可知总时间复杂度为 $O(\sqrt n)$ . code E 名垂青史鸽了.]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>构造</tag>
        <tag>区间dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UR 19]]></title>
    <url>%2F2020%2F04%2F07%2FUR-19%2F</url>
    <content type="text"><![CDATA[被虐了. A 清扫银河先做一个生成森林,然后本质的环就只有非树边对应的至多 $m - n + 1$ 个,其他环都可以由异或线性组合出来. 现在只考虑操作 $1$ ,一个图能被若干个环异或得到,当且仅当所有节点度数是偶数. 而这若干个环都可以在那 $m - n + 1$ 个环形成的基底下被分解. 所以只要状态为 $1$ 的边形成的子图中,每个点度数为偶,就可以在至多 $m - n + 1$ 次 $1$ 操作内将所有边都变成 $0$ . 考虑恰当安排 $2$ 操作达到这个条件. $2$ 操作的贡献可以摊到每个点上,可以看做选出一个点集 $S$ ,若某个点被选了,就把它所连的边颜色全部翻转. 转化后可以看出,多次 $2$ 操作可以合并成一次,所以总操作不会超过 $m-n+2\le m +1$ 次. 做一个 01 高斯消元,第 $i$ 个变量表示 $i$ 有没有被选,第 $i$ 个方程是点 $i$ 的度数在异或意义下为 $0​$ . 用 bitset 优化,时间复杂度 $O(T\cdot \frac{n^3}{w})​$ . code B 通用测评号可以把猎人杀的思路借用过来. 由于每个位置没有差别,可以算出所有位置达到 $b$ 时,第一个位置达到 $a$ 的概率,乘上 $n$ 就是答案. 考虑容斥,枚举集合 $S$ 在第一个位置到达 $a$ 的时候还没有到达 $b$ ,由于所有位置相同,所以只需要枚举 $i=|S|$. 再枚举一个 $j$ ,表示第一个位置到达 $a$ 时,那 $i$ 个位置上的总和为 $j$ . 每次选位置时像猎人杀那样,若选到了已经 $=a$ 的位置就重新选,直到选到可以放的. 那么我们只会关心这 $j$ 次操作和第一个位置的前 $a-1$ 的操作的相对顺序,它的第 $a$ 次操作相对顺序一定在最后.$$ans=n\cdot (1-\sum_{i=0}^{n-1} (-1)^i \binom{n-1}{i}\sum_{j=0}^{(b-1)\cdot i}\binom{a-1+j}{a-1}\cdot \frac{f(i,j)}{(i+1)^{a+j}})$$其中 $f(i,j)$ 表示有 $i$ 个位置和 $j$ 次操作,要求每个位置被操作次数 $&lt;b$ 的方案数. 由于每次操作是有区别的,所以方案数就等于 $(\frac{x^0}{0!}+\frac{x^1}{1!}+\dots+\frac{x^{b-1}}{(b-1)!})^i​$ 这个多项式第 $j​$ 项的次数乘上 $j!​$. 用 NTT 实现多项式乘法,时间复杂度 $O(n^3\log n)$ . 常数优化: 多项式 $(\frac{x^0}{0!}+\frac{x^1}{1!}+\dots+\frac{x^{b-1}}{(b-1)!})​$ 可以只进行一次 DFT, 保存点值即可. code C 前进四将所有修改和询问分别按照下标 $x$ 从大到小排序,从大到小枚举下标. 对于每个时间 $t$ ,维护当前后缀 $x$ 的最小值,以及这个数随着 $x$ 的减小被修改的次数,后者就是需要查询的答案. 考虑将 $x$ 相同的修改操作按照时间从前往后排序,相邻两个修改操作会影响一段时间区间内的后缀 $x$ 最小值. 那么这段区间维护的最小值需要对修改的值取 $\min$ ,并且需要维护变小的次数,以及支持单点查询. 用一个 Segment tree beats 维护以上操作. 时间复杂度 $O(n\log n)$ . 常数卡不过去了. code]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>STL</tag>
        <tag>容斥原理</tag>
        <tag>多项式</tag>
        <tag>高斯消元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于网络流的一些小结论]]></title>
    <url>%2F2020%2F04%2F07%2F%E5%85%B3%E4%BA%8E%E7%BD%91%E7%BB%9C%E6%B5%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%BB%93%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[记录一下一些常见的小结论. 最大权闭合子图在有向图中,每一个点都有一个权值. 选择一个权值和最大的子图,使得每个点的后继都在子图里面,这个子图就叫最大权闭合子图. 从源点 $S$ 向每个正权点连一条容量为权值的边,从每个负权点向汇点 $T$ 连一条容量为权值的绝对值的边. 有向图原来的边容量全部为无限大. 原图的最大权闭合子图的权值就等于所有正权点的权值之和减去新图的最小割. 无源汇上下界可行流一条边记做 $(u,v,mi,mx)$ ,表示这条边从 $u$ 连向 $v$ ,流量下界和上界分别为 $mi$ 和 $mx$ . 每条边强制流下界,就转化成了 $(u,v,0,mx-mi)$ . 此时会有流量不平衡的点,新建超级源点 $SS$ 与超级汇点 $TT$ . 若某个点 $x$ 流入的流量比流出的流量多 $w$ ,就新建边 $(SS,x,0,w)$ . 否则,若流出的流量比流入的流量多 $w$ ,就新建边 $(x,TT,0,w)$ . 跑一次从 $SS$ 到 $TT$ 的最大流,若 $SS$ 所有的出边都满流,则原图存在可行流. code 有源汇上下界可行流记源点为 $S$ ,汇点为 $T$ . 有源汇和无源汇的区别在于,有源汇的可行流中, $S$ 和 $T​$ 两个点可以不满足流量平衡. 我们加一条边 $(T,S,0,\inf)$ ,这样 $S$ 和 $T$ 也流量平衡了,就转化为了无源汇上下界可行流,套用即可. 若存在可行流,那么原图可行流的流量就是 $(T,S,0,\inf)$ 这条边上的流量. 有源汇上下界最大流先用有源汇上下界可行流的方法求出一个可行流. 若存在可行流,删掉 $(T,S,0,\inf)$ 这条边,在可行流的基础上求出 $S$ 到 $T$ 的最大流,即,不清空已有的流量. 答案就是可行流 + 最大流. code 有源汇上下界最小流先用有源汇上下界可行流的方法求出一个可行流. 若存在可行流,删掉 $(T,S,0,\inf)$ 这条边,在可行流的基础上求出 $T$ 到 $S$ 的最大流. 答案就是可行流 - 最大流. code]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2331 某位歌姬的故事]]></title>
    <url>%2F2020%2F04%2F07%2FLoj%202331%20%E6%9F%90%E4%BD%8D%E6%AD%8C%E5%A7%AC%E7%9A%84%E6%95%85%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[dp 计数. 首先可以对坐标离散化,记录一下离散化后的每个点代表原来数列中的几个点,方便后续计算方案数. 考虑 $\max(l,r) = h$ 的限制,等价于对于 $l\le i\le r$ 的 $i$ ,都有 $a_i\le h$ ,并且 $[l,r]$ 内至少有一个 $a_i=h$ . 可以对每个点计算出它能取到的上限 $up_i$ ,这个值其实就是所有覆盖它的区间中最小的 $h$ . 可以发现, $[l,r]$ 内至少有一个 $a_i=h$ 的限制,因为 $[l,r]$ 内一定有 $up_i\le h$ ,所以只能由 $up_i=h$ 的 $a_i$ 来满足. 对于所有 $h$ 相同的限制,我们将它们以及 $up_i=h$ 的点一起拿出来单独计算对方案数的贡献. 这需要满足每个区间中,至少有一个 $a_i$ 取到了上限 $a_i=h$ . 如果一个区间完全覆盖了另一个区间,可以直接把大区间的限制去掉,那么剩下的区间一定都是没有包含关系的. 我们把这些区间按照左端点从小到大排序. 设 $dp(i,j)$ 表示确定了前 $i$ 个点是否取到上限,前 $j$ 个区间已经满足限制,但第 $j+1$ 个区间不满足限制的方案数. 最后还要乘上没有被任何区间限制的点的贡献. 时间复杂度 $O(Tm^2)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;int read()&#123; int out = 0, sgn = 1; char jp = getchar(); while (jp != '-' &amp;&amp; (jp &lt; '0' || jp &gt; '9')) jp = getchar(); if (jp == '-') sgn = -1, jp = getchar(); while (jp &gt;= '0' &amp;&amp; jp &lt;= '9') out = out * 10 + jp - '0', jp = getchar(); return out * sgn;&#125;const int P = 998244353;int add(int a, int b)&#123; return a + b &gt;= P ? a + b - P : a + b;&#125;void inc(int &amp;a, int b)&#123; a = add(a, b);&#125;int mul(int a, int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a, int b)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = mul(res, a); a = mul(a, a); b &gt;&gt;= 1; &#125; return res;&#125;const int N = 2e3 + 10;int n, m, V, l[N], r[N], h[N], val[N], len, cnt[N], up[N];struct Interval&#123; int L, R, mx; bool operator &lt; (const Interval &amp;rhs) const &#123; return L ^ rhs.L ? L &lt; rhs.L : R &gt; rhs.R; &#125;&#125; p[N], tmp[N];struct node&#123; int pos, cnt; &#125; q[N];int dp[N][N];bool in(node A, Interval B)&#123; return B.L &lt;= A.pos &amp;&amp; A.pos &lt;= B.R;&#125;int calc(int _n, int _m)&#123; if (!_n) return 0; sort(tmp + 1, tmp + 1 + _m); int sl = 0, minr = n + 1; for (int i = _m; i &gt;= 1; --i) &#123; if (tmp[i].R &gt;= minr) continue; p[++sl] = tmp[i]; minr = tmp[i].R; &#125; _m = sl; reverse(p + 1, p + 1 + _m); dp[0][0] = 1; int mx = p[1].mx; for (int i = 0; i &lt; _n; ++i) &#123; for (int j = 0; j &lt;= _m; ++j) if (dp[i][j]) &#123; int c = fpow(mx - 1, q[i + 1].cnt); inc(dp[i + 1][j], mul(dp[i][j], c)); c = add(fpow(mx, q[i + 1].cnt), P - c); int pp = j; while (pp + 1 &lt;= _m &amp;&amp; in(q[i + 1], p[pp + 1])) ++pp; inc(dp[i + 1][pp], mul(dp[i][j], c)); &#125; &#125; int res = dp[_n][_m]; for (int i = 0; i &lt;= _n; ++i) for (int j = 0; j &lt;= _m; ++j) dp[i][j] = 0; return res;&#125;pair&lt;int, int&gt; t[N];void solve()&#123; len = 0; n = read(), m = read(), V = read(); if (m == 0) &#123; printf("%d\n", fpow(V, n)); return; &#125; int ans = 1; for (int i = 1; i &lt;= m; ++i) &#123; l[i] = read(), r[i] = read(), h[i] = read(); val[++len] = l[i], val[++len] = r[i]; &#125; for (int i = 1; i &lt;= m; ++i) for (int j = i + 1; j &lt;= m; ++j) if (h[i] &gt; h[j]) &#123; swap(l[i], l[j]); swap(r[i], r[j]); swap(h[i], h[j]); &#125; sort(val + 1, val + 1 + len); len = unique(val + 1, val + 1 + len) - val - 1; ans = mul(ans, fpow(V, val[1] - 1 + n - val[len])); int tl = len; for (int i = 1; i &lt;= len; ++i) &#123; cnt[i] = 1; if (i &lt; len &amp;&amp; val[i] + 1 != val[i + 1]) &#123; ++tl; val[tl] = val[i] + 1; cnt[tl] = val[i + 1] - val[i] - 1; &#125; &#125; len = tl; for (int i = 1; i &lt;= len; ++i) for (int j = i + 1; j &lt;= len; ++j) if (val[i] &gt; val[j]) &#123; swap(val[i], val[j]); swap(cnt[i], cnt[j]); &#125; for (int i = 1; i &lt;= len; ++i) up[i] = V; for (int i = 1; i &lt;= m; ++i) &#123; l[i] = lower_bound(val + 1, val + 1 + len, l[i]) - val; r[i] = lower_bound(val + 1, val + 1 + len, r[i]) - val; for (int j = l[i]; j &lt;= r[i]; ++j) up[j] = min(up[j], h[i]); &#125; for (int i = 1; i &lt;= len; ++i) t[i] = make_pair(up[i], i); sort(t + 1, t + 1 + len); int i = 1, j = 1, _n, _m; while (ans &amp;&amp; j &lt;= m) &#123; _m = 0; int pp = j, tv = h[j]; while (pp &lt;= m &amp;&amp; h[pp] == tv) tmp[++_m] = (Interval)&#123;l[pp], r[pp], h[pp]&#125;, ++pp; j = pp; _n = 0; pp = i; while (pp &lt;= len &amp;&amp; t[pp].first == tv) q[++_n] = (node)&#123;t[pp].second, cnt[t[pp].second]&#125;, ++pp; i = pp; ans = mul(ans, calc(_n, _m)); &#125; while (i &lt;= len) ans = mul(ans, fpow(V, cnt[t[i++].second])); printf("%d\n", ans);&#125;int main()&#123; int T = read(); while (T--) solve(); return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>离散化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多重背包的单调队列优化]]></title>
    <url>%2F2020%2F04%2F07%2F%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85%E7%9A%84%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[分析了几种多重背包的常见算法. 多重背包的问题形式有 $n$ 个物品,其中第 $i$ 个物品的体积是 $v_i$ ,价值是 $w_i$ ,有 $c_i$ 个. 现在有一个容量为 $m$ 的背包,需要选出若干个物品放入背包中,满足它们体积和不超过 $m$ ,最大化价值总和. 朴素算法设 $f(i,j)$ 表示考虑了前 $i$ 种物品,选出物品总体积不超过 $j$ 时的最大价值.$$f(i,j)=\max_{k=0}^{k\cdot v_i\le j} \lbrace f(i-1,j-k\cdot v_i+k\cdot w_i) \rbrace$$枚举 $i,j,k$ 进行转移,时间复杂度 $O(nm\max c_i)$ . 二进制拆分对每个物品,从小到大枚举 $k$ ,若 $c_i\ge 2^k$ ,就从 $c_i$ 中拿出 $k$ 个形成以一个新物品,体积是 $v_i\cdot 2^k$ ,价值是 $w_i\cdot 2^k$. 若最后 $c_i$ 还有剩下的,就将这 $c_i$ 个组合成一个新物品. 用这些新物品代替原来的 $c_i$ 个物品,对所有新物品做一个 $01$ 背包,容易证明和原问题是等价的. 时间复杂度 $O(nm\log \max c_i)$ . 单调队列优化观察朴素算法的转移形式,$$f(i,j)=\max_{k=0}^{k\cdot v_i\le j} \lbrace f(i-1,j-k\cdot v_i+k\cdot w_i) \rbrace$$固定 $i$ ,可以发现一个 $f(i-1,j)$ 只会被用于更新 $f(i,j+k\cdot v_i)$ ,而 $v_i$ 是确定的. 于是我们可以将所有 $f(i-1,j)$ 按照模 $v_i$ 的结果分成若干组,每组分别去更新 $f(i)$ . 考虑 $j\bmod v_i=r$ 的这一组,它们也只能更新 $j\bmod v_i=r$ 的 $f(i.j)$ . 那么我们可以直接把 $j$ 写成 $pv_i+r$ 的形式,这组内的转移式就可以写为$$f(i,pv_i+r) = \max \lbrace f(i-1,(p-k)v_i+r)+k\cdot w_i\rbrace,k\le c_i$$那么 $p-k$ 的合法选择范围就是一个长度固定的后缀的形式,随着 $p$ 增大不断向后滑动. 这就是一个滑动窗口的最优化 dp 了,可以用单调队列进行优化. 时间复杂度 $O(nm)$ .]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[类欧几里得算法学习笔记]]></title>
    <url>%2F2020%2F04%2F07%2F%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[发现自己完全不会类欧几里得算法,于是来学一学. 问题最基本的形式是求$$\sum_{x=1}^n \lfloor\frac{ax+b}{c}\rfloor$$其中 $a,b,c$ 为给定的常数, $0\le a,b,c,n\le 10^9, c\neq 0$ . 当 $a \ge c$ 时,可以把 $a$ 写成 $a=kc+a\bmod c$ 的形式,答案就变成了$$\sum_{x=1}^n \lfloor\frac{(a\bmod c)\cdot x+b}{c}\rfloor + \sum_{x=1}^n kx$$后面那个 $\sum$ 是个等差数列求和,可以 $O(1)$ 求出. 对于前面那个 $\sum$ ,它的形式和原问题是一致的,我们可以递归调用该算法求解. 当 $a&lt;c$ 时,若 $a=0$ ,则答案为 $x\cdot \lfloor\frac b c\rfloor$ ,否则,我们通过画图来观察性质: 答案应该是 $x=0,x=n,y=0,y=\frac{a}{c}x+\frac{b}{c}$ 这四条直线围成的直角梯形内 $x&gt;0,y&gt;0$ 的整点的数量. 我们过交点 $(0,\frac{b}{c})$ 向 $x=n$ 引一条垂线,将图形分为两部分. 黄色部分是一个矩形,贡献可以 $O(1)$ 求出. 对于蓝色部分的直角三角形,我们可以通过翻转与平移将它变成一个子问题,递归下去求解即可. 这样递归一次会交换 $a,c$ . 考虑每递归一次,若 $a\ge c$ ,则 $a$ 变为 $a\bmod c$ , $c$ 不变.否则,就交换 $a,c$ ,递归边界是 $a=0$ . 可以发现这就类似于欧几里得算法求 $\gcd$ 的递归过程,可以得出时间复杂度 $O(\log \max(a,c))$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int read()&#123; int out = 0, sgn = 1; char jp = getchar(); while (jp != '-' &amp;&amp; (jp &lt; '0' || jp &gt; '9')) jp = getchar(); if (jp == '-') sgn = -1, jp = getchar(); while (jp &gt;= '0' &amp;&amp; jp &lt;= '9') out = out * 10 + jp - '0', jp = getchar(); return out * sgn;&#125;const int P = 998244353;int add(int a, int b)&#123; return a + b &gt;= P ? a + b - P : a + b;&#125;void inc(int &amp;a, int b)&#123; a = add(a, b);&#125;int mul(int a, int b)&#123; return 1LL * a * b % P;&#125;// ans = \sum_&#123;x=1&#125;^&#123;n&#125; \lfloor \frac&#123;ax+b&#125;&#123;c&#125; \rfloorint s1(int n)&#123; return 1LL * n * (n + 1) / 2 % P;&#125;int solve(int a, int b, int c, ll n)&#123; if (a == 0) return mul(n, b / c); int ans = 0; if (a &gt;= c || b &gt;= c) &#123; ans = solve(a % c, b % c, c, n); inc(ans, mul(a / c, s1(n % P))); inc(ans, mul(b / c, (n + 1) % P)); &#125; else &#123; ll m = (n * a + b) / c; ans = mul(n % P, m % P); inc(ans, P - solve(c, c - b - 1, a, m - 1)); &#125; return ans;&#125;int bf(int a, int b, int c, int n)&#123; int ans = 0; for (int x = 1; x &lt;= n; ++x) inc(ans, (1LL * a * x + b) / c % P); return ans;&#125;int main()&#123; int T = read(); while (T--) &#123; int n = read(), a = read(), b = read(), c = read(); int ans = solve(a, b, c, n); inc(ans, P - b / c); printf("%d\n", ans);// printf("%d\n", bf(a, b, c, n)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Miller Rabin 及 Pollard Rho 算法学习笔记]]></title>
    <url>%2F2020%2F04%2F07%2FMiller%20Rabin%20%E5%8F%8A%20Pollard%20Rho%20%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[发现自己完全不会这两个算法,于是来学一学. Miller Rabin 算法用于判定一个较大的数是否为素数. 朴素的判定方法是枚举 $\sqrt n$ 内的所有数,依次检验它们是否为 $n$ 的因子,时间复杂度 $O(\sqrt n)$ . 费马小定理对于任意素数 $p$ 以及 $1\le x\le p-1$ 的整数 $x$ ,有 $x^{p-1} \equiv 1\pmod p$. 任意 $1\le x\le p-1$ 满足 $x^{p-1} \equiv 1\pmod p$ 是 $p$ 为素数的必要条件,但不是充分条件. 一个反例是 $561=3\times 11\times 17$ ,这种数被称为卡迈克尔数. 于是我们不能直接用费马小定理来判定一个数的素性,但可以利用费马小定理先排除掉一些合数. 二次探测定理对于任意素数 $p$ ,若 $x^2 \equiv 1\pmod p$ ,则 $x \equiv 1\pmod p$ 或 $x\equiv p-1 \pmod p$ . 这个定理也可以用来排除掉一些合数. 算法流程记需要判定的数为 $n$ . 取若干个素数作为基底,依次用于检验,若 $n$ 通过了所有的检验,我们就认定 $n$ 为素数. 记当前用于判定的基底为 $b$ . 首先,用费马小定理检验一次,即检查是否有 $b^{n - 1} \equiv 1\pmod n$ ,若不满足,则 $n$ 为合数. 否则,若 $n-1$ 为偶,我们可以将上式变为 $(b^{\frac{n-1}2})^2 \equiv 1 \pmod n$ . 根据二次探测定理,需要检查是否有 $b^{\frac{n-1}2} \equiv 1\pmod n$ 或 $b^{\frac{n-1}2} \equiv n-1\pmod n$ ,若都不满足,则 $n$ 为合数. 如果 $\frac {n-1}{2}$ 也是个偶数,且 $b^{\frac{n-1}2} \equiv 1\pmod n$ ,就可以继续拆,变成 $(b^{\frac{n-1}4})^2 \equiv 1 \pmod n$ 继续检验. 当做到次数为奇数,或出现了 $b^{k}\equiv n-1\pmod n$ ,就无法继续用这个基底检验了. 此时退出,用下个基底继续检验,直到判定出 $n$ 为合数,或通过了所有基底的检验. 一个基底的错误概率约为 $\frac 1 4$ ,取前 $9$ 个质数分别作为基底可基本保证正确性. 时间复杂度为 $O(\log^2 n)$ ,瓶颈在于做了 $O(\log n)$ 次检验,每次检验需要计算一次快速幂,空间复杂度 $O(1)$ . 实现时可以去掉那次费马小定理的检验,因为第一次用二次探测定理检验时就已经包含了这次检验. Loj 143 code Pollard Rho 算法用于找出一个较大数的某个非平凡因子.假设需要被分解的数为 $n$ ,且其最小质因子为 $p\ (p\neq n)$ . 该算法可以在 $O(\sqrt p\cdot \log n)$ 的期望时间复杂度内找出 $n$ 的某个非平凡因子,空间复杂度 $O(1)$ . 若要对 $n$ 进行质因数分解,则将得到的两个因数继续调用该算法分解,直到得到质数. 算法流程设需要分解的数为 $n$ ,先用 Miller Rabin 算法判断 $n$ 是否为质数,若为质数,则直接返回. 否则,设有 $n = p\times q$ ,其中 $p$ 是 $n$ 的某个非平凡因子. 我们在模意义下生成一个近似随机的数列 ${x_n},x_1 = 2, x_i = f(x_{i-1}) \bmod n$ . 其中 $f$ 是一个伪随机函数,可取 $f(x) = x^2 + a$ ,其中 $a$ 为某个常数. 此时,另一个数列 ${x_n\bmod p}$ 也客观存在,而这两个数列显然都存在循环节. 根据生日悖论,数列 ${x_n}$ 循环节出现的位置期望为 $O(\sqrt n)$ ,数列 ${x_n\bmod p}$ 循环节出现的位置期望为 $O(\sqrt p)$ . 若存在两个位置 $i,j$ 使得 $x_i\equiv x_j \pmod p$ 且 $x_i \neq x_j$ ,就可以找到一个非平凡因子 $\gcd(x_i-x_j,n)$ 可以取 $i,2i$ 这两个位置,其中 $x_{2i}$ 的值可以通过每次迭代两步得到,类似于 floyd 消圈,而不用存储整个数列. 计算出 $t =\gcd(x_{i}-x_{2i},n)$ ,若 $t=1$ ,说明 $i,2i$ 不在任何数列的循环节对应位置,继续枚举下一个 $i$ . 若 $t = n$ ,说明 $i,2i$ 同时在两个数列的对应位置,那么再增大 $i$ 也无法找到仅在一个数列中对应的 $i$ . 此时只能退出,更换随机函数 $f(x)$ ,即取另一个常数 $a$ 执行算法. 若 $t\neq 1$ 且 $t\neq n$ ,那么我们就找到了 $t$ 作为 $n$ 的一个非平凡因子. 由于函数 $f(x)=x^2 +a$ 只会生成模 $4$ 意义下与 $a,a+1$ 同余的数,所以无法分解出 $2$ 这个因子,需要特判. 期望需要枚举 $O(\sqrt p)$ 个 $i$ 来找到一个非平凡因子,每次需要求一次 $\gcd$ ,时间复杂度 $O(\sqrt p\cdot \log n)$ . 当 $n$ 不为素数时, $n$ 的最小质因子显然不超过 $\sqrt n$ ,于是时间复杂度可以化为 $O(n^{\frac 1 4}\cdot \log n)$ . 优化注意到我们只有在 $\gcd(x_i-x_{2i},n) = 1$ 的情况下才会继续运行该算法. 我们设置一个参数 $k$ ,计算每 $k$ 个 $x_i-x_{2i}$ 的乘积对 $n$ 取模的结果 $prod$ . 若 $\gcd(prod,n) =1$ ,说明这 $k$ 个 $x_i-x_{2i}$ 与 $n$ 的 $\gcd$ 均为 $1$ ,继续考虑接下来的 $k$ 个 $x_i-x_{2i}$ . 若 $\gcd(prod,n) = n$ ,我们不知道这 $k$ 个数中是否有解,此时只能回到 $k$ 步前,运行原本的 Pollard Rho 算法. 若 $\gcd(prod,n)\neq 1$ 且 $\gcd(prod,n)\neq n$ ,那么 $\gcd(prod,n)$ 就是 $n$ 的一个非平凡因子. 此时,该算法找出一个非平凡因子的时间复杂度被优化到了 $O(n^{\frac 1 4}+\frac{n^{\frac 1 4}\log n}{k}+k\log n)$ . bzoj 3667 code]]></content>
      <tags>
        <tag>数学</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Uoj 62 怎样跑得更快]]></title>
    <url>%2F2020%2F04%2F07%2FUoj%2062%20%E6%80%8E%E6%A0%B7%E8%B7%91%E5%BE%97%E6%9B%B4%E5%BF%AB%2F</url>
    <content type="text"><![CDATA[莫比乌斯反演. 为了方便,假定我们要解的方程组的形式为$$b_i\equiv \sum_{j=1}^n \gcd(i,j)^c {\rm lcm}(i,j)^d z_j \pmod {998244353}$$变形一下,得到$$b_i\cdot i^{-d} \equiv \sum_{j=1}^n \gcd(i,j)^{c-d} (j^d\cdot z_j) \pmod {998244353}$$那么方程组可以写成$$y_i \equiv \sum_{j=1}^n \gcd(i,j)^w x_j$$这样的形式,我们只要解出了这里了 $x_j$ ,由 $j^d\cdot z_j\equiv x_j$ 就可以求得 $z_j$ 了. 先尝试推一波式子把 $\gcd$ 去掉.$$\begin{aligned}y_i &amp;= \sum_{j=1}^n \gcd(i,j)^w x_j \\&amp;=\sum_{d|i} d^w\sum_{j=1}^{\lfloor\frac n d\rfloor}x_{jd}\sum_{s|\frac{i}{d},s|j} \mu(s)\end{aligned}$$我们直接枚举 $T=ds$ ,得到$$y_i=\sum_{T|i}(\sum_{d|T}d^w\mu(\frac Td)) \sum_{j=1}^{\lfloor\frac n T \rfloor} x_{jT}$$$y_i$ 是已知的,我们用一次莫比乌斯反演即可求出每个 $T$ 的 $(\sum_{d|T}d^w\mu(\frac Td)) \sum_{j=1}^{\lfloor\frac n T \rfloor} x_{jT}$ . 前面那个式子 $\sum_{d|T}d^w\mu(\frac Td)$ 是一个关于 $T$ 的积性函数,可以线性筛预处理,也可以枚举 $d$ ,将贡献加到每个 $T$ 上. 那么两者相除就可以得出每个 $T$ 的 $\sum_{j=1}^{\lfloor\frac n T \rfloor} x_{jT}$ ,我们从大到小枚举 $T$ ,就可以得出每个 $x_i$ ,进而求出 $z_i$ . 时间复杂度 $O(n\log n)$ . 形如 $y_i=\sum_{j} f(\gcd(i,j))\cdot g(i)\cdot h(j)\cdot x_i$ 的方程组都可以类似求解. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int read()&#123; int out = 0, sgn = 1; char jp = getchar(); while (jp != '-' &amp;&amp; (jp &lt; '0' || jp &gt; '9')) jp = getchar(); if (jp == '-') sgn = -1, jp = getchar(); while (jp &gt;= '0' &amp;&amp; jp &lt;= '9') out = out * 10 + jp - '0', jp = getchar(); return out * sgn;&#125;const int P = 998244353;int add(int a, int b)&#123; return a + b &gt;= P ? a + b - P : a + b;&#125;void inc(int &amp;a, int b)&#123; a = add(a, b);&#125;int mul(int a, int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a, int b)&#123; int res = 1; while (b) &#123; if (b &amp; 1) res = mul(res, a); a = mul(a, a); b &gt;&gt;= 1; &#125; return res;&#125;const int N = 1e5 + 10;int c, d, w, f[N], g[N], h[N], pwd[N];int mu[N], prime[N], cnt = 0, ism[N];void init(int n)&#123; ism[1] = 1, mu[1] = 1; for (int i = 2; i &lt;= n; ++i) &#123; if (!ism[i]) &#123; mu[i] = P - 1; prime[++cnt] = i; &#125; for (int j = 1; j &lt;= cnt &amp;&amp; i * prime[j] &lt;= n; ++j) &#123; ism[i * prime[j]] = 1; if (i % prime[j] == 0) break; mu[i * prime[j]] = add(P, -mu[i]); &#125; &#125; for (int d = 1; d &lt;= n; ++d) &#123; int pw = fpow(d, w); for (int T = d; T &lt;= n; T += d) inc(g[T], mul(pw, mu[T / d])); &#125; for (int i = 1; i &lt;= n; ++i) &#123; g[i] = fpow(g[i], P - 2); pwd[i] = fpow(i, P - 1 - d); &#125; &#125;int n, m, x[N], y[N], z[N];int main()&#123; n = read(), c = read() % (P - 1), d = read() % (P - 1), m = read(); w = c - d; if (w &lt; 0) w += P - 1; init(n); while (m--) &#123; for (int i = 1; i &lt;= n; ++i) &#123; int b = read(); y[i] = mul(b, pwd[i]); f[i] = h[i] = x[i] = 0; &#125; for (int i = 1; i &lt;= n; ++i) for (int j = i; j &lt;= n; j += i) inc(f[j], mul(y[i], mu[j / i])); bool flag = true; for (int i = 1; i &lt;= n &amp;&amp; flag; ++i) &#123; if (!g[i]) &#123; if (!f[i]) h[i] = 0; else flag = false; &#125; else h[i] = mul(f[i], g[i]); &#125; if (!flag) &#123; puts("-1"); continue; &#125; for (int i = n; i &gt;= 1; --i) &#123; int sum = 0; for (int j = i + i; j &lt;= n; j += i) inc(sum, x[j]); x[i] = add(h[i], P - sum); &#125; for (int i = 1; i &lt;= n; ++i) z[i] = mul(x[i], pwd[i]); for (int i = 1; i &lt;= n; ++i) printf("%d ", z[i]); puts(""); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20200118]]></title>
    <url>%2F2020%2F01%2F19%2Ftest20200118%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX19XpLBPoZvyw/kF+cqDtxaVkkUcpdkXrIhx8txyRR+dbZZK1U7WiPrprGvPWkq8/dMCN5r/SS4jSUgh8aJrFMXNWLLzhna5GDsP7Qca5B3I7SRgAYWcy8tq35Drr+VxPVM11IoXITPExqXGXN/uCR1DstPOSoJx2OmtE7HYxkzoXb1SOpeoKufJ9D/M2oYhMnAVXvnMMYVa595aTQM+s8r1qUs1YA3jysHq1M1V06T0cUxQkJksAQ2WTeBboNQe+I1lVolHpKEpNQoIrEByInAPIXX2fwUek2LUdeY33Tch5pNo+/66bDzH7KdkxXTnvIZkf0Gc62azBGtCCGCX2MXGJVjWZ+bDCXpA8gNasqr3NRvyGUuPd4aqQTNfuTOyA8DN9ofYUsSZwik0cNxBn6ROthHUb/Iz/7oYQ9MyDmiHizNP3qPICg6GIO8hIXvZ0U5Iggl0R5R/dX5GMDkVdAyhfEhIfAot7yQUWKIbzlDQa3QAx+AockBbNUMq4MQ+4MKZr60jGYVe78nSzyIBmthF6QvENGd1dayXpGFCHyCrZsN0nrEVT2y9SRsWkiyZp94RPQa9msoG4MalLN1MyRa0FjRohpXl89T3rkRsHm94BxARY/ydv4SAXh2HZ+9iQ52o02dS/LgPtvgdRNZE3ojxG8IP09tV/QgLQJhPr+AYYhzNHsLbjYKcCwj7wpJTRlfLnAkehAaLOx4YrxFPZEEV2Y2/10lNzIuaPO7k1uSaMv5tQwXa+IeadgX/E8+TCjVPgUcO/BWO0aIkVV2w8PzVXWalOYcbGKnl400MyuPHqrWzaIG6Q4LuhlMbFewCvgKoXo7wThOITcgC4Q9xfRZYGtVrLZGDmQWgrxZKyNzq/nVcu2d2M8nzy8+IZxH/KB80u84ZkHf3xypWGiAyzB2R3Z5HGty5mfPrwqyBmuOHrNqvCs3iIUJQaaD4rDXP59mmuPMQiU8N/Nrxf0N+eXAsu7FPxN6293B95NK80qKwvkXZrUgRTXt6UdWm4M/DNUuC24QdLSj8TL3roNczNPpt0wprPFXsHmri3/oN3MAeGFxYyXjxxNuujFfDx+nDwfvCKATZWlFxyi7VfHzGLD6irE66Zs2zW38Lg4y+z42tabmV/TuxztZrwr+iekDF09nrOtztf2JHnfn073HA6eKQVCDsQ5bV2u5ZcKOmjIQgUHntNZAMMb4Q7n13co9EnqMB/S2vdXKiVdd9/sNEFxcWnpA2EhnxDT2CuK0CXLqqly2LB99oGKe6FqQics4CyBMtT8sxjtYzBnW9jn0OZ5V7DB+elF6TJwh64x/wsQpgRppjXHXhRdL3bhOEM/jv31wVnwYQ1WZGKrDQMly2fPSpqbbtybMpU3tHl1c3kKGYdKF25ylpOb+YEeE2hUWfDpC5bLjhXgzAlgfCmc9hB+8dGfPwwqiPrGm+ZbcFyimdhupjNlAeHZiSReDjRvgkazoN54SL1N+F0sjYltivMyw/BElC8tcRaMa3eN3qiqn+xyub95YmExtQ//DAtoR+4zUOSdndxmIh0rOelb824lc8eLzq5hTpdF74GZB5Sca3dTsY3TCgI8ItA61unUtNA9yr4yUtE9J1IB+qtr2QvuLCEJQrJTSOxgMTUtzsuuzuzGAvJP/5glWo var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>线段树</tag>
        <tag>数学</tag>
        <tag>矩阵加速</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20200117-am]]></title>
    <url>%2F2020%2F01%2F17%2Ftest20200117-am%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>容斥原理</tag>
        <tag>多项式</tag>
        <tag>网络流</tag>
        <tag>数位dp</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20200116]]></title>
    <url>%2F2020%2F01%2F16%2Ftest20200116%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>概率/期望</tag>
        <tag>LCT</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20200113-pm]]></title>
    <url>%2F2020%2F01%2F13%2Ftest20200113-pm%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>多项式</tag>
        <tag>ST表</tag>
        <tag>数位dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20200113-am]]></title>
    <url>%2F2020%2F01%2F13%2Ftest20200113-am%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>线性代数</tag>
        <tag>拉格朗日插值</tag>
        <tag>矩阵树定理</tag>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20200112-pm]]></title>
    <url>%2F2020%2F01%2F12%2Ftest20200112-pm%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>hash</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20200112-am]]></title>
    <url>%2F2020%2F01%2F12%2Ftest20200112-am%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>构造</tag>
        <tag>test</tag>
        <tag>meet in the middle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最小割树学习笔记]]></title>
    <url>%2F2020%2F01%2F10%2F%E6%9C%80%E5%B0%8F%E5%89%B2%E6%A0%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[发现自己完全不会最小割树,于是来学一学. 概念一张 $n$ 个点的图上,两点之间只存在 $n-1$ 种本质不同的最小割. 可以构造出一棵带边权的树,满足树上两点的最小割 (即两点路径上最小边权) 等于原图上两点最小割. 这样的树称为最小割树,也称 Gomory-Hu Tree . 构造方法先任意选取两个节点 $u,v​$ ,求出它们的最小割 ${\rm cut}(u,v)​$ ,跑最大流时,满流的边就对应最小割中割掉的边. 通过这组割,可以把图划分成两个部分, $u$ 所在的点集记作 $U$ , $v$ 所在的点集记作 $V$ . 对于任意 $x\in U,y\in V​$ ,有 ${\rm cut}(x,y)\le {\rm cut}(u,v)​$ . 否则用 ${\rm cut}(u,v)​$ 的花费一定无法割开 $x,y​$ ,也就割不开 $u,v​$ ,就矛盾了. 在最小割树上新建一条边 $(u,v)$ ,边权为 ${\rm cut}(u,v)$ ,然后对点集 $U,V$ 内的点分别递归执行以上算法. 最后恰好计算了 $n-1$ 次最小割,也建出了最小割树. 考虑树上路径 $x\to y$ 经过的每条边 $u\to v$ . 那么在建出 $u\to v$ 这条边时, $x,y$ 被分入了不同集合,有 ${\rm cut}(x,y)\le {\rm cut}(u,v)$ . 简单归纳就可以得到这样的构造满足了概念中的性质,即,树上两点路径上最小边权等于原图上两点最小割. 那么我们只做了 $O(n)$ 次最小割,就可以支持询问任意两点之间的最小割了.]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>网络流</tag>
        <tag>最小割树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20200110]]></title>
    <url>%2F2020%2F01%2F10%2Ftest20200110%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>多项式</tag>
        <tag>倍增</tag>
        <tag>提交答案</tag>
        <tag>AC自动机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 3093 光线]]></title>
    <url>%2F2020%2F01%2F09%2FLoj-3093-%E5%85%89%E7%BA%BF%2F</url>
    <content type="text"><![CDATA[等比数列求和. 显然可以从前往后不断合并两面镜子,对于每面镜子只需要记录从前面射来的透光率和后面射来的反射率就可以了. 合并两面镜子时,推一下就能发现是个简单的等比数列求和. 时间复杂度 $O(n\log P)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int main()&#123; int n=read(),A=1,B=0,Inv=fpow(100,P-2); for(int i=1;i&lt;=n;++i) &#123; int a=mul(read(),Inv),b=mul(read(),Inv); int tmp=fpow(add(1,P-mul(B,b)),P-2); A=mul(A,mul(a,tmp)); B=add(b,mul(B,mul(a,mul(a,tmp)))); &#125; cout&lt;&lt;A&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20200109]]></title>
    <url>%2F2020%2F01%2F09%2Ftest20200109%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>STL</tag>
        <tag>分块</tag>
        <tag>虚树</tag>
        <tag>test</tag>
        <tag>线性基</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 3089 奥术神杖]]></title>
    <url>%2F2020%2F01%2F08%2FLoj-3089-%E5%A5%A5%E6%9C%AF%E7%A5%9E%E6%9D%96%2F</url>
    <content type="text"><![CDATA[$01$ 分数规划 + AC 自动机. 先把权值取个对数,就变成了最大化算术平均数. 考虑 $01​$ 分数规划,二分答案 $k​$ ,那么每个串的权值变为了 $V_i-k​$ ,需要检验是否存在权值和 $&gt;0​$ 的方案. 注意 $=0​$ 不一定是合法的,因为实际上可能一个串也没有选. 在 AC 自动机上 dp 一下,设 $f(i,j)$ 表示匹配了前 $i$ 个字符,当前在节点 $j$ 时的最大权值, dp 的时候顺便记录方案. 时间复杂度 $O(T\cdot ns|\sum|)$ ,其中 $T$ 表示二分的次数, $|\sum|$ 表示字符集大小. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1515,S=10;char s[MAXN],buf[MAXN],ans[MAXN];bool flag=false;int n,m,idx=0,cnt[MAXN],fail[MAXN],ch[MAXN][S];double f[MAXN][MAXN],val[MAXN],inf;void ins(int v)&#123; int u=0,len=strlen(buf+1); for(int i=1;i&lt;=len;++i) &#123; int c=buf[i]-'0'; if(!ch[u][c]) ch[u][c]=++idx; u=ch[u][c]; &#125; val[u]+=log(v); cnt[u]++;&#125;queue&lt;int&gt; q;void getfail()&#123; for(int i=0;i&lt;S;++i) if(ch[0][i]) q.push(ch[0][i]); while(!q.empty()) &#123; int u=q.front(); q.pop(); for(int i=0;i&lt;S;++i) if(ch[u][i]) &#123; q.push(ch[u][i]); fail[ch[u][i]]=ch[fail[u]][i]; val[ch[u][i]]+=val[fail[ch[u][i]]]; cnt[ch[u][i]]+=cnt[fail[ch[u][i]]]; &#125; else ch[u][i]=ch[fail[u]][i]; &#125;&#125;int pre[MAXN][MAXN],c[MAXN][MAXN];bool check(double mid)&#123; memset(f,-0x3f,sizeof f); inf=-f[0][0],f[0][0]=0; for(int i=0;i&lt;n;++i) &#123; int l=(s[i+1]=='.')?0:s[i+1]-'0'; int r=(s[i+1]=='.')?9:s[i+1]-'0'; for(int j=0;j&lt;=idx;++j) if(f[i][j]&gt;-inf) for(int k=l;k&lt;=r;++k) &#123; int p=ch[j][k]; double tmp=f[i][j]+val[p]-mid*cnt[p]; if(tmp&gt;f[i+1][p]) &#123; f[i+1][p]=tmp; pre[i+1][p]=j; c[i+1][p]=k; &#125; &#125; &#125; double mx=-inf; int pos; for(int i=0;i&lt;=idx;++i) if(f[n][i]&gt;mx) mx=f[n][i],pos=i; if(mx&lt;=0) return false; for(int i=n;i&gt;=1;--i) &#123; ans[i]=c[i][pos]+'0'; pos=pre[i][pos]; &#125; return true;&#125;int main()&#123; n=read(),m=read(); scanf("%s",s+1); double l=0,r=0,mid; for(int i=1;i&lt;=m;++i) &#123; scanf("%s",buf+1); int v=read(); r=max(r,log(v)); ins(v); &#125; getfail(); for(int i=1;i&lt;=30;++i) &#123; mid=(l+r)/2.0; if(check(mid)) flag=true,l=mid; else r=mid; &#125; if(!flag) &#123; for(int i=1;i&lt;=n;++i) putchar(s[i]=='.'?'0':s[i]); puts(""); &#125; else &#123; for(int i=1;i&lt;=n;++i) putchar(ans[i]); puts(""); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>分数规划</tag>
        <tag>AC自动机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 3090 勘破神机]]></title>
    <url>%2F2020%2F01%2F08%2FLoj-3090-%E5%8B%98%E7%A0%B4%E7%A5%9E%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[特征方程求解数列通项. 先考虑 $m=2$ 的做法,设 $f(i)$ 表示用 $1\times 2$ 的骨牌填满 $2\times i$ 的网格的方案数. 显然有 $f(0)=f(1)=1,f(i)=f(i-1)+f(i-2)$ . 利用特征方程可以求出 $f(i)=c_1x^i+c_2y^i$ . 推一下式子,$$\begin{aligned}(r-l+1)\cdot ans_2&amp;=\sum_{i=l}^r F(i,k) \\&amp;=\sum_{i=l}^r \binom{f(i)}{k} \\&amp;=\sum_{i=l}^r \frac{1}{k!}\cdot f(i)^{\underline k}\end{aligned}$$把 $x^{\underline k}$ 暴力展开成 $\sum a_i\cdot x^i$ ,代回上式,$$\begin{aligned}(r-l+1)\cdot ans_2&amp;=\sum_{n=l}^r \frac{1}{k!} \sum_{j=0}^k a_j\cdot f(i)^j \\&amp;=\sum_{j=0}^k \frac{a_j}{k!} \sum_{i=l}^r (c_1x^i+c_2y_i)^j \\&amp;=\sum_{j=0}^k \frac{a_j}{k!}\sum_{p=0}^j \cdot \binom{j}{p} \cdot c_1^pc_2^{j-p} \sum_{i=l}^r (x^p y^{j-p})^i\end{aligned}$$枚举 $j,p$ 的值,最后面的那一项用等比数列求和公式计算,时间复杂度 $O(k^2\cdot \log r)$ . 当 $m=3$ 时,设 $g(n)$ 表示填满 $2\times (2n)$ 的方案数,有 $g(0)=1,g(1)=3,g(i)=4g(i-1)-g(i-2)$ . 算出此时的 $c_1,x,c_2,y$ ,其余做法和 $m=2$ 的相同. 由于解出来的 $c$ 分别含有 $\sqrt 5,\sqrt 3$ ,而 $5,3$ 在模 $998244353$ 下都不是二次剩余,所以要自己定义一个数域. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int K=1&lt;&lt;9;int binom[K][K],w;struct cp&#123; int r,i; cp(int r=0,int i=0):r(r),i(i) &#123;&#125; cp operator + (const cp &amp;rhs) const &#123; return cp(add(r,rhs.r),add(i,rhs.i)); &#125; cp operator - (const cp &amp;rhs) const &#123; return cp(add(r,P-rhs.r),add(i,P-rhs.i)); &#125; cp operator * (const cp &amp;rhs) const &#123; return cp(add(mul(r,rhs.r),mul(w,mul(i,rhs.i))),add(mul(r,rhs.i),mul(i,rhs.r))); &#125; cp operator ^ (const ll &amp;k) const &#123; ll b=k; cp a=*this,res=cp(1,0); while(b) &#123; if(b&amp;1LL) res=res*a; a=a*a; b&gt;&gt;=1; &#125; return res; &#125; cp inv() const &#123; int t=fpow(add(mul(r,r),P-mul(w,mul(i,i))),P-2); return cp(mul(r,t),mul(P-i,t)); &#125; cp operator / (const cp &amp;rhs) const &#123; return (*this)*(rhs.inv()); &#125;&#125;;cp c1,x,c2,y;void init(int m)&#123; int inv2=fpow(2,P-2),inv10=fpow(10,P-2),inv6=fpow(6,P-2); for(int i=0;i&lt;=501;++i) binom[i][0]=1; for(int i=1;i&lt;=501;++i) for(int j=1;j&lt;=i;++j) binom[i][j]=add(binom[i-1][j],binom[i-1][j-1]); if(m==2) &#123; w=5; x=cp(inv2,inv2); c1=cp(inv2,inv10); y=cp(inv2,P-inv2); c2=cp(inv2,P-inv10); &#125; else &#123; w=3; x=cp(2,1); c1=cp(inv2,inv6); y=cp(2,P-1); c2=cp(inv2,P-inv6); &#125;&#125;int a[K],b[K];int solve(ll L,ll R,int k)&#123; a[0]=1; for(int i=1;i&lt;=k;++i) a[i]=0; for(int i=0;i&lt;k;++i) // *(x-i) &#123; for(int j=0;j&lt;=i;++j) b[j+1]=a[j]; b[0]=0; for(int j=0;j&lt;=i;++j) inc(b[j],mul(a[j],P-i)); for(int j=0;j&lt;=i+1;++j) a[j]=b[j]; &#125; int invfac=1; for(int i=2;i&lt;=k;++i) invfac=mul(invfac,i); invfac=fpow(invfac,P-2); cp res=cp(0,0); for(int j=0;j&lt;=k;++j) for(int p=0;p&lt;=j;++p) &#123; int t=mul(mul(a[j],binom[j][p]),invfac); cp tmp=cp(t,0)*(c1^p)*(c2^(j-p)); cp q=(x^p)*(y^(j-p)); if(q.r==1 &amp;&amp; q.i==0) tmp=tmp*cp((R-L)%P,0); else &#123; cp pw=(cp(1,0)-(q^(R+1)))/(cp(1,0)-q); pw=pw-(cp(1,0)-(q^(L+1)))/(cp(1,0)-q); tmp=tmp*pw; &#125; res=res+tmp; &#125; return res.r;&#125;int main()&#123; int T=read(),m=read(); init(m); while(T--) &#123; ll L=read(),R=read(); int k=read(),ans=fpow((R-L+1)%P,P-2); if(m==2) ans=mul(ans,solve(L-1,R,k)); else ans=mul(ans,solve((L-1)&gt;&gt;1,R&gt;&gt;1,k)); printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3996 线性代数]]></title>
    <url>%2F2020%2F01%2F08%2Fbzoj-3996-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%2F</url>
    <content type="text"><![CDATA[最小割. 考虑如果把 $A_{1,i}$ 置为 $1$ ,就把 $A\times B-C$ 加上了 $B_{i}$ 这个行向量. 最后的 $D=(A \times B-C) \times A^{T}$ ,所以最后只算那些 $A_{1,i}=1$ 的 $(A\times B-C)_{1,i}$ . 设 $S=\lbrace i | A_{1,i}=1 \rbrace $ ,则 $D=\sum_{i\in S}\sum_{j\in S} B_{i,j}-\sum_{i\in S} C_{1,i}$ . 意义是,若两个位置 $i,j$ 同时被选,会带来 $B_{i,j}$ 的收益,若 $i$ 被选,需要付出 $C_{1,i}$ 的代价. 这显然已经是最小割经典问题了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=(500*500+500)*4+10;const int inf=1e9;int n,ans=0,tot,B[512][512],C[512];struct Edge&#123; int to,nx,flow;&#125;E[MAXN];int ecnt=1,head[MAXN],cur[MAXN];void addedge(int u,int v,int flow)&#123; E[++ecnt]=(Edge)&#123;v,head[u],flow&#125;; head[u]=ecnt;&#125;void ins(int u,int v,int flow)&#123; addedge(u,v,flow); addedge(v,u,0);&#125;int dep[MAXN];queue&lt;int&gt; q;bool bfs(int S,int T)&#123; for(int i=1;i&lt;=tot;++i) dep[i]=-1,cur[i]=head[i]; dep[S]=0; q.push(S); while(!q.empty()) &#123; int u=q.front(); q.pop(); for(int i=head[u];i;i=E[i].nx) &#123; int v=E[i].to; if(dep[v]==-1 &amp;&amp; E[i].flow&gt;0) &#123; dep[v]=dep[u]+1; q.push(v); &#125; &#125; &#125; return dep[T]!=-1;&#125;int dfs(int u,int T,int limit)&#123; if(u==T || !limit) return limit; int flow=0,f; for(int &amp;i=cur[u];i;i=E[i].nx) &#123; int v=E[i].to; if(dep[v]==dep[u]+1 &amp;&amp; E[i].flow&gt;0 &amp;&amp; (f=dfs(v,T,min(limit,E[i].flow)))) &#123; flow+=f; limit-=f; E[i].flow-=f; E[i^1].flow+=f; &#125; if(!limit) return flow; &#125; return flow;&#125;int Dinic(int S,int T)&#123; int maxflow=0; while(bfs(S,T)) maxflow+=dfs(S,T,inf); return maxflow;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=n;++j) ans+=(B[i][j]=read()); for(int i=1;i&lt;=n;++i) C[i]=read(); tot=n; int S=++tot,T=++tot; for(int i=1;i&lt;=n;++i) &#123; ins(i,T,C[i]); int x=++tot; ins(S,x,B[i][i]); ins(x,i,inf); for(int j=1;j&lt;i;++j) &#123; int x=++tot; ins(S,x,B[i][j]+B[j][i]); ins(x,i,inf); ins(x,j,inf); &#125; &#125; ans-=Dinic(S,T); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 3014 独特的城市]]></title>
    <url>%2F2020%2F01%2F07%2FLoj-3014-%E7%8B%AC%E7%89%B9%E7%9A%84%E5%9F%8E%E5%B8%82%2F</url>
    <content type="text"><![CDATA[树的直径. 记树的某条直径为 $S-T$ ,则对于一个点 $x$ ,能对它造成贡献的点,一定都在 $x$ 到 $S,T$ 中较远的那个点的路径上. 否则,若还有其他点能对 $x$ 造成贡献,那么它到 $x$ 的距离一定大于 $x$ 到 $S,T$ 的距离,可以构造出更长的直径. 以 $S$ 为根做一次 dfs ,对每个 $x$ ,统计一下 $S\to x$ 路径上有几个点能对 $x$ 造成贡献,再以 $T$ 为根做一次同样的 dfs . 对于同一个 $x$ 的两次 dfs ,假设 $x$ 到 $S$ 更远,那么 $T$ 那一次的 dfs 计入贡献的点就是 $S$ 那一次计入贡献的点的子集. 那么把两次的答案取 $\max$ 就是实际的答案. dfs 时,用一个栈维护根到当前节点路径中,能造成贡献的点,开一个桶记录每种权值出现次数. 往栈中加点或者删点的时候,更新桶,并且更新当前答案,类似于莫队增加或删除端点时的操作. 假设当前已经处理了 $x$ 的答案,需要继续向下 dfs . 为了保证栈中点都是有贡献的,要先把栈中与 $x$ 距离小于等于 $x$ 到其它子树中最深的点的所有点删掉. 先往最深点的方向走,再往其它儿子走,删除操作就不用被撤销掉了. 每个点只会对它的父亲贡献 $O(1)$ 次进出栈操作,时间复杂度 $O(n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;int n,m,ecnt=0,rt,dep[MAXN],c[MAXN];vector&lt;int&gt; G[MAXN];int bucket[MAXN],ans[MAXN],tmp=0;void ins(int x)&#123; tmp+=!(bucket[x]++);&#125;void del(int x)&#123; tmp-=!(--bucket[x]);&#125;void FindRt(int u,int fa)&#123; if(dep[u]&gt;dep[rt]) rt=u; for(int v:G[u]) if(v!=fa) dep[v]=dep[u]+1,FindRt(v,u);&#125;int mxson[MAXN],mx[MAXN],se[MAXN];void Init(int u,int fa)&#123; mxson[u]=0; mx[u]=dep[u],se[u]=-1; for(int v:G[u]) &#123; if(v==fa) continue; dep[v]=dep[u]+1; Init(v,u); if(mx[v]&gt;mx[mxson[u]]) mxson[u]=v,mx[u]=mx[v]; &#125; for(int v:G[u]) if(v!=fa &amp;&amp; v!=mxson[u]) se[u]=max(se[u],mx[v]);&#125;int stk[MAXN],tp=0;void dfs(int u,int fa)&#123; while(tp &amp;&amp; dep[u]-dep[stk[tp]]&lt;=se[u]-dep[u]) del(c[stk[tp--]]); ins(c[stk[++tp]=u]); if(mxson[u]) dfs(mxson[u],u); if(tp &amp;&amp; stk[tp]==u) del(c[stk[tp--]]); while(tp &amp;&amp; dep[u]-dep[stk[tp]]&lt;=mx[u]-dep[u]) del(c[stk[tp--]]); ans[u]=max(ans[u],tmp); for(int v:G[u]) &#123; if(v==fa || v==mxson[u]) continue; if(!tp || stk[tp]!=u) ins(c[stk[++tp]=u]); dfs(v,u); &#125; if(tp &amp;&amp; stk[tp]==u) del(c[stk[tp--]]);&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); G[u].push_back(v); G[v].push_back(u); &#125; for(int i=1;i&lt;=n;++i) c[i]=read(); mx[0]=dep[0]=-1; int S,T; FindRt(1,0),S=rt,FindRt(S,0),T=rt; tp=dep[S]=0,Init(S,0),dfs(S,0); tp=dep[T]=0,Init(T,0),dfs(T,0); for(int i=1;i&lt;=n;++i) printf("%d\n",ans[i]); return 0;&#125;]]></content>
      <tags>
        <tag>树形dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2441 棘手的操作]]></title>
    <url>%2F2020%2F01%2F06%2FLoj-2441-%E6%A3%98%E6%89%8B%E7%9A%84%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[启发式合并. 对每个连通块,用一个 vector 维护块内所有点的编号,用一个可删堆维护块内所有权值,维护一个块加法标记 $tag$ . 用一个可删堆维护每个块的最大值中的最大值,维护一个全局加法标记 $Stag$ . 合并时直接用启发式合并,修改时先将对应的贡献在对应的可删堆中删掉,修改后再加回去. 时间复杂度 $O(n\log^2 n)$ ,但常数小,跑得还挺快的. 这样就可以搞到 Loj 上的代码最短了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=3e5+10;int n,m,a[MAXN],bel[MAXN],tag[MAXN],Stag;struct Heap&#123; priority_queue&lt;int&gt; q1,q2; void insert(int x) &#123; q1.push(x); &#125; int top() &#123; while(!q2.empty() &amp;&amp; q1.top()==q2.top()) q1.pop(),q2.pop(); return q1.top(); &#125; void erase(int x) &#123; q2.push(x); &#125;&#125;s[MAXN],S;vector&lt;int&gt; id[MAXN];void U()&#123; int x=read(),y=read(); x=bel[x],y=bel[y]; if(x==y) return; if(id[x].size()&gt;id[y].size()) swap(x,y); S.erase(s[x].top()+tag[x]); S.erase(s[y].top()+tag[y]); for(int i:id[x]) &#123; id[y].push_back(i); bel[i]=y; a[i]+=tag[x]-tag[y]; s[y].insert(a[i]); &#125; S.insert(s[y].top()+tag[y]);&#125;void A1()&#123; int x=read(),v=read(); S.erase(s[bel[x]].top()+tag[bel[x]]); s[bel[x]].erase(a[x]); a[x]+=v; s[bel[x]].insert(a[x]); S.insert(s[bel[x]].top()+tag[bel[x]]);&#125;void A2()&#123; int x=read(),v=read(); S.erase(s[bel[x]].top()+tag[bel[x]]); tag[bel[x]]+=v; S.insert(s[bel[x]].top()+tag[bel[x]]);&#125;void A3()&#123; int v=read(); Stag+=v;&#125;int F1()&#123; int x=read(); return a[x]+tag[bel[x]]+Stag;&#125;int F2()&#123; int x=read(); return s[bel[x]].top()+tag[bel[x]]+Stag;&#125;int F3()&#123; return S.top()+Stag;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) &#123; bel[i]=i; a[i]=read(); id[i].push_back(i); s[i].insert(a[i]); S.insert(a[i]); &#125; m=read(); for(int i=1;i&lt;=m;++i) &#123; char buf[10]; scanf("%s",buf); if(buf[0]=='U') U(); else if(buf[0]=='A') &#123; if(buf[1]=='1') A1(); else if(buf[1]=='2') A2(); else A3(); &#125; else &#123; if(buf[1]=='1') printf("%d\n",F1()); else if(buf[1]=='2') printf("%d\n",F2()); else printf("%d\n",F3()); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2251 树状数组]]></title>
    <url>%2F2020%2F01%2F06%2FLoj-2251-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%2F</url>
    <content type="text"><![CDATA[树套树. 手玩一下可以发现,这种写法中, ${\rm Add}(x)$ 对 ${\rm Find}(y)$ 有贡献,当且仅当 $y\ge x$ . 于是 $\rm Add​$ 是单点修改, $\rm Find​$ 是查询后缀和. 记 $sum(l,r)$ 表示 $[l,r]$ 区间内所有数的异或和. 因为 $\rm Find$ 特判了 $l=0$ ,所以对于每次询问 ${\rm Query}(l,r) $ 要分情况讨论. 当 $l=1$ 时,答案正确需要满足 $sum(1,r)=sum(r,n)$ ,即 $sum(1,n)=sum(r)$ . 而 $sum(1,n)$ 已知,需要查询 $r$ 被修改次数为奇/偶的概率. 当 $l\neq 1$ 时,答案正确需要满足 $sum(l,r)=sum(l-1,n)\oplus sum(r,n)$ ,即 $sum(l-1)=sum(r)$ . 需要查询 $l-1,r$ 这两个位置修改总次数为偶数的概率. 因为每次修改时,区间内的两个位置不可能同时被修改,所以不能简单的维护每个位置被修改奇/偶次的概率. 而是需要对于每个点对 $(l,r)$ ,维护它们修改总次数为奇/偶次的概率. 每个点对是二维平面上的一个点,每次修改一个矩形内的点权,查询单点的权值,这可以用标记永久化的树套树维护. 查询 $r$ 被修改次数为奇/偶的概率可以看成是查询 $(0,r)$ 这个点对修改总次数为奇/偶的概率,就不用另外维护了. 时间复杂度 $O(n+m\log^2 n)$ ,空间复杂度 $O(n\log^2 n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=1e5+10;int n,m;int merge(int x,int y)&#123; return add(mul(x,P+1-y),mul(y,P+1-x));&#125;namespace In&#123; struct node &#123; int ls,rs,val; &#125;Tree[MAXN*200];#define root Tree[o] int idx=0; void upd(int &amp;o,int l,int r,int L,int R,int c) &#123; if(!o) o=++idx; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; root.val=merge(root.val,c); return; &#125; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd(root.ls,l,mid,L,R,c); if(R&gt;mid) upd(root.rs,mid+1,r,L,R,c); &#125; int query(int o,int l,int r,int y) &#123; if(!o) return 0; int res=root.val; if(l==r) return res; int mid=(l+r)&gt;&gt;1; if(y&lt;=mid) return merge(res,query(root.ls,l,mid,y)); else return merge(res,query(root.rs,mid+1,r,y)); &#125;&#125;namespace Out&#123; int rt[MAXN&lt;&lt;2]; void upd(int o,int l,int r,int Lx,int Rx,int Ly,int Ry,int c) &#123; if(Lx&lt;=l &amp;&amp; r&lt;=Rx) return In::upd(rt[o],0,n,Ly,Ry,c); int mid=(l+r)&gt;&gt;1; if(Lx&lt;=mid) upd(o&lt;&lt;1,l,mid,Lx,Rx,Ly,Ry,c); if(Rx&gt;mid) upd(o&lt;&lt;1|1,mid+1,r,Lx,Rx,Ly,Ry,c); &#125; int query(int o,int l,int r,int x,int y) &#123; int res=In::query(rt[o],0,n,y); if(l==r) return res; int mid=(l+r)&gt;&gt;1; if(x&lt;=mid) return merge(res,query(o&lt;&lt;1,l,mid,x,y)); else return merge(res,query(o&lt;&lt;1|1,mid+1,r,x,y)); &#125;&#125;int main()&#123; n=read(),m=read(); int sum=0; for(int i=1;i&lt;=m;++i) &#123; int op=read(),l=read(),r=read(); if(op==1) &#123; int pr=fpow(r-l+1,P-2); Out::upd(1,0,n,l,r,l,r,mul(pr,2)); Out::upd(1,0,n,0,l-1,l,r,pr); if(r+1&lt;=n) Out::upd(1,0,n,l,r,r+1,n,pr); sum^=1; &#125; else &#123; if(l==1 &amp;&amp; sum==1) printf("%d\n",Out::query(1,0,n,0,r)); else printf("%d\n",add(1-Out::query(1,0,n,l-1,r),P)); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>概率/期望</tag>
        <tag>树套树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2142 相逢是问候]]></title>
    <url>%2F2020%2F01%2F06%2FLoj-2142-%E7%9B%B8%E9%80%A2%E6%98%AF%E9%97%AE%E5%80%99%2F</url>
    <content type="text"><![CDATA[拓展欧拉定理 + 线段树. 拓展欧拉定理:当 $x&gt;\varphi(P)$ 时,有 $a^x\equiv a^{x\bmod \varphi(P)+\varphi(P)} \pmod P$ . 那么只需要对每个位置维护出 $a\bmod P,a\bmod \varphi(P),a\bmod \varphi(\varphi(P)),\dots$ ,就可以实现单点修改. 每次把 $P$ 变成 $\varphi(P)$ ,最多变 $O(\log P)$ 次就会变成 $1$ ,所以每个位置只用维护 $k=O(\log P)$ 个值. 当一个数被操作了 $k$ 次后,就出现了 $\bmod 1$ 的情况,由于可以依次递推出每一项的值,所以再修改,它的值也不会变. 用线段树来实现修改操作,修改一个区间时,若区间内所有数都不变时,直接返回,否则继续向下暴力递归. 每个位置最多被修改 $O(\log P)$ 次,每次修改需要修改 $O(\log P)$ 个值,每修改一个值需要 $O(\log P)$ 算一次快速幂. 所有快速幂的底数都是 $c$ ,而指数不超过 $10^8$ ,所以可以对每种模数预处理出 $c^i,c^{i\times 10^4}$ 的值,快速幂就变成 $O(1)$ 了. 时间复杂度 $O(n\log^2 P)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int add(int a,int b,int P)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b,int P)&#123; return 1LL * a * b % P;&#125;const int MAXN=5e4+10,K=30;int phi(int x)&#123; int res=x; for(int i=2;i*i&lt;=x;++i) if(x%i==0) &#123; while(x%i==0) x/=i; res/=i,res*=(i-1); &#125; if(x&gt;1) res/=x,res*=(x-1); return res;&#125;int n,m,k,c,a[MAXN],mod[K],f[MAXN][K];struct node&#123; int sum,cnt,key;&#125;Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1]void pushup(int o)&#123; root.sum=add(lson.sum,rson.sum,mod[0]); root.key=lson.key+rson.key;&#125;void BuildTree(int o,int l,int r)&#123; if(l==r) &#123; root.sum=a[l]; root.cnt=0; root.key=1; return; &#125; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); pushup(o);&#125;void upd(int o,int l,int r,int L,int R)&#123; if(L&lt;=l &amp;&amp; r&lt;=R &amp;&amp; !root.key) return; if(l==r) &#123; ++root.cnt; if(root.cnt==k) root.key=0; root.sum=f[l][root.cnt]; return; &#125; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd(o&lt;&lt;1,l,mid,L,R); if(R&gt;mid) upd(o&lt;&lt;1|1,mid+1,r,L,R); pushup(o);&#125;int query(int o,int l,int r,int L,int R)&#123; if(L&lt;=l &amp;&amp; r&lt;=R) return root.sum; int mid=(l+r)&gt;&gt;1; int res=0; if(L&lt;=mid) res=add(res,query(o&lt;&lt;1,l,mid,L,R),mod[0]); if(R&gt;mid) res=add(res,query(o&lt;&lt;1|1,mid+1,r,L,R),mod[0]); return res;&#125;int pw1[MAXN][K],pw0[MAXN][K];int Pow(int x,int d)&#123; return mul(pw1[x/10000][d],pw0[x%10000][d],mod[d]);&#125;int calc(int x,int num,int d)&#123; if(!num) return x%mod[d]; int t=calc(x,num-1,d+1); if(log(1.0*mod[d+1]/x)/log(1.0*c)&lt;num) t+=mod[d+1]; return Pow(t,d);&#125;int main()&#123; n=read(),m=read(),mod[0]=read(),c=read(); k=0; while(mod[k]&gt;1) &#123; ++k; mod[k]=phi(mod[k-1]); &#125; mod[++k]=1; for(int d=0;d&lt;=k;++d) &#123; pw0[0][d]=1; for(int i=1;i&lt;=10000;++i) pw0[i][d]=mul(pw0[i-1][d],c,mod[d]); pw1[0][d]=1; int pc=pw0[10000][d]; for(int i=1;i&lt;=10000;++i) pw1[i][d]=mul(pw1[i-1][d],pc,mod[d]); &#125; for(int i=1;i&lt;=n;++i) &#123; a[i]=read(); if(!a[i]) &#123; f[i][1]=1; for(int j=2;j&lt;=k;++j) f[i][j]=calc(1,j-1,0); &#125; else &#123; for(int j=1;j&lt;=k;++j) f[i][j]=calc(a[i],j,0); &#125; &#125; BuildTree(1,1,n); for(int i=1;i&lt;=m;++i) &#123; int op=read(),L=read(),R=read(); if(!op) upd(1,1,n,L,R); else printf("%d\n",query(1,1,n,L,R)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2116 开店]]></title>
    <url>%2F2020%2F01%2F05%2FLoj-2116-%E5%BC%80%E5%BA%97%2F</url>
    <content type="text"><![CDATA[树剖 + 主席树. 先不考虑年龄的限制,那么询问 $u$ 的答案就是$$ans=\sum_{v} dis(u,v) \\ans=\sum_v dist(u)+dist(v)-2\times dist(lca(u,v)) \\ans=n\times dist(u)+\sum_v dist(v) -2\times \sum_v dist(lca(u,v))$$其中 $dist(x)$ 表示 $x$ 到根节点的距离. 前两项容易算出,最后一项的求法是经典套路. 对每条边维护一个贡献值,对于每个 $v$ ,将 $v$ 到根路径上每条边的贡献加上它的长度. 那么 $\sum_v dist(lca(u,v))$ 就等于 $u$ 到根路径上每条边的贡献之和. 修改贡献和查询贡献可以利用差分实现,考虑年龄的限制,可以先把年龄离散化,然后用树剖 + 主席树来维护贡献. 由于要在主席树上实现区间加的操作,所以要用标记永久化. 时间复杂度 $O(n\log^2 n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1.5e5+10,M=2e7+10;int idx=0,ls[M],rs[M],tag[M],d[MAXN];ll sum[M];void upd(int lst,int &amp;x,int l,int r,int L,int R)&#123; int c=d[R]-d[L-1]; x=++idx; ls[x]=ls[lst],rs[x]=rs[lst],tag[x]=tag[lst],sum[x]=sum[lst]; if(l==L &amp;&amp; r==R) &#123; ++tag[x]; return; &#125; sum[x]+=c; int mid=(l+r)&gt;&gt;1; if(R&lt;=mid) upd(ls[lst],ls[x],l,mid,L,R); else if(L&gt;mid) upd(rs[lst],rs[x],mid+1,r,L,R); else &#123; upd(ls[lst],ls[x],l,mid,L,mid); upd(rs[lst],rs[x],mid+1,r,mid+1,R); &#125;&#125;ll query(int x,int l,int r,int L,int R)&#123; int c=d[R]-d[L-1]; ll res=1LL*c*tag[x]; if(l==L &amp;&amp; r==R) return res+sum[x]; int mid=(l+r)&gt;&gt;1; if(R&lt;=mid) res+=query(ls[x],l,mid,L,R); else if(L&gt;mid) res+=query(rs[x],mid+1,r,L,R); else &#123; res+=query(ls[x],l,mid,L,mid); res+=query(rs[x],mid+1,r,mid+1,R); &#125; return res;&#125;int n,m,A,a[MAXN],b[MAXN],len;int ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1],val[MAXN&lt;&lt;1];void addedge(int u,int v,int w)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; val[ecnt]=w; head[u]=ecnt;&#125;int dfnidx=0,dfn[MAXN],siz[MAXN],mxson[MAXN],top[MAXN];int fa[MAXN],dist[MAXN],dep[MAXN],sumtot[MAXN];ll sumdist[MAXN];void dfs1(int u,int F)&#123; sumdist[a[u]]+=dist[u],sumtot[a[u]]++; fa[u]=F,siz[u]=1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==F) continue; dep[v]=dep[u]+1; dist[v]=dist[u]+val[i]; dfs1(v,u); siz[u]+=siz[v]; if(siz[v]&gt;siz[mxson[u]]) mxson[u]=v; &#125;&#125;void dfs2(int u,int tp)&#123; top[u]=tp,dfn[u]=++dfnidx; d[dfn[u]]=dist[u]-dist[fa[u]]; if(mxson[u]) dfs2(mxson[u],tp); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v!=fa[u] &amp;&amp; v!=mxson[u]) dfs2(v,v); &#125;&#125;int p[MAXN],rt[MAXN];bool cmp(const int &amp;x,const int &amp;y)&#123; return a[x]&lt;a[y];&#125;int main()&#123; n=read(),m=read(),A=read(); for(int i=1;i&lt;=n;++i) a[i]=b[i]=read(); sort(b+1,b+1+n); len=unique(b+1,b+1+n)-b-1; for(int i=1;i&lt;=n;++i) a[i]=lower_bound(b+1,b+1+len,a[i])-b; for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(),w=read(); addedge(u,v,w); addedge(v,u,w); &#125; dfs1(1,0); dfs2(1,1); for(int i=2;i&lt;=len;++i) &#123; sumdist[i]+=sumdist[i-1]; sumtot[i]+=sumtot[i-1]; &#125; for(int i=2;i&lt;=n;++i) d[i]+=d[i-1]; for(int i=1;i&lt;=n;++i) p[i]=i; sort(p+1,p+1+n,cmp); for(int i=1,j=0;i&lt;=n;++i) &#123; int pos=a[p[i]]; rt[pos]=rt[pos-1]; while(j+1&lt;=n &amp;&amp; a[p[j+1]]==pos) &#123; ++j; int x=p[j]; while(x) &#123; int y=top[x]; upd(rt[pos],rt[pos],1,n,dfn[y],dfn[x]); x=fa[y]; &#125; &#125; i=j; &#125; ll ans=0; for(int i=1;i&lt;=m;++i) &#123; int x=read(),L=(read()+ans%A)%A,R=(read()+ans%A)%A; if(L&gt;R) swap(L,R); if(L&gt;b[len] || R&lt;b[1]) &#123; printf("%lld\n",ans=0); continue; &#125; L=lower_bound(b+1,b+1+len,L)-b; R=upper_bound(b+1,b+1+len,R)-b-1; ans=sumdist[R]-sumdist[L-1]+1LL*dist[x]*(sumtot[R]-sumtot[L-1]); ll tmp=0; while(x) &#123; int y=top[x]; tmp+=query(rt[R],1,n,dfn[y],dfn[x]); tmp-=query(rt[L-1],1,n,dfn[y],dfn[x]); x=fa[y]; &#125; printf("%lld\n",ans=ans-2*tmp); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>主席树</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello 2020]]></title>
    <url>%2F2020%2F01%2F05%2FHello-2020%2F</url>
    <content type="text"><![CDATA[$Div.1+Div.2$ A New Year and Naming大概是天干地支纪年法?随便模一下就好了. code B New Year and Ascent Sequence用总数减掉不合法的,不合法的只能由两个单调不增的序列拼起来,且要求拼起来之后还是单调不增的. 记录一下单调不增的序列中,最后一个元素是 $i$ 的有多少个,求一个前缀和后再枚举前面那个序列就可以了. code C New Year and Permutation考虑一个长度为 $i$ 的值域连续段的贡献. 它可以选 $n-i+1$ 个数, $n-i+1$ 个位置,内部有 $i!$ 种排列方法,外部有 $(n-i)!$ 种排列方法,全部乘起来就好了. code D New Year and Conference考虑若两条 $a$ 的线段有交,那么为了尽可能让集合 $s$ 中的元素在 $b$ 中两两不相交,集合 $s$ 只会包含这两条线段. 即,只需要考虑大小为 $2$ 的集合 $s$ ,先处理所有在 $a$ 中有交的,检查它们在 $b$ 中是否有交,交换 $a,b$ 后再做一次. 处理在 $a$ 中有交时,将所有线段按照 $a_l$ 从小到大排序,依次加入. 加入一条线段 $i$ 时,前面所有 $a_{j,r}\ge a_{i,l}$ 的线段 $j$ 都与它在 $a$ 中相交,检查它们之中是否存在在 $b$ 中与 $i$ 不相交的. 只需要求出它们的 $\max l_b,\min r_b$ 进行判断,于是可以以 $a_{r}$ 为下标维护线段树进行修改与询问. E New Year and Castle Constructionbzoj 1914 是问覆盖住点 $p$ 的三角形数目,这道题是四边形,拿来改一改就成了. 枚举每个点 $p$ ,考虑计算 $f(p)$ ,把其他点按照 $p$ 为原点做一个极角排序,双指针扫一下即可. 比赛时用的 long double ,精度被卡了,没时间写全整数,有点难受.]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2050 树]]></title>
    <url>%2F2020%2F01%2F04%2FLoj-2050-%E6%A0%91%2F</url>
    <content type="text"><![CDATA[主席树 + 倍增求 LCA. 显然不可能每次都老老实实栽一棵子树上去,我们每次只栽一个节点到大树中,代表这次栽的子树. 大树上每条边的边权就变成了儿子对应的根到父亲对应的根的距离,如图所示. 左边是大树的真实形态,红色的边是每次栽子树时加的边,黑色的边是模板树中原有的边. 右边是每次只栽一个节点上去得到的大树形态. 考虑如何在每次栽边后计算出右边新增加的边的权值. 记录下第 $i$ 次操作后,大树实际含有节点的总数 $s_i$ ,那么给出一个编号 $x$ 后,就可以二分出它是第几次被栽进来的. 若它是第 $i$ 次操作被栽进来的,那么 $k=x-s_{i-1}$ 就是它在第 $i$ 次被栽进来的所有点中,编号从小到大的位次. 即在模板树中,它是子树 $a_i$ 中所有节点编号的第 $k$ 小,用主席树可以查询出它在模板树中实际的编号. 对于每次操作,若栽在 $b$ 下面,就可以找出 $b$ 实际的编号,得到 $b$ 到那一次操作的 $a$ 的距离,再 $+1$ ,就是这次的边权. 询问 $(x,y)$ 时,尝试将它们跳到它们在大树上的 $lca$ ,跳的过程中累加跳过的距离. 先在右边的树上跳,若 $x,y$ 所属的代表节点没有祖先后代关系,当两者父亲相同时,说明已经被栽进了同一棵模板树. 此时将它们跳进模板树,再在模板树上询问两点的距离,加入答案. 若 $x,y$ 的代表节点有祖先后代关系,假定 $y$ 的代表是 $x$ 的代表的祖先,当 $x$ 跳到父亲是 $y$ 时,就可以跳进模板树了. 需要先预处理出父亲的倍增数组,加速跳的过程. 时间复杂度 $O(n\log n)$ . 其实这个结构与最后跳 $lca$ 的过程和圆方树有相似之处,对圆方树比较熟练的话应该不难写出. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10,K=17;int n,m,q;namespace TempTree&#123; int ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1]; void addedge(int u,int v) &#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt; &#125; int dep[MAXN],fa[MAXN][K],dfnidx=0,idx,dfn[MAXN],siz[MAXN]; int rt[MAXN]; struct node &#123; int ls,rs,cnt; &#125;Tree[MAXN*20];#define root Tree[o] void upd(int &amp;o,int lst,int l,int r,int pos) &#123; o=++idx; root=Tree[lst]; ++root.cnt; if(l==r) return; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) upd(root.ls,Tree[lst].ls,l,mid,pos); else upd(root.rs,Tree[lst].rs,mid+1,r,pos); &#125; int query(int L,int R,int l,int r,int k) &#123; if(l==r) return l; int mid=(l+r)&gt;&gt;1,tmp=Tree[Tree[R].ls].cnt-Tree[Tree[L].ls].cnt; if(tmp&gt;=k) return query(Tree[L].ls,Tree[R].ls,l,mid,k); else return query(Tree[L].rs,Tree[R].rs,mid+1,r,k-tmp); &#125; int FindNum(int x,int k) &#123; return query(rt[dfn[x]-1],rt[dfn[x]+siz[x]-1],1,n,k); &#125; int Dist(int x,int y) &#123; int res=dep[x]+dep[y]; if(dep[x]&lt;dep[y]) swap(x,y); for(int i=K-1;i&gt;=0;--i) if((1&lt;&lt;i)&lt;=dep[x]-dep[y]) x=fa[x][i]; if(x==y) return res-2*dep[x]; for(int i=K-1;i&gt;=0;--i) if((1&lt;&lt;i)&lt;=dep[x] &amp;&amp; fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i]; return res-2*dep[fa[x][0]]; &#125; void dfs(int u,int F) &#123; fa[u][0]=F; for(int i=1;(1&lt;&lt;i)&lt;=dep[u];++i) fa[u][i]=fa[fa[u][i-1]][i-1]; dfn[u]=++dfnidx,siz[u]=1; upd(rt[dfn[u]],rt[dfn[u]-1],1,n,u); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==F) continue; dep[v]=dep[u]+1; dfs(v,u); siz[u]+=siz[v]; &#125; &#125; void init() &#123; for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; dfs(1,0); &#125;&#125;namespace BigTree&#123; ll s[MAXN],b[MAXN],dist[MAXN][K]; int fa[MAXN][K],dep[MAXN],a[MAXN],c[MAXN]; int FindTim(ll x,int cur) &#123; int L=1,R=cur-1,tim; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(s[mid]&gt;=x) R=mid-1,tim=mid; else L=mid+1; &#125; return tim; &#125; int FindNum(ll x,int tim) &#123; return TempTree::FindNum(a[tim],x-s[tim-1]); &#125; void Link(ll B,int x) &#123; int y=FindTim(B,x); fa[x][0]=y,dep[x]=dep[y]+1; int id=FindNum(B,y); c[x]=id; dist[x][0]=TempTree::Dist(id,a[y])+1; &#125; int jump(int x,int d) &#123; for(int i=K-1;i&gt;=0;--i) if((1&lt;&lt;i)&lt;=d) x=fa[x][i],d-=1&lt;&lt;i; return x; &#125; ll query(ll A,ll B) &#123; int x=FindTim(A,m+1),y=FindTim(B,m+1); int u=FindNum(A,x),v=FindNum(B,y); if(x==y) return TempTree::Dist(u,v); if(dep[x]&lt;dep[y]) swap(x,y),swap(A,B),swap(u,v); ll ans=0; if(jump(x,dep[x]-dep[y])==y) &#123; ans+=TempTree::Dist(a[x],u); for(int i=K-1;i&gt;=0;--i) if((1&lt;&lt;i)&lt;=dep[x]-dep[y]-1) ans+=dist[x][i],x=fa[x][i]; ans+=1; ans+=TempTree::Dist(c[x],v); return ans; &#125; ans+=TempTree::Dist(a[x],u)+TempTree::Dist(a[y],v); if(dep[x]&lt;dep[y]) swap(x,y); for(int i=K-1;i&gt;=0;--i) if((1&lt;&lt;i)&lt;=dep[x]-dep[y]) ans+=dist[x][i],x=fa[x][i]; for(int i=K-1;i&gt;=0;--i) if((1&lt;&lt;i)&lt;=dep[x] &amp;&amp; fa[x][i]!=fa[y][i]) &#123; ans+=dist[x][i],ans+=dist[y][i]; x=fa[x][i],y=fa[y][i]; &#125; ans+=2; ans+=TempTree::Dist(c[x],c[y]); return ans; &#125; void solve() &#123; ++m,s[1]=n,a[1]=1; for(int i=2;i&lt;=m;++i) &#123; a[i]=read(),b[i]=read(); s[i]=s[i-1]+TempTree::siz[a[i]]; Link(b[i],i); &#125; for(int i=1;i&lt;=K-1;++i) for(int x=1;x&lt;=m;++x) if((1&lt;&lt;i)&lt;=dep[x]) &#123; fa[x][i]=fa[fa[x][i-1]][i-1]; dist[x][i]=dist[x][i-1]+dist[fa[x][i-1]][i-1]; &#125; for(int i=1;i&lt;=q;++i) &#123; ll x=read(),y=read(); printf("%lld\n",query(x,y)); &#125; &#125;&#125;int main()&#123; n=read(),m=read(),q=read(); TempTree::init(); BigTree::solve(); return 0;&#125;]]></content>
      <tags>
        <tag>主席树</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2019 影魔]]></title>
    <url>%2F2020%2F01%2F04%2FLoj-2019-%E5%BD%B1%E9%AD%94%2F</url>
    <content type="text"><![CDATA[单调栈 + 二维数点. 对于一组端点 $(l,r)$ ,考虑将它们可能的贡献放到区间 $[l+1,r-1]$ 的最大值的那个位置去计算. 即,在每个位置 $i$ ,考虑它作为区间 $[l+1,r-1]$ 最大值时产生的 $p_1,p_2$ 的贡献. 利用单调栈求出 $i$ 左边第一个比它大的位置 $L$ ,右边第一个比它大的位置 $R$ . 由于 $i​$ 要是区间内的最大值,所以选择的左端点 $\ge L​$, 右端点 $\le R​$ . 当左右端点分别选择了 $L,R​$ 时,会造成 $p_1​$ 的贡献. 当左端点选了 $L$ ,右端点在 $[i+1,R-1]$ 中时,或左端点在 $[L+1,i-1]$ 中,右端点选了 $R$ ,都会有 $p_2$ 的贡献. 而我们的询问是限制了左右端点的取值范围,相当于在平面上询问一个矩形内贡献之和. 每个 $i$ 的贡献是一个单点 $(L,R)$ ,以及两条线段 $(L,i+1\sim R-1),(L+1\sim i-1,R)$ . 将操作全部离线下来,用线段树在平面上二维数点即可,可以分别计算横的线段和竖的线段的贡献. 最后还要加上两个端点是相邻的情况造成的若干 $p_1$ 贡献. 时间复杂度 $O(n\log n)$ . 开始判 $R\neq n+1$ 的时候写成 $R\neq n-1​$ 了,居然还过了 80 分,调了好久. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;struct SegTree&#123; struct node &#123; int len; ll tag,sum; &#125;Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1] void pushup(int o) &#123; root.sum=lson.sum+rson.sum; &#125; void BuildTree(int o,int l,int r) &#123; root.sum=root.tag=0; root.len=r-l+1; if(l==r) return; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); &#125; void modify(int o,ll c) &#123; root.tag+=c; root.sum+=c*root.len; &#125; void pushdown(int o) &#123; if(root.tag) &#123; modify(o&lt;&lt;1,root.tag); modify(o&lt;&lt;1|1,root.tag); root.tag=0; &#125; &#125; void upd(int o,int l,int r,int L,int R,ll c) &#123; if(L&gt;r || R&lt;l) return; if(L&lt;=l &amp;&amp; r&lt;=R) return modify(o,c); int mid=(l+r)&gt;&gt;1; pushdown(o); if(L&lt;=mid) upd(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) upd(o&lt;&lt;1|1,mid+1,r,L,R,c); pushup(o); &#125; ll query(int o,int l,int r,int L,int R) &#123; if(L&gt;r || R&lt;l) return 0; if(L&lt;=l &amp;&amp; r&lt;=R) return root.sum; int mid=(l+r)&gt;&gt;1; pushdown(o); ll res=0; if(L&lt;=mid) res+=query(o&lt;&lt;1,l,mid,L,R); if(R&gt;mid) res+=query(o&lt;&lt;1|1,mid+1,r,L,R); return res; &#125;&#125;T;int n,m,p1,p2,a[MAXN],cnt=0;ll ans[MAXN&lt;&lt;1];struct Query&#123; int pos,c,l,r,id; Query(int pos=0,int c=0,int l=0,int r=0,int id=0):pos(pos),c(c),l(l),r(r),id(id) &#123;&#125; bool operator &lt; (const Query &amp;rhs) const &#123; return pos==rhs.pos?id&lt;rhs.id:pos&lt;rhs.pos; &#125;&#125;q[MAXN&lt;&lt;2];int stk[MAXN],tp,L[MAXN&lt;&lt;1],R[MAXN&lt;&lt;1];void init()&#123; a[0]=a[n+1]=n+1; stk[tp=1]=0; for(int i=1;i&lt;=n;++i) &#123; while(a[i]&gt;a[stk[tp]]) --tp; L[i]=stk[tp]; stk[++tp]=i; &#125; stk[tp=1]=n+1; for(int i=n;i&gt;=1;--i) &#123; while(a[i]&gt;a[stk[tp]]) --tp; R[i]=stk[tp]; stk[++tp]=i; &#125;&#125;void solve_x()&#123; cnt=0; for(int i=1;i&lt;=n;++i) &#123; if(L[i]) &#123; if(R[i]!=n+1) q[++cnt]=Query(L[i],p1,R[i],R[i],0); // (L,R) if(i+1&lt;=R[i]-1) q[++cnt]=Query(L[i],p2,i+1,R[i]-1,0); // (L,i+1 ~ R-1) &#125; &#125; for(int i=1;i&lt;=m;++i) &#123; q[++cnt]=Query(n,-1,1,R[i+n],i); if(L[i+n]-1) q[++cnt]=Query(L[i+n]-1,-1,1,R[i+n],i+m); &#125; sort(q+1,q+1+cnt); T.BuildTree(1,1,n); for(int i=1;i&lt;=cnt;++i) &#123; if(q[i].id==0) // update T.upd(1,1,n,q[i].l,q[i].r,q[i].c); else // query ans[q[i].id]+=T.query(1,1,n,q[i].l,q[i].r); &#125;&#125;void solve_y()&#123; cnt=0; for(int i=1;i&lt;=n;++i) &#123; if(R[i]!=n+1 &amp;&amp; L[i]+1&lt;=i-1) q[++cnt]=Query(R[i],p2,L[i]+1,i-1,0); // (L+1 ~ i-1 ,R) &#125; for(int i=1;i&lt;=m;++i) q[++cnt]=Query(R[i+n],-1,L[i+n],n,i); sort(q+1,q+1+cnt); T.BuildTree(1,1,n); for(int i=1;i&lt;=cnt;++i) &#123; if(q[i].id==0) // update T.upd(1,1,n,q[i].l,q[i].r,q[i].c); else // query ans[q[i].id]+=T.query(1,1,n,q[i].l,q[i].r); &#125;&#125;int main()&#123; n=read(),m=read(),p1=read(),p2=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); init(); for(int i=1;i&lt;=m;++i) L[i+n]=read(),R[i+n]=read(); solve_x(); solve_y(); for(int i=1;i&lt;=m;++i) printf("%lld\n",ans[i]+1LL*p1*(R[i+n]-L[i+n])-ans[i+m]); return 0;&#125;]]></content>
      <tags>
        <tag>树状数组</tag>
        <tag>离线</tag>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2018 单旋]]></title>
    <url>%2F2020%2F01%2F04%2FLoj-2018-%E5%8D%95%E6%97%8B%2F</url>
    <content type="text"><![CDATA[LCT. 先考虑插入操作,经过观察容易发现,一个点被插入后,要么成为它前驱的右儿子,要么成为它后继的左儿子. 且这两个位置中恰有一个位置是空的,所以插入时在 set 中询问一下前驱后继即可. 考虑旋转操作,经过观察容易发现,如果把最小值转到根,就是先把它的右子树接在它的父亲上,再让它成为根的父亲. 旋转最大值也差不多,把它的左子树接在它的父亲上,再让它成为根的父亲. 如果接下来要将它删除,就不用从根向它连边. 而其他部分的形态是不变的,于是每次操作只会连/断 $O(1)$ 条边,可以用 LCT 来实现这些操作. 即,用一棵 LCT 维护这棵树的形态,另开数组记录每个节点在原树中的左右儿子以及父亲,并记录原树当前的根. 每次要询问一个点的深度时,就在 LCT 上询问它与根的距离即可. 可以先将所有权值离散化,然后将每个节点的权值当做它的标号. 时间复杂度 $O(m\log m)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;struct LCT&#123; struct node &#123; int fa,ch[2],rev,siz; node()&#123;fa=ch[0]=ch[1]=rev=0,siz=1;&#125; &#125;Tree[MAXN];#define root Tree[x]#define lson Tree[root.ch[0]]#define rson Tree[root.ch[1]] void pushup(int x) &#123; root.siz=lson.siz+rson.siz+1; &#125; bool isroot(int x) &#123; return Tree[root.fa].ch[0]!=x &amp;&amp; Tree[root.fa].ch[1]!=x; &#125; void rotate(int x) &#123; int y=Tree[x].fa,z=Tree[y].fa; if(!isroot(y)) Tree[z].ch[Tree[z].ch[1]==y]=x; Tree[x].fa=z; int k=Tree[y].ch[1]==x; Tree[y].ch[k]=Tree[x].ch[k^1]; Tree[Tree[x].ch[k^1]].fa=y; Tree[x].ch[k^1]=y; Tree[y].fa=x; pushup(y); &#125; int stk[MAXN],tp; void inverse(int x) &#123; swap(root.ch[0],root.ch[1]); root.rev^=1; &#125; void pushdown(int x) &#123; if(root.rev) &#123; if(root.ch[0]) inverse(root.ch[0]); if(root.ch[1]) inverse(root.ch[1]); root.rev=0; &#125; &#125; void Splay(int x) &#123; stk[++tp]=x; for(int pos=x;!isroot(pos);pos=Tree[pos].fa) stk[++tp]=Tree[pos].fa; while(tp) pushdown(stk[tp--]); while(!isroot(x)) &#123; int y=Tree[x].fa,z=Tree[y].fa; if(!isroot(y)) (Tree[y].ch[1]==x)^(Tree[z].ch[1]==y)?rotate(x):rotate(y); rotate(x); &#125; pushup(x); &#125; void Access(int x) &#123; for(int y=0;x;y=x,x=Tree[x].fa) &#123; Splay(x); Tree[x].ch[1]=y; pushup(x); &#125; &#125; void makeroot(int x) &#123; Access(x); Splay(x); inverse(x); &#125; void split(int x,int y) &#123; makeroot(x); Access(y); Splay(y); &#125; void link(int x,int y) &#123; if(!x || !y) return; makeroot(x); Tree[x].fa=y; &#125; void cut(int x,int y) &#123; if(!x || !y) return; split(x,y); Tree[x].fa=Tree[y].ch[0]=0; pushup(y); &#125; int query(int x,int y) &#123; split(x,y); return Tree[y].siz; &#125; LCT()&#123;tp=Tree[0].siz=0;&#125; &#125;T;int n=0,m,tp[MAXN],val[MAXN],key[MAXN];int rt,fa[MAXN],ch[MAXN][2];set&lt;int&gt; s;set&lt;int&gt;::iterator it;int main()&#123; m=read(); for(int i=1;i&lt;=m;++i) &#123; tp[i]=read(); if(tp[i]==1) val[++n]=key[i]=read(); &#125; sort(val+1,val+1+n); for(int i=1;i&lt;=m;++i) if(tp[i]==1) key[i]=lower_bound(val+1,val+1+n,key[i])-val; for(int i=1;i&lt;=m;++i) &#123; int ans; if(tp[i]==1) &#123; int x=key[i]; if(s.empty()) rt=x,ans=1; else &#123; it=s.lower_bound(x); int r=(it==s.end())?0:*it; int l=(it==s.begin())?0:*(--it); if(l &amp;&amp; !ch[l][1]) &#123; ch[l][1]=x; fa[x]=l; T.link(l,x); &#125; else &#123; ch[r][0]=x; fa[x]=r; T.link(r,x); &#125; ans=T.query(x,rt); &#125; s.insert(x); &#125; else if(tp[i]==2 || tp[i]==4) &#123; int x=*s.begin(); ans=T.query(x,rt); int y=ch[x][1]; T.cut(x,y); T.cut(x,fa[x]); T.link(fa[x],y); fa[y]=fa[x],ch[fa[x]][0]=y,fa[x]=0; if(x==rt) rt=y; if(tp[i]==2) &#123; if(x!=rt) &#123; fa[rt]=x; ch[x][1]=rt; T.link(x,rt); rt=x; &#125; &#125; else s.erase(x); &#125; else &#123; int x=*s.rbegin(); ans=T.query(x,rt); int y=ch[x][0]; T.cut(x,y); T.cut(x,fa[x]); T.link(fa[x],y); fa[y]=fa[x],ch[fa[x]][1]=y,fa[x]=0; if(x==rt) rt=y; if(tp[i]==3) &#123; if(x!=rt) &#123; fa[rt]=x; ch[x][0]=rt; T.link(x,rt); rt=x; &#125; &#125; else s.erase(x); &#125; printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>STL</tag>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20200103]]></title>
    <url>%2F2020%2F01%2F03%2Ftest20200103%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX1+cWGBUwwkP/aT5CxW0m5FzY1xJXVZyng5GJosVwqxlSem8oVNMtceTdqCWyOL5XoTg781vfA/xeRk2+OFuaJG1PfV69ckJU77rMQTxTClPbCdvMvxY5VM8wfPL1a+D3P7545zF7L/bux4EDylMe7BnUFqaTtq59bsljP+WdMl4+Z7Hjd/dFZC05i+6D9zsGwutXf5aH8yTqE4htC6kEMM3Kt3EfYmvUR6fGXQAxvYh+/mmsnWU1zPEU4KrVGhIDNCnRNtBUGK302Wq9CvehGten5Iyukx1K+WPi24Gs6A7OJ2X/f/ff4nAuK1+FS+zHUcbjmjEdjRXsfvHLjY3JE/IhdcJPoYCVtWMqfZl4qLhWQLLnLYoKEFis9fOUyRRA+CPK+bDCOL2Tt7dVqlypx0UQkV6qgTfyYWY2BKLDTA3Ks/P4D0qC33T68qHsFEgbg/gVEdSxX6n0aNOVisMV4ODaPtw3Ag0Kl1y7LeVPZUmbmbtfhEl4bXtaj/oBW5ic2dTFBxYPVCp92Af0VjNSFHizsOyh/hdyKMyR6DDuSwJxaPaHBxL8jKLJjwOd+rDQ+00NnRszly7sEm04EQVAX+CAodjL5A910EqKGRzMoKETt4ic+cAB+EHV67xiBGaL1dvq6RC7NmlnAughZ51gi1mVin2yTOvs/ToeJ7v9oxLv/+sN1CFvwIcfcR/rfLQ91skSxdnS5CaCkjxI9CZkebo/yVaYhzTkPmlOWK9sceBtqXXznmc24Zfd0STssCl7aTG1TvHbf0KinmC2fvzGr9DvefRtX1j5OKVaHzR9L3QnPlljWLquFAau6r+BUwUrSiITpqFwVh4dCCmXqp4N/mPhlLMi7zSJ6Kgxn2qay47uhi/aOvSXuwRSTndX3nnQogWBKKeuNtUBIDc+0thfQMZI+MgAhoxxUduUcvREduYPIl0+7iawGc3+djfs7kxCPtNw6qWc8+adgrP7/sFJA4Dc+X6XXbkhzo+BK5J/Xgu3X7094psW2ijn+bJt4fzvIUM1xouXxT/oCy0FzCC2oCo8c1bz8hwLW6c/ko/QXqknZ/hhVQyLNCi0EQmdrTzWm4lm7fguHMzmKarjh4UyNJwaSzEoFVY7axwRzV9HJtfm5qO4G3aGzeBX4XT3rdQmLMcQexqzfcWD8Ayhfyuz2AfdL6CD2bVjfRAjUlU63lg4Ql8NaI4dqNGsdpA2ElXgAuw/YG8E+RAOqPLfkcim4egLNZN8VN354ZCiBuxPB9BjXsJEBdYkUXoXA82olTlzgR90km+zxBcPpTVbcihclTx8DqXXwTL/tAdww7gKmBBgTtLOLr5R8vWdpK4k7oa+C+rClB9c7fG09vRgz4bYPPm4JsbYFl+2SfZxOOewdAPoWIj4abv+4fjxX/0YXKnNz7+aaI0Wgq4F2R1DxvTRFFwmxzvH0Y60uptRHDtl4sg6NQb4aLgxwaSc2vVU20KB+FYFNjrSjAGu7UDjD8cR3aV+MtM2YRUaL+O5CPDN5JhMgrHzjzUm4eMAcZBP4clyyDBwwl6dRexMSCayIu4u7E8GX7qm20sG23SdiJEOfYscGyQfO3K6F0uePJS7uKO9XUZzGCykn231CLQMIsVjv2dr+tJqjDVa92wB7yOOuA2cuJnZFuDQl9cGb7woB6Dsat7lvJybYtupumnXeZDMZvLGtrE/6usBozVnR/9LawrNf9sIAgmowRVPAaUTR7A6pfr0fV3CezZuuJYYvX50HUZWNkkyGOEuR+oCTlL+OR+Kr+0m7G7ED6OTzl+Qg1IHv8q2o4+E/KZf8HRW681bxNxRFS+AOT3HnLl0zpCITKHmk4JsQbqyfeqKN6GyWnHrPESaAeDJ34KWqOtL0RGu2LK9Ivi2yJmRHbcljHXr10bx0pcOQ/XunKlJ2cHFr9r2YxUFeQgF3RfcyjYoiZwAaxeeXdzIelwTCxPFUvOmCy9l4P8KJRMLLVymjbZxpzf2qUoHv9sKLEjZ9r0Pv6Ixy7ImsEerKfKEAoJltC897ocmrlO+hBjjV1X5urXWdwfl1HdUThxSAYodumUNw5Tt+EaU72+CyXeXlIjx4n4MmkbbLxb7w1BPZQhF89Rx27yx784qEBM7qkYuV9+1ExceiAvBfLt7gvkVdpiQ6BuUNCJDO6Qx65YPjh6TGcs0l8TbB0s+kNGEQrpe5F8zc+3qy3xABZGccycRB8xZN+MOQlGOeaWTe0QXKnGyUQwAcpo/bVrVT92ZunPblhB+fqT0ldm8O4kpIb7RIpg4HnDEq4G5XY/ZYdxeGleKQL3cL3Nyv+4StmP8VjUbPYbMY0qf+QoDUg+JOgPFJYGqyVs0ZOP9pBLe0JyTQQP7fQYacZ8A8lUS/1I803i08vNsjIzmgdNcROadMr7FE8hg8fpR2vPS2+pib5uAVqRyV2NgIZS1zOx8NuO/+gqra9SuZo5hyANLb8+oBqlTSJrM6Cp7aUtifXx50aicWza/53R2ccGXnogwfEHSG2e44fOOjA75PmxwxHMlUaXLI6Dg93O0VpaC6orlAmoARtFF84YsHJ6t0IK+2XdApvc01WxRWfsy58KieW6V7JEeMKbdg5402KnuvuRHzTjwBODAVip05VBgjFZLa4t+fK1f2X80ojV1fto6FhNGdQ9h8NFy7Nfxg9CJL3Z+2nLRgtJn0zGzit7U3LikR9Bp7mSKtaKEGdt/s8t09Goz/c2Aj0G3VnWz6Z2xm2YP/kQK0XZlSZwxHY8mC+iYddDGiW4cISIqoXhgCkA8CrNqUdHj4qrtzzqufBhpbLqCWJkAYEquDdqbV0IWO1wU9vSqYIVk5XdBp4b4P6RaJIFX1gSw249OO1vjawTKIdSK982k52Klw1XNQh6QduBQNPpr8a43X8v1q/Zd/2WX9+PjD3jIOmHqIdKikRVhMZeYaUClG39+dbjc4A0KwvEwWi5CT/FHs5zZpD6mtiAYY2+P09YVvHVx2pxqZtRQ05Xp86TbT6ZMqDHvIepqPY5pP3conZ4lc+OUaPuKTEZ1e2EO3oBSxOsTygkIqYJ9Qy6RL6k9vu+k+PCRxfe8JEfRqLdcs2uAy5OmIPxS32VOR36kf71lTc25RAuOuEqFmLOcsgz8ghF+fvk6AE6eKB0/aHUO67bxxcTwIqEVBQ3U9kcXkr+ml2VrjoQVD+Kygn5i5+IAwz6GHVu/XV7kolgidGQvHKYw174B9ZejpcvXADgiv9ZQMG6l4rYHuuq9gYpMIJEsPCpepBVYf3L7GQyfMmy7ag5OSatcwgZHdJbJCqco4mJZ08Hy1LTLfdQeESYxF6JULfaqaULFJkck02vxGvfp7xbOKnqI92pNwriPrDLHTJ/Dt/RNNe85ohVuQdvG9Sn2jw1pJbj5iue2rgBPTPnwTFP5NfHN3LI5n5uOXoHMOKKDzpqDC937pQ3daBTg4fnUudTb2eazV6cR1yPcKBmPlFT7A5AXtzq01rHNoeINHAzkZQ5TMlMeqdFv0+MAsEQfMq+q+WaednXStE6oO4K82Wh0K04lrHqRxTTfq9vpI91Tdsk9FDqCabG7doR4TDXD6dRlCYMkaWzaep2Ncf4YU6u6zXpgnOoXbbfrzgE58mUSfBsCI4nGx5RNLU+pWbLWA5sNuf0KN+K/i0W7H3gKMTwZfhZ7hvc8t4P412I2/3h/m8NhPKMm54DM03/PKaydqGfKlGUPpTC88FDiFFb1MsgUiIlBvVew9SUwZNq8Vw23xsITliVL1Z+xiTuj1lPE7SPG3yYOevZ+55bnAwYpgGyvb3g9dvSJ5IWSFwFV6UKxviYh7uJdFtAItey749hXCgW3zSCIlRtWZXJRBXb1lRD3RPE33LAxcTU+wCGBH1oPu/9Zxqohz3HJR0f7z1InPwmS0lzjjlfv0nwQu3aPz/fhoN1cJeMgQt6SE8GFMZ7etPDCFzGC1tDDDuZglFlg4QQkE/eacbV49tde5m7FqT8Zi9m5o3NeQQ4fmwmR2caZA2503qOwgsqh/L2g1WOOpd7nzNed6I2RyG8QBfrIrT/YHmUMbTAqPK+5QveITl9LDy93tGgPkIqqFiAVAPtJRCrAxLf/XEgY0XtNN9qcPJCSvrCImSVthdM2hqJHolPNI3izTsNOGLEA0dXxKVzrkk8NuvOQ1egZHuaLZ6/U9ex10TuEutTlfMduB1FzyC4dwUs28bburYUw3VGJUlzTu+bxaqnbp7vBU2LMrBSPEMUMzD3f5UaA+uMyGEn+HtsjYaafCES2wxKVc2pxW9Faxo+epbIYiLguMD81R3EzSxW+TZQZQmgMw0JGjjzm47uY//ndb8oXpAItjfGpAN660Jnsa65RshIq42GjLZXNeYcAD6hvHcRgFnL2rhEs7B6ORgFHQfBVkAC5paAIttH9Fnr6/SanNztw/nydGzTQpSaUWRV2fH/Y2Md1lY5XrcEuriqwnOyO0tW3vA1sCjbshXpMJCk2jA4lC25V7lj/l0pZqyh7Ii8kEO60ugjynPerB/cFdWLqovUNwR9hlDl/LRmXcjBqmasPe+4sVeJcxZ9EWZ8UW3MfF1TZ+0aNFQGMxY= var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>STL</tag>
        <tag>多项式</tag>
        <tag>位运算</tag>
        <tag>网络流</tag>
        <tag>test</tag>
        <tag>斯特林数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2004 硬币游戏]]></title>
    <url>%2F2020%2F01%2F02%2FLoj-2004-%E7%A1%AC%E5%B8%81%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[字符串 hash + 高斯消元. 设第 $i$ 个串的答案为 $P(i)$ ,如果直接对于 AC 自动机上每个节点列出方程高斯消元,复杂度 $O((nm)^3)$ ,过不去. 由于只需要求出 $n$ 个终止节点的 $P(i)​$ ,可以尝试优化,减少方程的个数. 只需要求出向后匹配 $m$ 个字符,想匹配 $s_i$ ,却提前匹配到 $s_j​$ 的贡献. 这要求 $s_j$ 长度为 $m$ 的后缀与 $s_i$ 长度为 $m$ 的前缀相同,用字符串 hash 判断,于是 AC 自动机也可以省掉了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=315;typedef unsigned long long ull;const ull Base=137;ull Hash[MAXN][MAXN],pw[MAXN];ull calc(int x,int l,int r)&#123; return Hash[x][r]-Hash[x][l-1]*pw[r-l+1];&#125;double bin[MAXN],a[MAXN][MAXN];void Gauss(int n)&#123; for(int i=1;i&lt;=n;++i) &#123; for(int j=i+1;j&lt;=n;++j) if(fabs(a[j][i])&gt;fabs(a[i][i])) swap(a[i][i],a[j][i]); for(int j=i+1;j&lt;=n;++j) &#123; double tmp=a[j][i]/a[i][i]; for(int k=i;k&lt;=n+1;++k) a[j][k]-=a[i][k]*tmp; &#125; &#125; for(int i=n;i&gt;=1;--i) &#123; a[i][n+1]/=a[i][i]; for(int j=i-1;j&gt;=1;--j) a[j][n+1]-=a[j][i]*a[i][n+1]; &#125;&#125;int n,m;char buf[MAXN];int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) &#123; scanf("%s",buf+1); for(int j=1;j&lt;=m;++j) Hash[i][j]=Hash[i][j-1]*Base+buf[j]-'A'; &#125; bin[0]=1.0; pw[0]=1; for(int i=1;i&lt;=m;++i) bin[i]=bin[i-1]*0.5,pw[i]=pw[i-1]*Base; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=n;++j) for(int k=1;k&lt;=m;++k) if(calc(i,1,k)==calc(j,m-k+1,m)) a[i][j]+=bin[m-k]; for(int i=1;i&lt;=n;++i) &#123; a[i][n+1]-=bin[m]; a[n+1][i]=1; &#125; a[n+1][n+2]=1; Gauss(n+1); for(int i=1;i&lt;=n;++i) printf("%.10lf\n",a[i][n+2]); return 0;&#125;]]></content>
      <tags>
        <tag>概率/期望</tag>
        <tag>hash</tag>
        <tag>高斯消元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2461 完美的队列]]></title>
    <url>%2F2020%2F01%2F02%2FLoj-2461-%E5%AE%8C%E7%BE%8E%E7%9A%84%E9%98%9F%E5%88%97%2F</url>
    <content type="text"><![CDATA[分块 + two pointer. 一个数被加入到队列 $i$ 中后,队列 $i$ 再进行 $a_i$ 次 push 操作,这个数就会被 pop 出来. 考虑对于每次操作 $j$ ,求出一个 $ed(j)$ ,表示在进行了 $(j,ed(j)]$ 内的操作后,操作 $j$ 加入的每个 $x$ 都被 pop 出来了. 对于同一个 $x$ ,将 $(j,ed(j)]$ 这些区间取并,就可以得到这个 $x$ 对每次询问的贡献,那么只需要设法求出每个 $ed(j)$ . 将序列每 $\sqrt n$ 个元素分成一块,对于每次操作 $(l_j,r_j,x_j)$ ,分别考虑整块部分的 $i$ 和边角部分的 $i$ 对 $ed(j)$ 的贡献. 枚举每个整块,对于包含了这一块的所有 $j$ ,每个该块中的 $x_j$ 被完全弹出的时间是递增的,可以用 two pointer 处理. 记录两个指针 $j,k$ ,表示当前考虑了操作 $(j,k]$ 带来的影响. 设 $b(i)$ 表示第 $i$ 个队列再被 push $b(i)$ 次, $x_j$ 就会被弹出,记录一个 $cov$ 表示这一块被整体 pop 了 $cov$ 次. $k$ 增大,加入一个操作时,若它完整覆盖了该块, $cov$ 增加 $1$ ,否则,将这次操作与这一块的交集部分的 $b(i)$ 都减少 $1$ . $b(i)$ 初始都为对应的 $a(i)$ ,维护一个 $mx=\max b(i)$ ,当 $mx\le cov$ 时,说明已被完全弹出, $k$ 可以去更新 $ed(j)$ . $j$ 增大,撤销一个操作时,维护方法类似,将 $cov$ 减少 $1$ ,或将交集部分的 $b(i)$ 都增加 $1$ . 每次修改 $cov$ 是 $O(1)$ 的,修改交集部分的 $b(i)$ 是 $O(\sqrt n)$ 的. 每个操作最多完全覆盖 $O(\sqrt n)$ 个整块,最多与 $2$ 个整块有交集,但未完全覆盖,于是这部分时间复杂度为 $O(m\sqrt n)$ . 再来考虑边角部分的贡献,需要在处理整块贡献的同时维护出一些信息. 设 $s(i)$ 表示前 $i$ 次操作完全覆盖了当前块 $s(i)$ 次. 设 $c(i)$ 表示第 $i$ 个完全覆盖当前块的操作编号. 设 $d(i)$ 表示第 $i$ 个与当前块有交集,但未完全覆盖的操作编号. 设 $e(i)$ 表示第 $e(i)$ 次操作结束后,恰好完全覆盖了该块 $i$ 次. 枚举块内每个位置 $i​$ ,考虑它作为边角部分被覆盖的贡献. 用 two pointer 维护两个指针 $j,k$ ,表示当前考虑了操作 $(d(j),d(k)]$ 的影响,并维护 $mx$ 表示 $i$ 被覆盖的次数. 向后跳时,整块覆盖的次数可以由前缀和 $s$ 算出,交集部分覆盖的次数可以直接由 $d$ 存储的操作编号判断. 当 $mx\le 0$ 时,说明位置 $i$ 上的 $x_j$ 已经被 pop 出去了,此时可以更新答案. 若 $mx=0$ ,说明恰好是由操作 $d(k)$ 弹出去的,否则是 $d(k)$ 之前整块操作弹出的,用维护的 $c,e$ 数组可以找出答案. 设第 $i$ 块的数组 $d$ 大小为 $t_i$ ,则这部分的时间复杂度为 $O(\sum \sqrt n\cdot t_i)=O(\sqrt n\cdot \sum t_i)=O(m\sqrt n)$ . 于是整个算法的时间复杂度为 $O(m\sqrt n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;void upd(int &amp;x,const int &amp;y)&#123; x=max(x,y);&#125;const int MAXN=2e5+10;int n,m,a[MAXN],b[MAXN],c[MAXN],cn,d[MAXN],dn,e[MAXN],s[MAXN];int B,lp[MAXN],rp[MAXN],bel[MAXN];int l[MAXN],r[MAXN],x[MAXN],ed[MAXN],ans[MAXN];vector&lt;pair&lt;int,int&gt; &gt; vec[MAXN];int main()&#123; n=read(),m=read(); B=sqrt(n); for(int i=1;i&lt;=n;++i) &#123; a[i]=read(); bel[i]=(i-1)/B+1; lp[bel[i]]=(bel[i]-1)*B+1; rp[bel[i]]=bel[i]*B; &#125; rp[bel[n]]=n; for(int i=1;i&lt;=m;++i) &#123; l[i]=read(); r[i]=read(); x[i]=read(); &#125; for(int id=1;id&lt;=bel[n];++id) &#123; int L=lp[id],R=rp[id],cov=0,mx=0; for(int i=L;i&lt;=R;++i) upd(mx,b[i]=a[i]); cn=dn=0; for(int j=1,k=0;j&lt;=m;++j) &#123; if(l[j]&lt;=L &amp;&amp; R&lt;=r[j]) --cov; else if(l[j]&lt;=R &amp;&amp; r[j]&gt;=L) &#123; int li=max(L,l[j]),ri=min(R,r[j]); for(int i=li;i&lt;=ri;++i) --b[i]; mx=0; for(int i=L;i&lt;=R;++i) upd(mx,b[i]); &#125; while(k&lt;=m &amp;&amp; mx&gt;cov) &#123; ++k; if(l[k]&lt;=L &amp;&amp; R&lt;=r[k]) ++cov; else if(l[k]&lt;=R &amp;&amp; r[k]&gt;=L) &#123; int li=max(L,l[k]),ri=min(R,r[k]); for(int i=li;i&lt;=ri;++i) --b[i]; mx=0; for(int i=L;i&lt;=R;++i) upd(mx,b[i]); &#125; &#125; s[j]=s[j-1]; if(l[j]&lt;=L &amp;&amp; R&lt;=r[j]) upd(ed[j],k),s[c[++cn]=j]++; else if(l[j]&lt;=R &amp;&amp; r[j]&gt;=L) d[++dn]=j,e[dn]=cn; &#125; for(int i=L;i&lt;=R;++i) &#123; mx=a[i]; for(int j=1,k=0;j&lt;=dn;++j) &#123; mx+=s[d[j]]-s[d[j-1]]; if(l[d[j]]&lt;=i &amp;&amp; i&lt;=r[d[j]]) &#123; ++mx; while(k&lt;dn &amp;&amp; mx&gt;0) &#123; ++k; mx-=s[d[k]]-s[d[k-1]]; mx-=(l[d[k]]&lt;=i &amp;&amp; i&lt;=r[d[k]]); &#125; if(mx&gt;0) &#123; if(mx&gt;s[m]-s[d[k]]) ed[d[j]]=m+1; else upd(ed[d[j]],c[e[k]+mx]); &#125; else &#123; if(l[d[k]]&lt;=i &amp;&amp; i&lt;=r[d[k]]) upd(ed[d[j]],mx&lt;0?c[e[k]+mx+1]:d[k]); else upd(ed[d[j]],c[e[k]+mx]); &#125; &#125; &#125; &#125; &#125; for(int i=1;i&lt;=m;++i) &#123; vec[x[i]].push_back(make_pair(i,1)); vec[x[i]].push_back(make_pair(ed[i],-1)); &#125; for(int i=1;i&lt;=100000;++i) &#123; sort(vec[i].begin(),vec[i].end()); int tmp=0,siz=vec[i].size(); for(int j=0;j&lt;siz;++j) &#123; int cur=tmp; tmp+=vec[i][j].second; for(int k=j+1;k&lt;siz &amp;&amp; vec[i][k].first==vec[i][j].first;++k) tmp+=vec[i][k].second,j=k; if(cur==0 &amp;&amp; tmp&gt;0) ++ans[vec[i][j].first]; else if(cur&gt;0 &amp;&amp; tmp==0) --ans[vec[i][j].first]; &#125; &#125; for(int i=1;i&lt;=m;++i) printf("%d\n",ans[i]+=ans[i-1]); return 0;&#125;]]></content>
      <tags>
        <tag>分块</tag>
        <tag>two pointer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2845 Innophone]]></title>
    <url>%2F2020%2F01%2F01%2FLoj-2845-Innophone%2F</url>
    <content type="text"><![CDATA[分块 + 斜率优化. 选择的 $a$ 一定是某个出现过的 $x$ ,或者 $a$ 大于所有的 $x$ . 否则将 $a$ 增大到下个出现过的 $x$ ,答案不会变劣, $b$ 的选择同理. 于是可以从小到大枚举 $a​$ ,只需要考虑 $b​$ 的选择对 $x&lt;a​$ 的点贡献的影响. 将所有 $x&lt;a$ 的点按照 $y​$ 从小到大排序. 若共有 $cnt$ 个点的 $x&lt;a$ ,那么选择第 $i$ 个点的 $y$ 作为 $b$ ,带来的贡献是 $v_i=(cnt-i+1)\cdot y_i$ . 随着 $a$ 的增大, $x&lt;a$ 的点会不断增多,每加入一个新点,它后面的点 $v_i$ 不变,前面的点的 $v_i$ 会加上 $y_i$ . 如果直接用平衡树打标记,修改后没法得到区间内新的 $\max v_i​$ ,考虑分块来处理. 若某一块整体被加了 $tag$ 次,那么块内真正的贡献为 $v_i’=tag\cdot y_i+v_i$ ,变形得到 $v_i=-tag\cdot y_i+v_i’$ . 即用一条斜率为 $-tag​$ 的直线去截块内所有点,要最大化截距,于是可以维护出块内所有点的上凸壳. 斜率只会变小,被截到的点只会往右侧移动,那么不用在凸壳上二分,记录一下当前被截到的是哪个点即可. 先算出所有点都被插入时,每个点分别在哪一块,插入时直接插到那一块中即可. 插入点时,重构一下插入的那一块的上凸壳,修改前面所有非空块的 $tag​$ ,并重新计算它们的贡献. 时间复杂度 $O(n\log n+n\sqrt n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1.5e5+10,S=400;struct v2&#123; ll x,y; int id; v2 operator - (const v2 &amp;rhs) const &#123; return (v2)&#123;x-rhs.x,y-rhs.y&#125;; &#125; ll operator * (const v2 &amp;rhs) const &#123; return x*rhs.y-y*rhs.x; &#125;&#125;p[MAXN],q[MAXN],pt[MAXN];bool cmpy(const v2 &amp;A,const v2 &amp;B)&#123; return A.y&lt;B.y;&#125;bool cmpx(const v2 &amp;A,const v2 &amp;B)&#123; return A.x&lt;B.x;&#125;int n,B,bel[MAXN],vis[MAXN];struct Block&#123; int lp,rp,cnt,tag,tp,pos; ll res; v2 stk[S]; Block()&#123;cnt=tag=res=0;&#125; ll calc(v2 cur) &#123; return cur.x*tag+cur.y; &#125; void ReBuild(int x) &#123; if(tag) &#123; for(int i=lp;i&lt;=rp;++i) if(vis[i]) pt[i].y+=pt[i].x*tag; tag=0; &#125; for(int i=lp;i&lt;x;++i) if(vis[i]) pt[i].y+=pt[i].x; vis[x]=1,++cnt; tp=0; for(int i=lp;i&lt;=rp;++i) if(vis[i]) &#123; if(tp &amp;&amp; pt[i].x==stk[tp].x &amp;&amp; pt[i].y&lt;=stk[tp].y) continue; while(tp&gt;=2 &amp;&amp; (pt[i]-stk[tp-1])*(stk[tp]-stk[tp-1])&lt;=0) --tp; stk[++tp]=pt[i]; &#125; pos=1; while(pos+1&lt;=tp &amp;&amp; calc(stk[pos])&lt;calc(stk[pos+1])) ++pos; res=calc(stk[pos]); &#125; void upd() &#123; if(!cnt) return; tag++; while(pos+1&lt;=tp &amp;&amp; calc(stk[pos])&lt;calc(stk[pos+1])) ++pos; res=calc(stk[pos]); &#125;&#125;block[S];void ins(int x)&#123; pt[x].x=pt[x].y=p[x].y; for(int i=x+1;i&lt;=block[bel[x]].rp;++i) if(vis[i]) pt[x].y+=pt[x].x; for(int i=bel[x]+1;i&lt;=bel[n];++i) pt[x].y+=pt[x].x*block[i].cnt; block[bel[x]].ReBuild(x); for(int i=1;i&lt;bel[x];++i) block[i].upd();&#125;ll query()&#123; ll res=0; for(int i=1;i&lt;=bel[n];++i) res=max(res,block[i].res); return res;&#125;int main()&#123; n=read(); B=sqrt(n); for(int i=1;i&lt;=n;++i) &#123; p[i].x=read(),p[i].y=read(); bel[i]=(i-1)/B+1; block[bel[i]].lp=(bel[i]-1)*B+1; block[bel[i]].rp=bel[i]*B; &#125; block[bel[n]].rp=n; sort(p+1,p+1+n,cmpy); for(int i=1;i&lt;=n;++i) p[i].id=i,q[i]=p[i]; sort(q+1,q+1+n,cmpx); ll ans=q[1].x*n; for(int i=1,j=0;i&lt;=n;++i) &#123; while(j+1&lt;=n &amp;&amp; q[j+1].x==q[i].x) ins(q[++j].id); i=j; ans=max(ans,q[i+1].x*(n-i)+query()); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>分块</tag>
        <tag>斜率优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 6499 颜色]]></title>
    <url>%2F2020%2F01%2F01%2FLoj-6499-%E9%A2%9C%E8%89%B2%2F</url>
    <content type="text"><![CDATA[分块 + bitset + ST 表. 对序列分块,用 bitset 来合并这些区间. 每一块开一个 bitset ,每次合并两个块需要 $O(\frac n w)$ 的时间,比边角部分的暴力处理劣,需要优化. 数字种类是可重复贡献的,可以用 ST 表来快速合并多个块,即设 $f(i,j)$ 表示 $[i,i+2^j-1]$ 这些块合并后的 bitset . 记块大小为 $S$ ,预处理 ST 表的时间复杂度为 $O(\frac{n^2}{Sw}\log \frac{n}{S})$ ,单次询问的时间复杂度为 $O(S+\frac{n}{w})$ . 空间复杂度为 $O(\frac{n^2}{Sw} \log \frac n S)$ . 时间和空间限制都比较紧,可以手写 bitset ,并把 $S$ 设置得稍大一点. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10,S=1400,T=73,K=9;int n,m,p,a[MAXN],b[MAXN],cnt;struct Bitset&#123; unsigned int s[MAXN/32+2]; void set(unsigned int x) &#123; s[x&gt;&gt;5]|=1u&lt;&lt;(x&amp;31); &#125; int count() &#123; int ans=0; for(int i=0;i&lt;=cnt;++i) ans+=__builtin_popcount(s[i]); return ans; &#125; void clear() &#123; memset(s,0,sizeof s); &#125;&#125;f[T][K],ans,tmp;Bitset merge(const Bitset &amp;A,const Bitset &amp;B)&#123; for(int i=0;i&lt;=cnt;++i) tmp.s[i]=A.s[i]|B.s[i]; return tmp;&#125;int Log[T],tot,bel[MAXN],lp[T],rp[T],lastans=-1;void init()&#123; for(int i=1;i&lt;=n;++i) &#123; bel[i]=(i-1)/S+1; lp[bel[i]]=(bel[i]-1)*S+1; rp[bel[i]]=bel[i]*S; f[bel[i]][0].set(a[i]); &#125; rp[bel[n]]=n,tot=bel[n]; Log[1]=0; for(int i=2;i&lt;=tot;++i) Log[i]=Log[i&gt;&gt;1]+1; for(int j=1;j&lt;=Log[tot];++j) for(int i=1;i+(1&lt;&lt;j)-1&lt;=tot;++i) f[i][j]=merge(f[i][j-1],f[i+(1&lt;&lt;(j-1))][j-1]);&#125;void query(int L,int R)&#123; if(bel[L]+1&gt;bel[R]-1) &#123; for(int i=L;i&lt;=R;++i) ans.set(a[i]); &#125; else &#123; for(int i=L;i&lt;=rp[bel[L]];++i) ans.set(a[i]); int l=bel[L]+1,r=bel[R]-1,k=Log[r-l+1]; ans=merge(ans,f[l][k]); ans=merge(ans,f[r-(1&lt;&lt;k)+1][k]); for(int i=lp[bel[R]];i&lt;=R;++i) ans.set(a[i]); &#125;&#125;int main()&#123; n=read(),m=read(),p=read(); for(int i=1;i&lt;=n;++i) a[i]=b[i]=read(); sort(b+1,b+1+n); cnt=unique(b+1,b+1+n)-b-1; for(int i=1;i&lt;=n;++i) a[i]=lower_bound(b+1,b+1+cnt,a[i])-b-1; cnt=(cnt-1)&gt;&gt;5; init(); for(int i=1;i&lt;=m;++i) &#123; ans.clear(); int k=read(); for(int j=1;j&lt;=k;++j) &#123; int L=read(),R=read(); if(p &amp;&amp; lastans!=-1) &#123; L=(L^lastans)%n+1; R=(R^lastans)%n+1; if(L&gt;R) swap(L,R); &#125; query(L,R); &#125; printf("%d\n",lastans=ans.count()); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>分块</tag>
        <tag>bitset</tag>
        <tag>ST表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 2957 楼房重建]]></title>
    <url>%2F2019%2F12%2F30%2Fbzoj-2957-%E6%A5%BC%E6%88%BF%E9%87%8D%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[分块. 简单转化一下题意,就是求有多少个位置的斜率,在对应前缀中是严格最大的. 每一块维护 $len(x)$ 表示若第一个选中的是块内第 $x​$ 个元素,则该块内总共被选的个数. 为了找出块内是哪个元素被选中,还要对每一块维护前 $x​$ 个数中的最大值 $mx(x)​$ . 修改时将那一块重构一下,回答询问时从第一块开始跳,二分找出下一块中第一个选中的位置. 每跳一块,当前的数就会和块内的最大值取 $\max$ . 设块的大小为 $S$ ,则单次操作的时间复杂度为 $O(S+\frac{n}{S}\cdot\log_2 S)$ ,需要手动调下参数. 为了避免精度出现问题,可以把分子分母记下来,每次比较的时候比较两个分数. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10,S=1024;int n,m,B,bel[MAXN];int lp[S],rp[S],cnt[S][S];double k[MAXN],mx[S][S];void ReBuild(int x)&#123; int tot=0; double cur=0; for(int i=lp[x];i&lt;=rp[x];++i) &#123; cnt[x][i-lp[x]+1]=tot; if(k[i]&gt;cur) cur=k[i],++tot; mx[x][i-lp[x]+1]=cur; &#125; for(int i=lp[x];i&lt;=rp[x];++i) cnt[x][i-lp[x]+1]=tot-cnt[x][i-lp[x]+1];&#125;int main()&#123; n=read(),m=read(); B=1000; for(int i=1;i&lt;=n;++i) &#123; bel[i]=(i-1)/B+1; lp[bel[i]]=(bel[i]-1)*B+1; rp[bel[i]]=bel[i]*B; &#125; rp[bel[n]]=n; for(int t=1;t&lt;=m;++t) &#123; int x=read(),y=read(); k[x]=(double)(y)/(double)(x); ReBuild(bel[x]); int ans=0; double tmp=0; for(int i=1;i&lt;=bel[n];++i) &#123; int pos=0,L=1,R=rp[i]-lp[i]+1; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(mx[i][mid]&gt;tmp) pos=mid,R=mid-1; else L=mid+1; &#125; if(pos) &#123; ans+=cnt[i][pos]; tmp=mx[i][rp[i]-lp[i]+1]; &#125; &#125; printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 6504 Convex]]></title>
    <url>%2F2019%2F12%2F30%2FLoj-6504-Convex%2F</url>
    <content type="text"><![CDATA[回滚莫队. 若直接用莫队处理,插入时需要先二分找出它的前驱后继,时间复杂度 $O(n\sqrt n \log n)$ . 但删除是不需要二分查找的,用链表维护好它的前驱后继,直接断掉就可以了. 于是我们可以用回滚莫队来做,就只有删除和撤销两个操作. 具体来说,把所有询问按照左端点所在块为第一关键字,右端点为第二关键字排序. 对于所有左端点所在块相同的询问,按照右端点递减的顺序一起处理. 初始时将左端点设为该块最左侧,右端点设为 $n$ ,处理询问时,将左右端点移过来,回答后再将左端点移回去. 移回去时,暴力撤销移过来的每步操作即可,切换块时,把右端点移回 $n$ ,左端点移到下一个块的最左侧. 预处理出 $1\sim n$ 形成的凸包中,每个点的前驱后继,跑莫队时就只有删除和撤销操作了. 时间复杂度 $O(n\log n+n\sqrt n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1.5e5+10;struct v2&#123; int x,y,id; ll operator * (const v2 &amp;rhs) const &#123; return 1LL*x*rhs.y-1LL*y*rhs.x; &#125; double angle; bool operator &lt; (const v2 &amp;rhs) const &#123; return angle&lt;rhs.angle; &#125;&#125;p[MAXN],tmp[MAXN];int n,m,B,pre[MAXN],nxt[MAXN];ll cur=0,ans[MAXN];struct Query&#123; int l,r,bel,id; bool operator &lt; (const Query &amp;rhs) const &#123; return bel==rhs.bel?r&gt;rhs.r:bel&lt;rhs.bel; &#125;&#125;q[MAXN];void del(int x)&#123; int l=pre[x],r=nxt[x]; cur-=p[l]*p[x]+p[x]*p[r]; cur+=p[l]*p[r]; nxt[l]=r,pre[r]=l;&#125;void undel(int x)&#123; int l=pre[x],r=nxt[x]; cur-=p[l]*p[r]; cur+=p[l]*p[x]+p[x]*p[r]; nxt[l]=pre[r]=x;&#125;int main()&#123; n=read(),m=read(); B=sqrt(n); for(int i=1;i&lt;=n;++i) &#123; p[i].x=read(),p[i].y=read(); p[i].id=i; p[i].angle=atan2(p[i].y,p[i].x); tmp[i]=p[i]; &#125; sort(tmp+1,tmp+1+n); for(int i=1;i&lt;n;++i) &#123; pre[tmp[i+1].id]=tmp[i].id; nxt[tmp[i].id]=tmp[i+1].id; cur+=tmp[i]*tmp[i+1]; &#125; pre[tmp[1].id]=tmp[n].id,nxt[tmp[n].id]=tmp[1].id; cur+=tmp[n]*tmp[1]; for(int i=1;i&lt;=m;++i) &#123; q[i].l=read(),q[i].r=read(); q[i].bel=(q[i].l-1)/B,q[i].id=i; &#125; sort(q+1,q+1+m); int L=1,R=n,t=0; for(int i=1,j=0;i&lt;=m;++i) &#123; int pos=q[i].bel*B+1; while(R&lt;n) undel(++R); while(L&lt;pos) del(L++); while(j+1&lt;=m &amp;&amp; q[j+1].bel==q[i].bel) &#123; ++j; while(R&gt;q[j].r) del(R--); while(L&lt;q[j].l) del(L++); ans[q[j].id]=cur; while(L&gt;pos) undel(--L); &#125; i=j; &#125; for(int i=1;i&lt;=m;++i) printf("%lld\n",abs(ans[i])); return 0;&#125;]]></content>
      <tags>
        <tag>计算几何</tag>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 6046 爷]]></title>
    <url>%2F2019%2F12%2F29%2FLoj-6046-%E7%88%B7%2F</url>
    <content type="text"><![CDATA[分块 + 定期重构. 把树的 dfs 序找出来,问题就变成了区间加,区间询问第 $k$ 小. 如果直接分块 + 询问二分 + 块内二分,复杂度是根号带两只 $\log$ ,跑不过去. 唯一还能利用的性质就是 $len\le 10$ . 如果一个块内最大值和最小值相差很小,就可以记录个数的前缀和,少掉一只 $\log$ . 于是可以给块大小和元素极差分别设一个阈值,当其中一者超过阈值时,就立即新开一个块. 块有分裂的操作,为了方便,可以用一个链表把所有块串起来,方便遍历. 还有一个优化,当我们对边角部分暴力修改时,原来的一块可能会因为极差超过阈值而裂成几个小块. 而这些小块是可能与前后的块进行合并的. 如果每次都检查能否合并,效果并不会很好,我们可以定期将整个数列的分块重构一下. 阈值和重构的周期可能需要照抄别人的参数手动调一下参. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10,D=3000,S=400,T=1000,inf=1e9;// max-min&lt;=D,siz&lt;=S,ReBuild after T operations.int n,m,len,ecnt=0,head[MAXN],to[MAXN],nx[MAXN],eval[MAXN];void addedge(int u,int v,int w)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; eval[ecnt]=w; head[u]=ecnt;&#125;int in[MAXN],out[MAXN],idx=0,a[MAXN];void dfs(int u,int dist)&#123; in[u]=++idx,a[idx]=dist; for(int i=head[u]; i; i=nx[i]) dfs(to[i],dist+eval[i]); out[u]=idx;&#125;int bel[MAXN],cnt=0;int lp[MAXN],rp[MAXN],nxt[MAXN],tag[MAXN],mx[MAXN],mi[MAXN];vector&lt;int&gt; sum[MAXN];void pushdown(int x)&#123; if(tag[x]) &#123; for(int i=lp[x]; i&lt;=rp[x]; ++i) a[i]+=tag[x]; tag[x]=0; &#125;&#125;void ReBuild()&#123; for(int i=1; i&lt;=cnt; ++i) pushdown(i); cnt=0; int pos=1; mx[cnt+1]=mi[cnt+1]=a[1]; for(int i=2; i&lt;=n+1; ++i) &#123; if(i&gt;n || i-pos+1&gt;S || mx[cnt+1]-a[i]&gt;D || a[i]-mi[cnt+1]&gt;D) &#123; ++cnt; lp[cnt]=pos,rp[cnt]=i-1,nxt[cnt]=cnt+1,tag[cnt]=0; sum[cnt].clear(); sum[cnt].resize(mx[cnt]-mi[cnt]+1); for(int j=lp[cnt]; j&lt;=rp[cnt]; ++j) ++sum[cnt][a[j]-mi[cnt]],bel[j]=cnt; for(int j=1; j&lt;=mx[cnt]-mi[cnt]; ++j) sum[cnt][j]+=sum[cnt][j-1]; mx[cnt+1]=mi[cnt+1]=a[i],pos=i; &#125; else &#123; mx[cnt+1]=max(mx[cnt+1],a[i]); mi[cnt+1]=min(mi[cnt+1],a[i]); &#125; &#125;&#125;void bf(int L,int R,int c)&#123; pushdown(bel[L]); for(int i=L; i&lt;=R; ++i) a[i]+=c; int tmp=nxt[bel[L]],pos=lp[bel[L]],cur=bel[L]; int st=lp[bel[L]],ed=rp[bel[L]]; mx[cur]=mi[cur]=a[st]; for(int i=st+1; i&lt;=ed+1; ++i) &#123; if(i&gt;ed || i-pos+1&gt;S || mx[cur]-a[i]&gt;D || a[i]-mi[cur]&gt;D) &#123; lp[cur]=pos,rp[cur]=i-1,tag[cur]=0; if(i&lt;=ed) nxt[cur]=++cnt; else nxt[cur]=tmp; sum[cur].clear(); sum[cur].resize(mx[cur]-mi[cur]+1); for(int j=lp[cur]; j&lt;=rp[cur]; ++j) ++sum[cur][a[j]-mi[cur]],bel[j]=cur; for(int j=1; j&lt;=mx[cur]-mi[cur]; ++j) sum[cur][j]+=sum[cur][j-1]; if(i&lt;=ed) &#123; cur=cnt; mx[cur]=mi[cur]=a[i]; pos=i; &#125; &#125; else &#123; mx[cur]=max(mx[cur],a[i]); mi[cur]=min(mi[cur],a[i]); &#125; &#125;&#125;void upd(int L,int R,int c)&#123; if(bel[L]==bel[R]) bf(L,R,c); else &#123; int st=rp[bel[L]]+1; bf(L,rp[bel[L]],c); for(int i=bel[st]; i!=bel[R]; i=nxt[i]) tag[i]+=c,mi[i]+=c,mx[i]+=c; bf(lp[bel[R]],R,c); &#125;&#125;int calc(int L,int R,int c)&#123; pushdown(bel[L]); int res=0; for(int i=L; i&lt;=R; ++i) res+=(a[i]&lt;=c); return res;&#125;int query(int L,int R,int c) // num of a[i]&lt;=c in [L,R]&#123; int ans=0; if(bel[L]==bel[R]) ans=calc(L,R,c); else &#123; ans+=calc(L,rp[bel[L]],c); for(int i=nxt[bel[L]]; i!=bel[R]; i=nxt[i]) if(c&gt;=mi[i]) &#123; if(c&lt;mx[i]) ans+=sum[i][c-mi[i]]; else ans+=sum[i][mx[i]-mi[i]]; &#125; ans+=calc(lp[bel[R]],R,c); &#125; return ans;&#125;int solve(int L,int R,int k)&#123; if(R-L+1&lt;k) return -1; int res=0,l=0,r=(n-1+m)*len; while(l&lt;=r) &#123; int mid=(l+r)&gt;&gt;1; if(query(L,R,mid)&gt;=k) res=mid,r=mid-1; else l=mid+1; &#125; return res;&#125;int main()&#123; n=read(),m=read(),len=read(); for(int i=2; i&lt;=n; ++i) &#123; int f=read(),w=read(); addedge(f,i,w); &#125; dfs(1,0); ReBuild(); for(int i=1; i&lt;=m; ++i) &#123; int op=read(),x=read(),k=read(); if(op==1) printf("%d\n",solve(in[x],out[x],k)); else upd(in[x],out[x],k); if(i%T==0) ReBuild(); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 6546 简单的数列题]]></title>
    <url>%2F2019%2F12%2F29%2FLoj-6546-%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E5%88%97%E9%A2%98%2F</url>
    <content type="text"><![CDATA[分块 + 斜率优化. 考虑分块,对于每一块维护块内的 $\max\lbrace a_i\cdot b_i\rbrace​$ ,以及加法标记 $tag​$ . 每次 $tag$ 被更新后,需要重新计算块内的 $\max\lbrace a_i\cdot b_i\rbrace$ . 此时每个位置实际的值是 $c_i=tag\cdot b_i+a_i\cdot b_i​$ ,要找出最大的 $c_i​$ . 这是个斜率优化的形式,写成 $-a_i\cdot b_i=tag\cdot b_i-c_i$ . 块内每个点横坐标为 $b_i$ ,纵坐标为 $-a_i\cdot b_i$ ,用一条斜率为 $tag$ 的直线去截这些点,需要最小化截距. 把它们按照 $b_i$ 从小到大排序,维护一个下凸壳,用斜率为 $tag$ 的直线去截它就可以得到答案. 由于 $tag$ 只会不断增大,每次被截到的点不可能向左移动,于是不需要在凸壳上二分,不断尝试将答案向右移即可. 对于边角部分,把块重构之后暴力询问答案. 交换操作容易处理,将影响到的两个块重构一下就可以了. 每次重构需要将该块重新按 $b$ 排序. 设块大小为 $B$ ,则复杂度为 $O(n\cdot(\frac n B+B\log B))$ ,取 $B=\sqrt \frac{n}{\log n} $ ,得到时间复杂度 $O(n\sqrt{n\log n})$ . 每次重构时最多只会有 $2$ 个元素的 $b$ 是无序的,若直接用归并排序重构,时间复杂度 $O(n\sqrt n)$ . 空间复杂度 $O(n)​$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10,S=81,K=1267;int n,m,B,a[MAXN],b[MAXN],bel[MAXN];int lp[K],rp[K],tag[K],pos[K];ll mx[K];void pushdown(int x)&#123; if(tag[x]) &#123; for(int i=lp[x];i&lt;=rp[x];++i) a[i]+=tag[x]; tag[x]=0; &#125;&#125;struct v2&#123; ll x,y; v2(ll x=0,ll y=0):x(x),y(y) &#123;&#125; bool operator &lt; (const v2 &amp;rhs) const &#123; return x==rhs.x?y&lt;rhs.y:x&lt;rhs.x; &#125; v2 operator - (const v2 &amp;rhs) const &#123; return v2(x-rhs.x,y-rhs.y); &#125; ll operator * (const v2 &amp;rhs) const &#123; return x*rhs.y-y*rhs.x; &#125;&#125;;void ConvexHull(v2 *p,v2 *stk,int siz,int &amp;tp,int &amp;pos,ll &amp;mx)&#123; tp=0; stk[++tp]=p[1]; for(int i=2;i&lt;=siz;++i) &#123; if(p[i].x==p[i-1].x) continue; while(tp&gt;=2 &amp;&amp; (p[i]-stk[tp-1])*(stk[tp]-stk[tp-1])&gt;=0) --tp; stk[++tp]=p[i]; &#125; pos=1; while(pos&lt;tp &amp;&amp; stk[pos].y&gt;stk[pos+1].y) ++pos; mx=-stk[pos].y;&#125;int tp[K];v2 p[K][S],stk[K][S];void ReBuild(int k)&#123; pushdown(k); int siz=0; for(int i=lp[k];i&lt;=rp[k];++i) &#123; ++siz; p[k][siz].x=b[i]; p[k][siz].y=-1LL*a[i]*b[i]; &#125; sort(p[k]+1,p[k]+1+siz); ConvexHull(p[k],stk[k],siz,tp[k],pos[k],mx[k]);&#125;ll calc(int k,v2 pt)&#123; return pt.y-pt.x*k;&#125;bool check(int x,v2 A,v2 B)&#123; return calc(x,A)&gt;calc(x,B);&#125;void upd(int L,int R,int c)&#123; if(bel[L]==bel[R]) &#123; for(int i=L;i&lt;=R;++i) a[i]+=c; ReBuild(bel[L]); &#125; else &#123; for(int i=L;i&lt;=rp[bel[L]];++i) a[i]+=c; ReBuild(bel[L]); for(int i=bel[L]+1;i&lt;=bel[R]-1;++i) &#123; tag[i]+=c; while(pos[i]&lt;tp[i] &amp;&amp; check(tag[i],stk[i][pos[i]],stk[i][pos[i]+1])) ++pos[i]; mx[i]=-calc(tag[i],stk[i][pos[i]]); &#125; for(int i=lp[bel[R]];i&lt;=R;++i) a[i]+=c; ReBuild(bel[R]); &#125;&#125;void Swap(int x,int y)&#123; swap(b[x],b[y]); ReBuild(bel[x]),ReBuild(bel[y]);&#125;ll query(int L,int R)&#123; ll ans=0; if(bel[L]==bel[R]) &#123; ReBuild(bel[L]); for(int i=L;i&lt;=R;++i) ans=max(ans,1LL*a[i]*b[i]); &#125; else &#123; ReBuild(bel[L]); for(int i=L;i&lt;=rp[bel[L]];++i) ans=max(ans,1LL*a[i]*b[i]); for(int i=bel[L]+1;i&lt;=bel[R]-1;++i) ans=max(ans,mx[i]); ReBuild(bel[R]); for(int i=lp[bel[R]];i&lt;=R;++i) ans=max(ans,1LL*a[i]*b[i]); &#125; return ans;&#125;int main()&#123; n=read(),m=read(); B=sqrt(n)/4; for(int i=1;i&lt;=n;++i) &#123; a[i]=read(); bel[i]=(i-1)/B+1; lp[bel[i]]=(bel[i]-1)*B+1; rp[bel[i]]=bel[i]*B; &#125; for(int i=1;i&lt;=n;++i) b[i]=read(); rp[bel[n]]=n; for(int i=1;i&lt;=bel[n];++i) ReBuild(i); for(int i=1;i&lt;=m;++i) &#123; int op=read(),x=read(),y=read(); if(op==1) upd(x,y,read()); else if(op==2) Swap(x,y); else printf("%lld\n",query(x,y)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>分块</tag>
        <tag>斜率优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2736 回转寿司]]></title>
    <url>%2F2019%2F12%2F29%2FLoj-2736-%E5%9B%9E%E8%BD%AC%E5%AF%BF%E5%8F%B8%2F</url>
    <content type="text"><![CDATA[分块 + 堆. 每次操作后,如果区间内最大值 $&gt;A$ , $A$ 就会变成区间内的最大值,并且某些数的位置会变,否则无事发生. 考虑分块,对于整块部分,对每块开一个大根堆维护块内所有元素. 修改时,若块内最大值 $&gt;A$ ,就将把 $A$ 换成它,并且打上标记,表示这一块被元素 $A$ 进行了一次操作. 对于边角部分,修改时将标记下放,然后暴力重构这一块. 按照遍历的顺序从前往后依次处理,每一块 $A​$ 被交换后的值就是下一块 $A​$ 的初始值. 唯一的问题在于某一块已经有标记时,再加入标记需要怎样处理. 首先注意到,操作的顺序不会影响块内元素最后的值,于是没必要合并标记,可以都存下来,下放标记时一起处理. 每个数显然只可能被最小的数替换一次,后面的都没用了,于是用小根堆来存储标记,下放时用堆顶不断尝试交换. 时间复杂度 $O(n\sqrt n\log \sqrt n)$ ,空间复杂度 $O(n\sqrt n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;struct Greater&#123; priority_queue&lt;int&gt; Heap; void push(int x)&#123;Heap.push(x);&#125; int top()&#123;return Heap.top();&#125; void pop()&#123;Heap.pop();&#125; bool empty()&#123;return Heap.empty();&#125;&#125;;struct Less&#123; priority_queue&lt;int&gt; Heap; void push(int x)&#123;Heap.push(-x);&#125; int top()&#123;return -Heap.top();&#125; void pop()&#123;Heap.pop();&#125; bool empty()&#123;return Heap.empty();&#125;&#125;;const int MAXN=4e5+10,S=633;int n,m,B,bel[MAXN],a[MAXN],lp[S],rp[S];Greater val[S];Less tag[S];void pushdown(int x)&#123; if(!tag[x].empty()) &#123; for(int i=lp[x];i&lt;=rp[x];++i) if(a[i]&gt;tag[x].top()) &#123; tag[x].push(a[i]); a[i]=tag[x].top(); tag[x].pop(); &#125; while(!tag[x].empty()) tag[x].pop(); &#125;&#125;void bf(int L,int R,int &amp;A)&#123; int x=bel[L]; pushdown(x); for(int i=L;i&lt;=R;++i) if(a[i]&gt;A) swap(a[i],A); while(!val[x].empty()) val[x].pop(); for(int i=lp[x];i&lt;=rp[x];++i) val[x].push(a[i]);&#125;void upd(int L,int R,int &amp;A)&#123; if(bel[L]==bel[R]) bf(L,R,A); else &#123; bf(L,rp[bel[L]],A); for(int i=bel[L]+1;i&lt;=bel[R]-1;++i) if(val[i].top()&gt;A) &#123; tag[i].push(A); val[i].push(A); A=val[i].top(); val[i].pop(); &#125; bf(lp[bel[R]],R,A); &#125;&#125;int main()&#123; n=read(),m=read(); B=sqrt(n); for(int i=1;i&lt;=n;++i) &#123; a[i]=read(); bel[i]=(i-1)/B+1; lp[bel[i]]=(bel[i]-1)*B+1; rp[bel[i]]=lp[bel[i]]+B-1; val[bel[i]].push(a[i]); &#125; rp[bel[n]]=n; for(int i=1;i&lt;=m;++i) &#123; int L=read(),R=read(),A=read(); if(L&lt;=R) upd(L,R,A); else &#123; upd(L,n,A); upd(1,R,A); &#125; printf("%d\n",A); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>STL</tag>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2639 不勤劳的图书管理员]]></title>
    <url>%2F2019%2F12%2F28%2FLoj-2639-%E4%B8%8D%E5%8B%A4%E5%8A%B3%E7%9A%84%E5%9B%BE%E4%B9%A6%E7%AE%A1%E7%90%86%E5%91%98%2F</url>
    <content type="text"><![CDATA[分块 + 树状数组处理动态逆序对. 先用树状数组扫一遍,算出初始的答案,考虑交换 $a_x,a_y(x&lt;y)​$ 对答案造成的影响. $a_x$ 与 $a_y$ 的贡献, $a_x$ 与 $[x+1,y-1]$ 内元素的贡献,以及 $a_y$ 与 $[x+1,y-1]$ 内元素的贡献需要重新计算. 可以先把原来的贡献减掉,重新计算后加回去,于是问题转化为求一个元素与一段区间内的元素产生的贡献. 考虑分块,对每一块开两个树状数组,分别维护该块内 $\le i$ 的元素数目,以及它们的权值和. 询问贡献时,边角暴力,整块的在树状数组中查询,每次修改最多会影响两个块,在对应的树状数组中直接改即可. 时间复杂度 $O(n\sqrt n\log n)$ ,空间复杂度 $O(n\sqrt n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=5e4+10,S=320;int n,m,B,bel[MAXN],a[MAXN],val[MAXN];int lp[S],rp[S];struct FenwickTree&#123; int bit[MAXN];#define lowbit(x) x&amp;(-x) void upd(int x,int c) &#123; inc(c,P); for(;x&lt;=n;x+=lowbit(x)) inc(bit[x],c); &#125; int sum(int x) &#123; int s=0; for(;x;x-=lowbit(x)) inc(s,bit[x]); return s; &#125; int query(int l,int r) &#123; return add(sum(r),P-sum(l-1)); &#125;&#125;T[S][2],tmp[2]; // 0:cnt 1:sumint ans=0;int calc(int x,int L,int R,int dir)&#123; if(L&gt;R) return 0; int cnt=0,sum=0; if(bel[L]==bel[R]) &#123; for(int i=L;i&lt;=R;++i) if(dir^(a[i]&lt;a[x])) ++cnt,inc(sum,val[i]); &#125; else &#123; for(int i=L;i&lt;=rp[bel[L]];++i) if(dir^(a[i]&lt;a[x])) ++cnt,inc(sum,val[i]); for(int i=lp[bel[R]];i&lt;=R;++i) if(dir^(a[i]&lt;a[x])) ++cnt,inc(sum,val[i]); for(int i=bel[L]+1;i&lt;=bel[R]-1;++i) &#123; if(!dir) &#123; inc(cnt,T[i][0].query(1,a[x]-1)); inc(sum,T[i][1].query(1,a[x]-1)); &#125; else &#123; inc(cnt,T[i][0].query(a[x]+1,n)); inc(sum,T[i][1].query(a[x]+1,n)); &#125; &#125; &#125; return add(mul(cnt,val[x]),sum);&#125;void solve(int x,int y)&#123; if(x==y) return; if(x&gt;y) swap(x,y); if(a[x]&gt;a[y]) inc(ans,P-add(val[x],val[y])); inc(ans,P-calc(x,x+1,y-1,0)); inc(ans,P-calc(y,x+1,y-1,1)); T[bel[x]][0].upd(a[x],-1),T[bel[x]][1].upd(a[x],-val[x]); T[bel[y]][0].upd(a[y],-1),T[bel[y]][1].upd(a[y],-val[y]); swap(a[x],a[y]),swap(val[x],val[y]); T[bel[x]][0].upd(a[x],1),T[bel[x]][1].upd(a[x],val[x]); T[bel[y]][0].upd(a[y],1),T[bel[y]][1].upd(a[y],val[y]); if(a[x]&gt;a[y]) inc(ans,add(val[x],val[y])); inc(ans,calc(x,x+1,y-1,0)); inc(ans,calc(y,x+1,y-1,1));&#125;int main()&#123; n=read(),m=read(); B=sqrt(n); for(int i=1;i&lt;=n;++i) &#123; a[i]=read(),val[i]=read(); bel[i]=(i-1)/B+1; lp[bel[i]]=(bel[i]-1)*B+1; rp[bel[i]]=lp[bel[i]]+B-1; int cnt=tmp[0].query(a[i]+1,n),sum=tmp[1].query(a[i]+1,n); inc(ans,mul(cnt,val[i])); inc(ans,sum); tmp[0].upd(a[i],1),tmp[1].upd(a[i],val[i]); T[bel[i]][0].upd(a[i],1),T[bel[i]][1].upd(a[i],val[i]); &#125; rp[bel[n]]=n; for(int i=1;i&lt;=m;++i) &#123; solve(read(),read()); printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>树状数组</tag>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2254 一个简单的询问]]></title>
    <url>%2F2019%2F12%2F28%2FLoj-2254-%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E8%AF%A2%E9%97%AE%2F</url>
    <content type="text"><![CDATA[莫队. 如果所有的 $l$ 都一样,那么每个询问就只有 $2$ 个右端点需要移动,可以用莫队做. 把它看成平面上对一个矩形询问,就可以想到用容斥把 $l$ 全部弄成 $1$ .$$\begin{aligned}ans&amp;={\rm get}(1,r_1,x)\cdot {\rm get}(1,r_2,x) \\&amp;-{\rm get}(1,l_1-1,x)\cdot {\rm get}(1,r_2,x)\\&amp;-{\rm get}(1,r_1,x)\cdot {\rm get}(1,l_2-1,x)\\&amp;+{\rm get}(1,l_1-1,x)\cdot {\rm get}(1,l_2-1,x)&amp;\end{aligned}$$把每个询问拆成 $4$ 次询问,用莫队的方式去移动端点就可以了. 时间复杂度 $O(n\sqrt n)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;int n,m,cnt=0,B,a[MAXN],bucket[MAXN][2];struct Query&#123; int l,r,id,sgn; Query(int l=0,int r=0,int id=0,int sgn=0):l(l),r(r),id(id),sgn(sgn) &#123;&#125; bool operator &lt; (const Query &amp;rhs) const &#123; return (l-1)/B==(rhs.l-1)/B?r&lt;rhs.r:(l-1)/B&lt;(rhs.l-1)/B; &#125;&#125;q[MAXN];ll tmp=0,ans[MAXN];int main()&#123; n=read(); B=sqrt(n); for(int i=1;i&lt;=n;++i) a[i]=read(); m=read(); for(int i=1;i&lt;=m;++i) &#123; int l0=read(),r0=read(),l1=read(),r1=read(); q[++cnt]=Query(r0,r1,i,1); if(l0&gt;1) q[++cnt]=Query(l0-1,r1,i,-1); if(l1&gt;1) q[++cnt]=Query(r0,l1-1,i,-1); if(l0&gt;1 &amp;&amp; l1&gt;1) q[++cnt]=Query(l0-1,l1-1,i,1); &#125; for(int i=1;i&lt;=cnt;++i) if(q[i].l&gt;q[i].r) swap(q[i].l,q[i].r); sort(q+1,q+1+cnt); int L=1,R=1; tmp=1,bucket[a[1]][0]=bucket[a[1]][1]=1; for(int i=1;i&lt;=cnt;++i) &#123; while(R&lt;q[i].r) &#123; ++R; ++bucket[a[R]][1]; tmp+=bucket[a[R]][0]; &#125; while(L&gt;q[i].l) &#123; --bucket[a[L]][0]; tmp-=bucket[a[L]][1]; --L; &#125; while(R&gt;q[i].r) &#123; --bucket[a[R]][1]; tmp-=bucket[a[R]][0]; --R; &#125; while(L&lt;q[i].l) &#123; ++L; ++bucket[a[L]][0]; tmp+=bucket[a[L]][1]; &#125; ans[q[i].id]+=tmp*q[i].sgn; &#125; for(int i=1;i&lt;=m;++i) printf("%lld\n",ans[i]); return 0;&#125;]]></content>
      <tags>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数列分块入门]]></title>
    <url>%2F2019%2F12%2F27%2F%E6%95%B0%E5%88%97%E5%88%86%E5%9D%97%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[发现自己分块学得太垃圾,于是来入个门. 数列分块的题目,用 $0$ 下标会比较方便. 数列分块入门 1 区间加,单点查询元素的值. 分块,对于每一块维护一个加法标记 $tag$ ,表示这块内实际的值在 $a$ 的基础上还要加上 $tag$. 修改时,对于整块的部分,更新它们的 $tag$ ,对于边角部分,暴力修改 $a$. 询问时,实际的值就为 $a+tag$ . 时间复杂度 $O(n\sqrt n)$ ,空间复杂度 $O(n)​$ . code 其他做法:树状数组/线段树,时间复杂度 $O(n\log n)$ ,空间复杂度 $O(n)​$ . 数列分块入门 2 区间加,询问区间内 $\le x$ 的元素数目. 分块,对于每一块维护一个加法标记 $tag$ ,表示这块内实际的值还要加上 $tag$ . 对于每一块维护一个数组 $b$ ,表示这一块内的元素排序后的结果. 修改时,对于整块的部分,更新它们的 $tag$ ,由于相对大小关系不变,所以不用重构 b . 对于边角部分,暴力修改后重构 $b$ . 询问时,对于整块的部分,在 $b$ 中二分出 $&lt; x$ 的元素数目,对于边角的部分,暴力统计. 时间复杂度 $O(n\sqrt n\log n)​$ ,空间复杂度 $O(n)​$ . code 其他做法:树套树,时间复杂度 $O(n\log^2 n)$ ,空间复杂度 $O(n\log n)​$ . 数列分块入门 3 区间加,询问区间内最大的 $&lt; x$ 的元素. 直接把 $2$ 的做法搬过来,把计数改成求前驱就可以了. 时间复杂度 $O(n\sqrt n\log n)$ ,空间复杂度 $O(n)​$ . code 其他做法:树套树,时间复杂度 $O(n\log^2 n)$ ,空间复杂度 $O(n\log n)$ . 数列分块入门 4 区间加,区间求和. 分块,对于每一块维护一个加法标记 $tag$ ,表示这块内实际的值在 $a$ 的基础上还要加上 $tag$. 对于每一块维护一个 $sum$ ,表示这块内实际所有元素的和. 修改时,对于整块的部分,更新它们的 $tag$ 和 $sum$,对于边角部分,暴力修改 $a$ 和 $sum$ . 询问时,对于整块的部分,利用 $sum$ 更新答案,对于边角部分,暴力用每个 $a+tag$ 更新答案. 时间复杂度 $O(n\sqrt n)$ ,空间复杂度 $O(n)$ . code 其他做法:树状数组/线段树,时间复杂度 $O(n\log n)$ ,空间复杂度 $O(n)$ . 数列分块入门 5 区间开方(向下取整),区间求和. 分块,对于每一块维护一个 $flag$ ,表示这一块内的元素是否全为 $0,1$ ,维护一个 $sum$ 表示块内元素之和. 修改时,对于整块的部分,若已经全为 $0,1$ ,则直接跳过,否则暴力对每个元素开方,更新 $sum$ ,重新判断是否全为 $0,1$ . 对于边角部分,暴力开方,更新 $sum$ ,重新判断其所在块是否全为 $0,1$ . 一个大小为 $x$ 的数最多被开方 $O(\log \log x)$ 次就会变成 $1$ . 时间复杂度 $O(n\sqrt n \log \log a)$ ,空间复杂度 $O(n)​$ . code 其他做法:线段树,时间复杂度 $O(n\log n\log \log a)$ ,空间复杂度 $O(n)​$ . 数列分块入门 6 单点插入,单点查询元素的值,数据随机生成. 分块,对每一块开一个 vector 维护块内的元素,并记录该块内共有多少个元素. 插入时,先暴力找出插入的位置在哪一块,再插入到该块的 vector 中. 询问时,先暴力找出询问的位置在哪一块,再在该块的 vector 中询问. 每进行 $\sqrt n$ 次操作后,对整个数列重构一次. 定期重构保证每块的大小为 $O(\sqrt n)$ ,所以找块,插入 vector 的复杂度均为 $O(\sqrt n)$ ,共操作了 $O(n)$ 次. 而每次重构的时间复杂度为 $O(n)$ ,重构次数为 $\sqrt n​$ . 时间复杂度 $O(n\sqrt n)$ ,空间复杂度 $O(n)$ . code 其他做法:平衡树,时间复杂度 $O(n\log n)$ ,空间复杂度 $O(n)$ . 数列分块入门 7 区间乘法,区间加法,单点查询元素模质数的值. 分块,对于每一块维护两个标记 $k,b​$ ,表示该块内元素实际的值是 $k \times a+b​$ . 修改时,对于整块部分,直接修改标记. 对于边角部分,暴力修改,先把它所在块的 $a​$ 都改成实际值,把标记清空,再修改. 询问时,答案就是 $k \times a+b​$ . 时间复杂度 $O(n\sqrt n)$ ,空间复杂度 $O(n)​$ . code 其他做法:线段树,时间复杂度 $O(n\log n)$ ,空间复杂度 $O(n)$ . 数列分块入门 8 区间询问等于 $c$ 的元素数目,然后将这个区间所有数改为 $c$ . 分块,对每一块维护一个 $flag$ 表示该块内元素是否相同,维护一个 val 表示若相同,则这个值是多少. 询问时,对于整块部分,若块内元素都相同,则直接判断它是否与 $c$ 相同,若不同,则对每个元素暴力判断. 对于边角部分,先把标记下放,再对于每个元素暴力判断. 修改时,对于整块部分,直接让 $val=c$ ,对于边角部分,先把标记下放,再暴力修改,修改完再后判断块内元素是否相同. 每次修改最多会让 $2​$ 个原来元素相同的块变为元素不同的块,均摊下来每次操作复杂度还是 $O(\sqrt n)​$ . 时间复杂度 $O(n\sqrt n)$ ,空间复杂度 $O(n)$ . code 其他做法:树套树,时间复杂度 $O(n\log^2 n)$ ,空间复杂度 $O(n \log n)$ . 数列分块入门 9 区间询问最小的众数. 分块,并把元素离散化一下. 预处理 $f(i,j)$ 表示从第 $i$ 块到第 $j$ 块这些数的众数,可以先枚举 $i$ ,每加入一个元素时检查它是否为当前的众数. 询问时,答案只可能是整块部分的 $f$ ,或者在边角部分中出现过的数字. 枚举边角部分的每个数,考虑它能否成为众数,需要计算出它在询问区间 $[l,r]$ 中出现的次数. 可以先预处理一个 $sum(i,x)$ 表示前 $i$ 块中 $x$ 出现的次数,就可以得到整块部分中 $x$ 出现的次数. 再开一个桶,记录边角部分每个数出现的次数. 时间复杂度 $O(n\log n+n\sqrt n)$ ,空间复杂度 $O(n\sqrt n)$ . code 其他做法:离线后使用暴力回退的莫队,时间复杂度 $O(n\sqrt n)$ ,空间复杂度 $O(n)$ .]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LCT 题目选做]]></title>
    <url>%2F2019%2F12%2F27%2FLCT-%E9%A2%98%E7%9B%AE%E9%80%89%E5%81%9A%2F</url>
    <content type="text"><![CDATA[发现自己 LCT 学得太垃圾,于是来做几个题. LCT 的讲解推荐 FlashHu 大佬的博客 ,讲得很细致. 只是打标记和我的习惯不太一样 QTREE6开两棵 LCT ,分别维护白点,黑点的信息,询问的答案就是 $u$ 所在的连通块大小. 这可以通过维护虚儿子的大小和得出. 修改时,需要将 $u$ 在某棵 LCT 中断掉,在另一棵 LCT 中加入,如果每次暴力修改,会被菊花图卡掉. 我们常常把边 $u\to v$ 的贡献放到点 $v$ 上来统计,这里可以将 $u$ 的信息放到边 $fa(u)\to u$ 上统计. 即,在白点的 LCT 中,若边 $fa(u)\to u$ 存在,说明 $u$ 为白色.这样修改时就只需要删一条边,加一条边了. 询问时,由于根节点的边 $fa(root)\to root$ 不存在,说明根的颜色与 $u$ 不同,它的所有儿子不能连起来. 于是还需要把根给去掉,在 findroot(u) 找到根后,把它 Splay 上来,它的右儿子就是 $u$ 所在的子树. 需要给原图加一个虚点,表示原图树根的父亲. 时间复杂度 $O(n\log n)$ . code QTREE7和 QTREE6 大同小异,只是把连通块大小换成了连通块内点权最大值. 用 multiset 维护虚儿子贡献上来的最大值,其它部分同 QTREE6 . 时间复杂度 $O(n\log^2 n)$ . code bzoj 1969 航线规划LCT 维护边双信息. 如果把每个边双缩成一个点,容易证明会形成一个森林,而答案就是两点所在边双在树上的距离. 于是我们可以用 LCT 来动态维护这个森林,但因为删边后,原来缩起来的点可能会裂开,不好维护,所以只能支持加边. 可以把操作离线下来,倒着做,就只有加边操作了. 在 LCT 中连接 x,y 两个点时,若它们相同,说明原来要连的那两个点已经在一个边双中了,直接跳过. 否则,若还未连通,那么可以直接把它们 link 起来. 若已连通,说明 x 到 y 路径上所有点会形成一个边双. 用 split 将这些点放入一个 splay 中, dfs 这个 splay ,把点都缩到 splay 的根上,再把这个根和它的儿子断开. 可以用并查集来维护每个点被缩到哪个点上去了. 注意 Access 在向上跳时,要跳到父亲被缩到的点,否则新加的实边就会连向已经被缩掉的点,维护的信息就不对了. 时间复杂度 $O(n\log n)$ . code Loj 2245 魔法森林LCT 动态维护最小生成树. 可以考虑从小到大枚举 $a$ ,那么就会不断加入能用的边. $a$ 已经被枚举了,只需要最小化 $b$ ,可以维护一棵最小瓶颈生成树, $1$ 到 $n$ 树上路径中 $b$ 的最大值就是需要的 $b$ . 而最小生成树一定也是最小瓶颈生成树,所以用 LCT 动态维护最小生成树即可. 加入一条边 $(u,v)$ 时,若它们已经连通,则需要找出 $u\to v$ 路径上最长的边,若比当前边长,则用当前边替换它. 边权不方便处理,可以对每条边 $(u,v)$ 新建一个点插在 $(u,v)$ 中,就变成维护点权了. 时间复杂度 $O(m\log n)$ . code Loj 2230 大融合LCT 维护子树信息. 答案显然为以 $y$ 为根时,子树 $x$ 的大小乘上 (子树 $y$ 的大小减去子树 $x$ 的大小) . 需要不断加边,并查集显然没法维护上面那个东西,考虑用 LCT 来维护. 每个节点维护 siz 表示 LCT 中所有儿子信息和时,再维护一个 si 表示所有虚儿子的 siz 之和. 虚儿子的信息只可能在 Access,link 操作时发生变化,此时更新一下 si 就可以了. code Loj 558 我们的 CPU 遭到攻击LCT 维护子树信息. 把边拆成点,变成维护路径点权之和. 由于 LCT 支持换根,所以只需要分别维护出一棵 Splay 中所有点到深度最小,最大的点的距离和,翻转的时候交换. 为了能合并 Splay 左右儿子的信息,还需要维护出子树内黑点的数目,虚边的子树内黑点到对应子树根的距离和. 当虚边被更改时将对应信息更新就可以了,时间复杂度 $O(n\log n)$ . code Uoj 207 共价大爷游长沙LCT 维护子树信息. 若一条边 $(x,y)$ 被所有路径经过,则当以 $x$ 为整棵树的根时,每条路径恰有 $1$ 个端点在子树 $y$ 中. 两个元素是否在同一侧的问题,可以用一个经典小 trick ,给每条路径的两个端点异或上一个随机权值. 那么当子树 $y$ 中所有点的异或值恰好等于所有路径权值的异或值时,就说明每条路径恰有 $1$ 个端点在子树 $y$ 中. 用 LCT 维护加边,删边,换根,修改点权,询问子树点权异或和这些操作,时间复杂度 $O(n\log n)$ . code Loj 2001 树点涂色利用 LCT 中辅助树 Splay 的性质. 每种颜色的点一定会构成一条深度严格递增的链,这和 LCT 中每棵 Splay 维护的东西是一样的. 而每次染色操作,由于是新的颜色,所以等价于进行了一次 Access(x) . 于是可以用 LCT 来维护这些操作,需要维护出每个点到根的颜色种类 $tot$ ,即到根经过的轻边数目 + 1. 每次切换轻重边时,某个子树内的 $tot$ 会 $+1$ 或者 $-1$ ,可以用线段树维护. 注意需要找到 Splay 中深度最小的点,修改它的子树. 对于操作 $2$ , $(x,y)$ 路径上颜色数目就是 $tot(x)+tot(y)-2\cdot tot(lca(x,y))+1$ . 注意这里不能直接 split(x,y) ,因为我们维护的是有根树,这样会改变树的形态. 对于操作 $3$ ,答案就是 $x$ 子树中 $tot$ 的最大值,可以在更新 $tot$ 时用线段树一起维护. code Loj 2092 大森林LCT + 扫喵线. 有时间和树的编号两个维度,一起维护不太可做,考虑去掉一个维度. 注意到长出的子节点编号只与操作次数有关,可以让每次都给所有树生长出一个新点. 这样不在 $[l,r]$ 内的树会有冗余节点,但只要不把生长节点换成它们,它们就不会对询问产生影响. 可以把每个编号的点实际存在的区间 $[l_x,r_x]$ 记录下来,对 $[l,r]$ 修改生长节点为 $x$ 时,需要将它与 $[l_x,r_x]$ 取并. 而询问操作的答案不会随着之后的操作变化,可以离线下来,最后再一起回答. 可以先把节点长好,再处理生长节点的修改,以及回答询问. 每次修改生长节点时,新建一个虚点,生长点的时候,新建一个实点接在最近的虚点上,把所有虚点按时间顺序串起来. 类似扫描线,从前往后处理每一棵树的形态,并回答询问,修改生长节点操作在 $l$ 处生效,在 $r+1$ 处失效. 简单画了一下,实心点是实点,空心点是虚点,虚点下面栽的子树就是后面生长出来的实点. 生效时,就把它的虚点栽到 $x$ 这个实点下面,这样后面长出来的点都在 $x$ 的子树中了. 失效时,就把它的虚点给移回去,即移回所有虚点按时间串好的那条链上. 回答询问时,将虚点权值设为 $0$ ,实点权值设为 $1$ ,答案就是两点路径上点权和 $-1$ . 因为我们维护的是有根树,不能用 makeroot 去改变它的形态,只能维护出每个点到根的路径点权之和 $sum(x)$ . 还需要找出 $x,y$ 的 LCA ,答案就是 $sum(x)+sum(y)-2sum(LCA)$ . 可以先 Access(x) ,再 Splay(x) ,再 Access(y) ,最后一次切换的虚边指向的点就是 LCA. code Loj 2434 历史构造 + LCT 维护子树信息. 做过树点涂色那道题的话,马上就能看出 “崛起” 这个过程等同于 LCT 中的一次 Access 操作. 每个点的贡献可以分开算,若相邻两次 Access 操作来自它的两个不同的子树,或分别来自子树和自己,就有 $1$ 的贡献. 记 $A(u)$ 表示子树 $u$ 中共有多少次 Access 操作. 当 $u$ 的所有儿子 $v$ 的 $\max A(v)$ ,以及 $a(u)$ 都没有超过 $A(u)$ 的一半时,总可以交替安排,产生 $A(u)-1$ 的贡献. 否则,若它们中的最大值为 $mx$ ,最多就只能产生 $2(A(u)-mx)$ 的贡献. 直接这样做一遍树形 dp ,就可以完成预处理,考虑如何处理修改操作. 构造一下,若 $A(x)$ 超过了 $A(fa(x))$ 的一半,就设 $fa(x)\to x$ 为实边,否则为虚边. 每个点最多只会有 $1$ 个实儿子,形成了一个实虚链的剖分,用 LCT 来维护这个东西,以及权值的子树和,即 $A(u)$ . 修改只会让 $a$ 增大,修改 $x$ 时, $x$ 到根的路径上实边不会变成虚边,它们的贡献也不变,因为 $A(u),mx$ 增加的值相同. 那么只有虚边可能变成实边,每次用 Splay 操作跳过一条实链,判断虚边是否会变成实边,去修改它的贡献. 类似于树链剖分,可以证明 $x$ 到根路径上虚边数目是 $O(\log n)$ 的,那么每次修改操作的时间复杂度也是 $O(\log n)$ . code]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>LCT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 6712 数树上块]]></title>
    <url>%2F2019%2F12%2F26%2FLoj-6712-%E6%95%B0%E6%A0%91%E4%B8%8A%E5%9D%97%2F</url>
    <content type="text"><![CDATA[长链剖分. 算法一使用大力枚举,状态压缩等指数级别复杂度算法,期望得分 $10$ 分. 算法二设 $f(i,j)$ 表示在子树 $i$ 中选出一个联通块,必须包含 $i$ ,并且这个联通块中最深的点到 $i$ 的距离为 $j$ 的方案数. 在树上 $dfs$ ,不断将当前节点 $u$ 的信息与它的儿子节点 $v$ 的信息合并.$$f(u,\max(i,j+1))+=f(u,i)\cdot f(v,j),i+j+1\le k$$枚举深度 $i,j$ 时只需要枚举有用的,时间复杂度 $O(n^2)$ ,期望得分 $50$ 分. 算法三对于 $k=n-1$ 的部分,相当于没有联通块直径的限制,可以在算法二的基础上去掉第二维. 即设 $f(i)$ 表示在子树 $i$ 中选出一个联通块,且必须包含 $i$ 的方案数. 时间复杂度 $O(n)$ ,结合算法二,期望得分 $60$ 分. 算法四注意到算法二的 $dp$ 第二维的下标是深度,可以利用长链剖分进行优化. 为了快速转移,需要给每个节点 $i$ 开一棵线段树维护所有的 $f(i,j)$ ,可以使用动态开点实现. 时间复杂度 $O(n\log n)$ ,期望得分 $100$ 分. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=5e5+10;int n,k;int ecnt=0,to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1],head[MAXN];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int mxdep[MAXN],mxson[MAXN];void dfs_init(int u,int fa)&#123; for(int i=head[u]; i; i=nx[i]) &#123; int v=to[i]; if(v==fa) continue; dfs_init(v,u); if(mxson[u]==0 || mxdep[v]&gt;mxdep[mxson[u]]) mxson[u]=v; &#125; if(mxson[u]) mxdep[u]=mxdep[mxson[u]]+1;&#125;int cnt=0;struct node&#123; int ls,rs,sum,tag; node() &#123; ls=rs=sum=0; tag=1; &#125;&#125; Tree[MAXN*30];#define root Tree[o]#define lson Tree[root.ls]#define rson Tree[root.rs]void pushup(int o)&#123; root.sum=add(lson.sum,rson.sum);&#125;void modify(int &amp;o,int c)&#123; if(!o) o=++cnt; root.tag=mul(root.tag,c); root.sum=mul(root.sum,c);&#125;void pushdown(int o)&#123; if(root.tag!=1) &#123; modify(root.ls,root.tag); modify(root.rs,root.tag); root.tag=1; &#125;&#125;void upd_add(int &amp;o,int l,int r,int pos,int c)&#123; if(pos&lt;l || pos&gt;r) return; if(!o) o=++cnt; if(l==r) &#123; root.sum=add(root.sum,c); return; &#125; int mid=(l+r)&gt;&gt;1; pushdown(o); if(pos&lt;=mid) upd_add(root.ls,l,mid,pos,c); else upd_add(root.rs,mid+1,r,pos,c); pushup(o);&#125;void upd_mul(int o,int l,int r,int L,int R,int c)&#123; if(!o || L&gt;r || R&lt;l || L&gt;R) return; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; modify(o,c); return; &#125; int mid=(l+r)&gt;&gt;1; pushdown(o); if(L&lt;=mid) upd_mul(root.ls,l,mid,L,R,c); if(R&gt;mid) upd_mul(root.rs,mid+1,r,L,R,c); pushup(o);&#125;int query(int o,int l,int r,int L,int R)&#123; if(!o || L&gt;r || R&lt;l || L&gt;R) return 0; if(L&lt;=l &amp;&amp; r&lt;=R) return root.sum; int res=0; int mid=(l+r)&gt;&gt;1; pushdown(o); if(L&lt;=mid) res=add(res,query(root.ls,l,mid,L,R)); if(R&gt;mid) res=add(res,query(root.rs,mid+1,r,L,R)); return res;&#125;void pr(int o,int l,int r)&#123; if(l==r) &#123; printf("%d ",root.sum); return; &#125; int mid=(l+r)&gt;&gt;1; pushdown(o); pr(root.ls,l,mid); pr(root.rs,mid+1,r);&#125;int rt[MAXN],delta[MAXN],ans=0;struct opr&#123; int L,R,c; int type;//0-add 1-mul&#125; opt[MAXN];int tp=0,pres[MAXN],tot;void dfs(int u,int fa)&#123; if(mxson[u]) &#123; rt[mxson[u]]=rt[u]; delta[mxson[u]]=delta[u]+1; dfs(mxson[u],u); &#125; upd_add(rt[u],0,n-1,0+delta[u],1); for(int i=head[u]; i; i=nx[i]) &#123; int v=to[i]; if(v==fa || v==mxson[u]) continue; rt[v]=++cnt; dfs(v,u); tp=0; for(int j=0; j&lt;=mxdep[v]; ++j) &#123; int tmp=query(rt[u],0,n-1,0+delta[u],min(j+delta[u],k-j-1+delta[u])); int x=query(rt[v],0,n-1,j,j); tmp=mul(tmp,x); ++tp; opt[tp].L=j+1+delta[u],opt[tp].R=k-j-1+delta[u]; opt[tp].c=x,opt[tp].type=1; if(opt[tp].L&gt;opt[tp].R) --tp; else &#123; ++tot; pres[tot]=add(pres[tot-1],x); &#125; ++tp; opt[tp].L=j+1+delta[u],opt[tp].c=tmp,opt[tp].type=0; &#125; int lstL=-1,lstR=-1; for(int p=tp; p&gt;=1; --p) if(opt[p].type==1) &#123; if(lstL==-1) upd_mul(rt[u],0,n-1,opt[p].L,opt[p].R,pres[tot]+1); else &#123; upd_mul(rt[u],0,n-1,opt[p].L,lstL-1,pres[tot]+1); upd_mul(rt[u],0,n-1,lstR+1,opt[p].R,pres[tot]+1); &#125; lstL=opt[p].L,lstR=opt[p].R; --tot; &#125; for(int p=1; p&lt;=tp; ++p) if(opt[p].type==0) upd_add(rt[u],0,n-1,opt[p].L,opt[p].c); &#125; ans=add(ans,query(rt[u],0,n-1,0+delta[u],k+delta[u]));&#125;int main()&#123; n=read(),k=read(); for(int i=1; i&lt;n; ++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; dfs_init(1,0); rt[1]=++cnt,delta[1]=0; dfs(1,0); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>长链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Query on a tree]]></title>
    <url>%2F2019%2F12%2F24%2FQuery-on-a-tree%2F</url>
    <content type="text"><![CDATA[QTREE 系列. QTREE1树剖维护即可,注意 LCA 连向它父亲的边不能被计入贡献.利用重链上 dfn 连续这条性质,就可以做到了. 时间复杂度 $O(n\log n)$ . code QTREE2预处理出父亲的倍增数组,每个点的深度以及到根的距离.第一问找出 LCA 计算一下就可以了. 第二问可以从深度大的往上跳,如果跳到 LCA 还没结束,就换另一个点来跳. 跳的时候要记录跳过了几个点,更换跳的点的时候要处理 $k$ 的变化. 时间复杂度 $O(n\log n)$ . code QTREE3把 dfn 看作下标,则这个询问等价于询问一段区间内的第 $k$ 大. 没有修改操作,把权值离散化后建出主席树来回答询问即可. 时间复杂度 $O(n\log n)$ . code QTREE4和 捉迷藏 那题一模一样,可以用动态点分治来做,时间复杂度 $O(n\log^2 n)$ . code QTREE5和 QTREE4 大同小异,其实可以看做是 QTREE4 的一个弱化版.仍然考虑动态点分治. 给每个分治中心开一个 set ,维护它管辖的所有白点到它的距离,以及它们的编号. 修改时在点分树跳,把经过的每个 set 的信息更新一下. 询问时在点分树上跳,不断用 set 中的最小值来更新最小距离. 这样会将一些自交的链也统计进去,但由于是询问 $\min​$ ,不会影响答案正确性. 时间复杂度 $O(n\log^2 n)$ . code QTREE6开两棵 LCT ,分别维护白点,黑点的信息,询问的答案就是 $u$ 所在的连通块大小. 这可以通过维护虚儿子的大小和得出. 修改时,需要将 $u$ 在某棵 LCT 中断掉,在另一棵 LCT 中加入,如果每次暴力修改,会被菊花图卡掉. 我们常常把边 $u\to v$ 的贡献放到点 $v$ 上来统计,这里可以将 $u$ 的信息放到边 $fa(u)\to u$ 上统计. 即,在白点的 LCT 中,若边 $fa(u)\to u$ 存在,说明 $u$ 为白色.这样修改时就只需要删一条边,加一条边了. 询问时,由于根节点的边 $fa(root)\to root$ 不存在,说明根的颜色与 $u$ 不同,它的所有儿子不能连起来. 于是还需要把根给去掉,在 findroot(u) 找到根后,把它 Splay 上来,它的右儿子就是 $u$ 所在的子树. 需要给原图加一个虚点,表示原图树根的父亲. 时间复杂度 $O(n\log n)$ . code QTREE7和 QTREE6 大同小异,只是把连通块大小换成了连通块内点权最大值. 用 multiset 维护虚儿子贡献上来的最大值,其它部分同 QTREE6 . 时间复杂度 $O(n\log^2 n)$ . code]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>主席树</tag>
        <tag>树链剖分</tag>
        <tag>LCT</tag>
        <tag>倍增</tag>
        <tag>动态点分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 6538 烷基计数 加强版 加强版]]></title>
    <url>%2F2019%2F12%2F19%2FLoj-6538-%E7%83%B7%E5%9F%BA%E8%AE%A1%E6%95%B0-%E5%8A%A0%E5%BC%BA%E7%89%88-%E5%8A%A0%E5%BC%BA%E7%89%88%2F</url>
    <content type="text"><![CDATA[Burnside 引理 + 牛顿迭代. 就是求每个节点的儿子个数 $\le 3$ 的有根树数目. 记答案的生成函数为 $F(x)$ ,直接 $F(x)=1+F(x)^3$ 显然是错的,因为可能出现同构的情况. 考虑 Burnside 引理,对 $3$ 个儿子的置换有 $6$ 种. 对于 $(1,2,3)​$ 这 $1​$ 种置换,每种方案都是不动点. 对于 $(1,3,2),(3,2,1),(2,1,3)$ 这 $3$ 种置换,只有在置换中成环的两棵子树相同的方案才是不动点. 对于 $(2,3,1),(3,1,2)$ 这 $2​$ 种置换,只有三棵子树都相同的方案才是不动点. 根据 Burnside 引理,本质不同的方案数是各个置换的不动点数目平均数,得到$$F(x)=1+x\frac{F(x)^3+3F(x^2)F(x)+2F(x^3)}{6}$$考虑牛顿迭代解出这个方程,设 $G(F(x))=x\frac{F(x)^3+3F(x^2)F(x)+2F(x^3)}{6}-F(x)+1$ . 若当前已知了 $F(x)\bmod x^n$ ,要求出 $F(x)\bmod x^{2n}$ ,可以发现 $F(x^2)\bmod x^{2n},F(x^3)\bmod x^{2n}$ 也已知了. 于是可以直接把它们看做常量,记 $A(x)=F(x^2)\bmod x^{2n},B(x)=F(x^3)\bmod x^{2n}$ . 注意是对 $F(x)​$ 求导,所以 $x​$ 也可以看做常量. 得到 $G’(F(x))=x\frac{3F(x)^2+3A(x)}{6}-1$ ,代入牛顿迭代公式 $F(x)=F_0(x)-\frac{G(F_0(x))}{G’(F_0(x))}$ ,$$F(x)=F_0(x)-\frac{x(F_0(x)^3+3A(x)F_0(x)+2B(x))-6F_0(x)+6}{x(3F_0(x)^2+3A(x))-6}$$时间复杂度 $O(n\log n)​$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353,G=3;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=4e5+10;int rev[MAXN],omega[MAXN],inv[MAXN],curn=0;void init(int n)&#123; if(curn==n) return; for(int i=0;i&lt;n;++i) rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)*(n&gt;&gt;1)); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; omega[l]=fpow(G,(P-1)/l); inv[l]=fpow(omega[l],P-2); &#125; curn=n;&#125;void DFT(int *a,int n,bool invflag)&#123; init(n); for(int i=0;i&lt;n;++i) if(i&lt;rev[i]) swap(a[i],a[rev[i]]); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; int m=l&gt;&gt;1; int gi=omega[l]; if(invflag) gi=inv[l]; for(int *p=a;p!=a+n;p+=l) &#123; int g=1; for(int i=0;i&lt;m;++i) &#123; int t=mul(g,p[i+m]); p[i+m]=add(p[i],P-t); p[i]=add(p[i],t); g=mul(g,gi); &#125; &#125; &#125; if(invflag) &#123; int invn=fpow(n,P-2); for(int i=0;i&lt;n;++i) a[i]=mul(a[i],invn); &#125;&#125;void NTT(int *A,int *B,int *C,int lenA,int lenB)&#123; int lenC=lenA+lenB-1,n=1; while(n&lt;lenC) n&lt;&lt;=1; static int a[MAXN],b[MAXN]; copy(A,A+lenA,a); fill(a+lenA,a+n,0); copy(B,B+lenB,b); fill(b+lenB,b+n,0); DFT(a,n,false); DFT(b,n,false); for(int i=0;i&lt;n;++i) C[i]=mul(a[i],b[i]); DFT(C,n,true);&#125;void PolyInverse(int *A,int *B,int N) // B=A^(-1)&#123; int n=1; while(n&lt;N) n&lt;&lt;=1; static int res[MAXN],tmp[MAXN]; fill(A+N,A+n,0); res[0]=fpow(A[0],P-2); for(int i=2;i&lt;=n;i&lt;&lt;=1) &#123; NTT(A,res,tmp,i,i); NTT(tmp,res,tmp,i,i); for(int j=0;j&lt;i;++j) res[j]=add(mul(2,res[j]),P-tmp[j]); &#125; copy(res,res+N,B);&#125;void solve(int *F,int N)&#123; int n=1; while(n&lt;N) n&lt;&lt;=1; static int A[MAXN],B[MAXN],F0[MAXN],up[MAXN],down[MAXN]; F[0]=1; for(int i=2;i&lt;=n;i&lt;&lt;=1) &#123; for(int j=0;j&lt;i;++j) F0[j]=F[j]; for(int j=0;j&lt;i;j+=2) A[j]=F0[j/2]; for(int j=0;j&lt;i;j+=3) B[j]=F0[j/3]; NTT(F0,F0,up,i,i); for(int j=0;j&lt;i;++j) inc(up[j],mul(3,A[j])); NTT(F0,up,up,i,i); for(int j=0;j&lt;i;++j) inc(up[j],mul(2,B[j])); for(int j=i-1;j&gt;=1;--j) up[j]=up[j-1]; up[0]=0; for(int j=0;j&lt;i;++j) inc(up[j],P-mul(6,F0[j])); inc(up[0],6); NTT(F0,F0,down,i,i); for(int j=0;j&lt;i;++j) down[j]=add(mul(3,down[j]),mul(3,A[j])); for(int j=i-1;j&gt;=1;--j) down[j]=down[j-1]; down[0]=P-6; PolyInverse(down,down,i); NTT(up,down,up,i,i); for(int j=0;j&lt;i;++j) F[j]=add(F0[j],P-up[j]); &#125;&#125;int F[MAXN];int main()&#123; int n=read(); solve(F,n+1); cout&lt;&lt;F[n]&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>Burnside/Polya</tag>
        <tag>多项式</tag>
        <tag>牛顿迭代</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 6609 无意识的石子堆 加强版]]></title>
    <url>%2F2019%2F12%2F18%2FLoj-6609-%E6%97%A0%E6%84%8F%E8%AF%86%E7%9A%84%E7%9F%B3%E5%AD%90%E5%A0%86-%E5%8A%A0%E5%BC%BA%E7%89%88%2F</url>
    <content type="text"><![CDATA[容斥原理 + NTT . 每行必须有 $2$ 个石子,考虑枚举 $k$ 列有 $2$ 个石子,则有 $2(n-k)$ 列有 $1$ 个石子. 记 $S(k)$ 表示选出了这 $2n-k$ 列后放入石子的方案数,则$$ans=\sum_{k=0}^n \binom{m}{k} \binom{m-k}{2(n-k)} \cdot S(k)$$可以转化成二分图模型,左边有 $n$ 个点,度数均为 $2$ ,右边有 $k$ 个点度数为 $2$ ,有 $2(n-k)$ 个点度数为 $1$ . 那么 $S(k)$ 就是这样的二分图的数目. 将每个度数为 $2$ 的点拆成两个点,直接在这 $4n$ 个点中连边,再去掉出现了重边的方案数. 考虑容斥,枚举有 $i$ 条重边,得到 $$S(k)=\frac{1}{2^{n+k}} \sum_{i=0}^n (-1)^i \binom{n}{i} \binom{k}{i} i!\cdot 2^i\cdot (2n-2i)!$$这可以用 NTT 做一次卷积直接算出,时间复杂度 $O(n\log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=943718401,G=7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=8e6+10;int rev[MAXN],omega[MAXN],inv[MAXN],curn=0;void init(int n)&#123; if(curn==n) return; for(int i=0;i&lt;n;++i) rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)*(n&gt;&gt;1)); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; omega[l]=fpow(G,(P-1)/l); inv[l]=fpow(omega[l],P-2); &#125; curn=n;&#125;void DFT(int *a,int n,bool invflag)&#123; init(n); for(int i=0;i&lt;n;++i) if(i&lt;rev[i]) swap(a[i],a[rev[i]]); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; int m=l&gt;&gt;1; int gi=omega[l]; if(invflag) gi=inv[l]; for(int *p=a;p!=a+n;p+=l) &#123; int g=1; for(int i=0;i&lt;m;++i) &#123; int t=mul(g,p[i+m]); p[i+m]=add(p[i],P-t); p[i]=add(p[i],t); g=mul(g,gi); &#125; &#125; &#125; if(invflag) &#123; int invn=fpow(n,P-2); for(int i=0;i&lt;n;++i) a[i]=mul(a[i],invn); &#125;&#125;void NTT(int *A,int *B,int *C,int lenA,int lenB)&#123; int lenC=lenA+lenB-1,n=1; while(n&lt;lenC) n&lt;&lt;=1; static int a[MAXN],b[MAXN]; copy(A,A+lenA,a); fill(a+lenA,a+n,0); copy(B,B+lenB,b); fill(b+lenB,b+n,0); DFT(a,n,false); DFT(b,n,false); for(int i=0;i&lt;n;++i) C[i]=mul(a[i],b[i]); DFT(C,n,true);&#125;int n,m,fac[MAXN],invfac[MAXN];int A[MAXN],B[MAXN],S[MAXN];int binom(int M,int N)&#123; if(M&lt;0 || N&lt;0 || M&lt;N) return 0; return mul(fac[M],mul(invfac[N],invfac[M-N]));&#125;ll M;int main()&#123; n=read(),M=read(); m=M%P; fac[0]=1; for(int i=1;i&lt;=2*n;++i) fac[i]=mul(fac[i-1],i); invfac[2*n]=fpow(fac[2*n],P-2); for(int i=2*n-1;i&gt;=0;--i) invfac[i]=mul(invfac[i+1],i+1); int pw=1,inv2=(P+1)&gt;&gt;1; for(int i=0;i&lt;=n;++i) &#123; A[i]=mul(binom(n,i),mul(pw,fac[2*n-2*i])); if(i&amp;1) A[i]=add(P,-A[i]); B[i]=invfac[i]; pw=mul(pw,2); &#125; NTT(A,B,S,n+1,n+1); pw=fpow(inv2,n); for(int i=0;i&lt;=n;++i) &#123; S[i]=mul(S[i],mul(fac[i],pw)); pw=mul(pw,inv2); &#125; int pos=(M&gt;=2*n)?0:2*n-M; int ans=0,tmp=1; for(int i=pos;i&lt;=2*n-1;++i) tmp=mul(tmp,add(m+i+1,P-2*n)); for(int i=pos;i&lt;=n;++i) &#123; int delta=mul(mul(invfac[i],invfac[2*n-2*i]),tmp); delta=mul(delta,S[i]); inc(ans,delta); tmp=mul(tmp,fpow(add(m+i+1,P-2*n),P-2)); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>容斥原理</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191218]]></title>
    <url>%2F2019%2F12%2F18%2Ftest20191218%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } }  var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>离线</tag>
        <tag>网络流</tag>
        <tag>数位dp</tag>
        <tag>test</tag>
        <tag>Trie树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Prufer 序列学习笔记]]></title>
    <url>%2F2019%2F12%2F17%2FPrufer-%E5%BA%8F%E5%88%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[发现自己完全不会 prufer 序列,于是来学一学. prufer 序列是无根树的一种序列. 有标号的 $n$ 个顶点的无根树与长度为 $n-2$ ,每个元素 $\in[1,n]$ 的 prufer 序列一一对应. 构造方法无根树 $\to$ prufer 序列无根树的叶子定义为度数为 $1$ 的节点. 找到编号最小的叶子,记为 $x$ . 将与 $x$ 相邻的那个节点添加入 prufer 序列,然后在树中删除 $x$ . 重复以上操作,当整棵树只剩下两个节点时退出. prufer 序列 $\to$ 无根树 取出 prufer 序列的第一个元素 $u$ ,然后将 $u$ 从 prufer 序列中删除. 在点集中找到没有在当前 prufer 序列中出现的最小编号的节点 $v$ ,然后将 $v$ 从点集中删除. 将 $u,v$ 连边. 重复以上操作,当点集中只剩下两个点时,将它们连边后退出. 这两种构造本质是相同的,第二种构造中每次找到的 $v$ 实际上就是第一种构造中的 $x$ ,而 $u$ 就是与 $x$ 相邻的点. 这可以说明有标号无根树与 prufer 序列的一一对应关系. 两种构造都可以用 set 来维护,时间复杂度 $O(n\log n)$ . 性质可以从构造方法 (定义) 中找出 prufer 序列本身的一些性质.记无根树的节点数目为 $n$ . prufer 序列的长度为 $n-2$ ,其中的每个元素都是 $1\sim n$ 中的整数.正确性显然. $x$ 在 prufer 序列中出现的次数等于编号为 $x$ 的节点在无根树中的度数 $-1​$. 证明: 与 $x$ 相邻的节点被删掉时, $x$ 会被加入 prufer 序列.若 $x$ 不是最后剩下的两个点之一,那么删除它的时候,恰好还有 $1$ 个与它相邻的节点没有被删掉,出现次数为 $ \deg-1$ .若 $x$ 是最后剩下的两个点之一,那么只有另外一个点没有被删掉,其他与 $x$ 相邻的点都被删掉了,出现次数也为 $\deg-1$ . 推论由于 prufer 序列与无根树的一一对应关系,一些树的计数问题可以通过转化为 prufer 序列,对序列计数来求解. Cayley 定理: $n$ 个点有标号无根树有 $n^{n-2}$ 个, 有标号有根树有 $n^{n-1}$ 个,有标号有根树森林有 $(n+1)^{n-1}$ 个. 拓展 Cayley 定理: $n$ 个有标号点形成一个 $k$ 棵树的有根树森林,若 $k$ 个根已钦定,方案数为 $k\cdot n^{n-k-1}$ ,否则再乘上 $\binom n k$ ,表示先将这 $k$ 个根选出. 证明: 记 $f(n,k)$ 表示 $n$ 个有标号点形成一个 $k$ 棵树的有根树森林, $k$ 个根已钦定时的方案数,归纳证明,奠基显然.假定对于 $i&lt;n$ 的 $f(i,j)$ 都已完成证明,考虑枚举编号最小的根的度数 $i$ ,将它删掉后,图会变成 $n-1$ 个点, $k+i-1$ 棵树.$$f(n,k)=\sum_{i=0}^{n-k} \binom{n-k}{i} \cdot f(n-1,k+i-1)$$代入得到 $f(n,k)=k\cdot n^{n-k-1}$ . 第 $i​$ 个点的点权为 $a_i​$ ,边的权值为端点点权之积,树的权值为所有边权之积,则所有树权值和为 $(\prod a_i)\cdot (\sum a_i)^{n-2}​$ .若将每个点的点权设为 $1​$ ,则得到 Cayley 定理.若将 $k​$ 个根合并成一个点权为 $m​$ 的点,则得到拓展 Cayley 定理. 证明: 记所求为 $ans$ .$$ans=\sum_{Tree} \prod_i (a_i)^{\deg(i)} \\ans=\sum_{p} \prod_i (a_i)^{t(i)+1} \\ans=(\prod a_i)\cdot \sum_{p} \prod_i (a_i)^{t(i)}$$其中 $p$ 表示任意一个 prufer 序列, $t(i)$ 表示 $i$ 在 $p$ 中出现的次数. 那么后面的 $\sum$ ,相当于每个位置可以选 $a_1,a_2,\dots,a_n$ ,每个 $p$ 的贡献是选出的数之积,用乘法分配律变回去,就是 $(\sum a_i)^{n-2}$ ,于是得到 $ans=(\prod a_i)\cdot (\sum a_i)^{n-2}​$ . 确定了度数,第 $i$ 个节点度数为 $\deg(i)$ 的无根树数目,由上面的性质,等价于可重排列的数目,为 $\frac{(n-2)!}{\prod (\deg(i)-1)!}$ 完全图 $K_n$ 的生成树数目为 $n^{n-2}$ ,完全二分图 $K_{n,m}$ 的生成树数目为 $m^{n-1}\cdot n^{m-1}$ . 证明: 前者显然.后者的 一个证法 是根据矩阵树定理,构造出基尔霍夫矩阵,手算行列式. 用 prufer 序列也可以证明,构造 prufer 序列时,最后剩下的两个点之间有边,它们一定在二分图的两侧. 而对于其它点,每个左侧的点被删掉时,会加入一个右侧的点,每个右侧的点被删掉时,会加入一个左侧的点. 于是 prufer 序列中会有 $m-1$ 个左侧的点, $n-1$ 个右侧的点,方案数为 $m^{n-1}\cdot n^{m-1}$ .]]></content>
      <tags>
        <tag>数学</tag>
        <tag>学习笔记</tag>
        <tag>prufer序列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191217]]></title>
    <url>%2F2019%2F12%2F17%2Ftest20191217%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>test</tag>
        <tag>矩阵树定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191216]]></title>
    <url>%2F2019%2F12%2F16%2Ftest20191216%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } }  var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>启发式合并</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191214]]></title>
    <url>%2F2019%2F12%2F14%2Ftest20191214%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 1152 歌唱王国]]></title>
    <url>%2F2019%2F12%2F13%2Fbzoj-1152-%E6%AD%8C%E5%94%B1%E7%8E%8B%E5%9B%BD%2F</url>
    <content type="text"><![CDATA[概率生成函数 + kmp. 概率生成函数: 无情的复读机器人,通过生成函数的方法简化运算. 定义概率生成函数 $F(x)=\sum_{i=0}^{\infty} P(X=i) x^i$ ,其中 $P(X=i)$ 表示随机变量 $X$ 为 $i$ 的概率. 显然有 $F(1)=\sum_i P(X=i)=1$ . 期望 $E(X)=\sum_i i\cdot P(X=i)=F’(1)$ . 方差 $Var(X)=E(x^2)-E(x)^2=\sum_i i^2\cdot P(X=i)-(F’(1))^2=F’’(1)+F’(1)-(F’(1))^2$ . 记字符集大小为 $m$ ,字符串长度为 $n$ . 设 $f_i$ 表示结束时随机序列的长度,其概率生成函数为 $F(x)$ . 设 $g_i$ 为随机序列长度达到 $i$ 还没结束的概率,其普通生成函数为 $G(x)$ . 如果在一个未结束的序列后加一个数字,可能结束,也可能没结束, $1$ 是初始时序列为空的情况.$$F(x)+G(x)=1+G(x)\cdot x \quad (1)$$如果在一个未结束的序列后加上给定的序列,则一定会结束,也可能没添加完就结束了,此时已有序列一定是 border . 设 $a_i$ 表示给定序列的前缀 $i$ 是否为它的 border .$$G(x)\cdot (\frac{1}{m}x)^n=\sum_{i=1}^n a_i\cdot F(x)\cdot (\frac{1}{m}x)^{n-i}\quad(2)$$要求的是 $F’(1)$ ,将 $(1)$ 式两边对 $x$ 求导后代入 $x=1$ ,得到$$F’(x)+G’(x)=x\cdot G’(x)+G(x) \\F’(1)=G(1)$$将 $x=1$ 代入 $(2)$ 式,得到$$G(1)=\sum_{i=1}^n a_i\cdot F(1) \cdot m^i \\F’(1)=\sum_{i=1}^n a_i\cdot m^i$$于是只需用 kmp 判断给定序列的每个前缀是不是它的 border 就可以了. 用 %04d 可以达到题目要求的输出效果,当然也可以自己写一下输出. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;typedef unsigned long long ull;const int P=1e4;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return a * b % P;&#125;int n,m,T,pw[MAXN],s[MAXN],fail[MAXN];int main()&#123; m=read(),T=read(); pw[0]=1; for(int i=1;i&lt;=100000;++i) pw[i]=mul(pw[i-1],m); while(T--) &#123; int ans=0; n=read(); for(int i=1;i&lt;=n;++i) s[i]=read(); for(int i=2;i&lt;=n;++i) &#123; int j=fail[i-1]; while(j &amp;&amp; s[j+1]!=s[i]) j=fail[j]; if(s[j+1]==s[i]) ++j; fail[i]=j; &#125; for(int i=n;i;i=fail[i]) inc(ans,pw[i]); printf("%04d\n",ans); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>kmp</tag>
        <tag>概率生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 2707 走迷宫]]></title>
    <url>%2F2019%2F12%2F13%2Fbzoj-2707-%E8%B5%B0%E8%BF%B7%E5%AE%AB%2F</url>
    <content type="text"><![CDATA[tarjan 缩点 + 高斯消元. 设 $f(i)$ 表示当前在点 $i$ ,到达终点的期望步数,转移有$$f(i)=1+\sum_{i\to j\in E} \frac{f(j)}{outdeg(i)}$$直接高斯消元复杂度是 $O(n^3)$ ,无法接受. 注意到成环的情况只可能存在于同一个 SCC 中,而每个 SCC 的大小 $\le 100$ ,考虑对每个 SCC 高斯消元. 用 tarjan 将每个 SCC 缩成一个点,删掉那些不能到终点的点,或者存在某个后继不能到终点的点. 如果起点此时被删掉了,说明答案为 INF . 缩点后的图为 DAG ,将所有点做一个拓扑排序,按照拓扑序从后往前处理每个 SCC . 处理某个 SCC 时,对于每条内部点连出去的边,另一端要么也在该 SCC 内,要么已经在其他 SCC 中被计算过了. 于是用高斯消元可以解出这个 SCC 内所有点的 $f$ 值. 记 SCC 大小为 $s$ ,则时间复杂度为 $O(m+\sum s^3)$ . 实数的高斯消元需要注意精度问题,加个 eps 来判断是否为 0 . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e4+10,K=101;const double eps=1e-8;double a[K][K],tmp[K],f[MAXN];int siz;void Gauss()&#123; for(int i=0;i&lt;siz;++i) &#123; int j; for(j=i;j&lt;siz;++j) if(fabs(a[i][j])&gt;eps) break; for(int k=i;k&lt;=siz;++k) swap(a[i][k],a[j][k]); for(int j=i+1;j&lt;siz;++j) &#123; double t=a[j][i]/a[i][i]; for(int k=i;k&lt;=siz;++k) a[j][k]-=t*a[i][k]; &#125; &#125; for(int i=siz-1;i&gt;=0;--i) &#123; tmp[i]=a[i][siz]/a[i][i]; for(int j=i-1;j&gt;=0;--j) a[j][siz]-=tmp[i]*a[j][i]; &#125; for(int i=0;i&lt;siz;++i) for(int j=0;j&lt;=siz;++j) a[i][j]=0;&#125;int n,m,S,T;int dfn[MAXN],low[MAXN],idx=0,stk[MAXN],tp=0,bel[MAXN],rnk[MAXN],cnt=0;vector&lt;int&gt; scc[MAXN],inv[MAXN];int ecnt=0,head[MAXN],to[MAXN*100],nx[MAXN*100],indeg[MAXN],outdeg[MAXN];void addedge(int u,int v)&#123; ++ecnt,++outdeg[u]; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt; inv[v].push_back(u);&#125;bool vis[MAXN],del[MAXN],in[MAXN];queue&lt;int&gt; q;void init()&#123; vis[T]=true; q.push(T); while(!q.empty()) &#123; int u=q.front(); q.pop(); siz=inv[u].size(); for(int i=0;i&lt;siz;++i) &#123; int v=inv[u][i]; if(!vis[v]) &#123; vis[v]=true; q.push(v); &#125; &#125; &#125; for(int i=1;i&lt;=n;++i) if(!vis[i]) &#123; del[i]=true; q.push(i); &#125; while(!q.empty()) &#123; int u=q.front(); q.pop(); siz=inv[u].size(); for(int i=0;i&lt;siz;++i) &#123; int v=inv[u][i]; if(!del[v]) &#123; del[v]=true; q.push(v); &#125; &#125; &#125;&#125;void tarjan(int u)&#123; in[u]=true,stk[++tp]=u; dfn[u]=low[u]=++idx; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(!dfn[v]) &#123; tarjan(v); low[u]=min(low[u],low[v]); &#125; else if(in[v]) low[u]=min(low[u],dfn[v]); &#125; if(dfn[u]==low[u]) &#123; ++cnt; int x=0,t=0; while(x!=u) &#123; x=stk[tp--]; bel[x]=cnt; scc[cnt].push_back(x); rnk[x]=t++; in[x]=false; &#125; &#125;&#125;int p[MAXN],tot=0;vector&lt;int&gt; G[MAXN];void toposort()&#123; for(int i=1;i&lt;=cnt;++i) vis[i]=false; for(int i=1;i&lt;=cnt;++i) &#123; siz=scc[i].size(); for(int j=0;j&lt;siz;++j) &#123; int u=scc[i][j]; for(int k=head[u];k;k=nx[k]) &#123; int v=to[k]; if(bel[u]!=bel[v] &amp;&amp; !vis[bel[v]]) G[i].push_back(bel[v]),vis[bel[v]]=true,++indeg[bel[v]]; &#125; &#125; for(int j=0;j&lt;siz;++j) &#123; int u=scc[i][j]; for(int k=head[u];k;k=nx[k]) &#123; int v=to[k]; if(bel[u]!=bel[v]) vis[bel[v]]=false; &#125; &#125; &#125; for(int i=1;i&lt;=cnt;++i) if(!indeg[i]) q.push(i); while(!q.empty()) &#123; int u=q.front(); q.pop(); p[++tot]=u; siz=G[u].size(); for(int i=0;i&lt;siz;++i) &#123; int v=G[u][i]; --indeg[v]; if(!indeg[v]) q.push(v); &#125; &#125;&#125;void solve()&#123; while(cnt) &#123; int x=p[cnt]; siz=scc[x].size(); for(int y=0;y&lt;siz;++y) &#123; int u=scc[x][y]; if(u!=T) &#123; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(del[v]) continue; if(bel[v]==bel[u]) a[y][rnk[v]]-=1.0/outdeg[u]; // 可能有重边,用-= else a[y][siz]+=f[v]/outdeg[u]; &#125; a[y][siz]+=1; &#125; a[y][y]+=1; // 可能有自环,用+= &#125; Gauss(); for(int y=0;y&lt;siz;++y) f[scc[x][y]]=tmp[y]; --cnt; &#125;&#125;int main()&#123; n=read(),m=read(),S=read(),T=read(); for(int i=1;i&lt;=m;++i) &#123; int u=read(),v=read(); addedge(u,v); &#125; init(); if(del[S]) return puts("INF"),0; for(int i=1;i&lt;=n;++i) if(!del[i] &amp;&amp; !dfn[i]) tarjan(i); toposort(); solve(); printf("%.3f\n",f[S]); return 0;&#125;]]></content>
      <tags>
        <tag>tarjan</tag>
        <tag>概率/期望</tag>
        <tag>高斯消元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3143 游走]]></title>
    <url>%2F2019%2F12%2F13%2Fbzoj-3143-%E6%B8%B8%E8%B5%B0%2F</url>
    <content type="text"><![CDATA[图上随机游走. 每条边的贡献是它被赋上的权值乘上它期望被经过的次数. 根据排序不等式,显然应该给期望被经过次数更大的边赋更小的权值,给期望被经过次数更小的边赋更大的权值. 设 $f(i)$ 表示点 $i$ 期望被经过的次数,则边 $(u,v)$ 期望被经过的次数为 $[u\neq n]\frac{f(u)}{\deg(u)}+[v\neq n]\frac{f(v)}{\deg(v)}$ . 转移有,$$f(i)=[i=1]+\sum_{(j,i)\in E,j\neq n} \frac{f(j)}{\deg(j)}$$ 高斯消元解出所有的 $f(i)$ ,时间复杂度 $O(n^3)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const double eps=1e-8;const int MAXN=1&lt;&lt;9,MAXM=MAXN*MAXN/2;int n,m,x[MAXM],y[MAXM],deg[MAXN];double a[MAXN][MAXN],f[MAXN],val[MAXM];void Gauss()&#123; for(int i=1;i&lt;=n;++i) &#123; int j; for(j=i;j&lt;=n;++j) if(fabs(a[j][i])&gt;eps) break; for(int k=1;k&lt;=n+1;++k) swap(a[i][k],a[j][k]); for(int j=i+1;j&lt;=n;++j) &#123; double t=a[j][i]/a[i][i]; for(int k=i;k&lt;=n+1;++k) a[j][k]-=t*a[i][k]; &#125; &#125; for(int i=n;i&gt;=1;--i) &#123; f[i]=a[i][n+1]/a[i][i]; for(int j=i-1;j&gt;=1;--j) a[j][n+1]-=a[j][i]*f[i]; &#125;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=m;++i) &#123; int u=read(),v=read(); x[i]=u,y[i]=v; ++deg[u],++deg[v]; if(v!=n) a[u][v]=-1; if(u!=n) a[v][u]=-1; &#125; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=n;++j) a[j][i]/=deg[i]; a[1][n+1]=1; for(int i=1;i&lt;=n;++i) a[i][i]=1; Gauss(); for(int i=1;i&lt;=m;++i) &#123; if(x[i]!=n) val[i]+=f[x[i]]/deg[x[i]]; if(y[i]!=n) val[i]+=f[y[i]]/deg[y[i]]; &#125; sort(val+1,val+1+m); double ans=0; for(int i=1;i&lt;=m;++i) ans+=val[i]*(m+1-i); printf("%.3f\n",ans); return 0;&#125;]]></content>
      <tags>
        <tag>概率/期望</tag>
        <tag>高斯消元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3720 Gty的妹子树]]></title>
    <url>%2F2019%2F12%2F13%2Fbzoj-3720-Gty%E7%9A%84%E5%A6%B9%E5%AD%90%E6%A0%91%2F</url>
    <content type="text"><![CDATA[树上分块. 考虑对树分块,限制块大小为 $\sqrt n$ . 加入一个点时,若它的父亲所在块大小达到了 $\sqrt n$ ,就给它新建一个块,否则将它加入父亲所在块. 对于每个块,用一个数组维护块内所有的权值,若有修改,直接将它重新 sort 一遍. 询问时,从 u 开始向下 dfs ,遇到 u 所在的块,暴力统计,遇到其他块,在维护的权值数组中二分即可算出贡献. 时间复杂度 $O(n\sqrt n \log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=6e4+10,B=250;int n,m,lastans=0,ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int w[MAXN],bel[MAXN],tot=0;struct Block&#123; int siz,val[B]; void Sort() &#123; sort(val,val+siz); &#125; void add(int x) &#123; val[siz++]=w[x]; Sort(); &#125; void modify(int x,int y) &#123; int pos=lower_bound(val,val+siz,w[x])-val; val[pos]=w[x]=y; Sort(); &#125; int query(int x) &#123; return siz-(upper_bound(val,val+siz,x)-val); &#125;&#125;b[MAXN];int Fa[MAXN];vector&lt;int&gt; G[MAXN];void dfs(int u,int fa)&#123; Fa[u]=fa; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa) continue; if(b[bel[u]].siz==B) &#123; bel[v]=++tot; b[tot].add(v); G[bel[u]].push_back(tot); &#125; else &#123; bel[v]=bel[u]; b[bel[v]].add(v); &#125; dfs(v,u); &#125;&#125;int dfs_block(int u,int x)&#123; int res=b[u].query(x); for(int i=0;i&lt;(signed)(G[u].size());++i) &#123; int v=G[u][i]; res+=dfs_block(v,x); &#125; return res;&#125;int dfs_calc(int u,int x)&#123; int res=0; if(w[u]&gt;x) ++res; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==Fa[u]) continue; if(bel[v]==bel[u]) res+=dfs_calc(v,x); else res+=dfs_block(bel[v],x); &#125; return res;&#125;int main()&#123; n=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; for(int i=1;i&lt;=n;++i) w[i]=read(); bel[1]=++tot; b[tot].add(1); dfs(1,0); int m=read(); for(int i=1;i&lt;=m;++i) &#123; int op=read(),x=read()^lastans,y=read()^lastans; if(op==0) printf("%d\n",lastans=dfs_calc(x,y)); else if(op==1) b[bel[x]].modify(x,y); else &#123; int z=++n; w[z]=y; addedge(x,z); if(b[bel[x]].siz==B) &#123; bel[z]=++tot; b[tot].add(z); G[bel[x]].push_back(tot); &#125; else &#123; bel[z]=bel[x]; b[bel[z]].add(z); &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3712 Fiolki]]></title>
    <url>%2F2019%2F12%2F12%2Fbzoj-3712-Fiolki%2F</url>
    <content type="text"><![CDATA[树上求 LCA . 对于第 $i$ 个操作,新建一个点 $p$ ,从 $p$ 向 $a,b$ 连边,之后如果 $b$ 还会参与反应,就用 $p$ 代替. 最后会连成一棵森林,考虑每对会产生沉淀的液体 $c_i,d_i​$ 带来的贡献. 如果它们不在一棵树中,显然没有贡献.否则,这两种液体会在它们的 LCA 处形成沉淀(如果还有剩余). 需要考虑之前发生的反应的影响,将所有反应按照 LCA 深度为第一关键字,优先级为第二关键字排序,模拟即可. 时间复杂度 $O(n\log n+k\log k+k\log n)​$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=4e5+10,K=19;int ecnt=0,to[MAXN],nx[MAXN],head[MAXN];int n,m,k,cnt=0,fa[MAXN][K],col[MAXN],dep[MAXN];void addedge(int u,int v)&#123; fa[v][0]=u; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;struct Reaction&#123; int x,y,dep,pri; bool operator &lt; (const Reaction &amp;rhs) const &#123; if(dep!=rhs.dep) return dep&gt;rhs.dep; return pri&lt;rhs.pri; &#125; &#125;p[MAXN&lt;&lt;1];void dfs(int u,int F)&#123; fa[u][0]=F,col[u]=cnt; for(int i=1;(1&lt;&lt;i)&lt;=dep[u];++i) fa[u][i]=fa[fa[u][i-1]][i-1]; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; dep[v]=dep[u]+1; dfs(v,u); &#125;&#125;int lca(int x,int y)&#123; if(dep[x]&lt;dep[y]) swap(x,y); for(int i=K-1;i&gt;=0;--i) if((1&lt;&lt;i)&lt;=dep[x]-dep[y]) x=fa[x][i]; if(x==y) return x; for(int i=K-1;i&gt;=0;--i) if((1&lt;&lt;i)&lt;=dep[x] &amp;&amp; fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i]; return fa[x][0];&#125;int g[MAXN],pos[MAXN];int main()&#123; n=read(),m=read(),k=read(); for(int i=1;i&lt;=n;++i) g[i]=read(),pos[i]=i; for(int i=1;i&lt;=m;++i) &#123; int a=read(),b=read(); addedge(n+i,pos[a]); addedge(n+i,pos[b]); pos[a]=pos[b]=n+i; &#125; for(int i=1;i&lt;=n+m;++i) if(!fa[i][0]) &#123; ++cnt; dfs(i,0); &#125; cnt=0; for(int i=1;i&lt;=k;++i) &#123; int x=read(),y=read(); if(col[x]!=col[y]) continue; ++cnt; p[cnt].x=x,p[cnt].y=y; p[cnt].dep=dep[lca(x,y)]; p[cnt].pri=cnt; &#125; ll ans=0; sort(p+1,p+1+cnt); for(int i=1;i&lt;=cnt;++i) &#123; int x=p[i].x,y=p[i].y; int t=min(g[x],g[y]); ans+=t; g[x]-=t,g[y]-=t; &#125; cout&lt;&lt;(ans&lt;&lt;1)&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3717 Pakowanie]]></title>
    <url>%2F2019%2F12%2F12%2Fbzoj-3717-Pakowanie%2F</url>
    <content type="text"><![CDATA[状压 dp. 考虑将所有包按照容量从大到小排序,从前往后依次装好每个包. 设 $f(S)$ 表示已经装了集合 $S$ 中的物品,最少用的包的数目,. 设 $g(S)$ 表示在用最少的包的前提下,最后的那个包最多还剩的容量. 枚举加入哪个物品,若剩余容量足够,就加入剩余容量,否则去新开一个包. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=24;int n,m,a[MAXN],c[MAXN*5];int f[1&lt;&lt;MAXN],g[1&lt;&lt;MAXN];bool in(int S,int x)&#123; return (S&gt;&gt;x)&amp;1;&#125;void upd(int &amp;x,int y)&#123; x=max(x,y);&#125;int main()&#123; n=read(),m=read(); for(int i=0; i&lt;n; ++i) a[i]=read(); for(int i=1; i&lt;=m; ++i) c[i]=read(); sort(c+1,c+m+1); reverse(c+1,c+m+1); memset(f,0x3f,sizeof f); int inf=f[0]; f[0]=0,g[0]=0; for(int S=0; S&lt;(1&lt;&lt;n); ++S) if(f[S]&lt;inf) for(int i=0; i&lt;n; ++i) if(!in(S,i)) &#123; if(g[S]&gt;=a[i]) &#123; if(f[S]&lt;f[S|(1&lt;&lt;i)]) f[S|(1&lt;&lt;i)]=f[S],g[S|(1&lt;&lt;i)]=g[S]-a[i]; else if(f[S]==f[S|(1&lt;&lt;i)]) upd(g[S|(1&lt;&lt;i)],g[S]-a[i]); &#125; else if(c[f[S]+1]&gt;=a[i]) &#123; if(f[S]+1&lt;f[S|(1&lt;&lt;i)]) f[S|(1&lt;&lt;i)]=f[S]+1,g[S|(1&lt;&lt;i)]=c[f[S]+1]-a[i]; else if(f[S]+1==f[S|(1&lt;&lt;i)]) upd(g[S|(1&lt;&lt;i)],c[f[S]+1]-a[i]); &#125; &#125; if(f[(1&lt;&lt;n)-1]&lt;inf) cout&lt;&lt;f[(1&lt;&lt;n)-1]&lt;&lt;endl; else puts("NIE"); return 0;&#125;]]></content>
      <tags>
        <tag>状压dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3711 Druzyny]]></title>
    <url>%2F2019%2F12%2F12%2Fbzoj-3711-Druzyny%2F</url>
    <content type="text"><![CDATA[cdq 分治 + 线段树. 设 $f(i)$ 表示前 $i$ 个人能分成的组数最大值,转移有,$$f(i)=\max_{j=0}^{i-1} \lbrace f(j) \rbrace +1 ,\max c\le i-j \le \min d$$其中, $\max c$ 表示区间 $[j+1,i]$ 内最大的 $c$ , $\min d$ 表示区间 $[j+1,i]$ 内最小的 $d$ . $d$ 的限制是容易处理的,若只考虑 $d$ 的限制,对于每个 $i$ ,合法的 $j$ 显然是一段后缀,设为 $[g(i),i-1]$ . 而 $g(i)​$ 是不降的,可以用双指针扫,每次用线段树问一下区间最小的 $d​$ ,就能在 $O(n\log n)​$ 的时间内预处理出来. 要加上 $c$ 的限制,考虑 cdq 分治,要算出 $[l,r]$ 内的每个 $f(i)$ ,若 $l=r$ ,就返回. 否则,先取划分位置 $k$ 表示区间 $[l+1,r]$ 内 $c$ 最大的位置. 递归处理 $[l,k-1]$ 后,考虑 $[l,k-1]$ 的 $dp$ 值对 $[k,r]$ 的贡献,再递归处理 $[k,r]$ . 在区间 $[k,r]$ 内依次枚举 $i$ ,计算左边区间对右边区间每个 $i$ 的贡献,并且时刻维护合法的 $j$ 中, $f(j)$ 的最大值. 初始时,合法的 $j$ 所在区间为 $[\max(l,g(i)),\min(k-1,i-c_k)]$ . 每当 $i$ 往右边移动一个位置,当 $i&lt; k+c_k$ 时, $j$ 所在区间右端点也会往右边移动一个位置,直接把它的贡献加入. 而 $j​$ 所在区间左端点也可能往右边移动,由于不支持删除一段区间的贡献,只能用线段树重新查询一次. 当 $i$ 移动到 $k+c_k$ 时,右端点不再移动,而左端点单调不降,每次二分出左端点相同的一段 $i$ ,用线段树一起更新答案. 计算贡献的同时还要计算方案数,可以定义一个二元组 $(mx,cnt)​$ ,一起转移即可. 这样计算,时间复杂度 $T(n)=T(x)+T(n-x)+\min(x,n-x)​$ ,为 $O(n\log n)​$ . 如果我们对于每个 $i$ ,都对合法的 $j$ 所在区间用线段树查询一次,由于划分位置不一定是区间中点,就退化了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7,inf=1e9;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;const int MAXN=1e6+100000;struct Info&#123; int mx,cnt; Info(int mx=0,int cnt=0):mx(mx),cnt(cnt) &#123;&#125; friend Info operator + (const Info &amp;a,const Info &amp;b) &#123; if(a.mx!=b.mx) return a.mx&gt;b.mx?a:b; else return Info(a.mx,add(a.cnt,b.cnt)); &#125; Info operator + (int x) &#123; return Info(mx+x,cnt); &#125; Info operator += (Info b) &#123; *this=*this+b; return *this; &#125;&#125; f[MAXN];int n,c[MAXN],d[MAXN],g[MAXN];struct node&#123; int maxc,pos,mind; Info f,tag;&#125; Tree[MAXN&lt;&lt;1];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1]void pushup(int o)&#123; root.maxc=max(lson.maxc,rson.maxc); if(lson.maxc&gt;rson.maxc) root.pos=lson.pos; else root.pos=rson.pos; root.mind=min(lson.mind,rson.mind); root.f=lson.f+rson.f;&#125;void BuildTree(int o,int l,int r)&#123; root.tag=Info(-inf,0); if(l==r) &#123; root.maxc=c[l]; root.pos=l; root.mind=d[l]; root.f=f[l]; return; &#125; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); pushup(o);&#125;int query_pos(int o,int l,int r,int L,int R)&#123; if(L&lt;=l &amp;&amp; r&lt;=R) return root.pos; int mid=(l+r)&gt;&gt;1; if(R&lt;=mid) return query_pos(o&lt;&lt;1,l,mid,L,R); if(L&gt;mid) return query_pos(o&lt;&lt;1|1,mid+1,r,L,R); int lp=query_pos(o&lt;&lt;1,l,mid,L,R); int rp=query_pos(o&lt;&lt;1|1,mid+1,r,L,R); return c[lp]&gt;c[rp]?lp:rp;&#125;int query_mind(int o,int l,int r,int L,int R)&#123; if(L&gt;R) return n+1; if(L&lt;=l &amp;&amp; r&lt;=R) return root.mind; int mid=(l+r)&gt;&gt;1; if(R&lt;=mid) return query_mind(o&lt;&lt;1,l,mid,L,R); if(L&gt;mid) return query_mind(o&lt;&lt;1|1,mid+1,r,L,R); int ld=query_mind(o&lt;&lt;1,l,mid,L,R); int rd=query_mind(o&lt;&lt;1|1,mid+1,r,L,R); return min(ld,rd);&#125;void upd_add(int o,int l,int r,int L,int R,Info c)&#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; root.tag+=c; return; &#125; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd_add(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) upd_add(o&lt;&lt;1|1,mid+1,r,L,R,c);&#125;Info query_f(int o,int l,int r,int L,int R)&#123; if(L&gt;R) return Info(-inf,0); if(L&lt;=l &amp;&amp; r&lt;=R) return root.f; int mid=(l+r)&gt;&gt;1; if(R&lt;=mid) return query_f(o&lt;&lt;1,l,mid,L,R); if(L&gt;mid) return query_f(o&lt;&lt;1|1,mid+1,r,L,R); Info lf=query_f(o&lt;&lt;1,l,mid,L,R); Info rf=query_f(o&lt;&lt;1|1,mid+1,r,L,R); return lf+rf;&#125;Info query_f(int pos)&#123; int o=1,l=0,r=n; Info res=Info(-inf,0); while(l!=r) &#123; res+=root.tag; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) o=o&lt;&lt;1,r=mid; else o=o&lt;&lt;1|1,l=mid+1; &#125; return res+root.tag;&#125;void upd_set(int o,int l,int r,int pos,Info c)&#123; if(l==r) &#123; root.f=c; return; &#125; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) upd_set(o&lt;&lt;1,l,mid,pos,c); else upd_set(o&lt;&lt;1|1,mid+1,r,pos,c); root.f=lson.f+rson.f;&#125;void modify(int l,int k,int r)&#123; int i=max(c[k]+l,k); if(g[i]&gt;=k || i&gt;r) return; int jl=max(l,g[i]),jr=i-c[k]; Info tmp=query_f(1,0,n,jl,jr)+1; while(i&lt;=k+c[k]-1 &amp;&amp; i&lt;=r) &#123; if(g[i]&gt;jl) &#123; if(g[i]&gt;=k) return; jl=g[i]; tmp=query_f(1,0,n,jl,jr)+1; &#125; f[i]+=tmp; ++jr; if(jr&gt;=jl) tmp+=f[jr]+1; ++i; &#125; while(i&lt;=r) &#123; if(g[i]&gt;jl) &#123; if(g[i]&gt;=k) return; jl=g[i]; &#125; tmp=query_f(1,0,n,jl,k-1)+1; int t=query_mind(1,0,n,jl+1,n); if(t&gt;r) &#123; upd_add(1,0,n,i,r,tmp); return; &#125; upd_add(1,0,n,i,t-1,tmp); i=t; &#125;&#125;void cdq(int l,int r)&#123; if(l==r) &#123; if(l) upd_set(1,0,n,l,f[l]+=query_f(l)); return; &#125; int k=query_pos(1,0,n,l+1,r); cdq(l,k-1); modify(l,k,r); cdq(k,r);&#125;int main()&#123; n=read(); for(int i=1; i&lt;=n; ++i) c[i]=read(),d[i]=read(); BuildTree(1,0,n); for(int i=0; i&lt;=n; ++i) d[i]=n+1,f[i]=Info(-inf,0); f[0]=Info(0,1); for(int i=0,j=0; i&lt;=n; ++i) &#123; while(j&lt;i &amp;&amp; i-j&gt;query_mind(1,0,n,j+1,i)) ++j; g[i]=j; if(d[g[i]]&gt;n) d[g[i]]=i; &#125; BuildTree(1,0,n); cdq(0,n); if(f[n].mx&gt;0) printf("%d %d\n",f[n].mx,f[n].cnt); else puts("NIE"); return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>cdq分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3875 骑士游戏]]></title>
    <url>%2F2019%2F12%2F12%2Fbzoj-3875-%E9%AA%91%E5%A3%AB%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[SPFA. 设第 $i$ 只怪物的消耗为 $f(i)$ ,则$$f(i)=\min\lbrace K_i,S_i+\sum_{j\in son(i)} f(j) \rbrace$$这个转移可能成环,存在后效性,用 SPFA 去转移,一个点更新之后,要把所有连向它的点入队更新答案. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;int n,in[MAXN];ll dis[MAXN],s[MAXN];vector&lt;int&gt; sons[MAXN],fa[MAXN];queue&lt;int&gt; q;void SPFA()&#123; for(int i=1;i&lt;=n;++i) &#123; q.push(i); in[i]=1; &#125; while(!q.empty()) &#123; int u=q.front(); q.pop(); in[u]=false; ll tmp=s[u]; for(int i=0;i&lt;(signed)(sons[u].size());++i) tmp+=dis[sons[u][i]]; if(tmp&lt;dis[u]) &#123; dis[u]=tmp; for(int i=0;i&lt;(signed)(fa[u].size());++i) &#123; int v=fa[u][i]; if(!in[v]) &#123; q.push(v); in[v]=1; &#125; &#125; &#125; &#125;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) &#123; s[i]=read(); dis[i]=read(); int m=read(); for(int k=0;k&lt;m;++k) &#123; int j=read(); sons[i].push_back(j); fa[j].push_back(i); &#125; &#125; SPFA(); cout&lt;&lt;dis[1]&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2271 遗忘的集合]]></title>
    <url>%2F2019%2F12%2F12%2FLoj-2271-%E9%81%97%E5%BF%98%E7%9A%84%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[多项式 $\ln$ + 莫比乌斯反演. Loj 556 是给出每种物品的体积,问填充背包的方案数,而这个题是给出填充背包的方案数,问各个物品的体积. 仍然考虑生成函数,设方案数的生成函数为 $F(x)$ ,集合 $S$ 是否包含 $i$ 记为 $a_i$ ,则$$F(x)=\prod_{i=1}^n (\frac{1}{1-x_i})^{a_i} \\\ln(F(x))=\sum_{i=1}^n a_i\cdot \ln(\frac{1}{1-x_i}) \\\ln(F(x))=\sum_{i=1}^n a_i\cdot \sum_{j=1}^{\infty} \frac{x^{ij}}{j} \\\ln(F(x))=\sum_{i=1}^{\infty} x_i\cdot \sum_{d|i} a_d\cdot \frac{d}{i}$$将 $\ln(F(x))$ 求出,注意卷积要使用 MTT . 记 $\ln(F(x))$ 对应的数列为 $f$ ,则$$n\cdot f_n=\sum_{d|n} d\cdot a_d$$莫比乌斯反演,$$i\cdot a_i=\sum_{d|i} \mu(\frac{i}{d})\cdot d\cdot f_d$$预处理 $\mu$ 后,将每个 $d\cdot f_d$ 的贡献加到 $i$ 中,根据调和级数,时间复杂度 $O(n\log n)$ . 最后可以直接输出每个不为 $0$ 的 $i\cdot a_i$ ,因为 $a_i$ 只会是 $0,1$ . 写了一发 myy 的 $4$ 次 DFT 的 MTT ,注意这个做法中,虚部也存了信息,所以 IDFT 的时候不能只对实部除以 $n$. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=(1&lt;&lt;21)+1000;int P;int add(int a,int b)&#123; return ((1LL*a+1LL*b)%P+P)%P;&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;struct Complex&#123; double r,i; Complex(double r=0,double i=0):r(r),i(i) &#123;&#125; Complex operator + (const Complex &amp;rhs) const &#123; return Complex(r+rhs.r,i+rhs.i); &#125; Complex operator - (const Complex &amp;rhs) const &#123; return Complex(r-rhs.r,i-rhs.i); &#125; Complex operator * (const Complex &amp;rhs) const &#123; return Complex(r*rhs.r-i*rhs.i,r*rhs.i+i*rhs.r); &#125; Complex conj() &#123; return Complex(r,-i); &#125;&#125;;const double Pi=acos(-1.0);int rev[MAXN],curn;Complex omega[MAXN],inv[MAXN];void init(int n)&#123; if(curn==n) return; for(int i=0; i&lt;n; ++i) rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)*(n&gt;&gt;1)); for(int i=0;i&lt;n;++i) omega[i]=Complex(cos(Pi*i/n),sin(Pi*i/n)); curn=n;&#125;void DFT(Complex *a,int n,bool invflag)&#123; init(n); for(int i=0; i&lt;n; ++i) if(i&lt;rev[i]) swap(a[i],a[rev[i]]); for(int l=2; l&lt;=n; l&lt;&lt;=1) &#123; int m=l&gt;&gt;1; for(Complex *p=a; p!=a+n; p+=l) &#123; for(int i=0; i&lt;m; ++i) &#123; Complex t=omega[n/m*i]*p[i+m]; if(invflag) t=omega[n/m*i].conj()*p[i+m]; p[i+m]=p[i]-t; p[i]=p[i]+t; &#125; &#125; &#125; if(invflag) &#123; for(int i=0; i&lt;n; ++i) a[i].r/=n,a[i].i/=n; &#125;&#125;void MTT(int *A,int *B,int *C,int lenA,int lenB)&#123; int lenC=lenA+lenB-1,n=1; while(n&lt;lenC) n&lt;&lt;=1; if(lenA&lt;=10 &amp;&amp; lenB&lt;=10) &#123; static int tmp[MAXN]; for(int i=0;i&lt;lenC;++i) tmp[i]=0; for(int i=0;i&lt;lenA;++i) for(int j=0;j&lt;lenB;++j) inc(tmp[i+j],mul(A[i],B[j])); for(int i=0;i&lt;lenC;++i) C[i]=tmp[i]; return; &#125; static Complex a[MAXN],b[MAXN],c[MAXN],d[MAXN]; for(int i=0; i&lt;lenA; ++i) a[i]=Complex(A[i]&amp;32767,A[i]&gt;&gt;15); for(int i=0; i&lt;lenB; ++i) b[i]=Complex(B[i]&amp;32767,B[i]&gt;&gt;15); for(int i=lenA;i&lt;n;++i) a[i]=Complex(0,0); for(int i=lenB;i&lt;n;++i) b[i]=Complex(0,0); DFT(a,n,false); DFT(b,n,false); for(int i=0; i&lt;n; ++i) &#123; int j=(n-i)&amp;(n-1); Complex A0=(a[i]+a[j].conj())*Complex(0.5,0); Complex A1=(a[i]-a[j].conj())*Complex(0,-0.5); Complex B0=(b[i]+b[j].conj())*Complex(0.5,0); Complex B1=(b[i]-b[j].conj())*Complex(0,-0.5); c[i]=A0*B0+A0*B1*Complex(0,1); d[i]=A1*B0+A1*B1*Complex(0,1); &#125; DFT(c,n,true); DFT(d,n,true); for(int i=0; i&lt;lenC; ++i) &#123; int s1=(ll)(c[i].r+0.5)%P; int s2=(ll)(c[i].i+0.5)%P; int s3=(ll)(d[i].r+0.5)%P; int s4=(ll)(d[i].i+0.5)%P; C[i]=add(s1,mul(s4,1&lt;&lt;30)); inc(C[i],mul(add(s2,s3),1&lt;&lt;15)); &#125;&#125;void PolyInverse(int *A,int *B,int N) // B=A^(-1)&#123; int n=1; while(n&lt;N) n&lt;&lt;=1; static int res[MAXN],tmp[MAXN]; res[0]=fpow(A[0],P-2); for(int i=2; i&lt;=n; i&lt;&lt;=1) &#123; MTT(A,res,tmp,i,i); MTT(tmp,res,tmp,i,i); for(int j=0; j&lt;i; ++j) res[j]=add(mul(2,res[j]),P-tmp[j]); &#125; copy(res,res+N,B);&#125;void PolyDiff(int *A,int n)&#123; for(int i=0; i&lt;n-1; ++i) A[i]=mul(i+1,A[i+1]); A[n-1]=0;&#125;void PolyInt(int *A,int n)&#123; for(int i=n+1; i&gt;=1; --i) A[i]=mul(fpow(i,P-2),A[i-1]); A[0]=0;&#125;void PolyLn(int *A,int *B,int n) // B=ln(A)&#123; static int invA[MAXN],tmp[MAXN]; PolyInverse(A,invA,n); copy(A,A+n,tmp); PolyDiff(tmp,n); MTT(tmp,invA,tmp,n,n); PolyInt(tmp,n); copy(tmp,tmp+n,B);&#125;int n,m=0,ans[MAXN],a[MAXN],f[MAXN];int cnt=0,prime[MAXN],mu[MAXN],ism[MAXN];int main()&#123; n=read(),P=read(); for(int i=1; i&lt;=n; ++i) f[i]=read(); f[0]=1; PolyLn(f,f,n+1); ism[1]=1,mu[1]=1; for(int i=2; i&lt;=n; ++i) &#123; if(!ism[i]) &#123; prime[++cnt]=i; mu[i]=P-1; &#125; int lim=n/i; for(int j=1; j&lt;=cnt &amp;&amp; prime[j]&lt;=lim; ++j) &#123; ism[i*prime[j]]=1; if(i%prime[j]) mu[i*prime[j]]=P-mu[i]; else &#123; mu[i*prime[j]]=0; break; &#125; &#125; &#125; for(int i=1; i&lt;=n; ++i) &#123; int x=mul(i,f[i]); for(int j=i; j&lt;=n; j+=i) inc(a[j],mul(mu[j/i],x)); &#125; for(int i=1; i&lt;=n; ++i) if(a[i]) ans[++m]=a[i]; printf("%d\n",m); for(int i=1; i&lt;=m; ++i) printf("%d ",ans[i]); puts(""); return 0;&#125;]]></content>
      <tags>
        <tag>多项式</tag>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2253 礼物]]></title>
    <url>%2F2019%2F12%2F11%2FLoj-2253-%E7%A4%BC%E7%89%A9%2F</url>
    <content type="text"><![CDATA[二项式定理 + 矩阵快速幂. 设 $f(i)$ 表示前 $i$ 个人带来的礼物总和,显然有 $f(0)=0,f(i)=2f(i-1)+i^k$ . 答案为 $f(n)-f(n-1)=f(n-1)+n^k$ ,于是只需要设法求出 $f(n-1)$ . 用矩阵快速幂加速递推,需要将 $i^k$ 也通过一些元素线性表示出来. 考虑将它用二项式定理展开,$$i^k=((i-1)+1)^k=\sum_{j=0}^k (i-1)^j \binom{k}{j}$$可以发现 $i^k$ 可以由 $(i-1)^0,(i-1)^1,\dots,(i-1)^k$ 线性表示. 于是向量中维护 $i^0,i^1,\dots,i^k,f(i)$ 这些元素,用矩阵快速幂加速转移. 时间复杂度 $O(k^3\log n)$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int K=12;int k;struct Matrix&#123; int v[K][K]; Matrix()&#123;memset(v,0,sizeof v);&#125; Matrix operator * (const Matrix &amp;rhs) const &#123; Matrix res; for(int i=0;i&lt;=k+1;++i) for(int p=0;p&lt;=k+1;++p) if(v[i][p]) for(int j=0;j&lt;=k+1;++j) inc(res.v[i][j],mul(v[i][p],rhs.v[p][j])); return res; &#125; void init() &#123; for(int i=0;i&lt;=k;++i) &#123; v[i][0]=1; for(int j=1;j&lt;=i;++j) v[i][j]=add(v[i-1][j],v[i-1][j-1]); &#125; memcpy(v[k+1],v[k],sizeof v[k+1]); v[k+1][k+1]=2; &#125;&#125;st,trans;Matrix fpow(Matrix a,ll b)&#123; Matrix res; for(int i=0;i&lt;=k+1;++i) res.v[i][i]=1; while(b) &#123; if(b&amp;1LL) res=res*a; a=a*a; b&gt;&gt;=1; &#125; return res;&#125;ll n;int main()&#123; n=read(),k=read(); if(n==1) return puts("1"),0; trans.init(); for(int i=0;i&lt;=k+1;++i) st.v[i][0]=1; st=fpow(trans,n-2)*st; int ans=st.v[k+1][0]; inc(ans,fpow(n%P,k)); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>二项式定理</tag>
        <tag>矩阵加速</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 165,166 拉格朗日插值]]></title>
    <url>%2F2019%2F12%2F11%2FLoj-165%2C166-%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E6%8F%92%E5%80%BC%2F</url>
    <content type="text"><![CDATA[拉格朗日插值. 给出 $n$ 次多项式 $f(x)$ 上的 $n+1$ 个点 $(x_0,y_0),(x_1,y_1),\dots ,(x_n,y_n)$ . 则对于没有给出的 $f(x)$ 可以表示为 $$f(x)=\sum_{i=0}^n y_i\cdot \prod_{j\neq i} \frac{x-x_j}{x_i-x_j}$$ Loj 165 拉格朗日插值 1对已经加入的每个点 $(x_i,y_i)$ ,维护一个$$t_i=y_i\cdot \prod_{j\neq i} \frac{1}{x_i-x_j}$$加入新点时,需要计算这个点的 $t$ ,以及修改之前所有点的 $t$ . 询问时,先计算一个 $prod=\prod (x-x_j)$ , 答案就是 $\sum_{i} t\cdot \frac{prod}{x-x_i}$ . 每次将 $x-x_i$ 的逆元一起求出,时间复杂度可以做到 $O(n^2+n\log P)$ . 比较懒,就写了复杂度 $O(n^2\log P)$ 的做法. 注意要特判询问的 $x$ 的点值已经给出的情况. code Loj 166 拉格朗日插值 2给出的 $x$ 是连续的,于是第 $i$ 个询问可以变成$$\begin{aligned}f(m+i)&amp;=\sum_{j=0}^n y_j\cdot \prod_{k\neq j} \frac{m+i-k}{j-k} \\&amp;=\frac{(m+i)!}{(m+i-n-1)!}\cdot \sum_{j=0}^n \frac{y_j\cdot (-1)^{n-j}}{j!\cdot (n-j)!\cdot (m+i-j)} \\&amp;=\frac{(m+i)!}{(m+i-n-1)!}\cdot \sum_{j=0}^n \frac{y_j\cdot (-1)^{n-j}}{j!\cdot (n-j)!} \cdot \frac{1}{m-n+(n+i-j)}\end{aligned}$$前面的系数是一个下降幂的形式,可以依次求出. 可以设$$A(i)=\frac{y_i\cdot (-1)^{n-i}}{i!\cdot (n-i)!} \\B(i)=\frac{1}{m-n+i}$$这样后面就是 $\sum A(j)\cdot B(n+i-j)$ 了,用 NTT 做卷积,$f(m+i)$ 就存在 $n+i$ 的位置上了. 时间复杂度可以做到 $O(n\log n)$ .比较懒,就写了 $O(n\log P)$ 的做法. code]]></content>
      <tags>
        <tag>数学</tag>
        <tag>拉格朗日插值</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191211]]></title>
    <url>%2F2019%2F12%2F11%2Ftest20191211%2F</url>
    <content type="text"><![CDATA[被虐了. $Polynomial$把 $A=1,A&gt;B,B&gt;C​$ 的情况判掉,剩下的情况用 exgcd 暴搜就可以了. $Password$打表可以发现,对于任意 $i\ge 1$ ,都有第 $i+1$ 行和第 $i+3$ 行完全相同. 于是只需要维护前 $3$ 行的信息. 分块,维护前 $i$ 个块中, $j$ 一共出现了几次,前缀出现次数为 $j$ 的位置有几个,分别去更新第 $2$ 行,第 $3$ 行的答案. $Proposition$每次询问时,枚举所有变量的取值以及 $Q$ 的取值,用一个栈去模拟公式 $P$ 的计算. 可以得出对于每组变量的取值,为使 $P$ 为真, $Q$ 需要为真/假/都可以. 设 $f(i,S,0/1)$ 表示用了 $i$ 个符号,变量的取值状态为 $S$ , $Q$ 为 $0/1$ 时的方案数. 注意到 $a\to b=\lnot a\lor b$ ,所以转移是一个 or 卷积的形式,用 $FWT$ 优化.]]></content>
      <tags>
        <tag>状压dp</tag>
        <tag>分块</tag>
        <tag>暴力</tag>
        <tag>test</tag>
        <tag>FWT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 556 咱们去烧菜吧]]></title>
    <url>%2F2019%2F12%2F10%2FLoj-556-%E5%92%B1%E4%BB%AC%E5%8E%BB%E7%83%A7%E8%8F%9C%E5%90%A7%2F</url>
    <content type="text"><![CDATA[泰勒展开 + 多项式 $\exp$ 处理多重背包计数. 这题的数据有锅,原本的题面是 $a_i&gt;0$ 的,但 std 数据造错了,造出了 $a_i=0$ 的数据,甚至有 $a_i=b_i=0$ 导致答案为 $\infty$ 的数据,但管理员修的时候以为是题面数据范围写错了,就把题面改掉了. $a_i=0$ 可以直接忽略它,最后将方案数乘上 $b_i+1$ ,于是在接下来的分析以及代码中都不考虑 $a_i=0$ 的情况. 无限背包可以转化成多重背包,将 $b_i$ 调整为最多能放下的物品数目即可,于是只用考虑多重背包的计数. 考虑写出答案的生成函数 $A(x)$ ,$$A(x)=\prod_{i=1}^m (\sum_{k=0}^{b_i} x^{k\cdot a_i})=\prod_{i=1}^m \frac{1-x^{(b_i+1)\cdot a_i}}{1-x^{a_i}}$$直接求乘积需要先做 $m$ 次多项式求逆,时间复杂度不能接受. 考虑将两边同时取对数,得到$$\ln A(x)=\sum_{i=1}^{m} \ln(1-x^{(b_i+1)\cdot a_i})-\ln(1-x^{a_i})$$设 $f(k)=\ln(1-x^k)$ ,将它在 $x_0=0$ 处做泰勒展开,得到$$f(k)=\ln(1-x^k)=-\sum_{i=1}^{\infty} \frac{x^{ki}}{i}$$把相同的 $\ln (1-x^k)$ 合并同类项后,对每个 $k$ ,暴力枚举 $i$ ,将次数 $\le n$ 的贡献加入 $\ln A(x)$ 中. 每个 $k$ 需要枚举的次数是 $\frac{n}{k}$ ,而最多只有 $2m$ 个不相同的 $k$ 需要枚举. 将 $m,n$ 看做同阶,根据调和级数的求和,在这一步就可以用 $O(n\log n)$ 的时间复杂度求出 $\ln A(x)$ . 最后再做一次多项式 $\exp$ 得到 $A(x)$ . 时间复杂度 $O(n\log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353,G=3;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=4e5+10;int rev[MAXN],omega[MAXN],inv[MAXN],curn=0;void init(int n)&#123; if(curn==n) return; for(int i=0;i&lt;n;++i) rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)*(n&gt;&gt;1)); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; omega[l]=fpow(G,(P-1)/l); inv[l]=fpow(omega[l],P-2); &#125; curn=n;&#125;void DFT(int *a,int n,bool invflag)&#123; init(n); for(int i=0;i&lt;n;++i) if(i&lt;rev[i]) swap(a[i],a[rev[i]]); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; int m=l&gt;&gt;1; int gi=omega[l]; if(invflag) gi=inv[l]; for(int *p=a;p!=a+n;p+=l) &#123; int g=1; for(int i=0;i&lt;m;++i) &#123; int t=mul(g,p[i+m]); p[i+m]=add(p[i],P-t); p[i]=add(p[i],t); g=mul(g,gi); &#125; &#125; &#125; if(invflag) &#123; int invn=fpow(n,P-2); for(int i=0;i&lt;n;++i) a[i]=mul(a[i],invn); &#125;&#125;void NTT(int *A,int *B,int *C,int lenA,int lenB)&#123; int lenC=lenA+lenB-1,n=1; while(n&lt;lenC) n&lt;&lt;=1; static int a[MAXN],b[MAXN]; copy(A,A+lenA,a); fill(a+lenA,a+n,0); copy(B,B+lenB,b); fill(b+lenB,b+n,0); DFT(a,n,false); DFT(b,n,false); for(int i=0;i&lt;n;++i) C[i]=mul(a[i],b[i]); DFT(C,n,true);&#125;void PolyInverse(int *A,int *B,int N) // B=A^(-1)&#123; int n=1; while(n&lt;N) n&lt;&lt;=1; static int res[MAXN],tmp[MAXN]; res[0]=fpow(A[0],P-2); for(int i=2;i&lt;=n;i&lt;&lt;=1) &#123; NTT(A,res,tmp,i,i); NTT(tmp,res,tmp,i,i); for(int j=0;j&lt;i;++j) res[j]=add(mul(2,res[j]),P-tmp[j]); &#125; copy(res,res+N,B);&#125;void PolyDiff(int *A,int n)&#123; for(int i=0;i&lt;n-1;++i) A[i]=mul(i+1,A[i+1]); A[n-1]=0;&#125;int Inv[MAXN];void PolyInt(int *A,int n)&#123; for(int i=n+1;i&gt;=1;--i) A[i]=mul(Inv[i],A[i-1]); A[0]=0;&#125;void PolyLn(int *A,int *B,int n) // B=ln(A)&#123; static int invA[MAXN],tmp[MAXN]; PolyInverse(A,invA,n); copy(A,A+n,tmp); PolyDiff(tmp,n); NTT(tmp,invA,tmp,n,n); PolyInt(tmp,n); copy(tmp,tmp+n,B);&#125;void PolyExp(int *A,int *B,int N) // B=exp(A)&#123; int n=1; while(n&lt;N) n&lt;&lt;=1; static int res[MAXN],tmp[MAXN]; res[0]=1; for(int i=2;i&lt;=n;i&lt;&lt;=1) &#123; PolyLn(res,tmp,i); for(int j=0;j&lt;i;++j) tmp[j]=add(A[j],P-tmp[j]); inc(tmp[0],1); NTT(tmp,res,res,i,i); &#125; copy(res,res+N,B);&#125;int n,m,t[MAXN],A[MAXN];int main()&#123; n=read(),m=read(); int N=1; while(N&lt;n+1) N&lt;&lt;=1; Inv[1]=1; for(int i=2;i&lt;N;++i) Inv[i]=mul(P/i,add(P,-Inv[P%i])); for(int i=0;i&lt;m;++i) &#123; int a=read(),b=read(); inc(t[a],1); if(b &amp;&amp; a&lt;=n/(b+1)) inc(t[a*(b+1)],P-1); &#125; for(int k=1;k&lt;=n;++k) if(t[k]) for(int i=1;i*k&lt;=n;++i) inc(A[i*k],mul(t[k],Inv[i])); PolyExp(A,A,n+1); for(int i=1;i&lt;=n;++i) printf("%d\n",A[i]); puts(""); return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>多项式</tag>
        <tag>泰勒展开</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191210]]></title>
    <url>%2F2019%2F12%2F10%2Ftest20191210%2F</url>
    <content type="text"><![CDATA[被虐了. $sim$每 $q​$ 次操作可以看成一个置换 ,相当于进行了 $\lfloor \frac m q\rfloor​$ 次置换和 $m\bmod q​$ 次操作. 置换的 $\lfloor \frac m q\rfloor$ 次方可以用快速幂求出,剩下的 $m\bmod q$ 次操作直接模拟就可以了. $cs$可以发现一个结论,如果把期望得分分别为 $a,b$ 的两个相邻的裁判 $i,i+1$ 交换,且 $a\le b​$ . 那么最终的得分要么不变,要么减少 $1$ . 先考虑它们两人对得分的影响. 如果之前他们都投 $1$ ,交换后 $b$ 肯定也会投 $1$ , $a$ 投 $0$ 或 $1$ ,两人总得分不变或减少 $1$ . 如果之前 $a$ 投的 $1$ ,而 $b$ 投的 $0$ ,交换之后 $b$ 会投 $1$ ,而 $a$ 会投 $0$ ,两人总得分不变. 如果之前 $a$ 投的 $0$ ,而 $b$ 投的 $1$ ,交换之后,要么两者都投 $0$ ,要么 $b$ 投 $1$ , $a$ 投 $0$ ,两人总得分不变或减少 $1$ . 如果之前他们都投 $0$ ,交换之后,也都会投 $0$ ,两人总得分不变. 于是得出,交换后两人总得分不变或减少 $1$ . 再考虑交换之后,后面的人总得分变化情况. 若 $a,b$ 的总得分不变,后面的人投票情况也不会变,总得分不变. 若 $a,b$ 的总得分减少了 $1$ ,后面最多有一个人从 $0$ 变成 $1$ ,而其他人不变,总得分不变或减少 $1$ . 于是得出,交换后全局的总得分不变或减少 $1$ . 把所有裁判按照 $v$ 从小到大排,得分最大,从大到小排,得分最小. 而通过不断交换相邻的两个数,类似冒泡排序的过程,可以让最小值到最大值中每个分数都被取到. 那么当 $p$ 不能取到时,最优的方案就是让得分为最大值或最小值. 当 $p$ 能取到的时,最优的方案就是让得分为 $p$ . 用二分来做不断交换的这个过程. $count$考虑每对颜色相同的边 $a\to b,b\to c$ 的贡献,最多会有 $O(n^3)$ 对这样的边. 可以将这两条边删去,加入边 $a\to c$ ,得到了一张新图,贡献即为这张新图的欧拉回路数目. 若新图中, $b$ 的度数为 $0$ ,说明在原图中,任意一条欧拉回路都有 $a\to b,b\to c​$ 这部分,贡献就是原图的欧拉回路数目. 否则,得到的新图也是一张弱连通图,可以用 BEST theorem 求解欧拉回路个数. BEST theorem: 在弱连通图 $G​$ 中,若存在欧拉回路,则其数目为$${\rm ec}(G)=t_w(G)\prod_{v\in V} (\deg(v)-1)!$$其中 $w$ 是图 $G$ 中任意一个节点,而 $t_w(G)$ 表示在图 $G$ 中,以 $w$ 为根,边由儿子朝向父亲的有向生成树个数. 根据 matrix tree theorem ,这个数目等于图 $G$ 的 Laplacian 矩阵去掉第 $w$ 行第 $w$ 列的余子式. 每次用高斯消元算一遍余子式,时间复杂度 $O(n^6)$ . 考虑怎样由原图的 Laplacian 矩阵得到新图的 Laplacian 矩阵. 可以发现需要将 $(b,a),(c,b)$ 这两个位置 $+1$ ,而将 $(b,b),(c,a)$ 这两个位置 $-1$ . 为了方便,我们选择将第 $b$ 行第 $b$ 列去掉来算余子式,那么对行列式的影响只有 $(c,a)$ 这个位置减少了 $1$ . 考虑矩阵 $A​$ 的伴随矩阵 ${\rm adj\ } A​$ ,根据定义,它的第 $i​$ 行第 $j​$ 列是矩阵 $A​$ 去掉第 $j​$ 行第 $i​$ 列的代数余子式. 而当 $A$ 可逆时,有 $A^{-1}=\frac{1}{\det A}{\rm adj\ } A$ ,所以矩阵 $A$ 第 $i$ 行第 $j$ 列的代数余子式就是 $A^{-1}_{j,i}\cdot \det A$ . 那么把 $(c,a)$ 这个位置减掉 $1$ ,对行列式的影响就是减掉 $A^{-1}_{a,c}$ 乘上原来的行列式. 对于每个 $b$ 都要求一次去掉第 $b$ 行第 $b$ 列后的逆矩阵,时间复杂度 $O(n^4)$ . 上面那个做法瓶颈在求 $n$ 次逆矩阵,尝试进一步优化. 考虑用高斯消元求逆矩阵的过程,如果消掉了除了 $x$ 之外的元,那么提取出逆矩阵,将它去掉第 $x$ 行第 $x$ 列也是对的. 于是可以分治消元,定义函数 $solve(l,r)$ 表示当前 $[l,r]$ 内的元还没有消. 当 $l=r$ 时,表示其它元都消过了,于是就得到了原矩阵去掉第 $x$ 行第 $x$ 列后的逆矩阵. 否则,将 $[l,mid]$ 内的元消掉,调用 $solve(mid+1,r)$ ,将 $[mid+1,r]$ 内的元消掉,调用 $solve(l,mid)$ . 时间复杂度 $O(n^3\log n)$ .]]></content>
      <tags>
        <tag>二分</tag>
        <tag>线性代数</tag>
        <tag>高斯消元</tag>
        <tag>倍增</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2989 NOIP十合一]]></title>
    <url>%2F2019%2F12%2F09%2FLoj-2989-NOIP%E5%8D%81%E5%90%88%E4%B8%80%2F</url>
    <content type="text"><![CDATA[提交答案. 考虑仔细观察数据特点. 测试点 1特点: 图是由每个奇数点 $i$ 向 $i+1$ 连 $1$ 的边,向 $i+2$ 连 $0$ 的边,每个偶数点 $i$ 向 $i+1$ 连 $0$ 的边构成的. 询问 $(u,v,w)$ 时,特判 $u=v$ 的情况.否则,若 $u$ 为偶数,将它变成 $u+1$ ,若 $v$ 为偶数,将它变成 $v-1$ . 此时 $u,v$ 都是奇数,每次考虑让 $u$ 的编号 $+2$ . 若走 $u\to u+1\to u+2$ ,长度为 $1$ ,走 $u\to u+2$ ,长度为 $0$ . 那么可以得到答案为 ${(v-u)/2\choose w}$ . 模数不是质数,把它分解成 $2^{12}\times 3^8$ 后分开做,大概和拓展 Lucas 的做法差不多,最后 crt 合并. 测试点 2特点: 图是一条 $1\sim n$ 的链,链上边权为 $0$ ,每个点再向自己连出自环,自环有边权.每次询问的 $u$ 都为 $1$ . 设 $f(i,j)$ 表示从 $1$ 走到 $i$ ,路径边权和为 $j$ 的方案数. 注意一个自环可以走多次,所以是一个完全背包. 测试点 3特点: 图和测试点 2 一样,但询问的 $u$ 不一定为 $1$ . 跑 $n​$ 次完全背包. 本机大概跑了 80s . 测试点 4特点: 点数 $n$ 只有 $5$ . 设 $f(i,j,k)$ 表示从 $i$ 走到 $j$ ,经过的边权和为 $k$ 的方案数. $k$ 这一维是有拓扑序的,先枚举 $k​$ 就可以完成转移了. 本机大概跑了 120s. 测试点 5特点: 把 $2$ 条边看成一组,每组都是 $i\to k,k\to j$ 的形式,且 $i,j\le 10$ ,各组的 $k$ 互不相同. 把每一组的两条边并在一起,就变成测试点 4 了,只是点数变成了 $10$ . 本机大概跑了 10s. 测试点 6,8,10特点: 所有的边权都是 $1$ . 先处理出邻接矩阵 $A$ ,其中 $A_{i,j}$ 表示从 $i$ 到 $j$ ,经过 $1$ 条边的方案数. 那么根据矩阵乘法的定义,容易发现 $A^w_{i,j}$ 就表示从 $i$ 到 $j$ ,经过 $w$ 条边的方案数,即边权和为 $w$ 的方案数. 倍增预处理出 $A^1,A^2,A^4\dots$ ,询问时,只用 $A^w$ 和 $u$ 那一列的向量乘起来的贡献就可以了. 时间复杂度 $O(n^3\log w+q\cdot n^2\log w)$ . 其实有多项式的更优做法,不过反正是提答题,就咕了. 测试点 7特点: 绝大部分边权都是 $1$ ,只有很少的边权为 $2$ . 对于每条边权为 $2$ 的边,新建一个点,把这条边拆成两条边权为 $1$ 的边,然后就和测试点 6,8,10 一样了. 测试点 9]]></content>
      <tags>
        <tag>提交答案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 552 MIN&MAX I]]></title>
    <url>%2F2019%2F12%2F09%2FLoj-552-MIN-MAX-I%2F</url>
    <content type="text"><![CDATA[分段打表. 考虑 $3$ 个位置 $i&lt;j&lt;k$ 能形成三元环,需要满足 $p_j&gt;\max(p_i,p_k)$ ,且区间 $(i,j),(j,k)$ (如果有) 中的数都 $&gt;p_j$ . 或 $p_j&lt;\min(p_i,p_k)$ ,且区间 $(i,j),(j,k)$ (如果有) 中的数都 $&lt;p_j​$ . 两种情况是对称的,只需要算第一种情况的贡献,最后将答案乘上 $2$ . 考虑给出一个排列 $p $ ,某个位置 $j$ 能产生 $1$ 的贡献,当且仅当 $p_j$ 既不是前缀最小值,也不是后缀最小值. 这个概率为 $1-\frac{1}{j}-\frac{1}{n-j+1}+\frac{1}{n}$ . 即所有的减去它是前缀最小值的概率,减去它是后缀最小值的概率,加上同时是最小值的概率. 于是得到答案为$$\begin{aligned}ans&amp;=2\cdot\sum_{i=1}^n (1-\frac{1}{i}-\frac{1}{n-i+1}+\frac{1}{n}) \\&amp;=2\cdot(n+1-2\cdot \sum_{i=1}^n \frac{1}{i})\end{aligned}$$只需要快速求出 $\sum_{i=1}^n \frac 1 i$ ,分段打表即可. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int K=1e6;void gen()&#123; freopen("data.out","w",stdout); printf("0,"); int sum=0; for(int i=1;i&lt;P;++i) &#123; inc(sum,fpow(i,P-2)); if(i%K==0) &#123; printf("%d,",sum); cerr&lt;&lt;i&lt;&lt;endl; &#125; &#125; puts("");&#125;const int sum[]=&#123;&#125;;int calc(int n)&#123; int res=sum[n/K]; for(int i=n/K*K+1;i&lt;=n;++i) inc(res,fpow(i,P-2)); return add(res,res);&#125;int main()&#123; int n=read(); int ans=n+1; inc(ans,P-calc(n)); inc(ans,ans); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>概率/期望</tag>
        <tag>打表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4818 序列计数]]></title>
    <url>%2F2019%2F12%2F08%2Fbzoj-4818-%E5%BA%8F%E5%88%97%E8%AE%A1%E6%95%B0%2F</url>
    <content type="text"><![CDATA[生成函数. 用所有的方案数减去每个数都不是质数的方案数. 答案的生成函数显然是一个多项式的 $n$ 次方,并且是循环卷积. 由于长度很小,所以直接暴力卷积就可以了. 时间复杂度 $O(m+p^2\log n)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int Mod=20170408;int add(int a,int b)&#123; return (a+b&gt;=Mod)?(a+b-Mod):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % Mod;&#125;const int M=2e7+10,P=100;int n,m,p;void polymul(int *a,int *b,int *c)&#123; static int tmp[P]; memset(tmp,0,sizeof tmp); for(int i=0;i&lt;p;++i) if(a[i]) for(int j=0;j&lt;p;++j) inc(tmp[(i+j)%p],mul(a[i],b[j])); memcpy(c,tmp,sizeof tmp);&#125;int cnt=0,prime[M/15];bool ism[M];int res[P],a[P];int main()&#123; n=read(),m=read(),p=read(); int ans=0; for(int i=1;i&lt;=m;++i) ++a[i%p]; int b=n; res[0]=1; while(b) &#123; if(b&amp;1) polymul(res,a,res); polymul(a,a,a); b&gt;&gt;=1; &#125; inc(ans,res[0]); ism[1]=true; for(int i=2;i&lt;=m;++i) &#123; if(!ism[i]) prime[++cnt]=i; int lim=m/i; for(int j=1;j&lt;=cnt &amp;&amp; prime[j]&lt;=lim;++j) &#123; ism[i*prime[j]]=true; if(i%prime[j]==0) break; &#125; &#125; memset(a,0,sizeof a); for(int i=1;i&lt;=m;++i) if(ism[i]) ++a[i%p]; b=n; memset(res,0,sizeof res); res[0]=1; while(b) &#123; if(b&amp;1) polymul(res,a,res); polymul(a,a,a); b&gt;&gt;=1; &#125; inc(ans,Mod-res[0]); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1265]]></title>
    <url>%2F2019%2F12%2F08%2FCF1265%2F</url>
    <content type="text"><![CDATA[$Div.2$ A Beautiful String如果有两个相邻字母相同,则肯定无解. 否则,每次用合适的方法填好连续的一段问号就可以了. code B Beautiful Numbers考虑从大到小加入每个数,如果在加入第 $i$ 个数后,加入的数的位置形成了一段连续的区间,则第 $i$ 个答案为 $1$ . 记录一下加入的数中,最左边的位置 $L$ 和最右边的位置 $R$ ,若 $R-L+1=i$ ,则是连续的区间. code C Beautiful Regional Contest把同一种分数的所有人看成一个数,数字大小为这些人的个数. 从大到小枚举有多少个人有奖牌,检验是否有合法解. 在有奖牌的人中,至少要有 $3$ 种分数,取分数最高的那些人获得金牌,二分出多少人得银牌时,金牌数小于银牌数. 剩下的就是铜牌,再检验一下金牌数是否小于铜牌数. code D Beautiful Sequence$0$ 只能和 $1$ 相邻, $3$ 只能和 $2$ 相邻. 所以当 $0$ 的数目比 $1$ 多时,答案只可能是 $010101\dots010$ 的形式,否则无解, $3$ 与 $2$ 同理. 否则,可以在开头放下一段 $0101\dots 01$ ,在末尾放下一段 $23\dots2323$ . 此时还剩下若干个 $1$ 和若干个 $2$ 没有放. 若两者数目相同,就直接在中间放下 $2121\dots21​$ . 若 $1$ 的数目比 $2$ 的数目多 $1$ ,就在最开头放个 $1$ ,中间放下 $2121\dots21$ . 若 $2$ 的数目比 $1$ 的数目多 $1$ ,就在最后放个 $2$ ,中间放下 $2121\dots21$ . 其余情况无解. code E Beautiful Mirrors设 $E(i)$ 表示当前应该去问第 $i$ 面镜子时,期望的天数. 边界有 $E(n+1)=0$ ,转移有 $E(i)=\frac{p_i}{100}E(i+1)+\frac{100-p_i}{100} E(1)+1$ . 从前往后推出每个 $E(i)=k_i\cdot E_1+b_i$ ,再根据 $E(n+1)=0$ 解出 $E_1$ . code F Beautiful Bracket Sequence (easy version)考虑给出一个括号序列时,怎样计算它的深度. 如果最左边是 ) ,就把它删掉. 如果最右边是 ( ,就把它删掉. 如果最左边是 ( ,最右边是 ) ,就把它们同时删掉,并且让深度 $+1​$ . 设 $f(i,j)$ 表示 $[i,j]$ 这段括号序列对答案的贡献,根据这个过程来 $dp$ 即可. code]]></content>
      <tags>
        <tag>二分</tag>
        <tag>构造</tag>
        <tag>codeforces</tag>
        <tag>概率/期望</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 1100 对称轴]]></title>
    <url>%2F2019%2F12%2F07%2Fbzoj-1100-%E5%AF%B9%E7%A7%B0%E8%BD%B4%2F</url>
    <content type="text"><![CDATA[计算几何 + Manacher . 沿着多边形转一圈,把经过的边和角存下来,形成了一个环. 在这个环上断掉一个位置,若形成的序列是回文的,说明断掉的那个边的中点/角处有一条对称轴. 把环倍长成链,一条对称轴会在两端都被统计,用 Manacher 找有多少个长度为 $n$ 的回文串,它的一半就是答案. 判断边是否相同可以直接判长度,判断角是否相同,需要判形成它的两条边的叉积. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int N=4e5+10;struct v2&#123; int x,y; v2(int x=0,int y=0):x(x),y(y) &#123;&#125; v2 operator + (const v2 &amp;rhs) const &#123; return v2(x+rhs.x,y+rhs.y); &#125; v2 operator - (const v2 &amp;rhs) const &#123; return v2(x-rhs.x,y-rhs.y); &#125; v2 operator * (const double &amp;k) const &#123; return v2(k*x,k*y); &#125; ll modulus() &#123; return 1LL*x*x+1LL*y*y; &#125;&#125;;ll Cross(v2 A,v2 B)&#123; return 1LL*A.x*B.y-1LL*A.y*B.x;&#125;int n,m,tot,ans,r[N];ll s[N],buf[N];void Manacher()&#123; int p=0,mx=0; for(int i=0;i&lt;m;++i) &#123; if(i&gt;mx) r[i]=1; else r[i]=min(mx-i,r[2*p-i]); while(s[i-r[i]]==s[i+r[i]]) ++r[i]; if(i+r[i]-1&gt;mx) mx=i+r[i]-1,p=i; ans+=(r[i]&gt;n); &#125;&#125;v2 p[N];ll Edge(int x)&#123; return (p[x]-p[(x+1)%n]).modulus();&#125;ll Angle(int x)&#123; int y=(x+1)%n; int z=(y+1)%n; return Cross(p[y]-p[x],p[z]-p[y]);&#125;void solve()&#123; memset(r,0,sizeof r); ans=tot=0; n=read(); for(int i=0;i&lt;n;++i) &#123; p[i].x=read(); p[i].y=read(); &#125; for(int i=0;i&lt;n;++i) &#123; s[2*i]=Edge(i); s[2*i+1]=Angle(i); &#125; for(int i=2*n;i&lt;4*n;++i) s[i]=s[i-2*n]; m=4*n; Manacher(); printf("%d\n",ans&gt;&gt;1);&#125;int main()&#123; int T=read(); while(T--) solve(); return 0;&#125;]]></content>
      <tags>
        <tag>计算几何</tag>
        <tag>Manacher</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 1039 无序运动]]></title>
    <url>%2F2019%2F12%2F07%2Fbzoj-1039-%E6%97%A0%E5%BA%8F%E8%BF%90%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[计算几何 + AC 自动机. 考虑如果给出两个长度相同的点列,如何判断它们能否匹配. 若点数 $=2$ ,则通过平移,旋转,放缩一定可以匹配. 若点数 $&gt;2$ ,先不考虑翻转,只考虑平移,旋转,放缩这三种操作. 如果任意两条相邻的边的边长之比和夹角都相等,就可以匹配. 为了避免精度问题,边长比可以用边长平方比来表示,夹角可以用叉积与点积之比来表示. 将分子分母,化成既约分数保存,注意夹角比值的分子分母都要保留符号. 将这些信息离散化,就变成了数字串的匹配,用 AC 自动机来计算匹配次数. 再考虑翻转操作,若一个点列不是所有点共线,则它翻转后不能和原来的点列通过平移,旋转,放缩匹配. 将它翻转后再做一次上面的匹配. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int N=2e5+10,M=1.6e6+10,U=(1&lt;&lt;22)-1;int sgn(int x)&#123; return x&gt;0?1:-1;&#125;struct v2&#123; double x,y; v2(double x=0,double y=0):x(x),y(y) &#123;&#125; v2 operator + (const v2 &amp;rhs) const &#123; return v2(x+rhs.x,y+rhs.y); &#125; v2 operator - (const v2 &amp;rhs) const &#123; return v2(x-rhs.x,y-rhs.y); &#125; v2 operator * (const double &amp;k) const &#123; return v2(k*x,k*y); &#125; int modulus() &#123; return x*x+y*y; &#125;&#125;;int Dot(v2 A,v2 B)&#123; return A.x*B.x+A.y*B.y;&#125;int Cross(v2 A,v2 B)&#123; return A.x*B.y-A.y*B.x;&#125;int n,m,ans[M],len[M],l[M],cnt,all[M];struct Info&#123; int a,b,c,d; Info() &#123;&#125; Info(int A,int B,int C,int D) &#123; int g=__gcd(A,B); a=A/g,b=B/g; if(!C) c=0,d=sgn(D); else if(!D) d=0,c=sgn(C); else &#123; g=__gcd(abs(C),abs(D)); c=C/g,d=D/g; &#125; &#125; bool operator &lt;= (const Info &amp;rhs) const &#123; if(a!=rhs.a) return a&lt;rhs.a; if(b!=rhs.b) return b&lt;rhs.b; if(c!=rhs.c) return c&lt;rhs.c; return d&lt;=rhs.d; &#125; bool operator &lt; (const Info &amp;rhs) const &#123; if(a!=rhs.a) return a&lt;rhs.a; if(b!=rhs.b) return b&lt;rhs.b; if(c!=rhs.c) return c&lt;rhs.c; return d&lt;rhs.d; &#125; bool operator != (const Info &amp;rhs) const &#123; return (a!=rhs.a) || (b!=rhs.b) || (c!=rhs.c) || (d!=rhs.d); &#125;&#125; pool[M];bool cmp(const int &amp;x,const int &amp;y)&#123; return pool[x]&lt;pool[y];&#125;int calc(const Info &amp;x)&#123; int l=1,r=cnt,mid,t=0; while(l&lt;=r) &#123; mid=(l+r)&gt;&gt;1; if(pool[all[mid]]&lt;=x) t=mid,l=mid+1; else r=mid-1; &#125; if(!t) return 0; if(pool[all[t]]!=x) return 0; return t;&#125;int tot,f[M],q[M],tag[M];int head[U+1],G[M],ecnt;struct E&#123; int x,y,z,nx; E() &#123;&#125; E(int _x,int _y,int _z,int _nx) &#123; x=_x,y=_y,z=_z,nx=_nx; &#125;&#125; e[M];struct S&#123; int y,z,nx; S() &#123;&#125; S(int _y,int _z,int _nx) &#123; y=_y,z=_z,nx=_nx; &#125;&#125; s[M];int son(int x,int y)&#123; int u=(x&lt;&lt;8|y)&amp;U; for(int p=head[u]; p; p=e[p].nx) if(e[p].x==x &amp;&amp; e[p].y==y) return e[p].z; e[++ecnt]=E(x,y,++tot,head[u]); head[u]=ecnt; s[ecnt]=S(y,tot,G[x]); G[x]=ecnt; return tot;&#125;int ask(int x,int y)&#123; int u=(x&lt;&lt;8|y)&amp;U; for(int p=head[u]; p; p=e[p].nx) if(e[p].x==x&amp;&amp;e[p].y==y) return e[p].z; return 0;&#125;void solve()&#123; int h=0,t=0,x,y,z,k; f[0]=-1; while(h&lt;=t) for(int i=G[x=q[h++]]; i; i=s[i].nx) &#123; y=s[i].y,q[++t]=z=s[i].z; if(x) for(int j=f[x]; ~j; j=f[j]) if((k=ask(j,y))) &#123; f[z]=k; break; &#125; &#125;&#125;bool oneline[M];v2 a[N];int b[N],c[N];int main()&#123; n=read(),m=read(); for(int i=1; i&lt;=m; ++i) &#123; int k=read(); len[i]=k; for(int j=1; j&lt;=k; ++j) a[j].x=read(),a[j].y=read(); if(k&lt;=2) continue; l[i]=cnt+1; oneline[i]=true; for(int j=2; j&lt;k; ++j) &#123; v2 A=a[j]-a[j-1],B=a[j+1]-a[j]; oneline[i]&amp;=(Cross(A,B)==0); pool[++cnt]=Info(A.modulus(),B.modulus(),Cross(A,B),Dot(A,B)); &#125; &#125; for(int i=1; i&lt;=cnt; ++i) all[i]=i; if(cnt&gt;1) sort(all+1,all+cnt+1,cmp); for(int i=1; i&lt;=n; ++i) a[i].x=read(),a[i].y=read(); for(int i=2; i&lt;n; ++i) &#123; v2 A=a[i]-a[i-1],B=a[i+1]-a[i]; b[i]=calc(Info(A.modulus(),B.modulus(),Cross(A,B),Dot(A,B))); c[i]=calc(Info(A.modulus(),B.modulus(),-Cross(A,B),Dot(A,B))); &#125; for(int i=1; i&lt;=m; ++i) if(l[i]) &#123; int en=l[i]+len[i]-2; int x,j; for(x=0,j=l[i]; j&lt;en; ++j) x=son(x,calc(pool[j])); l[i]=x; &#125; solve(); for(int x=0,i=2; i&lt;n; ++i) &#123; while(x &amp;&amp; !ask(x,b[i])) x=f[x]; tag[x=ask(x,b[i])]++; &#125; for(int i=tot; i; --i) tag[f[q[i]]]+=tag[q[i]]; for(int i=1; i&lt;=m; ++i) if(l[i]) ans[i]+=tag[l[i]]; for(int i=0; i&lt;=tot; ++i) tag[i]=0; for(int x=0,i=2; i&lt;n; ++i) &#123; while(x &amp;&amp; !ask(x,c[i])) x=f[x]; tag[x=ask(x,c[i])]++; &#125; for(int i=tot; i; --i) tag[f[q[i]]]+=tag[q[i]]; for(int i=1; i&lt;=m; ++i) if(l[i] &amp;&amp; !oneline[i]) ans[i]+=tag[l[i]]; for(int i=1; i&lt;=m; ++i) if(!l[i]) printf("%d\n",n-len[i]+1); else printf("%d\n",ans[i]); return 0;&#125;]]></content>
      <tags>
        <tag>计算几何</tag>
        <tag>AC自动机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 1094 粒子运动]]></title>
    <url>%2F2019%2F12%2F06%2Fbzoj-1094-%E7%B2%92%E5%AD%90%E8%BF%90%E5%8A%A8%2F</url>
    <content type="text"><![CDATA[计算几何的一些基础操作. 为了后续处理起来方便,可以先将坐标系平移,使得圆心成为坐标系的原点. 考虑枚举两个点,计算它们在移动过程中出现的最近距离来更新答案. 每个点的运动路径是 $k$ 条线段组成的折线,考虑先把这 $k$ 条线段的起止位置,时间都算出来. 尝试去模拟点的运动,通过解方程可以确定在哪里撞上边界,撞上后需要更新速度. 假设交点是 $B$ ,先找到 $A$ 满足 $\vec{AB}=\vec v$ ,求出交点处的法线,把 $A$ 沿着它对称过去得到 $A’$ ,则新的速度为 $\vec{BA’}$ . 点关于直线 $y=\tan\theta \cdot x$ 的对称可以通过角度的运算实现,用 $\alpha,\beta$ 分别表示对称前后的极角,则 $\beta=2\theta-\alpha​$ . 这样可以求出一个点的 $k$ 条线段的信息. 考虑两个点的最近距离,每个点有 $k$ 个关键时间点,所以最多需要考虑 $2k$ 个时间段. 每个时间段内两个点的方向都不会变,设 $t$ 表示「当前时刻 - 该时间段开始的时刻」,则距离的平方是 $t$ 的二次函数. 用二次函数在区间内求最小值的方法,就可以求出该时间段内两点的最近距离,注意可能有退化成一次函数的情况. 时间复杂度 $O(n^2\cdot k)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const double inf=2e9,Pi=acos(-1.0),eps=1e-8;const int N=100+10;int n,k;struct v2&#123; double x,y; v2(double x=0,double y=0):x(x),y(y) &#123;&#125; v2 operator + (const v2 &amp;rhs) const &#123; return v2(x+rhs.x,y+rhs.y); &#125; v2 operator - (const v2 &amp;rhs) const &#123; return v2(x-rhs.x,y-rhs.y); &#125; v2 operator * (const double &amp;k) const &#123; return v2(k*x,k*y); &#125; double modulus() &#123; return sqrt(x*x+y*y); &#125;&#125;p[N],v[N];double sqr(double x)&#123; return x*x;&#125;double R,cx,cy,ans=inf;void report(double x)&#123; ans=min(ans,x);&#125;v2 st[N][N],vec[N][N];double t[N][N];double solve(double x,double y,double vx,double vy)// (x+t*vx)^2+(y+t*vy)^2=R^2&#123; double a,b,c; a=vx*vx+vy*vy; b=2*x*vx+2*y*vy; c=x*x+y*y-R*R; double delta=b*b-4*a*c; // assert(delta&gt;0); return (-b+sqrt(delta))/(2*a);&#125;v2 reflect(v2 vel,v2 pos)&#123; v2 A=pos-vel; double dist=A.modulus(); double alpha=atan2(A.y,A.x); double theta=atan2(pos.y,pos.x); double beta=2*theta-alpha; if(beta&gt;2*Pi) beta-=2*Pi; return v2(dist*cos(beta),dist*sin(beta))-pos;&#125;void init(int i)&#123; v2 pos=p[i],vel=v[i]; double tim=0; for(int j=1;j&lt;=k+1;++j) &#123; st[i][j]=pos,t[i][j]=tim,vec[i][j]=vel; if(j&gt;k) break; double tc=solve(pos.x,pos.y,vel.x,vel.y); tim+=tc; pos=pos+vel*tc; vel=reflect(vel,pos); &#125;&#125;double MinDist(double T,v2 pa,v2 pb,v2 va,v2 vb)// t \in [0,T] , Dist^2=at^2+bt+c&#123; double a=sqr(va.x-vb.x)+sqr(va.y-vb.y); double b=2*(va.x-vb.x)*(pa.x-pb.x)+2*(va.y-vb.y)*(pa.y-pb.y); double c=sqr(pa.x-pb.x)+sqr(pa.y-pb.y); double x; if(fabs(a)&lt;eps) &#123; if(b&gt;0) x=0; else x=T; &#125; double mid=-b/(2*a); if(0&lt;=mid &amp;&amp; mid&lt;=T) x=mid; else &#123; if(mid&lt;0) x=0; else x=T; &#125; return sqrt(a*x*x+b*x+c);&#125;void calc(int i,int j)&#123; int k1=1,k2=1; while(k1&lt;=k &amp;&amp; k2&lt;=k) &#123; double Tmin=max(t[i][k1],t[j][k2]); double Tmax=min(t[i][k1+1],t[j][k2+1]); v2 pa=st[i][k1]+vec[i][k1]*(Tmin-t[i][k1]); v2 pb=st[j][k2]+vec[j][k2]*(Tmin-t[j][k2]); report(MinDist(Tmax-Tmin,pa,pb,vec[i][k1],vec[j][k2])); if(t[i][k1+1]&lt;t[j][k2+1]) ++k1; else ++k2; &#125;&#125;int main()&#123; scanf("%lf%lf%lf",&amp;cx,&amp;cy,&amp;R); n=read(),k=read(); for(int i=1;i&lt;=n;++i) &#123; scanf("%lf%lf%lf%lf",&amp;p[i].x,&amp;p[i].y,&amp;v[i].x,&amp;v[i].y); p[i].x-=cx; p[i].y-=cy; &#125; for(int i=1;i&lt;=n;++i) init(i); for(int i=1;i&lt;n;++i) for(int j=i+1;j&lt;=n;++j) calc(i,j); printf("%.3f\n",ans); return 0;&#125;]]></content>
      <tags>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2288 大葱的神力]]></title>
    <url>%2F2019%2F12%2F05%2FLoj-2288-%E5%A4%A7%E8%91%B1%E7%9A%84%E7%A5%9E%E5%8A%9B%2F</url>
    <content type="text"><![CDATA[提交答案题. 需要大力观察数据的特点. 测试点 1~2$n,m$ 比较小,爆搜 + 最优化剪枝. 测试点 3只有 $1$ 个抽屉,变成了 01 背包问题. 测试点 4~5每个物品的体积是一样的,那么每个抽屉能容纳的物品数目是确定的,与放哪些物品无关. 建出费用流模型,从源点 $S$ 向每个物品连边,流量为 $1$ ,费用为 $0$ . 从每个物品 $i$ 向每个抽屉 $j$ 连边,流量为 $1$ ,费用为 $w_{ij}$ . 从每个抽屉向汇点 $T$ 连边,流量为它能容纳的物品数目,即 $\lfloor \frac b a\rfloor$ ,费用为 $0$ . 跑一遍最大费用最大流即可求出最优解,为了输出方案,只需在最后检查物品向抽屉连的边中,哪些边有流量. 测试点 6每个物品的体积差别不大,通过验证发现每个抽屉能容纳的物品数目仍是确定的. 于是和上两个测试点做法相同. 测试点 7只有第 $1$ 个物品的体积和其他物品的体积不同,枚举它放在哪个抽屉里面,对剩余的物品,像测试点 4~5 那样做. 测试点 8~10数据没有什么特点,由于这个问题是 NPC 的,并没有什么高论. 可以尝试贪心,或者模拟退火搞一搞,得分各凭本事.]]></content>
      <tags>
        <tag>提交答案</tag>
        <tag>网络流</tag>
        <tag>随机化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191205]]></title>
    <url>%2F2019%2F12%2F05%2Ftest20191205%2F</url>
    <content type="text"><![CDATA[被虐了. $split$ $pal$ $rev$ 如果是 01 序列,可以分治来做,每次从中间剖开,把左边的 $1$ 和右边的 $0$ 换过来. 考虑从高到低区分权值的每个二进制位,代价为 $O(\log a\cdot n\log n)​$ .]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态点分治学习笔记]]></title>
    <url>%2F2019%2F12%2F03%2F%E5%8A%A8%E6%80%81%E7%82%B9%E5%88%86%E6%B2%BB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[发现自己根本不会动态点分治,于是来学一学. 在做点分治的时候,把每个重心和它下一层的重心连起来,就形成了一棵新树. 称它为点分树,根据点分治的性质,这棵树的根是原树的重心,且它的树高是 $O(\log n)$ 的. 对于点分树上的每个点,维护它作为重心时管辖的那个连通块的信息. 单点修改某个点的点权时,就在点分树上暴力向上跳,把跳到的点的信息更新一遍,只会修改到 $O(\log n)$ 个点. 于是我们通过在点分树上维护信息,就实现了支持单点修改权值的点分治,这就是动态点分治. 大概可以把点分树维护信息的模式看成线段树维护信息的模式,单点修改时向上不断 pushup 即可. bzoj 1095 捉迷藏如果没有修改操作,直接点分治,在分治中心处用不在一棵子树内的深度最大的两个黑色节点更新一下答案. 现在增加了修改颜色的操作,对每个点开两个 multiset . 第一个 multiset 维护它管辖的所有黑点中到它的父亲的所有距离. 第二个 multiset 维护它在点分树中每个儿子的第一个 multiset 中的最大值,用其中最大的两个数更新答案. 若自己是黑点,那么第二个 multiset 里面还要放入一个 $0$ . 还需要开一个 multiset 维护全局的答案. 有修改操作时,就在点分树上暴力跳,并更新跳到的 multiset 以及维护答案的 multiset. 修改时,把原来的贡献删掉,修改之后,再把新的贡献加进去. 时间复杂度 $O(n\log^2 n)$ . 注意点分树的形态与原树不一样,算距离时要在原树上求出 lca 来算. code bzoj 3730 震波考虑建出点分树,每次询问与 $x$ 距离 $\le k$ 的点权和时,就在点分树上跳. 若从重心 $a$ 跳到了重心 $b$ ,那么 $b$ 所管辖的连通块中,去掉 $a$ 的那一部分,剩下的点到 $x$ 的路径都会经过 $b$ . 那么将 $b$ 所管辖的连通块中,与 $b$ 距离 $\le k-dis(x,b)$ 的点权和计入答案. 再减去 $a$ 所管辖的连通块中,与 $b$ 距离 $\le k-dis(x,b)$ 的点权和. 用动态分配内存,给每个点开 $2$ 个树状数组,都以距离为下标,分别维护到自己的,到父亲的点权前缀和. 修改时就在点分树上跳,把 $O(\log n)$ 个祖先的树状数组都改一遍. 时间复杂度 $O(n\log^2 n)$ ,空间复杂度 $O(n\log n)$ . code bzoj 4372 烁烁的游戏这个题和震波几乎是一样的. 用树状数组去维护以深度为下标的点权差分值就可以了. code SCOI2018 D1T1 树 有一棵 $n$ 个点的无根树,每个点有点权. 需要支持以下两种操作: 询问: 给出一个点 $u$ ,询问从 $u$ 出发的简单路径中,最大的点权和. 修改:将一个点 $u$ 的点权修改为 $v$ . 操作总次数为 $m$ . $n,m\le 10^5$ ,时间限制 3s ,空间限制 64MB . 建出点分树,以 $u$ 出发的简单路径可以看成这样的形式. 从 $u$ 出发,先到 $u$ 在点分树上的某个祖先 $w$ (可以是自己),再到 $w$ 管辖的某个点 $v$ . 对每个点开两个 multiset . 第一个 muliset 维护所有它管辖的点到它在点分树上的父亲的路径权值. 第二个 multiset 维护它在点分树上所有儿子的,第一个 multiset 中的最大值. 询问时,在点分树上往上跳,从 $a$ 跳到 $b$ 时,将 $a$ 对 $b$ 的第二个 multiset 的贡献临时去掉,再查询 $b$ 的第二个 multiset 中的最大值,就一定是从不被 $a$ 管辖的点来的,再加上 $b\to u$ 的点权和 (不算 $b$ ) 来更新答案. 修改时,在点分树上往上跳,把影响到的祖先全部修改过来,并在树状数组上更新重链点权前缀和. 需要一些高超的卡空间技巧. short + char 可以拼出 $\frac 3 4$ 个 int . code]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>动态点分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[THUSC2017 选做]]></title>
    <url>%2F2019%2F12%2F02%2FTHUSC2017-%E9%80%89%E5%81%9A%2F</url>
    <content type="text"><![CDATA[老张觉得比较简单,但我一道都不会做. 巧克力如果颜色数目比较少,可以暴力枚举是哪 $k$ 种颜色作为连通块中必须包含的颜色. 二分一个美味度作为中位数,大于它的赋值为 $1001$ ,小于等于它的赋值为 $999$ . 这样就达到了一个二元组的效果,会优先个数最少,再尽量让选出的 $999$ 尽量多. 用斯坦纳树进行检验,判一下最优解中, $999​$ 的个数是否 $\ge​$ $1001​$ 的个数. 用随机化乱搞加速,每次将每种颜色随机染成 $[0,k)$ 内的一种颜色,算一遍答案,这样算出来的答案肯定是合法的. 若染色时,将最优解中的 $k$ 种颜色染成了两两不同的颜色,就能求出这个最优解. 即,最劣情况下,只有一种颜色组合是最优解,此时做一次随机化求出正确答案的概率是 $\frac{k!}{k^k}​$ . 当 $k=5$ 时,做 $300$ 次随机化,求不出最优解的概率就只有 $1-(\frac{k}{k!})^{300}\approx 8\times 10^{-6}$ 了. 注意用斯坦纳树处理点权将集合 $S$ 拆成 $S1,S-S1$ 时,会将根节点的点权多算一次,需要减掉. code 杜老师把 $[L,R]$ 内的数可能含有的 $m$ 个质因数找出来,若选了 $x$ ,则 $x$ 含有的奇数次方的质因子出现次数会异或上 $1$ . 于是可以把每个数看成一个 $m$ 位的二进制数,现在要选出一些数,让它们异或起来为 $0$ . 方案数显然为 $2^k$ ,其中 $k$ 表示自由元的个数. 由于是异或方程,所以可以用线性基来代替高斯消元,最后的 $k$ 就是 $R-L+1$ 减去线性基的大小. 异或运算可以用 bitset 进行优化. 直接这样做,时间复杂度是 $O((R-L+1)\cdot \frac{R}{32})$ ,可以获得 $50$ 分. 优化一下,注意到每个数最多会有一个大于 $\sqrt R$ 的质因子,所以一个 $&gt; \sqrt R$ 的质因子一旦出现,线性基里就肯定有它. 于是线性基只需要维护 $\le \sqrt R$ 的质因子. 对于最大质因子相同且 $&gt;\sqrt R$ 的一堆数,只需要把第一个插到线性基里面,后面的异或上它再插进去. 时间复杂度优化到了 $O((R-L+1)\cdot \frac{\sqrt R}{32})$ ,可以获得 $70$ 分. 正解比较神仙,由于 $R\le 10^7$ ,所以当 $R-L&gt;6000$ 时,就认为线性基的大小就是 $[L,R]$ 内所有质数的个数. 当 $R-L\le 6000​$ 时,就用上面那个算法来做. 官方题解的证明 code 换桌考虑先建出一个费用流的模型. 从源点 $S$ 向每个人所在的点连边,流量为 $1$ ,费用为 $0$ . 把同一张桌子的所有点连成一个环,每条边流量为 $\inf$ ,费用为 $0$ . 每个人所在的点向每张桌子对应的点连边,流量为 $1$ ,费用为换桌子需要的代价. 每个点向汇点 $T$ 连边,流量为 $1$ ,费用为 $0$ . 这个图的点数 $|V|$ 是 $O(nm)$ 的,但边数 $|E|$ 是 $O(n^2m)$ 的,可以获得 $70$ 分. 注意到每个人可以去的桌子是一段区间,可以用线段树来优化建边. 因为换桌子的花费有绝对值,所以可以拆成左右两边来做. 开 $2m$ 棵线段树,每个位置有 $2$ 棵线段树,一棵表示向左换桌子的,另一棵表示向右换桌子的. 向左换桌子的线段树,第 $i​$ 个叶子的出边有个额外费用 $-2i​$ ,向右的线段树额外费用为 $2i​$ . 注意要限制对应的两个叶子总流量 $\le 1​$ . 在第 $j​$ 张桌子时,往左边连的边有额外费用 $2j​$ ,往右边连的边有额外费用 $-2j​$ . 仍然把同一张桌子上的叶子节点连成一个环,每条边流量为 $\inf$ ,费用为 $0$ ,这样就考虑了换位置的贡献. 边数被优化到了 $O(m\cdot n\log n)​$ ,跑个 zkw 费用流就可以过了. code 大魔法师用线段树给每段区间维护一个列向量$$\begin{bmatrix}\sum A\\ \sum B \\ \sum C \\ len \end{bmatrix}$$其中 $len$ 表示这个区间的长度. 修改标记可以统一成一个 $4\times 4$ 的转移矩阵,然后就变成线段树的一些基本操作了. 时间复杂度 $O(n\log n\cdot k^3)$ ,其中 $k=4$ . code 如果奇迹有颜色考虑 $Burnside$ 引理,记 $f(i)$ 表示不考虑同构时长度为 $i$ 的合法环的方案数. 则答案为$$ans=\frac{\sum_{i=1}^n f(\gcd(i,n))}{n}=\frac{\sum_{d|n}\varphi(\frac n d)\cdot f(d)}{n}$$于是需要快速求出 $f(d)$ . 考虑暴力状压 $dp$ ,先枚举一个 $s$ 表示开头 $m-1$ 个点的颜色状态. 记 $g(i,t)$ 表示已经给 $i$ 个点染了色,最后 $m-1$ 个点的颜色状态用 $t$ 表示的方案数. 最后判断每个 $g(i,t)$ 的尾部是否能和首部的 $s$ 接在一起,若合法,就计入 $f(i)$ . 每次转移需要枚举当前的点染哪个颜色,每次转移的复杂度是 $O(m)$ . 于是得出状压 $dp$ 的总时间复杂度 $O(n\cdot m^{2m-1})$ . 直接 $dp$ 复杂度显然爆炸,可以在本地把每个 $m$ 对应的前 $1000$ 项 $f(i)$ 打出来,用 $BM$ 求线性递推式. 发现当 $m=7$ 时,线性递推式的长度为 $k=410$ . 于是需要写一个 $O(k^2\log n)$ 的线性递推. 将 $n$ 质因子分解后, $O(\frac {\sqrt n}{\ln n})$ 枚举所有 $d$ ,总时间复杂度 $O(k^2\sqrt n)$ . 最后一个点要特判一下,因为 $n$ 的因数比较多,常数大. code 宇宙广播 不懂为啥要出成提答题,方便调精度? 设公切面为 $\sum_{i=0}^{K-1} a_i\cdot x_i=d​$ ,并保证 $\sum_{i=0}^{K-1} a_i^2=1​$ . 考虑 $K​$ 维空间中一个点 $(x_0,x_1,\dots,x_{K-1})​$ 到这个公切面的距离$$dis=\frac{|d-\sum_{i=0}^{K-1} a_i\cdot x_i|}{\sqrt{\sum_{i=0}^{K-1} a_i^2}}$$保证了分母为 $1$ ,所以这个点到公切面的距离就是 $|d-\sum_{i=0}^{K-1} a_i\cdot x_i|$ . 每个球的球心到公切面的距离都是这个球的半径. 所以对于第 $j$ 个球,可以得到方程 $|d-\sum_{i=0}^{K-1} a_i\cdot x_{j,i}|=r_j$ . 共有 $K$ 个这样的方程,暴力枚举每个方程绝对值取正号还是负号. 确定符号后高斯消元解出每个 $k_i,b_i$ ,表示 $a_i=k_i\cdot d+b_i$ 将所有的 $a_i$ 代入 $\sum_{i=0}^{K-1} a_i^2=1$ 就可以解出 $d$ 了. 解出 $d$ 后,这个公切面也就确定了,只需要再对每个球,求出公切面与这个球的切点. 用高斯消元解一个法向量 $\vec {n}$ 出来,把球心沿着/逆着这个法向量移动 $r$ 的距离,检验一下哪个在平面上,它就是切点了. 时间复杂度 $O(2^K\cdot K^3)​$ . code]]></content>
      <tags>
        <tag>计算几何</tag>
        <tag>BM</tag>
        <tag>常系数线性递推</tag>
        <tag>状压dp</tag>
        <tag>高斯消元</tag>
        <tag>提交答案</tag>
        <tag>随机化</tag>
        <tag>斯坦纳树</tag>
        <tag>费用流</tag>
        <tag>线段树连边</tag>
        <tag>burnside</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3878 奇怪的计算器]]></title>
    <url>%2F2019%2F12%2F02%2Fbzoj-3878-%E5%A5%87%E6%80%AA%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8%2F</url>
    <content type="text"><![CDATA[线段树. 注意到每次修改后,所有数的相对大小关系不会发生改变. 于是先将所有数排好序,每次修改时,会有一段前缀被改成 $L$ ,一段后缀被改成 $R$ ,中间的正常修改. 用线段树维护这些数即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int a[MAXN],b[MAXN];struct node&#123; int val,x,addtag,multag,sxtag,settag; node() &#123; addtag=sxtag=settag=0; multag=1; &#125;&#125;Tree[MAXN&lt;&lt;2];#define root Tree[o]void BuildTree(int o,int l,int r)&#123; root.val=root.x=0; if(l==r) &#123; root.val=root.x=a[l]; return; &#125; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r);&#125;void modify_add(int o,int c)&#123; root.val+=c; root.addtag+=c;&#125;void modify_mul(int o,int c)&#123; root.val*=c; root.addtag*=c; root.multag*=c; root.sxtag*=c;&#125;void modify_sx(int o,int c)&#123; root.val+=root.x*c; root.sxtag+=c;&#125;void modify_set(int o,int c)&#123; root.val=c; root.addtag=root.sxtag=0; root.multag=1; root.settag=c;&#125;void pushdown(int o)&#123; if(root.settag) &#123; modify_set(o&lt;&lt;1,root.settag); modify_set(o&lt;&lt;1|1,root.settag); root.settag=0; &#125; if(root.multag!=1) &#123; modify_mul(o&lt;&lt;1,root.multag); modify_mul(o&lt;&lt;1|1,root.multag); root.multag=1; &#125; if(root.addtag) &#123; modify_add(o&lt;&lt;1,root.addtag); modify_add(o&lt;&lt;1|1,root.addtag); root.addtag=0; &#125; if(root.sxtag) &#123; modify_sx(o&lt;&lt;1,root.sxtag); modify_sx(o&lt;&lt;1|1,root.sxtag); root.sxtag=0; &#125;&#125;void upd_add(int o,int l,int r,int L,int R,int c)&#123; if(L&gt;R) return; if(L&lt;=l &amp;&amp; r&lt;=R) return modify_add(o,c); pushdown(o); int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd_add(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) upd_add(o&lt;&lt;1|1,mid+1,r,L,R,c);&#125;void upd_mul(int o,int l,int r,int L,int R,int c)&#123; if(L&gt;R) return; if(L&lt;=l &amp;&amp; r&lt;=R) return modify_mul(o,c); pushdown(o); int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd_mul(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) upd_mul(o&lt;&lt;1|1,mid+1,r,L,R,c);&#125;void upd_sx(int o,int l,int r,int L,int R,int c)&#123; if(L&gt;R) return; if(L&lt;=l &amp;&amp; r&lt;=R) return modify_sx(o,c); pushdown(o); int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd_sx(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) upd_sx(o&lt;&lt;1|1,mid+1,r,L,R,c);&#125;void upd_set(int o,int l,int r,int L,int R,int c)&#123; if(L&gt;R) return; if(L&lt;=l &amp;&amp; r&lt;=R) return modify_set(o,c); pushdown(o); int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd_set(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) upd_set(o&lt;&lt;1|1,mid+1,r,L,R,c);&#125;int query(int o,int l,int r,int pos)&#123; if(l==r) return root.val; pushdown(o); int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) return query(o&lt;&lt;1,l,mid,pos); else return query(o&lt;&lt;1|1,mid+1,r,pos);&#125;int n,m,lb,rb;struct opt&#123; int op,x;&#125;q[MAXN];char buf[MAXN];int main()&#123; m=read(),lb=read(),rb=read(); for(int i=1;i&lt;=m;++i) &#123; scanf("%s %d",buf,&amp;q[i].x); if(buf[0]=='+') q[i].op=1; else if(buf[0]=='-') q[i].op=1,q[i].x*=-1; else if(buf[0]=='*') q[i].op=2; else q[i].op=3; &#125; n=read(); for(int i=1;i&lt;=n;++i) a[i]=b[i]=read(); sort(a+1,a+1+n); BuildTree(1,1,n); for(int i=1;i&lt;=m;++i) &#123; int op=q[i].op,x=q[i].x,L,R,pre,suf; if(op==1) &#123; L=1,R=n,pre=0; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; int v=query(1,1,n,mid); if(v+x&lt;lb) pre=mid,L=mid+1; else R=mid-1; &#125; L=1,R=n,suf=n+1; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; int v=query(1,1,n,mid); if(v+x&gt;rb) suf=mid,R=mid-1; else L=mid+1; &#125; upd_set(1,1,n,1,pre,lb); upd_set(1,1,n,suf,n,rb); upd_add(1,1,n,pre+1,suf-1,x); &#125; else if(op==2) &#123; L=1,R=n,pre=0; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; int v=query(1,1,n,mid); if(1LL*v*x&lt;1LL*lb) pre=mid,L=mid+1; else R=mid-1; &#125; L=1,R=n,suf=n+1; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; int v=query(1,1,n,mid); if(1LL*v*x&gt;1LL*rb) suf=mid,R=mid-1; else L=mid+1; &#125; upd_set(1,1,n,1,pre,lb); upd_set(1,1,n,suf,n,rb); upd_mul(1,1,n,pre+1,suf-1,x); &#125; else &#123; L=1,R=n,pre=0; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; int v=query(1,1,n,mid); if(1LL*x*a[mid]+v&lt;1LL*lb) pre=mid,L=mid+1; else R=mid-1; &#125; L=1,R=n,suf=n+1; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; int v=query(1,1,n,mid); if(1LL*x*a[mid]+v&gt;1LL*rb) suf=mid,R=mid-1; else L=mid+1; &#125; upd_set(1,1,n,1,pre,lb); upd_set(1,1,n,suf,n,rb); upd_sx(1,1,n,pre+1,suf-1,x); &#125; &#125; for(int i=1;i&lt;=n;++i) &#123; int pos=lower_bound(a+1,a+1+n,b[i])-a; printf("%d\n",query(1,1,n,pos)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 5006 随机二分图]]></title>
    <url>%2F2019%2F12%2F02%2Fbzoj-5006-%E9%9A%8F%E6%9C%BA%E4%BA%8C%E5%88%86%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[状压 $dp$ . 考虑如果只有单独的边,可以用状压 $dp$ 来做. 设 $f(S,T)$ 表示左边已经匹配的集合为 $S$ ,右边已经匹配的集合为 $T$ 的期望方案数. 为了避免重复计数,规定加入边的顺序为按照左边点的编号从小到大排序. 现在有边组,考虑仍然把它们看成独立的两条边. 可以发现边组二少算了 $\frac 1 4$ 的贡献,边组三多算了 $\frac 1 4$ 的贡献,把边强行绑在一起形成新边,把这些贡献调整过来. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7,inv2=(P+1)&gt;&gt;1,inv4=(P+1)&gt;&gt;2;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int N=15,M=N*N*3;int n,k,m,U;struct Edge&#123; int l,r,w; Edge(int l=0,int r=0,int w=0):l(l),r(r),w(w) &#123;&#125;&#125;E[M];int lowbit(int x)&#123; return x&amp;(-x);&#125;bool intersect(int S,int T)&#123; return S&amp;T;&#125;map&lt;pair&lt;int,int&gt;,int&gt; f;int dfs(int S,int T)&#123; if(S==U &amp;&amp; T==U) return 1; pair&lt;int,int&gt; tmp=make_pair(S,T); if(f.count(tmp)) return f[tmp]; int ans=0; for(int i=0;i&lt;m;++i) &#123; int l=E[i].l,r=E[i].r,w=E[i].w; if(!intersect(S,l) &amp;&amp; !intersect(T,r) &amp;&amp; intersect(l,lowbit(U-S))) inc(ans,mul(dfs(S^l,T^r),w)); &#125; return f[tmp]=ans;&#125;int main()&#123; n=read(),k=read(); for(int i=0;i&lt;k;++i) &#123; int tp=read(),a=read()-1,b=read()-1; E[m++]=Edge(1&lt;&lt;a,1&lt;&lt;b,inv2); if(tp) &#123; int c=read()-1,d=read()-1; E[m++]=Edge(1&lt;&lt;c,1&lt;&lt;d,inv2); if(a==c || b==d) continue; E[m++]=Edge((1&lt;&lt;a)+(1&lt;&lt;c),(1&lt;&lt;b)+(1&lt;&lt;d),tp==1?inv4:P-inv4); &#125; &#125; U=(1&lt;&lt;n)-1; int ans=mul(1&lt;&lt;n,dfs(0,0)); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>概率/期望</tag>
        <tag>状压dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 5019 遗失的答案]]></title>
    <url>%2F2019%2F12%2F01%2Fbzoj-5019-%E9%81%97%E5%A4%B1%E7%9A%84%E7%AD%94%E6%A1%88%2F</url>
    <content type="text"><![CDATA[状压 $dp$ + $FWT$ . 若将每个数分解质因数,则 $\rm gcd,lcm$ 的限制等价于给出了每个质因子次数的 $\min,\max$ . 注意到 $n$ 的不同质因子个数 $\omega(n)\le 8$ ,比较少. 用一个 $16$ 位的二进制数 $S$ 表示各个质因子的 $\min,\max$ 是否被取到. 只有那些既是 $\rm gcd$ 倍数,又是 $\rm lcm$ 约数的数才有用,把它们全部爆搜出来,记这样的数共有 $m​$ 个. 记 $f(i,S)​$ 表示考虑了第 $1\sim i​$ 个数,是否被取到的状态为 $S​$ 的方案数. 记 $g(i,S)$ 表示考虑了第 $i\sim m$ 个数,是否被取到的状态为 $S$ 的方案数. 那么强制要求选第 $i$ 个数时,就把 $f(i-1)$ 和 $g(i+1)$ 用 $FWT​$ 做个或卷积. 将那些与第 $i$ 个数的状态 $S_i$ 或起来后为全集 $U$ 的位置上的值加起来,就是答案. $m$ 并不会太大,可以将每次询问的答案记忆化下来,时间复杂度 $O(Q+m\cdot 4^{\omega(n)} \omega(n))$ . 实测发现 $m&lt; 800$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;void FWT(int *a,int n)&#123; for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; int m=l&gt;&gt;1; for(int *p=a;p!=a+n;p+=l) for(int i=0;i&lt;m;++i) inc(p[i+m],p[i]); &#125;&#125;void IFWT(int *a,int n)&#123; for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; int m=l&gt;&gt;1; for(int *p=a;p!=a+n;p+=l) for(int i=0;i&lt;m;++i) inc(p[i+m],P-p[i]); &#125;&#125;const int N=800,M=1&lt;&lt;16;int tot=0,factor[N],l[N],r[N];int n,Gcd,Lcm,m=0;struct info&#123; int a,s; info(int a=0,int s=0):a(a),s(s) &#123;&#125; bool operator &lt; (const info &amp;rhs) const &#123; return a&lt;rhs.a; &#125;&#125;p[N];void dfs(int k,int prod,int st)&#123; if(k==tot) &#123; ++m; p[m].a=prod; p[m].s=st; return; &#125; for(int i=1;i&lt;=l[k];++i) prod*=factor[k]; for(int i=l[k];i&lt;=r[k];++i) &#123; int t=st; if(i==l[k]) t|=1&lt;&lt;k; if(i==r[k]) t|=1&lt;&lt;(k+tot); dfs(k+1,prod,t); if(n/prod&lt;factor[k]) return; prod*=factor[k]; &#125;&#125;int f[N][M],g[N][M],ans[N],tmp[M];int main()&#123; n=read(),Gcd=read(),Lcm=read(); if(Lcm%Gcd) &#123; int Q=read(); while(Q--) puts("0"); return 0; &#125; for(int i=2;i*i&lt;=Lcm;++i) if(Lcm%i==0) &#123; factor[tot]=i; while(Gcd%i==0) ++l[tot],Gcd/=i; while(Lcm%i==0) ++r[tot],Lcm/=i; tot++; &#125; if(Lcm&gt;1) &#123; factor[tot]=Lcm; r[tot]=1; if(Gcd==Lcm) l[tot]=1; tot++; &#125; int N=(1&lt;&lt;(2*tot)); dfs(0,1,0); sort(p+1,p+m+1); f[0][0]=1; for(int i=0;i&lt;m;++i) for(int S=0;S&lt;N;++S) if(f[i][S]) &#123; inc(f[i+1][S],f[i][S]); inc(f[i+1][S|p[i+1].s],f[i][S]); &#125; g[m+1][0]=1; for(int i=m+1;i&gt;1;--i) for(int S=0;S&lt;N;++S) if(g[i][S]) &#123; inc(g[i-1][S],g[i][S]); inc(g[i-1][S|p[i-1].s],g[i][S]); &#125; memset(ans,-1,sizeof ans); int Q=read(); while(Q--) &#123; int c=read(); int x=lower_bound(p+1,p+1+m,info(c,0))-p; if(c!=p[x].a) &#123; puts("0"); continue; &#125; if(ans[x]!=-1) &#123; printf("%d\n",ans[x]); continue; &#125; ans[x]=0; FWT(f[x-1],N); FWT(g[x+1],N); for(int i=0;i&lt;N;++i) tmp[i]=mul(f[x-1][i],g[x+1][i]); IFWT(tmp,N); IFWT(f[x-1],N); IFWT(g[x+1],N); for(int S=0;S&lt;N;++S) if((S|p[x].s)==(N-1)) inc(ans[x],tmp[S]); printf("%d\n",ans[x]); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>状压dp</tag>
        <tag>FWT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3684 大朋友和多叉树]]></title>
    <url>%2F2019%2F12%2F01%2Fbzoj-3684-%E5%A4%A7%E6%9C%8B%E5%8F%8B%E4%B8%8E%E5%A4%9A%E5%8F%89%E6%A0%91%2F</url>
    <content type="text"><![CDATA[生成函数 + 拉格朗日反演 + 多项式操作. 设 $f(x)$ 表示权值为 $x$ 的神犇多叉树的个数,边界为 $f(1)=1$ . 转移时,枚举根节点有 $k$ 个孩子,转移是将他们全部卷积起来. 设 $F(x)$ 是答案的生成函数,则$$F(x)=\sum_{k\in D} F^k(x) + x$$可以找出它的复合逆 $G(x)=x-\sum_{k\in S} x^k$ . 保证了 $S$ 中的元素 $\ge 2$ ,所以 $F,G$ 的常数项都为 $0$ , $1$ 次项系数都为 $1$ . 于是可以用拉格朗日反演求出 $[x^n] F(x)$ .$$[x^n] F(x)=[x^{n-1}] \frac 1 n (\frac{x}{G(x)})^n$$ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=950009857,G=7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=8e5+10;int rev[MAXN],omega[MAXN],inv[MAXN],curn;void init(int n)&#123; for(int i=0;i&lt;n;++i) rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)*(n&gt;&gt;1)); for(int l=2; l&lt;=n; l&lt;&lt;=1) &#123; omega[l]=fpow(G,(P-1)/l); inv[l]=fpow(omega[l],P-2); &#125; curn=n;&#125;void DFT(int *a,int n,bool invflag)&#123; if(curn!=n) init(n); for(int i=0; i&lt;n; ++i) if(i&lt;rev[i]) swap(a[i],a[rev[i]]); for(int l=2; l&lt;=n; l&lt;&lt;=1) &#123; int m=(l&gt;&gt;1); int gi=omega[l]; if(invflag) gi=inv[l]; for(int *p=a; p!=a+n; p+=l) &#123; int g=1; for(int i=0; i&lt;m; ++i) &#123; int t=mul(g,p[i+m]); p[i+m]=add(p[i],P-t); p[i]=add(p[i],t); g=mul(g,gi); &#125; &#125; &#125; if(invflag) &#123; int invn=fpow(n,P-2); for(int i=0; i&lt;n; ++i) a[i]=mul(a[i],invn); &#125;&#125;void NTT(int *A,int *B,int *C,int lenA,int lenB)&#123; static int a[MAXN],b[MAXN]; int lenC=lenA+lenB-1,n=1; while(n&lt;lenC) n&lt;&lt;=1; for(int i=0;i&lt;lenA;++i) a[i]=A[i]; for(int i=lenA;i&lt;n;++i) a[i]=0; for(int i=0;i&lt;lenB;++i) b[i]=B[i]; for(int i=lenB;i&lt;n;++i) b[i]=0; DFT(a,n,false); DFT(b,n,false); for(int i=0; i&lt;n; ++i) C[i]=mul(a[i],b[i]); DFT(C,n,true);&#125;void PolyInverse(int *A,int *B,int N)&#123; int n=1; while(n&lt;N) n&lt;&lt;=1; static int tmp[MAXN]; B[0]=fpow(A[0],P-2); for(int i=2;i&lt;=n;i&lt;&lt;=1) &#123; NTT(A,B,tmp,i,i); NTT(tmp,B,tmp,i,i); for(int j=0;j&lt;i;++j) B[j]=add(mul(2,B[j]),P-tmp[j]); &#125;&#125;void PolyDiff(int *A,int n)&#123; for(int i=0;i&lt;n-1;++i) A[i]=mul(A[i+1],i+1); A[n-1]=0;&#125;void PolyInt(int *A,int n)&#123; for(int i=n;i&gt;=1;--i) A[i]=mul(A[i-1],fpow(i,P-2)); A[0]=0;&#125;void PolyLn(int *A,int *B,int n)&#123; static int tmp[MAXN],Inv[MAXN]; copy(A,A+n,tmp); PolyDiff(tmp,n); PolyInverse(A,Inv,n); NTT(tmp,Inv,B,n,n); PolyInt(B,n);&#125;void PolyExp(int *A,int *B,int N)&#123; int n=1; while(n&lt;N) n&lt;&lt;=1; static int tmp[MAXN]; B[0]=1; for(int i=2;i&lt;=n;i&lt;&lt;=1) &#123; PolyLn(B,tmp,i); for(int j=0;j&lt;i;++j) tmp[j]=add(A[j],P-tmp[j]); tmp[0]=add(tmp[0],1); NTT(tmp,B,B,i,i); &#125;&#125;void PolyPower(int *A,int *B,int k,int n)&#123; static int tmp[MAXN]; PolyLn(A,tmp,n); for(int i=0;i&lt;n;++i) tmp[i]=mul(tmp[i],k); PolyExp(tmp,B,n);&#125;int n,m,g[MAXN],Invg[MAXN],f[MAXN];int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=m;++i) &#123; int k=read(); g[k-1]=P-1; &#125; g[0]=add(g[0],1); PolyInverse(g,Invg,n+1); PolyPower(Invg,f,n,n+1); cout&lt;&lt;mul(f[n-1],fpow(n,P-2))&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>多项式</tag>
        <tag>拉格朗日反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拉格朗日反演学习笔记]]></title>
    <url>%2F2019%2F12%2F01%2F%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E5%8F%8D%E6%BC%94%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[若两个多项式 $F(x),G(x)$ ,都满足常数项为 $0$ , $1$ 次项不为 $0$ ,且两者互为复合逆,即, $G(F(x))=x$ ,则有 $$[x^n] F(x)=\frac 1 n [x^{-1}] \frac{1}{G^n(x)} \\[x^n] F(x)=\frac 1 n [x^{n-1}] (\frac{x}{G(x)})^n$$ 两个式子是等价的,在计算中常用第二个式子. 得到 $G(x)$ 后,用多项式求逆 + 多项式快速幂,可以在 $O(n\log n)$ 的时间复杂度内求出 $F(x)​$ . 证明: 设 $F(x)$ 的各项系数为 $a_i$ ,即 $F(x)=\sum_{i} a_ix^i​$ . 由于 $F(x),G(x)​$ 互为复合逆,代入 $F(G(x))=x​$ ,得到$$\sum_{i} a_i G^i(x) =x$$两边同时对 $x​$ 求导,得到$$\sum_{i} a_i\cdot i\cdot G^{i-1}(x)\cdot G’(x)=1$$两边同时除以 $G^n(x)$ ,得到$$\sum_{i} a_i\cdot i\cdot G^{i-n-1}(x)\cdot G’(x)=\frac{1}{G^n(x)}$$取 $x$ 的 $-1$ 次项,$$[x^{-1}] \sum_{i} a_i\cdot i\cdot G^{i-n-1}(x)\cdot G’(x)=[x^{-1}]\frac{1}{G^n(x)}$$对于那些 $i\neq n$ 的项,注意到 $G^{i-n-1}(x)\cdot G’(x)=\frac{1}{i-n} (G^{i-n})’(x)$ ,是个多项式. 而任何一个多项式求导后 $x^{-1}$ 系数都为 $0$ ,所以这些项对 $x^{-1}$ 的系数没有贡献. 只需要考虑 $i=n​$ 的那一项,即$$[x^{-1}] a_n\cdot n\cdot G^{-1}(x)\cdot G(x)=[x^{-1}]\frac{1}{G^n(x)}$$ 当 $i=n$ 时,$$\begin{aligned}G^{-1}(x)\cdot G’(x)&amp;=\frac{a_1+2a_2x+3a_3x^2+\dots}{a_1x+a_2x^2+a_3x^3+\dots} \\&amp;=\frac{a_1+2a_2x+3a_3x^2+\dots}{a_1 x} \cdot \frac{1}{1+\frac{a_2}{a_1}x+\frac{a_3}{a_1}x^2+\dots}\end{aligned}$$对于 $1+\frac{a_2}{a_1}x+\frac{a_3}{a_1}x^2+\dots$ 这个多项式来说,它的常数项为 $1$ ,所以一定可逆,且求逆后常数项也为 $1$ . 而对于前面那个分数,将它拆开后,只有第一项的次数为 $-1$ ,且这一项的系数为 $1$ . 于是将两者乘起来,得到 $[x^{-1}] F^{-1}(x)\cdot F’(x)=1$ . 代入 $[x^{-1}] a_n\cdot n\cdot G^{-1}(x)\cdot G’(x)=[x^{-1}]\frac{1}{G^n(x)}$ 中,就得到了 $a_n=\frac {1}{n} [x^{-1}] \frac{1}{G^n(x)}$ . 即$$[x^n] F(x)=\frac 1 n [x^{-1}] \frac{1}{G^n(x)}$$由于 $G(x)$ 的常数项为 $0$ ,而一次项不为 $0$ ,所以 $\frac {x}{G(x)}​$ 是可以求的,上面的式子就可以变成$$[x^n] F(x)=\frac 1 n [x^{n-1}] (\frac{x}{G(x)})^n$$]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>多项式</tag>
        <tag>拉格朗日反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3625 小朋友和二叉树]]></title>
    <url>%2F2019%2F11%2F30%2Fbzoj-3625-%E5%B0%8F%E6%9C%8B%E5%8F%8B%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%2F</url>
    <content type="text"><![CDATA[生成函数 + 多项式操作. 设 $F(i)$ 表示权值为 $i$ 的二叉树数目, $C(i)$ 表示 $i$ 这个数字是否在集合中出现过. 边界有 $F(0)=1$ ,转移时枚举根节点权值为 $i$ ,左子树权值为 $j$ . $$F(n)=\sum_{i=0}^n C(i)\sum_{j=0}^{n-i} F(j)F(n-i-j)$$ 这个式子和卡特兰数的递推式很像. 利用类似的做法求通项,把 $F,C$ 都看成多项式,得到$$F=CF^2+1 \\F=\frac{1\pm \sqrt{1-4C}}{2C}$$考虑到边界条件 $C(0)=0,\lim _{x\to 0} F(x)=1$ ,可以发现此处应该取负号. 于是得到$$F=\frac{2}{1+\sqrt{1-4C}}$$用多项式开根 + 多项式求逆处理,时间复杂度 $O(n\log n)$ ,多项式开根可以直接套牛顿迭代来做. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353,G=3,inv2=(P+1)&gt;&gt;1;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=4e5+10;int rev[MAXN],omega[MAXN],inv[MAXN],curn;void DFTInit(int n)&#123; if(n==curn) return; for(int i=0;i&lt;n;++i) rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)*(n&gt;&gt;1)); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; omega[l]=fpow(G,(P-1)/l); inv[l]=fpow(omega[l],P-2); &#125; curn=n;&#125;void DFT(int *a,int n,bool invflag)&#123; DFTInit(n); for(int i=0;i&lt;n;++i) if(i&lt;rev[i]) swap(a[i],a[rev[i]]); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; int m=l&gt;&gt;1; int gi=omega[l]; if(invflag) gi=inv[l]; for(int *p=a;p!=a+n;p+=l) &#123; int g=1; for(int i=0;i&lt;m;++i) &#123; int t=mul(g,p[i+m]); p[i+m]=add(p[i],P-t); p[i]=add(p[i],t); g=mul(g,gi); &#125; &#125; &#125; if(invflag) &#123; int invn=fpow(n,P-2); for(int i=0;i&lt;n;++i) a[i]=mul(a[i],invn); &#125;&#125;void NTT(int *A,int *B,int *C,int lenA,int lenB)&#123; static int a[MAXN],b[MAXN]; int lenC=lenA+lenB-1; int n=1; while(n&lt;lenC) n&lt;&lt;=1; copy(A,A+lenA,a); fill(a+lenA,a+n,0); copy(B,B+lenB,b); fill(b+lenB,b+n,0); DFT(a,n,false); DFT(b,n,false); for(int i=0;i&lt;n;++i) C[i]=mul(a[i],b[i]); DFT(C,n,true);&#125;void PolyInverse(int *A,int *B,int N) // B=A^(-1)&#123; int n=1; while(n&lt;N) n&lt;&lt;=1; static int tmp[MAXN]; B[0]=fpow(A[0],P-2); for(int i=2;i&lt;=n;i&lt;&lt;=1) &#123; NTT(A,B,tmp,i,i); NTT(tmp,B,tmp,i,i); for(int j=0;j&lt;i;++j) B[j]=add(mul(2,B[j]),P-tmp[j]); &#125;&#125;void PolySqrt(int *A,int *B,int N) &#123; int n=1; while(n&lt;N) n&lt;&lt;=1; B[0]=1; static int tmp[MAXN]; for(int i=2;i&lt;=n;i&lt;&lt;=1) &#123; PolyInverse(B,tmp,i); NTT(tmp,A,tmp,i,i); for(int j=0;j&lt;i;++j) B[j]=mul(inv2,add(B[j],tmp[j])); &#125;&#125;int n,m,C[MAXN],tmp[MAXN],F[MAXN];int main()&#123; n=read(),m=read()+1; C[0]=1; for(int i=1;i&lt;=n;++i) &#123; int x=read(); C[x]=P-4; &#125; PolySqrt(C,tmp,m); tmp[0]=add(tmp[0],1); PolyInverse(tmp,F,m); for(int i=1;i&lt;m;++i) printf("%d\n",mul(F[i],2)); return 0;&#125;]]></content>
      <tags>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1263]]></title>
    <url>%2F2019%2F11%2F30%2FCF1263%2F</url>
    <content type="text"><![CDATA[$Div.2$ A. Sweet Problem假设从小到大依次是 $a,b,c$ ,则先把 $a$ 用完,用的时候让 $b,c$ 尽可能接近,最后再加上剩下的 $b$ . B. PIN Codes遇到一个已经出现过的串时,就把它改成一个在全局中都没有出现过的串. 可以改的有 $36$ 种串,而 $n\le 10$ ,所以每次一定都能选出. C. Everyone is a Winner!整除分块裸题.记得把 $0$ 加上. D. Secret Passwords给 $26$ 种字符各自建一个虚拟节点,对于每个串,若它含有字符 $x$ ,就将它向 $x$ 的虚拟节点连边. 用并查集实现上面的过程,最后答案就是含有字符串节点的连通块数目. E. Editor左,右括号分别视作 $+1,-1$ ,用线段树维护每个前缀的权值,以及区间内前缀的最大值,最小值. 修改时是给一段前缀 $+1$ 或者 $-1$ . 询问时,若所有前缀最小值为 $0$ ,且最后一个前缀权值为 $0$ ,则合法. 此时询问的颜色种数,可以发现就是括号的最大深度,即所有前缀的最大值. 光标移到左边就不能移了,没写这个却 pp 了,喜提 FST . F. Economic Difficulties考虑删掉一条边 $u\to v$ 时,子树 $v$ 里面的边就没有任何影响了. 为了让删去的边最多,就把子树 $v$ 里面的边也全部删掉. 从节点 $v$ 来看,可以删掉子树 $v$ 里面的所有边,以及它的父亲边 (如果有) ,这样会覆盖掉一段叶子 $[l,r]$ . 当每个叶子恰好被覆盖一次时,一定是最优的,而且容易发现这一定可以做到. 于是将每个节点看成一条线段 $[l,r]​$ ,并且有一个收益 $c​$ ,要求不重叠地覆盖 $[1,n]​$ 时能获得的最大收益. 设 $f(i)$ 表示不重叠地覆盖 $[1,i]$ 时能获得的最大收益,每条线段 $[l,r]$ 只能去转移 $f(l-1)$ ,时间复杂度 $O(a+b)$ .]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>线段树</tag>
        <tag>codeforces</tag>
        <tag>并查集</tag>
        <tag>整除分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 5093 图的价值]]></title>
    <url>%2F2019%2F11%2F29%2Fbzoj-5093-%E5%9B%BE%E7%9A%84%E4%BB%B7%E5%80%BC%2F</url>
    <content type="text"><![CDATA[第二类斯特林数 + $NTT$ . 每个点的贡献可以单独考虑,答案是 $1$ 个点的贡献 $\times n$ ,而 $1$ 个点的贡献可以通过枚举其度数计算. 公式不知道为啥炸了,只好贴图片了. 只用算后面那个 $s=\sum_{i=0}^{n-1} {n-1\choose i}\cdot i^k​$ . 为了方便,把这里的 $n$ 变成 $n-1$ ,即 $s=\sum_{i=0}^{n} {n\choose i}\cdot i^k$ . 套路地,考虑 $i^k$ 的组合意义,它表示将 $k$ 个不同的球放进 $i$ 个不同盒子中的方案数,盒子可以为空. 枚举有 $j$ 个盒子不为空. 而第二类斯特林数 $S(k,j) $ 表示将 $k$ 个球放入 $j$ 个相同的盒子中,盒子不能为空的方案数,于是得到$$i^k=\sum_{j=0}^{i-1}{i\choose j}\cdot S(k,j)\cdot j!$$代入 $s$ 的计算式,得到$$\begin{aligned}s&amp;=\sum_{i=0}^{n} \sum_{j=0}^{i-1} {i\choose j}\cdot j!\cdot S(k,j)\cdot {n\choose i} \\&amp;=\sum_{j=0}^{k} S(k,j)\cdot j!\cdot \sum_{i=0}^{n} {n\choose i}\cdot {i\choose j} \\&amp;=\sum_{j=0}^k S(k,j)\cdot j!\cdot {n\choose j} \cdot 2^{n-j}\end{aligned}$$考虑利用容斥原理计算一行的斯特林数,$$S(n,m)=\frac{1}{m!}\sum_{i=0}^m (-1)^i {m\choose i}(m-i)^n \\=\sum_{i=0}^m \frac{(-1)^i}{i!} \cdot \frac{(m-i)^n}{(m-i)!}$$用 $NTT$ 求出所有的 $S(k,j)$ ,直接带进去计算即可,时间复杂度 $O(k\log k)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353,G=3,inv2=(P+1)&gt;&gt;1;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=8e5+10;int rev[MAXN],omega[MAXN],inv[MAXN],curn;void init(int n)&#123; for(int i=0;i&lt;n;++i) rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)*(n&gt;&gt;1)); for(int l=2; l&lt;=n; l&lt;&lt;=1) &#123; omega[l]=fpow(G,(P-1)/l); inv[l]=fpow(omega[l],P-2); &#125; curn=n;&#125;void DFT(int *a,int n,bool invflag)&#123; if(curn!=n) init(n); for(int i=0; i&lt;n; ++i) if(i&lt;rev[i]) swap(a[i],a[rev[i]]); for(int l=2; l&lt;=n; l&lt;&lt;=1) &#123; int m=(l&gt;&gt;1); int gi=omega[l]; if(invflag) gi=inv[l]; for(int *p=a; p!=a+n; p+=l) &#123; int g=1; for(int i=0; i&lt;m; ++i) &#123; int t=mul(g,p[i+m]); p[i+m]=add(p[i],P-t); p[i]=add(p[i],t); g=mul(g,gi); &#125; &#125; &#125; if(invflag) &#123; int invn=fpow(n,P-2); for(int i=0; i&lt;n; ++i) a[i]=mul(a[i],invn); &#125;&#125;void NTT(int *A,int *B,int *C,int lenA,int lenB)&#123; static int a[MAXN],b[MAXN]; int lenC=lenA+lenB-1,n=1; while(n&lt;lenC) n&lt;&lt;=1; for(int i=0;i&lt;lenA;++i) a[i]=A[i]; for(int i=lenA;i&lt;n;++i) a[i]=0; for(int i=0;i&lt;lenB;++i) b[i]=B[i]; for(int i=lenB;i&lt;n;++i) b[i]=0; DFT(a,n,false); DFT(b,n,false); for(int i=0; i&lt;n; ++i) C[i]=mul(a[i],b[i]); DFT(C,n,true);&#125;int fac[MAXN],invfac[MAXN],Inv[MAXN];void InitFac(int k)&#123; fac[0]=1; for(int i=1;i&lt;=k;++i) &#123; fac[i]=mul(fac[i-1],i); Inv[i]=(i==1)?1:mul(Inv[P%i],add(P,-P/i)); &#125; invfac[k]=fpow(fac[k],P-2); for(int i=k-1;i&gt;=0;--i) invfac[i]=mul(invfac[i+1],i+1);&#125;int S[MAXN],A[MAXN],B[MAXN];int calc(int n,int k)&#123; for(int i=0;i&lt;=k;++i) &#123; A[i]=(i&amp;1)?add(P,-invfac[i]):invfac[i]; B[i]=mul(fpow(i,k),invfac[i]); &#125; NTT(A,B,S,k+1,k+1); int s=0,binom=1,pw=fpow(2,n); for(int i=0;i&lt;=k;++i) &#123; int tmp=mul(S[i],fac[i]); tmp=mul(tmp,mul(binom,pw)); inc(s,tmp); pw=mul(pw,inv2); binom=mul(binom,Inv[i+1]); binom=mul(binom,add(n,P-i)); &#125; return s;&#125;int main()&#123; int n=read(),k=read(); if(n==1) return puts("0")&amp;0; InitFac(k); int ans=calc(n-1,k); ans=mul(ans,n); ans=mul(ans,fpow(2,1LL*(n-1)*(n-2)/2%(P-1))); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>多项式</tag>
        <tag>斯特林数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3160 万径人踪灭]]></title>
    <url>%2F2019%2F11%2F29%2Fbzoj-3160-%E4%B8%87%E5%BE%84%E4%BA%BA%E8%B8%AA%E7%81%AD%2F</url>
    <content type="text"><![CDATA[$Manacher+FFT$ . 考虑去掉第 $2$ 个限制,即允许选出的位置连续,算出所有的数目后再减去连续的数目. 连续的数目即回文串的数目,可以利用 $Manacher$ 求出,顺便填充间隔字符,便于下面的处理. 为了计算前者,可以考虑每个位置作为回文中心的贡献,若有 $x$ 对字符关于 $i$ 对称,则 $i$ 的贡献为 $2^x-1$ . 而两个相同的字符,若位置分别为 $j,k$ ,则它们关于 $(j+k)/2$ 对称. 分别计算字符 $a,b$ 的贡献,而贡献是一个卷积的形式,模数是 $P-1$ ,但系数不会超过 $n^2$ ,用 $FFT$ 优化. 注意当 $j\neq k$ 时,这对会贡献两次,需要简单处理一下. 时间复杂度 $O(n\log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const double Pi=acos(-1.0);const int P=1e9+7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=8e5+10;struct Complex&#123; double r,i; Complex(double r=0,double i=0):r(r),i(i) &#123;&#125; Complex operator + (const Complex &amp;rhs) const &#123; return Complex(r+rhs.r,i+rhs.i); &#125; Complex operator - (const Complex &amp;rhs) const &#123; return Complex(r-rhs.r,i-rhs.i); &#125; Complex operator * (const Complex &amp;rhs) const &#123; return Complex(r*rhs.r-i*rhs.i,r*rhs.i+i*rhs.r); &#125; Complex conj() &#123; return Complex(r,-i); &#125; ll out() &#123; return ((ll)(r+0.5)); &#125;&#125;;int rev[MAXN],curn;Complex omega[MAXN],inv[MAXN];void init(int n)&#123; if(curn==n) return; for(int i=0;i&lt;n;++i) rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)*(n&gt;&gt;1)); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; omega[l]=Complex(cos(2*Pi/l),sin(2*Pi/l)); inv[l]=omega[l].conj(); &#125; curn=n;&#125;void DFT(Complex *a,int n,bool invflag)&#123; init(n); for(int i=0;i&lt;n;++i) if(i&lt;rev[i]) swap(a[i],a[rev[i]]); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; int m=l&gt;&gt;1; Complex gi=omega[l]; if(invflag) gi=inv[l]; for(Complex *p=a;p!=a+n;p+=l) &#123; Complex g=Complex(1,0); for(int i=0;i&lt;m;++i) &#123; Complex t=g*p[i+m]; p[i+m]=p[i]-t; p[i]=p[i]+t; g=g*gi; &#125; &#125; &#125; if(invflag) &#123; Complex invn=Complex(1.0/n,0); for(int i=0;i&lt;n;++i) a[i]=a[i]*invn; &#125;&#125;void FFT(Complex *A,Complex *B,Complex *C,int lenA,int lenB)&#123; static Complex FFT_A[MAXN],FFT_B[MAXN]; int lenC=lenA+lenB-1; int n=1; while(n&lt;lenC) n&lt;&lt;=1; copy(A,A+lenA,FFT_A); fill(FFT_A+lenA,FFT_A+n,Complex(0,0)); copy(B,B+lenB,FFT_B); fill(FFT_B+lenB,FFT_B+n,Complex(0,0)); DFT(FFT_A,n,false); DFT(FFT_B,n,false); for(int i=0;i&lt;n;++i) C[i]=FFT_A[i]*FFT_B[i]; DFT(C,n,true);&#125;int n,tot=0,ans=0,R[MAXN];char buf[MAXN],s[MAXN];void Manacher()&#123; s[++tot]='$'; for(int i=1;i&lt;=n;++i) &#123; s[++tot]='#'; s[++tot]=buf[i]; &#125; s[++tot]='#'; s[++tot]='@'; int p=0,mx=0; for(int i=1;i&lt;=tot;++i) &#123; int j=2*p-i; if(i&gt;mx) R[i]=1; else if(mx-i&gt;R[j]) R[i]=R[j]; else R[i]=mx-i+1; while(s[i-R[i]]==s[i+R[i]]) ++R[i]; if(i+R[i]-1&gt;mx) mx=i+R[i]-1,p=i; inc(ans,P-(R[i]&gt;&gt;1)); &#125;&#125;ll f[MAXN];Complex A[MAXN];void solve(char ch)&#123; A[0]=Complex(0,0); for(int i=1;i&lt;=tot;++i) &#123; A[i]=Complex(s[i]==ch?1:0,0); if(s[i]==ch) f[2*i]++; &#125; FFT(A,A,A,tot+1,tot+1); for(int i=1;i&lt;=2*tot+1;++i) f[i]+=A[i].out();&#125;int main()&#123; scanf("%s",buf+1); n=strlen(buf+1); Manacher(); solve('a'); solve('b'); for(int i=1;i&lt;=2*tot+1;++i) &#123; f[i]&gt;&gt;=1; inc(ans,add(fpow(2,f[i]%(P-1)),P-1)); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>Manacher</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BJOI2018 选做]]></title>
    <url>%2F2019%2F11%2F29%2FBJOI2018-%E9%80%89%E5%81%9A%2F</url>
    <content type="text"><![CDATA[老张觉得比较简单,但我一道都不会做. 求和把每个点到根的 $k$ 种权值和全部预处理出来,每次求出 $lca​$ 回答询问. 时间复杂度 $O(nk+m\log n)$ . code 二进制考虑给定一个二进制串,如何判断能否重排成 $3$ 的倍数. 这显然只和 $0,1$ 的个数有关,注意到,当 $k$ 为偶数时, $2^k\bmod 3=1$ ,当 $k$ 为奇数时, $2^k\bmod 3=2$ . 于是当 $1$ 的个数为偶数时,一定有解,将 $1$ 都放在后面, $0$ 全部弄成前导 $0$ . 当 $1$ 的个数为奇数时,需要放一个 $10101$ ,剩下的 $1$ 依次放在前面, $0$ 弄成前导 $0$ . 这要求 $1$ 的个数 $\ge 3$ , $0$ 的个数 $\ge 2$ . 整理一下,即,不合法的情况只有两种: $1$ 的个数为奇数,且 $0$ 的数目不超过 $1$ ,或者 $1$ 的个数为 $1$ . 这些区间要么只有一个 $1$ ,要么只有 $1$ 个 $0$ ,或者没有 $0$ ,用 $set$ 维护所有 $0,1$ 的位置,用树状数组维护答案. 时间复杂度 $O(n\log n)​$ . code 染色若不是二分图,显然可以被卡掉.若有度数 $\le 1$ 的节点,显然可以直接去掉. 于是只用考虑每个点的度数 $\ge 2$ 的二分图,不同的连通块可以分开做. 对于完全二分图 $K_{3,3}$ ,样例已经给出了卡掉的方法. 对于完全二分图 $K_{2,4}$ ,一边是 $(AB),(CD)$ ,另一边是 $(AC),(AD),(BC),(BD)$ ,就可以卡掉了. 如果有两个偶环,它们有公共点,且各自独有的点数目 $\ge 2$ ,也可以卡掉. 在一个偶环上构造出 $(AC),(AB),(BC)$ ,之后的点就不能染 $C$ 了. 再换一种颜色在另一个偶环上进行类似的构造,另一种颜色也没法染了. 当一个点的度数 $&gt;3$ 时,一定可以找出两个这样的偶环,于是只考虑最大度数为 $2,3$ 的情况. 当所有点的度数为 $2$ 时,一定是个偶环,显然顺着环染色,是卡不掉的. 于是只剩下了有 $2$ 个点度数为 $3$ ,其余点度数为 $2$ 的情况. 这两个度数为 $3$ 的点之间有 $3$ 条边不相交的路径,只有它们的长度为 $2,2,k$ ,其中 $k$ 为偶数时,是卡不掉的. 而对于 $2,4,4$ 或者 $1,3,3$ 都有卡掉的办法. 整理一下,先把所有度数为 $\le 1$ 的点剥掉. 再对于每个连通块判断其是否为偶环,或恰有两个度数为 $3$ 的点,且两者间的路径长度为 $2,2,k$ ,其中 $k$ 为偶数. 时间复杂度 $O(m)$ . code 双人猜数游戏 手玩了两个小时,喜提 $4$ 分. 按照题目中给的优先级枚举 $a,b$ 作为答案,尝试检验. 设 $f(i,a,b)$ 表示询问了 $i$ 次,若 $m=a,n=b$ ,则它们是否会被猜出来. $i=1$ 时是边界情况,分情况讨论一下. 如果第一次问的是 Alice ,那么能猜出来,当且仅当把 $ab$ 拆成两个 $\ge s$ 的数字之积时方案唯一. 如果第一次问的是 Bob,那么能猜出来,当且仅当把 $a+b$ 拆成两个 $\ge s$ 的数字之和时方案唯一. 对于 $i&gt;1$ 的情况,根据奇偶性判断这次是问的谁. 从可能的数对 $(x,y)$ 中找出 $f(i-1,x,y)$ 为 $0$ 的个数,若只有 $1$ 个,就可以把它猜出来了. 同时,若另一个人在第 $i+1​$ 回合也能猜出这个数对,那么它就是答案了. code 链上二次游戏询问长度在 $[L,R]$ 内的链的权值和时,用长度 $\le R$ 的答案减去长度 $\le L-1$ 的答案. 于是只需要考虑如何计算长度 $\le k$ 的链的权值和. 考虑每个点的贡献,分情况讨论一下每个点会被算多少次,显然用线段树维护 $\sum a_i,\sum a_i\cdot i,\sum a_i \cdot i^2​$ 即可. 时间复杂度 $O(n+m\log n)$ . code 治疗之雨 这个是暗影打击装甲被削之前出的题. 先特判答案为 $-1$ 的情况. 当 $k=0$ 时,答案为 $-1$ . 当 $m=0$ 时,若血量上限 $n&gt;1$ ,且每次扣血 $k=1$ ,答案也为 $-1$ . 对于剩下的情况,设 $E(i)$ 表示当前有 $i$ 点血,被暗影打击装甲打死期望需要的回合数. 由于 $E(0)=0$ ,所以可以不用考虑转移到 $E(0)$ ,也不用处理血量被打成负数的问题. 设 $f(i)$ 表示 $k$ 个暗影打击装甲攻击后,恰好对英雄造成 $i$ 点伤害的概率,容易预处理出来.$$f(i)=\frac{ {k\choose i}\cdot m^{k-i} } { (m+1)^k }$$设 $g(i,j)​$ 表示当前血量为 $i​$ ,一轮后血量变成 $j​$ 的概率,讨论一下 $i​$ 是否为 $n​$ ,就可以根据 $f(i-j)​$ 算出它. 于是对于血量 $i&lt;n$ 的 $E(i)$ ,有转移$$E(i)=\sum_{j=1}^i E(j)\cdot g(i,j)+E(i+1)\cdot g(i,i+1)+1$$对于 $i=n$ 的情况,有转移$$E(i)=\sum_{j=1}^{i} E(j)\cdot g(i,j)+1$$直接做高斯消元,复杂度是 $O(n^3)$ 的. 它虽然不是稀疏矩阵,但注意到每次最多回 $1$ 点血,即, $E(i)$ 要转移到 $j&gt;i$ 的 $E(j)$ ,只可能是 $E(i+1)$ . 于是就可以像树上高斯消元那样搞一搞,将每个 $E(i)$ 都表示成 $k\cdot E(1)+b$ 的形式. 根据转移方程$$E(i)=\sum_{j=1}^i E(j)\cdot g(i,j)+E(i+1)\cdot g(i,i+1)+1$$可以从前往后依次求出每个 $E(i)$ 的 $k,b$ . 而 $E(n)$ 的转移方程还没有用,把所有 $E(i)$ 代入到 $E(n)$ 的转移方程中,就可以解出 $E(1)$ ,代入求得 $E(p)$ . 时间复杂度 $O(T\cdot n^2)$ . code]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>构造</tag>
        <tag>概率/期望</tag>
        <tag>STL</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3456 城市规划]]></title>
    <url>%2F2019%2F11%2F28%2Fbzoj-3456-%E5%9F%8E%E5%B8%82%E8%A7%84%E5%88%92%2F</url>
    <content type="text"><![CDATA[多项式求逆. 要求的是带标号的 $n$ 个点的无向连通图数目. 设 $f(i)$ 表示 $i$ 个点时的答案,可以用图的总数减去不连通的图的数目. 枚举 $1$ 号节点所在连通块的大小为 $i$ 进行转移.$$f(n)=2^{n\choose 2}-\sum_{i=1}^{n-1} {n-1\choose i-1}\cdot f(j)\cdot 2^{n-i\choose 2}$$边界有 $f(1)=1​$ . 为了进行优化,考虑将 $f(n)$ 这一项也弄到 $\sum$ 里面去.可以两边乘上 $\frac {1}{(n-1)!}$ ,整理得到,$$\frac{f(n)}{(n-1)!}+\sum_{i=1}^{n-1} \frac{f(i)\cdot 2^{n-i\choose 2}}{(i-1)!(n-i)!}=\frac{2^{n\choose 2}}{(n-1)!}$$规定 $f(0)=0$ ,就可以把 $f(n)$ 也弄进去了,对比可以验证正确性.$$\sum_{i=0}^{n} \frac{f(i)\cdot 2^{n-i\choose 2}}{(i-1)!(n-i)!}=\frac{2^{n\choose 2}}{(n-1)!}$$等式左边是一个卷积的形式,设三个多项式 $A,B,C$ 分别为$$A(x)=\sum_{i} \frac{f(i)}{(i-1)!} \cdot x^i \\B(x)=\sum_{i}\frac{2^{i\choose 2}}{i!} \cdot x^i \\C(x)=\sum_{i} \frac{2^{i\choose 2}}{(i-1)!} \cdot x^i$$则有 $A(x)B(x)=C(x)$ ,而 $C(x)$ 的最高次数为 $n$ . 于是$$A(x)\equiv B^{-1}(x)\cdot C(x) \pmod {x^{n+1}}$$用多项式求逆解决,时间复杂度 $O(n\log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int P=1004535809,G=3;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL *a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=8e5+10;int rev[MAXN],omega[MAXN],inv[MAXN],curn=0;void init(int n)&#123; if(curn==n) return; for(int i=0;i&lt;n;++i) rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)*(n&gt;&gt;1)); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; omega[l]=fpow(G,(P-1)/l); inv[l]=fpow(omega[l],P-2); &#125; curn=n;&#125;void DFT(int *a,int n,bool invflag)&#123; init(n); for(int i=0;i&lt;n;++i) if(i&lt;rev[i]) swap(a[i],a[rev[i]]); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; int m=l&gt;&gt;1; int gi=omega[l]; if(invflag) gi=inv[l]; for(int *p=a;p!=a+n;p+=l) &#123; int g=1; for(int i=0;i&lt;m;++i) &#123; int t=mul(p[i+m],g); p[i+m]=add(p[i],P-t); p[i]=add(p[i],t); g=mul(g,gi); &#125; &#125; &#125; if(invflag) &#123; int invn=fpow(n,P-2); for(int i=0;i&lt;n;++i) a[i]=mul(a[i],invn); &#125;&#125;void NTT(int *A,int *B,int *C,int lenA,int lenB)&#123; static int NTT_A[MAXN],NTT_B[MAXN]; int lenC=lenA+lenB-1; int n=1; while(n&lt;lenC) n&lt;&lt;=1; copy(A,A+lenA,NTT_A); fill(NTT_A+lenA,NTT_A+n,0); copy(B,B+lenB,NTT_B); fill(NTT_B+lenB,NTT_B+n,0); DFT(NTT_A,n,false); DFT(NTT_B,n,false); for(int i=0;i&lt;n;++i) C[i]=mul(NTT_A[i],NTT_B[i]); DFT(C,n,true);&#125;void PolyInverse(int *A,int *B,int N) // A^(-1)=B mod x^N&#123; int n=1; while(n&lt;N) n&lt;&lt;=1; static int tmp[MAXN]; fill(B,B+2*n,0); B[0]=fpow(A[0],P-2); for(int i=2;i&lt;=n;i&lt;&lt;=1) &#123; NTT(A,B,tmp,i,i); NTT(tmp,B,tmp,i,i); for(int j=0;j&lt;i;++j) B[j]=add(mul(2,B[j]),P-tmp[j]); &#125;&#125;int n;int fac[MAXN],invfac[MAXN];int A[MAXN],B[MAXN],invB[MAXN],C[MAXN];int main()&#123; n=read(); fac[0]=1; for(int i=1;i&lt;=n;++i) fac[i]=mul(fac[i-1],i); invfac[n]=fpow(fac[n],P-2); for(int i=n-1;i&gt;=0;--i) invfac[i]=mul(invfac[i+1],i+1); B[0]=1,C[0]=0; for(int i=1;i&lt;=n;++i) &#123; B[i]=mul(fpow(2,1LL*i*(i-1)/2%(P-1)),invfac[i]); C[i]=mul(fpow(2,1LL*i*(i-1)/2%(P-1)),invfac[i-1]); &#125; PolyInverse(B,invB,n+1); NTT(invB,C,A,n+1,n+1); int ans=mul(A[n],fac[n-1]); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AGC035 Skolem XOR Tree]]></title>
    <url>%2F2019%2F11%2F26%2FAGC035C-Skolem-XOR-Tree%2F</url>
    <content type="text"><![CDATA[构造题. 当 $n=2^k$ 时,显然无解,因为那两个权值为 $n$ 的点路径上权值异或和一定会 $&lt;n$ . 否则,若 $n$ 为奇数, $n$ 至少为 $3$ ,可以做如下构造: 即,将两组 $1,2,3$ 串在一起,从 $4$ 开始,将 $k,k+1$ 串在一起,分别正着,反着挂在中间那个 $1$ 下面. 容易验证这样做是合法的. 若 $n$ 为偶数,只需要先构造出 $n-1$ 的解,再将两个 $n$ 挂上去. 和中间那个 $1$ 直接相连的点中,包含了 $2\sim n-1$ 的所有权值. 当 $n​$ 不为 $2​$ 的幂的时候,总能在 $2\sim n-1 ​$ 中选出 $2​$ 个数 $x,y​$ ,使得 $x\oplus y\oplus 1=n​$ ,将这两个 $n​$ 挂在上面即可. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;void report(int x,int y)&#123; printf("%d %d\n",x,y);&#125;int N;void solve(int n)&#123; report(1,2); report(2,3); report(3,1+N); report(1+N,2+N); report(2+N,3+N); for(int i=4;i&lt;=n;i+=2) &#123; report(1+N,i+N); report(i+N,i+1+N); report(1+N,i+1); report(i+1,i); &#125;&#125;int main()&#123; int n=read(); N=n; if(__builtin_popcount(n)==1) puts("No"); else &#123; puts("Yes"); if(n&amp;1) solve(n); else &#123; solve(n-1); for(int i=2;i&lt;n;++i) &#123; int j=(n+1)^i; if(1&lt;j &amp;&amp; j&lt;n &amp;&amp; i!=j) &#123; report(n,i&amp;1?i:i+N); report(n+N,j&amp;1?j:j+N); break; &#125; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tarjan算法学习笔记]]></title>
    <url>%2F2019%2F11%2F25%2Ftarjan%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[发现自己根本不会 $tarjan​$ ,于是来学一学. $tarjan$ 算法的几个不同应用中,都有建出 $dfs$ 树的过程. 若无特殊说明, $dfn$ 表示每个点的 $dfs$ 序, $low$ 表示这个点以及它的所有子孙连的所有点中 $dfn​$ 的最小值. 在无向图中,由父亲走来的那条边不被用作更新 $low​$ ,也不用判断点是否已经入队. 强连通分量对于一个有向图的子图,若子图中的任意两个点可以互相到达,则称这个子图为强连通子图. 强连通分量, $SCC$ ,是极大的强连通子图,即无法通过拓展得到更大的强连通子图. 可以利用 $tarjan​$ 算法求出每个点所在的强连通分量. $dfs$ 时不断将当前节点入栈. 回溯时,若当前节点 $u$ 满足 $dfn(u)=low(u)$ ,则不断弹栈.将这些点都归入一个新的 $SCC$ 中,直到将 $u$ 也弹出. 割点无向图中,若去掉节点 $u$ 以及所有与它关联的边后,连通块的数目增加,则称 $u$ 为割点. 可以利用 $tarjan$ 算法求出所有割点. $dfs$ 时,若节点 $u$ 为其所在连通块的根,则当它的度数 $&gt;1$ 时, $u$ 是割点. 若节点 $u$ 不为根,则当存在一个儿子 $v$ ,满足 $low(v)\ge dfn(u)$ 时, $u$ 是割点. 桥无向图中,若去掉边 $(u,v)​$ 后,连通块的数目增加,则称边 $(u,v)​$ 为桥. 可以利用 $tarjan$ 算法求出所有桥. $dfs$ 回溯时,若 $dfn(u)=low(u)$ ,则边 $(u,fa_u)$ 是桥. 边双连通分量对于一个无向图的连通子图,若任意两点间存在两条边不相交的路径,则称这个子图为边的双连通子图. 这也等价于删掉这个子图中的任意一条边后,这个子图仍然连通,即子图内部不存在桥. 边双连通分量, $e-DCC$ ,简称边双,是极大的边的双连通子图,即无法通过拓展得到边更多的边的双联通子图. 每个点只会属于一个边双,除了桥之外,其他每条边也只会属于一个边双. 可以利用 $tarjan$ 算法求出每个点所在的边双. 若先将所有桥求出,则把所有桥删掉后,剩下的每个连通块就是边双了. 这个过程可以不显式的进行,在 $dfs$ 时,不断将点入栈,若 $dfn(u)=low(u)$ ,说明 $u$ 的父亲边是桥. 不断弹栈,将这些点归入一个新的边双,直到 $u$ 也被弹出. bzoj 1718 Redundant Paths将每个边双缩点,由于原图连通,最后会形成一棵树. 若这棵无向树有 $k$ 个叶子,则只需要将这些叶子两两连一条边,答案为 $\lceil \frac k 2\rceil$ . 由于有重边,所以在跑 $tarjan$ 时不记录父亲节点,而是记录从父亲节点来的边的编号. 时间复杂度 $O(m)​$ . code bzoj 4435 Juice Junctions由于每个点的度数不超过 $3$ ,所以两个点之间的流量只可能是 $0,1,2,3$ ,依次进行判断. 若 $S,T$ 不在同一个连通块,流量为 $0$ . 若 $S,T$ 在一个连通块,但不在一个边双中,流量为 $1$ . 只需要区分 $2$ 和 $3$ ,其实它们分别表示了 $S,T$ 之间有 $2/3$ 条边不相交的路径. 暴力枚举断掉一条边,求出断掉这条边后每个点所在的边双. 若所有的 $m+1$ 种情况下, $S,T$ 所在的边双都一样,则答案为 $3$ ,否则为 $2$ ,这可以利用 $hash$ 进行判断. 时间复杂度 $O(m^2)$ . code bzoj 3590 Quare要用最小的代价把整张图连成一个边双,考虑边双的形成方式,可以这样进行理解. 单独的一个点是一个边双,在一个边双上加入一条链,满足链的首尾都在这个边双中,可以得到更大的边双. 于是可以用状压 $dp$ 来处理这个过程. 设 $f(S)$ 表示将集合 $S$ 中的点连成一个边双的最小花费. 设 $g(S,i,j)$ 表示将集合 $S$ 中的点连成一条首尾是 $i,j$ 的链的最小花费. 转移时枚举这条链,还需要把这条链接进当前的边双中. 设 $h(S,i,0)$ 表示从 $i$ 向 $S$ 中的某一个点连一条边的最小花费. 由于这条链可能只有 $1$ 个点,所以还要设 $h(S,i,1)$ 表示次小花费. 转移时,枚举链的首尾以及链包含的所有点,枚举它接进的边双含有的点.$$f(S)+g(T,i,j)+h(S,i)+h(S,j)\to f(S+T),i\neq j,S\cup T=\emptyset \\f(S)+g(T,i,i)+h(S,i)+g(S,i)\to f(S+T),S\cup T=\emptyset$$需要预处理出 $g,h$ ,瓶颈在 $g$ 的预处理上,时间复杂度 $O(3^n\cdot n^4)$ ,但显然跑不满. code bzoj 4229 选择把所有操作离线下来,倒着做,就变成了加边的同时动态维护边双信息. 利用 $LCT$ 维护边双森林,加边时,若两点未连通,就直接连起来,否则就把这两点路径上的所有点缩成一个边双. 每次要用到一个点时,都改成用它所在边双的那个超级点,这样能够保证 $dfs$ 总复杂度为 $O(n)$ . 用并查集维护每个点所在的边双以及原图的连通性. 时间复杂度 $O(n\log n)​$ . code bzoj 2959 长跑把每个边双缩成一个点,这个超级点的点权为原来所有的点点权之和. 可以发现,答案就是两个点所在边双路径上的超级点权值之和. 由于要支持加边操作,需要用 $LCT$ 动态维护边双,时间复杂度 $O(n\log n)​$ . code 点双连通分量对于一个无向图的连通子图,若任意两点间存在两条除起点终点外点不相交的路径,则称这个子图为点的双连通子图. 这也等价于删掉这个子图中的任意一个点后,这个子图仍然连通,即子图内部不存在割点. 点双连通分量, $v-DCC$ ,简称点双,是极大的点的双连通子图,即无法通过拓展得到点更多的点的双联通子图. 原图中的每个割点可能属于多个点双,但每条边只会属于一个点双. 可以利用 $tarjan$ 算法求出每条边所在的点双. 在 $dfs$ 时不断将边入栈,当通过边 $(u,v)$ 发现 $low(v)\ge dfn(u)$ ,就找到了一个割点 $u$ . 不断弹栈,将弹出的边归入一个新的点双,直到边 $(u,v)$ 也被弹出. bzoj 2730 矿场搭建用 $tarjan$ 算法求出所有点双和割点. 对于一个点双,记它包含的点数为 $x$ ,分以下 $3$ 种情况讨论. 点双内没有割点,那么要在点双中建两个救援点,贡献分别为 $2,{x\choose 2}$ . 点双内有 $1$ 个割点,那么在点双中选一个不是割点的点作为救援点就可以了,贡献分别为 $1,x-1$ . 点双内有 $2$ 个或更多的割点,那么不用在这个点双内建救援点,贡献分别为 $0,1$ . 由于救援点不会建在割点上,所以统计的贡献不会重复. code 广义圆方树在无向图中利用 $tarjan$ 算法求出所有点双,对于每个点双建一个方点,原来的点是圆点. 每个方点向这个点双中所有圆点连边,在圆点上维护这个点的信息,方点上维护这个点双的信息. 这样就可以处理一些与无向图路径,或点双有关的问题了.贴一张网上找来的图. 严格来说,这样形成的新图其实是一个森林,树的数目是原图中连通块的数目. 显然,圆点只会与方点相邻,方点只会与圆点相邻,若两个方点有公共的相邻圆点,则这个圆点代表这两个点双的割点. 注意有圆点和方点,要开两倍的空间. bzoj 1123 BLO把圆方树建出来,去掉一个圆点 $u$ ,增加的不能互通的点对数目就是两端都是圆点,且经过 $u$ 的路径数目. code bzoj 3331 压力考虑把圆方树建出来,那么两个圆点之间的必经点,就是圆方树上两点路径上的所有圆点. 用树上差分打下标记就可以处理了. code bzoj 5138 Push a Box枚举第一步怎么推之后,状态数只有 $O(nm)$ ,只用记录箱子的位置以及人在箱子的哪一个相邻块上. 转移时,有两种决策,一种是推一步箱子,另一种是不移动箱子,走到另一个与箱子相邻的块上. 如下图,当前箱子在黑色格子 $w$ ,人在红色格子 $u$ ,要走到绿色格子 $v$ . 障碍的位置是不变的,一开始就可以直接处理掉,只建出有用的边. 而箱子的位置是可以变化的,这等价于每次询问断掉箱子所在的点 $w$ 后 $u$ 与 $v$ 是否连通. 当没有断掉 $w$ 时, $u\to w\to v$ 是一条合法路径,所以断掉 $w$ 后两者连通,等价于原来 $u,v$ 在一个点双中. 建出圆方树,则等价于询问在树上是否有 $dis(u,v)= 2$ ,这只可能是祖孙或者兄弟关系,简单判一下即可. 时间复杂度 $O(nm)​$ . code bzoj 5463 铁人两项考虑建出圆方树,若枚举 $s,f$ ,则合法的 $c$ 的数目就是 $s$ 到 $f$ 经过的所有点双的点数和减去 $s,f$ 这两个点. 将方点权值设为其代表点双的点数,圆点权值设为 $-1$ ,则合法的 $c$ 的数目就是圆方树上 $s$ 到 $f$ 路径的点权和. 考虑枚举每个点作为 $c​$ 的贡献,就是它的权值与经过它的两端都是圆点的路径数目之积. code 仙人掌和圆方树仙人掌是一种特殊的无向连通图,满足任意一条边最多会在一个简单环上. 仙人掌的圆方树构造,和一般无向图的圆方树构造略有不同. 对于每一个环(点双)建一个方点,这个方点向环内所有圆点连边,不在一个环上的两个圆点之间的边保留. 方点只会和圆点相连,圆点可以与方点相连,也可以与圆点相连. 对于很多仙人掌的题,可以先考虑在树上怎么做,再额外考虑方点怎么处理,尝试将做法搬到圆方树上来. bzoj 4316 小C的独立集在遇到环时,把环的最后一条边断掉,强制第一个点选/不选,对这个环额外做两次 $dp​$ . 其余部分和普通的树形 $dp$ 一样. code bzoj 1023 cactus设 $f(i)$ 表示从节点 $i$ 往下走,能走出的最长路径. 遇到环的时候,把这个环拿出来单独做一次 $dp$ . 假设 $i,j$ 是环上不同的两点,那么可以用 $f(i)+f(j)+dis(i,j)$ 去更新答案. 把这个环上所有点存在一个序列中,还要复制一半接在后面,就可以直接用后面的编号减去前面的编号作为 $dis$ 了. 只有距离不超过环的一半的点才能更新答案,这可以用一个单调队列进行优化转移. 最后还要更新这个环的入点的 $f​$ 值. code bzoj 2125 最短路把圆方树建出来,定义一个环的根为方点的父亲,这相当于在环中取出了一个点作为代表点. 对于圆方边,将权值设为这个圆点到方点的根的最短距离. 询问时,就像在树上询问最短路一样,先求出 $lca$ ,但这里要分情况讨论. 若 $lca$ 是圆点,则可以直接回答. 若 $lca$ 是方点,那么就不能算接在 $lca$ 的那两条边的贡献,而是改成与 $lca$ 相邻的两个圆点的最短距离. 考虑当询问在同一个环上,但都不是代表点的两个点的距离时,不特判 $lca$ 是方点就会出错. code Uoj 189 火车司机出秦川把圆方树建出来,对于每次询问,建出所有关键点的虚树. 需要考虑的贡献分为两部分. 对于虚树上的每条边,代表了圆方树上的一条链,考虑计算出这条链的贡献. 对于虚树上的每个方点,需要算出对应的环上有哪些连续段被计入了贡献. 用树状数组维护每个点到根的树边长度总和 $f$ ,到根的最短路长度 $g$ ,到根的最长路长度 $h$ . 每个环的权值前缀和也需要用树状数组进行维护,这里可以用指针分配内存来实现开多个树状数组. 考虑通过树上差分打标记的方式,判断虚树上每条边有没有被计入最短路/最长路的贡献. 如果只计入了其中一者,则贡献为对应的 $g$ 或 $h$ ,如果两者都被计入,则贡献为 $g+h-f$ . 对于每条路径 $(x,y)$ ,先求出它们的 $lca$ ,若 $lca$ 是圆点,则直接打标记. 否则,把进入 $lca$ 的那两个圆点 $p_x,p_y$ 拿出来,对于路径 $(x,p_x),(y,p_y)$ 打标记,而对 $lca​$ 这个方点特殊处理. 根据询问是最短路/最长路,可以求出这个方点上的 $1$ 或 $2​$ 段区间有贡献,将区间记在这个方点上. 最后对每个方点,将这个方点上的区间排序取并,通过维护的环的权值前缀和计算贡献. 对于修改操作,分树边和环边两种情况讨论. 若修改的是树边,则会影响子树内的 $f,g,h$ . 若修改的是环边,则会影响环的权值前缀和,环上某一段子树的 $f,g$ ,另一段子树的 $f,h$ . 在对应的树状数组上进行修改即可. 时间复杂度 $O(S\log n)$ . code]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>tarjan</tag>
        <tag>圆方树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1261]]></title>
    <url>%2F2019%2F11%2F24%2FCF1261%2F</url>
    <content type="text"><![CDATA[$Div.1$ A Messy容易发现在不改变左括号,右括号个数的情况下,把这个序列变成任意一个序列都是可以的. 考虑把括号序列搞成 $()()()()\dots()((()))$ ,即前面放了 $k-1$ 对括号,剩下的括号全部嵌起来,显然是合法的. 对于每个位置 $i$ ,找到从 $i$ 往后第一个需要的括号的位置 $x$ ,把 $[i,x]$ 这一段翻一下就可以了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e3+10;char s[MAXN];int n,k,val[MAXN],tmp[MAXN];set&lt;int&gt; lp,rp;void rev(int L,int R)&#123; for(int i=L;i&lt;=R;++i) &#123; tmp[i]=val[i]; if(val[i]==1) lp.erase(i); else rp.erase(i); &#125; for(int i=L;i&lt;=R;++i) &#123; val[i]=tmp[R+L-i]; if(val[i]==1) lp.insert(i); else rp.insert(i); &#125;&#125;void fl(int i)&#123; while(1) &#123; int x=*lp.begin(); if(x&lt;i) lp.erase(x); else break; &#125; int x=*lp.begin(); printf("%d %d\n",i,x); rev(i,x);&#125;void fr(int i)&#123; while(1) &#123; int x=*rp.begin(); if(x&lt;i) rp.erase(x); else break; &#125; int x=*rp.begin(); printf("%d %d\n",i,x); rev(i,x);&#125;void solve()&#123; n=read(),k=read(); lp.clear(),rp.clear(); scanf("%s",s+1); for(int i=1; i&lt;=n; ++i) &#123; if(s[i]=='(') val[i]=1,lp.insert(i); else val[i]=-1,rp.insert(i); &#125; printf("%d\n",n); for(int i=1; i&lt;=2*(k-1); ++i) &#123; if(i&amp;1) fl(i); else fr(i); &#125; int L=2*(k-1)+1,R=n; int mid=(L+R)&gt;&gt;1; for(int i=L;i&lt;=mid;++i) fl(i); for(int i=mid+1;i&lt;=R;++i) fr(i);&#125;int main()&#123; int T=read(); while(T--) solve(); return 0;&#125; B Optimal Subsequences对于每个数定义一个优先度,数字越大,优先度越高,若数字相同,则位置靠前的优先度更高. 那么长度为 $k$ 的最优子序列就是由优先度最大的 $k$ 个数字构成的. 把所有询问离线下来,按照优先度从高到低加入每个数,加入了 $k$ 个数时,就回答所有 $k_i=k$ 的询问. 需要用一颗平衡树,或者权值线段树,来支持插入和求第 $pos$ 个数字. 比赛时没离线询问,写了主席树. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;int n,m,k,pos,a[MAXN];struct info&#123; int val,pos; bool operator &lt; (const info &amp;rhs) const &#123; if(val!=rhs.val) return val&gt;rhs.val; return pos&lt;rhs.pos; &#125;&#125;p[MAXN];struct node&#123; int ls,rs,siz; node() &#123; ls=rs=siz=0; &#125;&#125;Tree[MAXN*20];int idx=0,rt[MAXN];#define root Tree[o]#define lson Tree[root.ls]#define rson Tree[root.rs]void upd(int &amp;o,int pre,int l,int r,int pos)&#123; o=++idx; root=Tree[pre]; ++root.siz; if(l==r) return; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) upd(root.ls,Tree[pre].ls,l,mid,pos); else upd(root.rs,Tree[pre].rs,mid+1,r,pos);&#125;int query(int o,int l,int r,int k)&#123; if(l==r) return a[l]; int mid=(l+r)&gt;&gt;1; if(lson.siz&gt;=k) return query(root.ls,l,mid,k); else return query(root.rs,mid+1,r,k-lson.siz);&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) &#123; a[i]=read(); p[i].val=a[i]; p[i].pos=i; &#125; sort(p+1,p+1+n); for(int i=1;i&lt;=n;++i) upd(rt[i],rt[i-1],1,n,p[i].pos); m=read(); for(int i=1;i&lt;=m;++i) &#123; k=read(),pos=read(); printf("%d\n",query(rt[k],1,n,pos)); &#125; return 0;&#125; C Arson In Berland Forest需要先观察到,每个初始起火的点,最后会形成一个以它为中心,每条边上有 $2T+1$ 个点的正方形. 因为这些正方形可以重叠,所以答案显然是可以二分的. 预处理一个二维前缀和,二分答案后检查是否能用这样的正方形覆盖住所有着火点. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e6+10;char buf[MAXN];vector&lt;int&gt; a[MAXN],s[MAXN],tmp[MAXN],ans[MAXN];int n,m;bool check(int x)&#123; x=x*2+1; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) ans[i][j]=tmp[i][j]=0; for(int i=1;i+x-1&lt;=n;++i) for(int j=1;j+x-1&lt;=m;++j) &#123; int tot=s[i+x-1][j+x-1]-s[i-1][j+x-1]-s[i+x-1][j-1]+s[i-1][j-1]; if(tot==x*x) ans[i][j]=1; &#125; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) tmp[i][j]=tmp[i-1][j]+tmp[i][j-1]-tmp[i-1][j-1]+ans[i][j]; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) if(a[i][j]) // 判断这个点是否被覆盖 &#123; int tot=tmp[i][j]; if(i&gt;x) tot-=tmp[i-x][j]; if(j&gt;x) tot-=tmp[i][j-x]; if(i&gt;x &amp;&amp; j&gt;x) tot+=tmp[i-x][j-x]; if(!tot) return false; &#125; return true;&#125;int main()&#123; n=read(),m=read(); s[0].resize(m+1),tmp[0].resize(m+1); for(int i=1;i&lt;=n;++i) &#123; a[i].resize(m+1); s[i].resize(m+1); tmp[i].resize(m+1); ans[i].resize(m+1); scanf("%s",buf+1); for(int j=1;j&lt;=m;++j) &#123; a[i][j]=(buf[j]=='X'); s[i][j]=s[i-1][j]+s[i][j-1]-s[i-1][j-1]+a[i][j]; &#125; &#125; int L=0,R=(min(n,m)-1)&gt;&gt;1,res; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(check(mid)) res=mid,L=mid+1; else R=mid-1; &#125; check(res); printf("%d\n",res); for(int i=1;i&lt;=n;++i,puts("")) for(int j=1;j&lt;=m;++j) if(i-res&gt;0 &amp;&amp; j-res&gt;0 &amp;&amp; ans[i-res][j-res]) putchar('X'); else putchar('.'); return 0;&#125; D Wrong Answer on test 233考虑利用生成函数,将 “变换后的答案与变换前的答案之差” 看做 $x$ 的次数. 若位置 $i​$ 与位置 $(i\bmod n)+1​$ 上的数相同,则无论怎样取,这个差都不会变,记这样的位置有 $a​$ 个. 若位置 $i$ 与位置 $(i\bmod n)+1$ 上的数不同,则各有 $1$ 种选法让差 $+1,-1$ ,其余的不变,记这样的位置有 ​$b$ 个. 记 $p=k-2$ ,则这个生成函数为 $k^a\cdot (x+x^{-1}+p)^b$ ,只有次数 $&gt;0​$ 的项的系数会被计入答案. 把后面的式子乘上 $x^b$ ,后面就变成了 $(x^2+px+1)^b$ ,只有次数 $&gt;b$ 的项的系数会被计入答案. 直接用多项式快速幂乘出来,常数太大,不可取. 枚举 $px$ 选了 $i$ 个,则$$k^a\cdot (x^2+px+1)^b=k^a\cdot \sum_{i=0}^b {b\choose i}p^{b-i}x^{b-i}\cdot \sum_{j=0}^i {i\choose j}x^{2j}$$由于只算次数 $&gt;b$ 的项的系数和,对于后面那个 $\sum$ ,只有 $2j&gt;i$ 的 $i\choose j$ 会产生贡献. 当 $i$ 为奇数时,这个贡献是 $2^{i-1}$ ,当 $i$ 为偶数时,这个贡献是 $\frac{2^i-{i\choose i/2}}{2}$ . 时间复杂度 $O(n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353,inv2=(P+1)&gt;&gt;1;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=2e5+10;int fac[MAXN],invfac[MAXN],pw2[MAXN],pw[MAXN];int binom(int M,int N)&#123; return mul(fac[M],mul(invfac[N],invfac[M-N]));&#125;int n,k,p,a=0,b=0,val[MAXN];int main()&#123; n=read(),k=read(); p=k-2; for(int i=1;i&lt;=n;++i) val[i]=read(); for(int i=1;i&lt;=n;++i) if(val[i]==val[i%n+1]) ++a; else ++b; fac[0]=pw2[0]=pw[0]=1; for(int i=1;i&lt;=b;++i) &#123; fac[i]=mul(fac[i-1],i); pw2[i]=mul(pw2[i-1],2); pw[i]=mul(pw[i-1],p); &#125; invfac[b]=fpow(fac[b],P-2); for(int i=b-1;i&gt;=0;--i) invfac[i]=mul(invfac[i+1],i+1); int ans=0; for(int i=0;i&lt;=b;++i) &#123; int tmp=mul(binom(b,i),pw[b-i]); if(i&amp;1) tmp=mul(tmp,pw2[i-1]); else tmp=mul(tmp,mul(inv2,add(pw2[i],P-binom(i,i&gt;&gt;1)))); inc(ans,tmp); &#125; ans=mul(ans,fpow(k,a)); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; E Not Same先把所有元素从小到大排序,考虑一列一列地去构造出这个解. 这里的 $n$ 指还需要构造的元素的数目. 如果最大的元素 $x&lt;n$ ,则可以从前往后递归构造解. 即,先求出后 $n-1$ 个元素的解,记第一个元素为 $y$ ,再将前 $y$ 个操作加上第一个元素. 如果最大的元素 $=n$ ,这样做时,最后一步就会出现问题. 此时应该构造出一个解,有 $n$ 次操作都包含了最后那个元素,最多有 $1$ 次操作没有包含. 如果次大的元素也 $=n$ ,就将所有除了最后一个元素的 $=n$ 的元素减去 $1$ ,递归构造前 $n-1$ 个元素的解. 次大元素现在是 $n-1$ ,所以前面只可能构造出 $n-1$ 或者 $n$ 个操作. 将这些操作全部加上最后一个元素,若操作数是 $n-1$ ,则还需要加上一个只包含最后一个元素的操作. 如果次大的元素 $&lt;n$ ,记它为 $x$ ,则可以先将开头的 $n-x-1$ 个数全部操作 $1$ 次,. 然后递归构造前 $n-1$ 个元素的解,这样也会得到 $n-1$ 或者 $n$ 个操作. 将这些操作全部加上最后一个元素,若操作数是 $n-1$ ,则还需要加上一个只包含最后一个元素的操作. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;typedef pair&lt;int,int&gt; pii;#define val first#define pos secondvoid solve(vector&lt;pii&gt; A,vector&lt;vector&lt;int&gt;&gt; &amp;ops)&#123; int n=A.size(); if(n==1) &#123; if(A[0].val) ops.push_back(&#123;A[0].pos&#125;); return; &#125; if(A[n-1].val&lt;n) &#123; auto B=A; B.erase(B.begin()); solve(B,ops); for(int i=0;i&lt;A[0].val;++i) ops[i].push_back(A[0].pos); return; &#125; else &#123; auto B=A; B.pop_back(); if(A[n-2].val==n) &#123; vector&lt;int&gt; op; for(int i=0;i&lt;n-1;++i) if(B[i].val==n) &#123; B[i].val--; op.push_back(B[i].pos); &#125; solve(B,ops); for(int i=0;i&lt;ops.size();++i) ops[i].push_back(A[n-1].pos); if(ops.size()&lt;n) ops.push_back(&#123;A[n-1].pos&#125;); ops.push_back(op); &#125; else &#123; int x=A[n-2].val; for(int i=0;i&lt;n-x-1;++i) B[i].val--; solve(B,ops); for(int i=0;i&lt;n-x-1;++i) ops.push_back(&#123;A[i].pos&#125;); for(int i=0;i&lt;ops.size();++i) ops[i].push_back(A[n-1].pos); if(ops.size()&lt;n) ops.push_back(&#123;A[n-1].pos&#125;); &#125; &#125;&#125;int main()&#123; int n=read(); vector&lt;pii&gt; A(n); for(int i=0;i&lt;n;++i) &#123; A[i].val=read(); A[i].pos=i; &#125; sort(A.begin(),A.end()); vector&lt;vector&lt;int&gt;&gt; ops; solve(A,ops); cout&lt;&lt;ops.size()&lt;&lt;endl; for(int i=0;i&lt;ops.size();++i) &#123; string ans(n,'0'); for(int x:ops[i]) ans[x]='1'; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125; F Xor-Set考虑建出一颗管辖区间 $[0,2^{60}-1]$ 的线段树,把 $A,B$ 集合的线段各自在这棵线段树上划分出来. 那么这个线段树上一个深度为 $x$ 的节点,代表前 $x$ 位固定后,后面的 $60-x​$ 位任意取,这样的数集合中都有. 那么 $A$ 集合中的一个线段树节点与 $B$ 集合中的一个线段树节点异或,贡献是容易计算的. 由于 $C$ 是集合,所以相同的数只会被算一次,那么把两者固定的长度(红色部分)取个 $\min$ ,贡献不变. 即把黑色部分也看成可以任意取. 在线段树上的意义就是,把深度较深的那个节点向上跳,跳到两者深度相同,贡献不变. 于是可以对集合 $A$ ,只给划分出来的线段树节点打标记,对集合 $B$ ,给划分出来的线段树节点的所有祖先打上标记. 利用线段树的性质可以证明,$A,B$ 各自标记的线段数目不会超过 $4n$ . 枚举每个深度,只计算深度相同的,有标记的节点之间产生的贡献,时间复杂度 $O(n^2\log 10^{18})​$ .]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>二分</tag>
        <tag>平衡树</tag>
        <tag>线段树</tag>
        <tag>构造</tag>
        <tag>codeforces</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3159 决战]]></title>
    <url>%2F2019%2F11%2F23%2Fbzoj-3159-%E5%86%B3%E6%88%98%2F</url>
    <content type="text"><![CDATA[树链剖分 + 非旋 treap. 考虑树剖,维护每条重链信息时,由于线段树无法支持翻转操作,把它换成非旋 treap . 给每个重链开一棵非旋 treap ,以深度作为下标. 前面四种操作可以直接做,对于翻转操作,可以把操作到的所有点合成一个 treap ,打完标记后再放回去. 修改操作保证了起点和终点有祖先后代关系,处理起来就简单一些了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=5e4+10,inf=1e9;char op[10];int n,m,Root;int ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int idx=0,rt[MAXN];struct node&#123; int ls,rs,fa,rev,tag,mx,mi,siz,info,weight; ll sum; node() &#123; ls=rs=fa=rev=tag=info=0; mx=-inf,mi=inf; siz=0; &#125;&#125;treap[MAXN];#define root treap[o]#define lson treap[root.ls]#define rson treap[root.rs]int newnode(int val)&#123; int o=++idx; root.weight=rand(),root.siz=1; root.info=root.sum=root.mx=root.mi=val; return idx;&#125;void pushup(int o)&#123; root.sum=lson.sum+root.info+rson.sum; root.siz=lson.siz+1+rson.siz; root.mx=max(root.info,max(lson.mx,rson.mx)); root.mi=min(root.info,min(lson.mi,rson.mi));&#125;void reverse(int o)&#123; if(!o) return; root.rev^=1; swap(root.ls,root.rs);&#125;void modify(int o,int c)&#123; if(!o) return; root.tag+=c; root.mx+=c,root.mi+=c; root.info+=c,root.sum+=root.siz*c;&#125;void pushdown(int o)&#123; if(root.rev) &#123; reverse(root.ls); reverse(root.rs); root.rev=0; &#125; if(root.tag) &#123; modify(root.ls,root.tag); modify(root.rs,root.tag); root.tag=0; &#125;&#125;void split(int &amp;x,int &amp;y,int k,int o)&#123; if(!o) x=y=0; else &#123; pushdown(o); if(lson.siz&lt;k) &#123; x=o; split(root.rs,y,k-lson.siz-1,root.rs); &#125; else &#123; y=o; split(x,root.ls,k,root.ls); &#125; pushup(o); &#125; &#125;int merge(int x,int y)&#123; if(!x || !y) return x+y; pushdown(x),pushdown(y); if(treap[x].weight&lt;treap[y].weight) &#123; treap[x].rs=merge(treap[x].rs,y); pushup(x); return x; &#125; else &#123; treap[y].ls=merge(x,treap[y].ls); pushup(y); return y; &#125;&#125;void ins(int id,int val)&#123; rt[id]=merge(rt[id],newnode(val));&#125;ll query_sum(int id,int l,int r)&#123; int x,y,z; split(x,y,l-1,rt[id]); split(y,z,r-l+1,y); ll ans=treap[y].sum; y=merge(y,z); rt[id]=merge(x,y); return ans;&#125;int query_mx(int id,int l,int r)&#123; int x,y,z; split(x,y,l-1,rt[id]); split(y,z,r-l+1,y); int ans=treap[y].mx; y=merge(y,z); rt[id]=merge(x,y); return ans;&#125;int query_mi(int id,int l,int r)&#123; int x,y,z; split(x,y,l-1,rt[id]); split(y,z,r-l+1,y); int ans=treap[y].mi; y=merge(y,z); rt[id]=merge(x,y); return ans;&#125;void upd(int id,int l,int r,int c)&#123; int x,y,z; split(x,y,l-1,rt[id]); split(y,z,r-l+1,y); modify(y,c); y=merge(y,z); rt[id]=merge(x,y);&#125;int siz[MAXN],mxson[MAXN],dep[MAXN],top[MAXN],fa[MAXN];void dfs1(int u,int f)&#123; fa[u]=f; siz[u]=1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==f) continue; dep[v]=dep[u]+1; dfs1(v,u); siz[u]+=siz[v]; if(siz[v]&gt;siz[mxson[u]]) mxson[u]=v; &#125;&#125;int cnt=0,tot[MAXN],rnk[MAXN],bel[MAXN];void dfs2(int u,int tp)&#123; top[u]=tp,bel[u]=bel[tp]; rnk[u]=++tot[bel[u]]; ins(bel[u],0); if(mxson[u]) dfs2(mxson[u],tp); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa[u] || v==mxson[u]) continue; bel[v]=++cnt; dfs2(v,v); &#125;&#125;void Increase(int x,int y,int c)&#123; if(dep[x]&lt;dep[y]) swap(x,y); while(top[x]!=top[y]) &#123; upd(bel[x],1,rnk[x],c); x=fa[top[x]]; &#125; if(dep[x]&lt;dep[y]) swap(x,y); upd(bel[x],rnk[y],rnk[x],c);&#125;void Invert(int x,int y)&#123; int tx=x,ty=y; if(dep[x]&lt;dep[y]) swap(x,y); int tmp=0,a,b,c,d; while(top[x]!=top[y]) &#123; split(d,rt[bel[x]],rnk[x],rt[bel[x]]); tmp=merge(d,tmp); x=fa[top[x]]; &#125; if(dep[x]&lt;dep[y]) swap(x,y); int l=rnk[y],r=rnk[x]; split(a,b,l-1,rt[bel[x]]); split(b,c,r-l+1,b); tmp=merge(b,tmp); reverse(tmp); x=tx,y=ty; if(dep[x]&lt;dep[y]) swap(x,y); while(top[x]!=top[y]) &#123; split(tmp,d,treap[tmp].siz-rnk[x],tmp); rt[bel[x]]=merge(d,rt[bel[x]]); x=fa[top[x]]; &#125; rt[bel[x]]=merge(a,merge(tmp,c));&#125;int t=0;ll Sum(int x,int y)&#123; ll res=0; while(top[x]!=top[y]) &#123; if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); res+=query_sum(bel[x],1,rnk[x]); x=fa[top[x]]; &#125; if(dep[x]&lt;dep[y]) swap(x,y); res+=query_sum(bel[x],rnk[y],rnk[x]); return res;&#125;int Major(int x,int y)&#123; int res=-inf; while(top[x]!=top[y]) &#123; if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); res=max(res,query_mx(bel[x],1,rnk[x])); x=fa[top[x]]; &#125; if(dep[x]&lt;dep[y]) swap(x,y); res=max(res,query_mx(bel[x],rnk[y],rnk[x])); return res;&#125;int Minor(int x,int y)&#123; int res=inf; while(top[x]!=top[y]) &#123; if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); res=min(res,query_mi(bel[x],1,rnk[x])); x=fa[top[x]]; &#125; if(dep[x]&lt;dep[y]) swap(x,y); res=min(res,query_mi(bel[x],rnk[y],rnk[x])); return res;&#125;int main()&#123; n=read(),m=read(),Root=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; dfs1(Root,0); bel[Root]=++cnt; dfs2(Root,Root); for(int i=1;i&lt;=m;++i) &#123; scanf("%s",op); int x=read(),y=read(); if(op[0]=='I') &#123; if(op[2]=='c') // Increase &#123; int c=read(); Increase(x,y,c); &#125; else // Invert Invert(x,y); &#125; else if(op[0]=='S') // Sum printf("%lld\n",Sum(x,y)); else if(op[0]=='M') &#123; if(op[1]=='a') // Major printf("%d\n",Major(x,y)); else // Minor printf("%d\n",Minor(x,y)); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>平衡树</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3874 宅男计划]]></title>
    <url>%2F2019%2F11%2F22%2Fbzoj-3874-%E5%AE%85%E7%94%B7%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[三分 + 贪心. 乍一看有点像网络流,但天数太大了,没法处理. 先将那些没用的食物扔掉,即,若存在 $i,j$ 满足 $S_i\le S_j,P_i\ge P_j$ ,则 $i$ 这种食物就可以扔掉了. 考虑将外卖小哥来的次数记为 $x​$ ,则在最优策略下,能宅的时间 $f(x)​$ 是一个关于 $x​$ 的先增后减的单峰函数. 这可以感性理解?如果来的次数少,则每次会买贵的,但运费少,若来的次数多,则每次会买便宜的,但运费多. 于是可以三分 $x$ ,考虑在给定 $x$ 时如何计算 $f(x)$ . 每次送外卖时都选择当前最便宜的食物,如果保质期过了,就考虑次便宜的食物,直到买不起了,就退出. 时间复杂度 $O(n\cdot \log S)$ . 注意需要先算一个不算太大的上界. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e2+10;int n,cnt=0;ll f,m;struct node&#123; ll p,s; bool operator &lt; (const node &amp;rhs) const &#123; return s&lt;rhs.s; &#125;&#125;a[MAXN],b[MAXN];ll calc(ll x)&#123; ll money=m-x*f; if(money&lt;=0) return 0; ll res=0,tmp=0; for(int i=1;i&lt;=cnt;++i) &#123; ll d=min(b[i].s-tmp,money/(b[i].p*x)); // 买的个数 tmp+=d,res+=d*x,money-=d*b[i].p*x; if(tmp&lt;b[i].s) &#123; res+=money/b[i].p; break; &#125; &#125; return res;&#125;int main()&#123; m=read(),f=read(),n=read(); for(int i=1;i&lt;=n;++i) &#123; a[i].p=read(); a[i].s=read()+1; &#125; sort(a+1,a+1+n); for(int i=1;i&lt;=n;++i) &#123; while(cnt &amp;&amp; a[i].p&lt;=b[cnt].p) --cnt; b[++cnt]=a[i]; &#125; ll L=1,R=m/(f+b[1].p),ans=0; while(L&lt;=R) &#123; ll k=(R-L+1),l=L+k/3,r=L+k*2/3; ll vl=calc(l),vr=calc(r); if(vl&lt;vr) &#123; L=l+1; ans=vr; &#125; else &#123; R=r-1; ans=vl; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>三分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3995 道路修建]]></title>
    <url>%2F2019%2F11%2F21%2Fbzoj-3995-%E9%81%93%E8%B7%AF%E4%BF%AE%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[线段树维护区间信息. 利用线段树维护每个区间的答案. 合并两个区间时,把连接处的两条横边都连上,会和两边的竖边形成一个矩形的环,再把这个环的最大边断掉. 对于一个区间,需要维护它的答案,这棵生成树的最左/右的竖边,竖边内横边的最大值,所有横边的最大值. 合并时大力讨论删掉的是哪条边,把参数转移一下,时间复杂度 $O(n\log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=6e4+10;int n,m;int rval[2][MAXN],cval[MAXN];struct node&#123; int l,r,ans,lc,rc,lmx,rmx,mx; node()&#123;ans=lmx=rmx=0;&#125; friend node operator + (const node &amp;lson,const node &amp;rson) &#123; node root; root.l=lson.l,root.r=rson.r; root.mx=max(max(lson.mx,rson.mx),max(rval[0][lson.r],rval[1][lson.r])); root.ans=lson.ans+rval[0][lson.r]+rval[1][lson.r]+rson.ans; int mx=max(max(rval[0][lson.r],rval[1][lson.r]),max(lson.rmx,rson.lmx)); if(cval[lson.rc]&lt;mx &amp;&amp; cval[rson.lc]&lt;mx) &#123; root.ans-=mx; root.lc=lson.lc,root.lmx=lson.lmx; root.rc=rson.rc,root.rmx=rson.rmx; &#125; else &#123; root.ans-=max(cval[lson.rc],cval[rson.lc]); if(cval[lson.rc]&lt;cval[rson.lc]) &#123; if(rson.lc==rson.rc) &#123; root.rc=lson.rc; root.rmx=max(max(lson.rmx,rson.mx),max(rval[0][lson.r],rval[1][lson.r])); &#125; else &#123; root.rc=rson.rc; root.rmx=rson.rmx; &#125; root.lc=lson.lc; root.lmx=lson.lmx; &#125; else &#123; if(lson.lc==lson.rc) &#123; root.lc=rson.lc; root.lmx=max(max(lson.mx,rson.lmx),max(rval[0][lson.r],rval[1][lson.r])); &#125; else &#123; root.lc=lson.lc; root.lmx=lson.lmx; &#125; root.rc=rson.rc; root.rmx=rson.rmx; &#125; &#125; return root; &#125; &#125;Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1]void pushup(int o)&#123; root=lson+rson;&#125;void BuildTree(int o,int l,int r)&#123; if(l==r) &#123; root.ans=cval[l]; root.l=root.r=l; root.lc=root.rc=l; root.mx=root.lmx=root.rmx=0; return; &#125; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); pushup(o);&#125;void upd(int o,int l,int r,int pos)&#123; if(l==r) &#123; root.ans=cval[l]; return; &#125; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) upd(o&lt;&lt;1,l,mid,pos); else upd(o&lt;&lt;1|1,mid+1,r,pos); pushup(o);&#125;node query(int o,int l,int r,int L,int R)&#123; if(L&lt;=l &amp;&amp; r&lt;=R) return root; int mid=(l+r)&gt;&gt;1; if(R&lt;=mid) return query(o&lt;&lt;1,l,mid,L,R); if(L&gt;mid) return query(o&lt;&lt;1|1,mid+1,r,L,R); return query(o&lt;&lt;1,l,mid,L,R)+query(o&lt;&lt;1|1,mid+1,r,L,R);&#125;char op[10];int main()&#123; n=read(),m=read(); for(int i=1;i&lt;n;++i) rval[0][i]=read(); for(int i=1;i&lt;n;++i) rval[1][i]=read(); for(int i=1;i&lt;=n;++i) cval[i]=read(); BuildTree(1,1,n); for(int i=1;i&lt;=m;++i) &#123; scanf("%s",op); if(op[0]=='C') &#123; int x0=read(),y0=read(),x1=read(),y1=read(),w=read(); if(y0&gt;y1) &#123; swap(x0,x1); swap(y0,y1); &#125; if(y0==y1) &#123; cval[y0]=w; upd(1,1,n,y0); &#125; else if(x0==x1) &#123; rval[x0-1][y0]=w; upd(1,1,n,y0); upd(1,1,n,y1); &#125; &#125; else &#123; int L=read(),R=read(); node tmp=query(1,1,n,L,R); printf("%d\n",tmp.ans); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSP2019游记]]></title>
    <url>%2F2019%2F11%2F13%2F%E7%BD%AE%E9%A1%B6-CSP2019%E6%B8%B8%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[雨后青空 $Day\ -\infty$又双叒叕感冒了啊,记得 NOIP2018 和 SCOI2019 考前也是感冒来着? 这次考试一定要用虚拟机测一测程序… 考前一天的时候感冒差不多好了,感觉还不错. $Day\ 1$开考后看了看题,感觉不太对劲. T1 还算比较顺利,花了几分钟,写完之后测了测样例就扔着了. T2 感觉十分诡异,自己一直在一个奇奇怪怪的二分 + 主席树和一个更奇奇怪怪的 dfs 乱搞中纠结. 先写了乱搞,改了一会,发现还是过不去样例,跑过去写主席树,写到一半的时候发现它假掉了. 此时已经 10:40 左右,赶紧写了一个 $50$ 分暴力打底,感觉自己差不多已经退役了. 然后开始苦苦挣扎,对着代码一通乱改,此时脑子基本是糊的,乱改了半个小时,它突然把所有样例都过了. 自己随便手捏了几个感觉可能出错的小样例试了试,感觉没问题就扔在那了. 去做 T3 ,自然是喜提 $10$ 分的好成绩,最后开了虚拟机测了下样例,就下机了. 下午时听说 T2 两个大样例都很水,有几个大爷写的和我差不多的做法,在回溯时挂掉了,紧张得不行,感觉自己回溯时也没写对,由于自己都记不清 T2 怎么写的了,就没去自测,下午和晚上都在颓隔膜. $Day\ 2$开考后看了看题,看到了熟悉的 $998244353$ ,感觉稍微对劲了一点. 开 T1 ,很快编出了 $84$ 分的做法,过了样例之后,想到了记差的做法,但感觉不可做,决定先看后面的题. 开 T2 ,很快编出了 $64$ 分的做法,过了样例之后决定先看后面的题. 开 T3 ,很快编出了 $55$ 分的做法,过了样例之后,花了些时间打表找出了完美二叉树的规律,把那 $20$ 分也写了. 此时还剩一个小时左右,结果自己啥也没编出来,感觉像个弱智,用虚拟机测了一下样例,就下机了. 感觉考场降智挺严重的. 后记考完的那天下午就回家了,第二天吃午饭的时候突然收到了源代码,发现自己 D1T2 没挂,真是虚惊一场. 似乎拿了个大众分,在家里颓了几天隔膜,然后就投入文化课的怀抱了. 12.2 终于出分了,没有挂分,发现和昨年 noip 考完时的估分一样,只不过昨年挂了 100 多分.]]></content>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191112]]></title>
    <url>%2F2019%2F11%2F12%2Ftest20191112%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX1/OVWGjXoEF1mvmddOzlZg5UWGpiwKz6nrrfsQY8WjPyfYebsNXnBltF9YDf57H0pZ+40rAz0n23/6lYIhh/LueuljOM+DhN2+eOs4ml8SVZGc4haNyD3alm39enYMHT/ymBM29/8sWEe/jH1Ivs9zSt7G+uamiJOQ1xW5Ozm5SVKD8rCGKKaWUooxpSQkGj1eBf9NeX2Omh41tODkdBfKmHP5WkMlqC9h4jj/GqJHrAos+cpmzA1lRIvP80lUbOuEp3uMRQJvyH51fbicZ4O7JiV6CWZ7yvHX5qLMnv33Mx3DxJv7RyAWfmuX3IOkJdvpdVqFBy8UOmvKtC04ZHsonoKWObocuGZm2Z4qKsBWs/qHKAVlnomdgqf36FS4igMCEcKzccSt0lTIZmj0amJd0W38A+cIi2hbbO6Gpggd3bZm+NwPBsRbtRFoHOiLm85d82aZncpWNMRx42k/DXGCxA0/MtHE/ds8ioEMFVm51jt1Z74+9R5Wh2aM0oZjXgqK932kRORVGhM0PpnD+wyo9H+PuNVJhy/CyYk1nLaXzooAZIXVZu4jlbu2+NYUeFsIVOT3Xjc5nA1VtsrEts6+wEJmmjck8elmbqjGu+wmMg3vmOikzkI2cG6ArOdJq8YCu9h/zkCam2tJ6tGLNOM9480zOlkw0QKkYdrZNAzy3lYYlFTix1CmHw9ZwRpvgYq9lBGXKx1XgAcvX3B6Wn8RVE/e90chA6HDmHQ1lAkL2qJ9+8QAdQ714owb7m7VjNReQ/iWVLJgCdTLBEbwqrmKi/RmaJze6ibNXcW5hsG3wYvvNL3Hn/VQ/4SYPZR44WxGhksBYYR25Q459JWUy2i3IOW+tPpIe4PEBa4AhHfqVCVv+KM83P5rZF/31aNNlokDTsl5HrNrP6T1mZdkQihRtag3BsusPJ7OTb8EsxKAUAno8ppWmyynoAjNJNjGVtVL66adFuAyaYJpcjyF514d2DniWHcekXFt1xrbs40iurl4F4ItYwPZoZyXLnLnQ6rL95xq5zwdmVyVswI5XLhvCyNSiS8bUCObZqbxllPAr5Bgs2bzu9u7VZOeWRjfQroJ93to0kAwhJgaGktuf+TUbUu5od3XaXK2OaEou1ipIEqqToFYhF+UdyAc2SJHmO3/gYi286rYfwuzId3RS90P4L9t/SEECbzcjVJVHNrKwT65MNU3lAnEkzng9GVQkd3YkTPpOK0nOcHLJkQA4WCJomWdhmAE8lF37G96NEIkVY6PtO8akqScQ4nVk6GM+YD1c1KmVBgMYY135rFP5tPtzhjGfigVjqon2yjJ1akY3KKLAAB+dOqzhGf1ryhn6lLiKQNCX8HWXuxahS8IbHKx73k/iXOqpSwifioPrUnBi8AgZ21OkGo7mQeJFjg4eQhXrKlVVSdJJHb1+02Xgq944wfp4TV48NyBEf4KmwYWEftOUsUf2YxYsaRK1IfPZG0VYB9ukS581Q1Anb84hH8219BH2zpriV3eZeSz8eAaFeFPJI8mDAOLHWk/DQF0oieguxgw0H/BD0l4CM7/vGww8Zr6iIjcAcJVC8Iv3Ey12WegPEg6MdIPbRYh2oFXEH+4dikIxuoeQVDANIMvE3CDaJsoOH/OlSOA= var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>构造</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3709 Bohater]]></title>
    <url>%2F2019%2F11%2F11%2Fbzoj-3709-Bohater%2F</url>
    <content type="text"><![CDATA[贪心. 首先可以对于 $d\le a$ 的怪物,按照 $d$ 从小到大的顺序,能打的都打掉. 对于剩下的怪,如果能打完,那么最后剩下的血量是确定的,与顺序无关. 倒着看,相当于是撤销掉血药的恢复,再撤销掉受到怪物的伤害,即先 $-a$ ,再 $+d$ . 那么把剩下的怪按照 $a$ 从大到小排序,能打的都打掉就可以了,前后两个阶段其实是对称的. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,p=0,q=0;ll cur;struct Monster&#123; int a,d,id; bool type; bool operator &lt; (const Monster &amp;rhs) const &#123; return type?d&lt;rhs.d:a&gt;rhs.a; &#125;&#125;x[MAXN],y[MAXN];int ans[MAXN];bool check()&#123; sort(x+1,x+1+p); sort(y+1,y+1+q); for(int i=1;i&lt;=p;++i) if(cur&lt;=x[i].d) return false; else cur+=x[i].a-x[i].d,ans[i]=x[i].id; for(int i=1;i&lt;=q;++i) if(cur&lt;=y[i].d) return false; else cur+=y[i].a-y[i].d,ans[i+p]=y[i].id; return true;&#125;int main()&#123; n=read(),cur=read(); for(int i=1;i&lt;=n;++i) &#123; Monster tmp; tmp.d=read(),tmp.a=read(),tmp.id=i; if(tmp.d&lt;=tmp.a) tmp.type=true,x[++p]=tmp; else tmp.type=false,y[++q]=tmp; &#125; bool f=check(); puts(f?"TAK":"NIE"); if(f) for(int i=1;i&lt;=n;++i) printf("%d ",ans[i]); puts(""); return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191111]]></title>
    <url>%2F2019%2F11%2F11%2Ftest20191111%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>线段树</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3990 排序]]></title>
    <url>%2F2019%2F11%2F09%2Fbzoj-3990-%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[爆搜乱搞. 首先可以注意到,操作的顺序是没有影响的. 从小到大考虑每个操作,若操作了 $k$ 次,且最后合法,则这种方案对答案的贡献为 $k!$ . 在第 $i$ 次操作时,我们把序列分成 $2^{n-i}$ 段,每段长度为 $2^i$ ,则可以交换两个 “半段” . 考虑那些不是连续递增的段,必须在当前这次操作处理,否则之后就被合在一起,无法处理了. 若没有这样的段,则不执行操作. 若有 $1$ 个这样的段,就将该段的前后两部分交换,若合法则继续,否则这种情况没有贡献. 若有 $2$ 个这样的段,则一共有 $4$ 个 “半段” 可以用于交换,枚举 $4$ 种交换情况,若合法,则继续 $dfs$ . 若这样的段 $&gt;2$ 个,则一定没有贡献. 最坏情况下每次都要枚举 $4$ 种交换情况,时间复杂度 $O(4^n\cdot n)$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=(1&lt;&lt;12)+10,K=12+1;ll fac[K],pw[K],ans=0;int n,a[MAXN];bool invalid(int p,int k)&#123; for(int i=1;i&lt;pw[k];++i) if(a[p+i]!=a[p+i-1]+1) return true; return false;&#125;void swap_part(int x,int y,int k)&#123; for(int i=0;i&lt;pw[k];++i) swap(a[x+i],a[y+i]);&#125;void dfs(int k,int cnt)&#123; if(k&gt;n) return (void)(ans+=fac[cnt]); int t1=0,t2=0; // invalid parts for(int i=1;i&lt;=pw[n];i+=pw[k]) if(invalid(i,k)) &#123; if(!t1) t1=i; else if(!t2) t2=i; else // more than 2 invalid parts return; &#125; if(!t1) // 0 invalid part dfs(k+1,cnt); else if(!t2)// 1 invalid part &#123; swap_part(t1,t1+pw[k-1],k-1); if(!invalid(t1,k)) dfs(k+1,cnt+1); swap_part(t1,t1+pw[k-1],k-1); &#125; else // 2 invalid parts &#123; for(int a=0;a&lt;2;++a) for(int b=0;b&lt;2;++b) &#123; swap_part(t1+a*pw[k-1],t2+b*pw[k-1],k-1); if(!invalid(t1,k) &amp;&amp; !invalid(t2,k)) dfs(k+1,cnt+1); swap_part(t1+a*pw[k-1],t2+b*pw[k-1],k-1); &#125; &#125;&#125;int main()&#123; n=read(); fac[0]=pw[0]=1; for(int i=1;i&lt;=n;++i) &#123; fac[i]=fac[i-1]*i; pw[i]=pw[i-1]*2; &#125; for(int i=1;i&lt;=(1&lt;&lt;n);++i) a[i]=read(); dfs(1,0); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[XJOI 开放模拟赛Day2 paint]]></title>
    <url>%2F2019%2F11%2F09%2FXJOI-%E5%BC%80%E6%94%BE%E6%A8%A1%E6%8B%9F%E8%B5%9BDay2-paint%2F</url>
    <content type="text"><![CDATA[min-max 容斥 + 树形背包. 有一棵 $n$ 个节点的树,初始每个节点都是白色的. 每次操作会从 $n$ 个节点中等概率随机选出一个点,将这个点以及与它相邻的点染为黑色. 问期望多少次操作后所有点都变成黑色.在模 $998244353$ 意义下求解. $n\le 1000$ . 记 $\max(S)$ 表示集合 $S$ 中的点都变成黑色的期望需要的时间. 记 $\min(S)​$ 表示集合 $S​$ 中的点至少有一个变成黑色的期望需要的时间. 则根据 min-max 容斥,有$$\max(S)=\sum_{T\subseteq S,T\neq \emptyset }(-1)^{|T|-1} \cdot \min(T)$$点数比较大,暴力去算每个 $\min(S)​$ 不可取,但可以注意到 $\min(S)​$ 只与集合 $S​$ 中的点覆盖的点的数目有关. 即,若记 $p(S)=\sum_{i} [\exists j\in S,dis(i,j)\le 1]$ 表示集合 $S$ 能覆盖的点的数目,则 $\min(S)=\frac{n}{p(S)}$ . 而 $p(S)$ 有效的取值只会有 $n$ 种,尝试对于每个 $x$ 求出 $p(S)=x$ 的方案数,再统计答案. 可以用树形背包来求,具体地,设 $f(i,j,0/1,0/1,0/1)$ 表示考虑了子树 $i$ 内的点,覆盖了 $j$ 个点,集合 $S$ 的大小是偶数/奇数,根节点 $i$ 在 $S$ 中/不在 $S$ 中,根节点 $i$ 被覆盖了/没被覆盖 时的方案数. 合并 $u$ 和它的某个儿子 $v$ 的信息后,被覆盖的点数是两棵子树中被覆盖的点数之和,还可能加上 $u$ 或者 $v$ .$$f(u,x,a,b,c)\times f(v,y,A,B,C)\\\to f(u,x+y+[c=0\land B=1]+[C=0\land b=1],a\oplus A,b,c\lor B)$$时间复杂度 $O(n^2)$ .]]></content>
      <tags>
        <tag>树形dp</tag>
        <tag>概率/期望</tag>
        <tag>min-max 容斥</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191108]]></title>
    <url>%2F2019%2F11%2F08%2Ftest20191108%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX1/A+pX8OI23GPxEXkMncon0zl5DrwwL8waPCcRin0i6G4rf54cYLgtyWANaQbgnvMZIc8+xir7qI9p0Odf4X32WIKDn8yjfXcN5lYfWHb/GtcepFl+FXUeMd4DFpvryh3dlwQGi27CTmqLfUgSfKQKFktXdowxmAPPNMJFu4bcXz5osmGTih+tWCKKw7CuNtFz91En1Dzr68/3gDe4gNtwCeOyaUYoaC/eYrcD+05Qt+oMSgnBw8hHDdg6yCTuIJzlM1GpNova5kB9xuFNRwFLAzRC3DIN3iBFDDjSr457SvYWZtLnmeKF49XL4OHRsSc59J3Hio13e1tJrKC9ysXHIqwDJYw807SZQRpIdbfMWYe8Q7uS2Zi8EHKQYjVxr1V5AR2Hnhmi8OU9E1ZROSkbWKCJ+Qtq5+c5Fv4U3ZUKKG20oLozV7Pzf93l7YAzt17ZVjTeU7YfSBXZPjnewL5g1yGK5gpYUXkGqEr432Ly4rvEM1tYaMNGr5OK1yMHfzVb6w8ZJbAMnEkhpkoJwQXIyc1GPV5UD90MOKnkjXWgwz6H7HpL/X0GF6znjgll2r6BiB2lozbOwoJWFZOlWEtuEZqeyHjohiVLeVJhNflcP2P5Pk0O4Vu6/DtNmb7WnwILyQSXPbm2obPza/WrGLWjmKoK/ntHOgg7RjUeW07ddpJY0PC92YOKprCQe2+iq3wQqpWUZbVi6tblx7UtqbqJn2RqKwpSEiZDkMH3jrEPlhX/X63FA8UJzekJ8DiA9MWYvPhz2ROy+J37xBQCUO0wPL4Gp8AzAmN0GKjX8TBCkFBlZ7f377D2KBjHl6ROnekXVjv/m7jwxsg/V+krQBwPvW0jAxTiqlkIVZcaRG7FHiAski8D9a/7KJSYJVsYIjuBsL9tDL0OYrDENp506DeEz/07Ivl8z9O/z4zW3o9VwNWqfNV9g4OdOzqEE/aKyEwjC9avFg08A7Z4oIHm/3DWUX/i648KroyrqLyN/0MUifUe5BIa/KCxZe68wV+cjCUG2ayY9nMV4cqEFvlbaVq0yVps2cfSwh1FSqTn6zbx6QSW/dntztjlLmJ3T7Guu9ecEuFI4YvsMmQ9QoE7aQb1TJKbjOLVcZQSpKlNSgdeItEomW7mCvq8wNgyMFNbujA4YnPnmUNfipO69rHbl6mRxTx8QPX59AuYGDoRnRkTZbO6PzRRoslnKxE/x+tVgPdkEVsp39b3ecQN7BAEBKpOahlcrq/pUrW28+X/Z1C3xWZoA2yj1cR1lUBF641WYkLy3i7EHHhRoqQ2Yb2Yv+FF7xpZo/mg4jvDr9XzMNj8fr7f7IrFQxQQLdcs0ffylFw4YqMYjws98T3DkeRMDlcT3kc/NcI9IBrpxsvjvnWbkvmGh7b/FhLAQArqiKKM8l3tdCOCuoIhqREr5gXWB+yHOuUGrbu08bscTat7ClyYz2NmRN34fgXsSw1OcAmG9dvZg69b+gkf43YdYExd3DHM3pFyVNc2l9tVvL7pSISU8ElmZiKmrnmB03m9GwJI7G86FolITDaxS1aCRtJONFBoTDrspsR2KqT1DJSLoj/xFQ+7UsXHrV6ejxu+R4TeIrK0TT1U708uafWNVFkNV9OUWF6HxOIaevsjt0LtD9KeRUJZTsimWzbmZR93VyedidJl4PLzuAmbgYCvXPDyUqzo1s5U4v3gIFAn/8IS5OpH3LmYqgUVU/Dr8wydAkLys/AjPoS8SEZPJHKkyJlKvMp+b3N7n8Ijhmbk4lrSk6dIC1DAn/FpNxs7kPlvr6cVzv8p6Qb7UbrOrwQ== var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>二分</tag>
        <tag>启发式合并</tag>
        <tag>test</tag>
        <tag>权值线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF888G Xor-MST]]></title>
    <url>%2F2019%2F11%2F07%2FCF888G-Xor-MST%2F</url>
    <content type="text"><![CDATA[$Boruvka$ 算法求解最小生成树. 有一张 $n$ 个点的完全图,其中第 $i$ 个点有一个权值 $a_i$ ,两个点 $i,j$ 之间的边权为 $a_i\oplus a_j$ . 需要求出这张完全图的最小生成树的权值. $n\le 2\times 10^5,0\le a_i&lt;2^{30}$ . 利用 $Boruvka​$ 算法求解. 这个算法需要进行若干轮,初始时每个点是一个独立的连通块. 每一轮中,对于每个连通块,找到边权 $w$ 最小的边 $e=(u,v,w)$ ,满足 $u$ 在该块内,而 $v​$ 不在该块内. 将这些边都加入图中,利用并查集维护连通性. 当加入了 $n-1$ 条边后,就得到了一棵最小生成树. 每轮暴力枚举每条边,而每做一轮,连通块数目至少减少为原来的一半,所以时间复杂度为 $O((m+n)\log n)$ . 这个算法的瓶颈在于对于每个连通块找出连出去的边中,边权最小的那条边. 可以利用 $Trie$ 树优化这个找边过程,时间复杂度优化到 $O(n\log a\log n)$ . 这类套路题大概是每个点有点权,任意两点之间的边权由二者的点权决定,需要求最小生成树. 做法大致都和这道题类似,尝试去优化找最优边的过程. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10,K=30;const int inf=0x7fffffff;struct Trie&#123; int idx; Trie()&#123;idx=1;&#125; int ch[MAXN*K][2],val[MAXN*K],id[MAXN*K]; void ins(int x,int v,int k) &#123; int u=1; for(int i=K-1;i&gt;=0;--i) &#123; int c=(x&gt;&gt;i)&amp;1; if(!ch[u][c]) ch[u][c]=++idx; u=ch[u][c]; val[u]+=v; &#125; id[u]=k; &#125; int query(int x) &#123; int u=1; for(int i=K-1;i&gt;=0;--i) &#123; int c=(x&gt;&gt;i)&amp;1; if(val[ch[u][c]]) u=ch[u][c]; else u=ch[u][c^1]; &#125; return id[u]; &#125;&#125;T;int n,m=0,a[MAXN],fa[MAXN],p[MAXN];int Find(int x)&#123; return fa[x]==x?x:fa[x]=Find(fa[x]);&#125;bool cmp(int x,int y)&#123; return fa[x]&lt;fa[y];&#125;void init()&#123; for(int i=1;i&lt;=n;++i) &#123; p[i]=fa[i]=i; T.ins(a[i],1,i); &#125;&#125;pair&lt;int,int&gt; mi[MAXN];int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); sort(a+1,a+1+n); n=unique(a+1,a+1+n)-a-1; init(); ll ans=0; while(m&lt;n-1) &#123; for(int i=1;i&lt;=n;++i) fa[i]=Find(i); sort(p+1,p+1+n); for(int i=1;i&lt;=n;++i) mi[i]=make_pair(i,inf); int Fa; for(int l=1,r;l&lt;=n;++l) &#123; Fa=fa[p[l]]; r=l; while(r+1&lt;n &amp;&amp; fa[p[r+1]]==Fa) ++r; for(int i=l;i&lt;=r;++i) T.ins(a[p[i]],-1,p[i]); for(int i=l;i&lt;=r;++i) &#123; int x=p[i]; int y=T.query(a[x]); if((a[x]^a[y])&lt;mi[Fa].second) mi[Fa]=make_pair(y,a[x]^a[y]); &#125; for(int i=l;i&lt;=r;++i) T.ins(a[p[i]],1,p[i]); l=r; &#125; for(int i=1;i&lt;=n;++i) &#123; int x=Find(i),y=Find(mi[i].first); if(x==y) continue; fa[x]=y; ans+=mi[i].second; ++m; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>Trie</tag>
        <tag>Boruvka</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191106]]></title>
    <url>%2F2019%2F11%2F06%2Ftest20191106%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>概率/期望</tag>
        <tag>博弈论</tag>
        <tag>高斯消元</tag>
        <tag>虚树</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1246]]></title>
    <url>%2F2019%2F11%2F05%2FCF1246%2F</url>
    <content type="text"><![CDATA[$Div.1$ A p-binary考虑从小到大枚举答案 $k$ ,则需要满足$$n-k\cdot p=\sum_{i=1}^{k} 2^{b_i}$$其中每个 $b_i$ 表示选择了数字 $2^{b_i}+p$. 判断这个 $k$ 是否有解,只需要判断 $popcount(n-kp)\le k$ 是否成立. 若 $n-kp$ 二进制下的 $1$ 的个数比 $k$ 大,则这个 $k$ 无解. 否则,当 $n-kp$ 二进制下的 $1$ 的个数 $\le k$ 时,总可以把 $2^i$ 拆成 $2^{i-1}+2^{i-1}$ ,而凑够 $k$ 个数,即找到一组解. 当 $n\le kp$ 时,就可以退出了,若此时仍未找到解,则一定无解. 1234567891011121314151617181920212223242526272829303132333435363738//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;#define lowbit(x) x&amp;(-x)int popc(int x)&#123; int s=0; while(x) ++s,x-=lowbit(x); return s;&#125;int n,p;int solve()&#123; for(int k=1;k&lt;=31;++k) if(n-k*p&gt;=k &amp;&amp; popc(n-k*p)&lt;=k) return k; return -1;&#125;int main()&#123; n=read(),p=read(); cout&lt;&lt;solve()&lt;&lt;endl; return 0;&#125; B Power Products把每个数质因数分解,得到$$x=\prod p_i^{b_i}$$这个指数 $b_i$ 可以对 $k$ 取模. 那么对于一个 $a_j$ 来说,找到的 $a_i$ 需要满足,对于每个质因子 $p_i$ ,两者的指数相加在模 $k$ 意义下为 $0$ . 用 $hash$ 去压缩每个数的每个质因子的次数. 在 CF 上写 hash 一定要写双进制模数啊. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,k;typedef pair&lt;int,int&gt; pii;#define mp make_pairmap&lt;pii,int&gt; cnt;struct Hash&#123; int P,Base; int add(int a,int b) &#123; return (a+b&gt;=P)?(a+b-P):(a+b); &#125; int mul(int a,int b) &#123; return 1LL * a * b % P; &#125; int pw[MAXN]; void init(int p,int base) &#123; P=p,Base=base; pw[0]=1; for(int i=1;i&lt;=100000;++i) pw[i]=mul(pw[i-1],Base); &#125; pii calc(int x) // (x,-x) &#123; int a=0,b=0; for(int i=2;i*i&lt;=x;++i) if(x%i==0) &#123; int t=0; while(x%i==0) x/=i,++t; t%=k; a=add(a,mul(pw[i],t)); t=(k-t)%k; b=add(b,mul(pw[i],t)); &#125; if(x&gt;1) &#123; int t=1,i=x; a=add(a,mul(pw[i],t)); t=(k-t)%k; b=add(b,mul(pw[i],t)); &#125; return mp(a,b); &#125;&#125;A,B;int main()&#123; A.init(1e9+7,137); B.init(998244353,37); n=read(),k=read(); ll ans=0; for(int i=1;i&lt;=n;++i) &#123; int x=read(); pii upd,query; pii t=A.calc(x); upd.first=t.first,query.first=t.second; t=B.calc(x); upd.second=t.first,query.second=t.second; ans+=cnt[query]; ++cnt[upd]; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; C Rock Is Push 从那几张样例解释的 GIF 图中大概就能看出做法了. 每次进行 $dp$ 转移时考虑连续移动一段,直到改变移动方向. 设 $f(i,j,k=0/1)$ 表示从 $(1,1)$ 出发,走到 $(i,j)​$ ,且当前应该向 右/下 走的方案数. 由于每次移动之后都会切换方向,所以 一行/一列 只会被走一次,那么每次移动之间就不会互相影响了. 当 $k=0$ 时,往右边走,若 $(i,j+1)\sim (i,m)$ 这些位置共有 $x$ 个空位,那么往右最多可以走 $t$ 步. 当 $k=1$ 时,往下面走,若 $(i+1,j)\sim (n,j)$ 这些位置共有 $y$ 个空位,那么往下最多可以走 $t$ 步. 转移需要优化,如果直接上二维树状数组,时间复杂度是 $O(n^2\log^2 n)$ 的,不是很优. 可以利用前缀和的方式进行优化. 计算 $f(i,j,1)$ 时,考虑在 $f(i,j-1,1)$ 的基础上,减掉那些恰好只能到达 $j-1$ 这个位置的贡献,这可以用桶存起来. 如果合法,还需要加上 $f(i,j-1,0)$ 对 $f(i,j,1)$ 的贡献. 计算 $f(i,j,0)$ 同理. 时间复杂度 $O(n^2)$ . 特判 $n=m=1$ 的情况,否则因为根本上没有移动,导致 $f(1,1,0)$ 和 $f(1,1,1)$ 都被算入答案了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=2e3+10;char buf[MAXN];int n,m,Free[MAXN][MAXN];int x[MAXN][MAXN],y[MAXN][MAXN],f[MAXN][MAXN][2];void init()&#123; for(int i=1; i&lt;=n; ++i) &#123; scanf("%s",buf+1); for(int j=1; j&lt;=m; ++j) Free[i][j]=(buf[j]=='.'); &#125; for(int i=1; i&lt;=n; ++i) &#123; int tmp=0; for(int j=m; j&gt;=1; --j) &#123; x[i][j]=tmp; tmp+=Free[i][j]; &#125; &#125; for(int j=1; j&lt;=m; ++j) &#123; int tmp=0; for(int i=n; i&gt;=1; --i) &#123; y[i][j]=tmp; tmp+=Free[i][j]; &#125; &#125;&#125;int sum[2][MAXN][MAXN];int solve()&#123; if(n==1 &amp;&amp; m==1) return Free[n][m]; for(int i=1; i&lt;=n; ++i) for(int j=1; j&lt;=m; ++j) &#123; if(i==1 &amp;&amp; j==1) f[i][j][0]=f[i][j][1]=1; else &#123; if(j==1) f[i][j][1]=0; else if(i==1) f[i][j][1]=(x[1][1]&gt;=j-1); else &#123; f[i][j][1]=f[i][j-1][1]; inc(f[i][j][1],P-sum[1][i][j-1]); if(x[i][j-1]&gt;=1) inc(f[i][j][1],f[i][j-1][0]); &#125; if(i==1) f[i][j][0]=0; else if(j==1) f[i][j][0]=(y[1][1]&gt;=i-1); else &#123; f[i][j][0]=f[i-1][j][0]; inc(f[i][j][0],P-sum[0][i-1][j]); if(y[i-1][j]&gt;=1) inc(f[i][j][0],f[i-1][j][1]); &#125; &#125; if(y[i][j]) inc(sum[0][i+y[i][j]][j],f[i][j][1]); if(x[i][j]) inc(sum[1][i][j+x[i][j]],f[i][j][0]); &#125; return add(f[n][m][0],f[n][m][1]);&#125;int main()&#123; n=read(),m=read(); init(); cout&lt;&lt;solve()&lt;&lt;endl; return 0;&#125; D Tree Factory考虑倒着来实现这个过程,即从给出的树开始,不断操作,用最少的操作次数将它变成一条链. 若一个节点 $u$ 有 $v,w$ 两个儿子,则操作一次可以将子树 $v$ 接在子树 $w$ 下面. 不难发现,每次选择可操作的子树中,最大深度最大的那一颗,将它接在其他子树下面,会使最大深度 $+1​$ . 而当最大深度 $=n-1$ 时,就成了一条链了. 那么总操作次数一定是 $n-1-maxdep$ ,其中 $maxdep$ 表示初始时树中节点最大的深度. 对操作过程进行模拟即可. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;vector&lt;int&gt; G[MAXN];int n,dep[MAXN],fa[MAXN],mxson[MAXN];vector&lt;int&gt; ans,op;void dfs(int u)&#123; if(u) &#123; int cnt=dep[ans.back()]-dep[fa[u]]; while(cnt--) op.push_back(u); &#125; ans.push_back(u); for(auto v:G[u]) if(v^mxson[u]) dfs(v); if(mxson[u]) dfs(mxson[u]);&#125;int main()&#123; n=read(); for(int i=1;i&lt;n;++i) &#123; fa[i]=read(); G[fa[i]].push_back(i); dep[i]=dep[fa[i]]+1; &#125; int p=max_element(dep,dep+n)-dep; while(p) &#123; mxson[fa[p]]=p; p=fa[p]; &#125; dfs(0); for(auto x:ans) printf("%d ",x); puts(""); printf("%llu\n",op.size()); for(auto x:op) printf("%d ",x); puts(""); return 0;&#125;]]></content>
      <tags>
        <tag>codeforces</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191105]]></title>
    <url>%2F2019%2F11%2F05%2Ftest20191105%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>状压dp</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3999 旅游]]></title>
    <url>%2F2019%2F11%2F04%2Fbzoj-3999-%E6%97%85%E6%B8%B8%2F</url>
    <content type="text"><![CDATA[树链剖分 + 线段树. 先写一个树链剖分. 再用线段树维护信息,每个区间需要维护最大值,最小值,前面某个数减后面某个数的最大值,最小值. 修改操作比较简单,对于询问操作,先用分割出的线段树区间的最值更新答案,再将所有分割出的区间按照经过的顺序排序,暴力枚举两个区间,用前一个区间的最小值减去后一个区间的最大值更新答案. 在线段树上处理时,需要注意移动的方向. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int inf=1e9;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=5e4+10;int n,m,ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int val[MAXN],dfn[MAXN],rnk[MAXN],idx=0;int siz[MAXN],dep[MAXN],mxson[MAXN],fa[MAXN],top[MAXN];void dfs1(int u,int f)&#123; siz[u]=1; fa[u]=f; for(int i=head[u]; i; i=nx[i]) &#123; int v=to[i]; if(v==f) continue; dep[v]=dep[u]+1; dfs1(v,u); siz[u]+=siz[v]; if(siz[v]&gt;siz[mxson[u]]) mxson[u]=v; &#125;&#125;void dfs2(int u,int tp)&#123; top[u]=tp; dfn[u]=++idx; rnk[idx]=u; if(mxson[u]) dfs2(mxson[u],tp); for(int i=head[u]; i; i=nx[i]) &#123; int v=to[i]; if(v!=fa[u] &amp;&amp; v!=mxson[u]) dfs2(v,v); &#125;&#125;struct node&#123; ll tag; ll v[2],delta[2]; int tim; bool operator &lt; (const node &amp;rhs) const &#123; return tim&lt;rhs.tim; &#125;&#125; Tree[MAXN&lt;&lt;2];int lt,rt,tot;ll ans;node tmp[MAXN];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1]void pushup(int o)&#123; root.v[0]=max(lson.v[0],rson.v[0]); root.v[1]=min(lson.v[1],rson.v[1]); root.delta[0]=max(lson.delta[0],rson.delta[0]); root.delta[0]=max(root.delta[0],rson.v[0]-lson.v[1]); root.delta[1]=max(lson.delta[1],rson.delta[1]); root.delta[1]=max(root.delta[1],lson.v[0]-rson.v[1]);&#125;void BuildTree(int o,int l,int r)&#123; root.tag=0; if(l==r) &#123; root.v[0]=root.v[1]=val[rnk[l]]; root.delta[0]=root.delta[1]=0; return; &#125; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); pushup(o);&#125;void modify(int o,int c)&#123; root.tag+=c; root.v[0]+=c; root.v[1]+=c;&#125;void pushdown(int o)&#123; if(root.tag) &#123; modify(o&lt;&lt;1,root.tag); modify(o&lt;&lt;1|1,root.tag); root.tag=0; &#125;&#125;void query(int o,int l,int r,int L,int R,int dir,int c) // dir=0 left-&gt;right dir=1 right-&gt;left&#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; ans=max(ans,root.delta[dir]); tmp[++tot]=root; if(!dir) tmp[tot].tim=rt--; else tmp[tot].tim=lt++; modify(o,c); return; &#125; pushdown(o); int mid=(l+r)&gt;&gt;1; if(R&gt;mid) query(o&lt;&lt;1|1,mid+1,r,L,R,dir,c); if(L&lt;=mid) query(o&lt;&lt;1,l,mid,L,R,dir,c); pushup(o);&#125;ll solve(int x,int y,int c)&#123; ans=tot=0; lt=0,rt=inf; while(top[x]!=top[y]) &#123; if(dep[top[x]]&gt;dep[top[y]]) //jump x &#123; query(1,1,n,dfn[top[x]],dfn[x],1,c); x=fa[top[x]]; &#125; else //jump y &#123; query(1,1,n,dfn[top[y]],dfn[y],0,c); y=fa[top[y]]; &#125; &#125; if(dep[x]&gt;dep[y]) //jump x query(1,1,n,dfn[y],dfn[x],1,c); else //jump y query(1,1,n,dfn[x],dfn[y],0,c); sort(tmp+1,tmp+1+tot); for(int i=1; i&lt;tot; ++i) for(int j=i+1; j&lt;=tot; ++j) ans=max(ans,tmp[j].v[0]-tmp[i].v[1]); return ans;&#125;int main()&#123; n=read(); for(int i=1; i&lt;=n; ++i) val[i]=read(); for(int i=1; i&lt;n; ++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; dfs1(1,0); dfs2(1,1); BuildTree(1,1,n); m=read(); for(int i=1; i&lt;=m; ++i) &#123; int x=read(),y=read(),c=read(); printf("%lld\n",solve(x,y,c)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191104]]></title>
    <url>%2F2019%2F11%2F04%2Ftest20191104%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>计算几何</tag>
        <tag>概率/期望</tag>
        <tag>博弈论</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 1050 旅行]]></title>
    <url>%2F2019%2F11%2F03%2Fbzoj-1050-%E6%97%85%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[并查集. 边的数目比较小,可以尝试枚举每一条边作为最小权值的边时的答案. 先将所有边按照权值大小从小到大排序. 假设一条边 $(u,v,w)$ 是路径上权值最小的边. 用并查集维护图的连通性,按权值从小到大不断加入权值 $\ge w$ 的边. 当 $s$ 与 $t$ 连通时,得到当 $(u,v,w)​$ 作为权值最小的边的最优解. 时间复杂度 $O(m^2\log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=5e5+10;int n,m,fa[MAXN];int Find(int x)&#123; return x==fa[x]?x:fa[x]=Find(fa[x]);&#125;void init()&#123; for(int i=1;i&lt;=n;++i) fa[i]=i;&#125;struct Edge&#123; int u,v,w; bool operator &lt; (const Edge &amp;rhs) const &#123; return w&lt;rhs.w; &#125;&#125;E[MAXN];typedef pair&lt;int,int&gt; pii;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=m;++i) &#123; E[i].u=read(); E[i].v=read(); E[i].w=read(); &#125; sort(E+1,E+1+m); int s=read(),t=read(); pii ans; ans.first=0,ans.second=1; // max/min for(int i=1;i&lt;=m;++i) &#123; init(); pii tmp; tmp.first=0; tmp.second=E[i].w; for(int j=i;j&lt;=m;++j) &#123; int u=Find(E[j].u),v=Find(E[j].v); if(u==v) continue; fa[u]=v; if(Find(s)==Find(t)) &#123; tmp.first=E[j].w; break; &#125; &#125; if(!tmp.first) break; if(!ans.first || tmp.first*ans.second&lt;tmp.second*ans.first) ans=tmp; &#125; if(!ans.first) puts("IMPOSSIBLE"); else &#123; int g=__gcd(ans.first,ans.second); if(g==ans.second) printf("%d\n",ans.first/ans.second); else printf("%d/%d\n",ans.first/g,ans.second/g); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 2140 稳定婚姻]]></title>
    <url>%2F2019%2F11%2F03%2Fbzoj-2140-%E7%A8%B3%E5%AE%9A%E5%A9%9A%E5%A7%BB%2F</url>
    <content type="text"><![CDATA[$tarjan$ 求 $scc$ . 考前复习板子. 用大写字母代表女性,小写字母代表男性. 当 $A-a$ 的感情不和时,若能找到一条路径 $A\to a\to B\to b\to \dots\to K\to k\to A$ ,则这对婚姻不安全. 可以发现,女性向男性连的边都是夫妻关系,男性向女性连的边都是情人关系. 于是只把这两种有向边建出来,用 $tarjan$ 求出强连通分量,判断每对夫妻是否在同一个强连通分量中. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2.5e4+10;map&lt;string,int&gt; mp;int n,m,tot=0;int id(string s)&#123; if(mp.find(s)!=mp.end()) return mp[s]; return mp[s]=++tot;&#125;string female,male;int a[MAXN],b[MAXN],ecnt=0,head[MAXN],to[MAXN],nx[MAXN];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int dfn[MAXN],low[MAXN],idx=0,in[MAXN],stk[MAXN],tp=0,scc[MAXN],t=0;void dfs(int u)&#123; dfn[u]=low[u]=++idx; stk[++tp]=u; in[u]=1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(!dfn[v]) &#123; dfs(v); low[u]=min(low[u],low[v]); &#125; else if(in[v]) low[u]=min(low[u],dfn[v]); &#125; if(dfn[u]==low[u]) &#123; int v=-1; ++t; while(u!=v) &#123; v=stk[tp--]; scc[v]=t; in[v]=0; &#125; &#125;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) &#123; cin&gt;&gt;female&gt;&gt;male; a[i]=id(female); b[i]=id(male); addedge(a[i],b[i]); &#125; m=read(); for(int i=1;i&lt;=m;++i) &#123; cin&gt;&gt;female&gt;&gt;male; addedge(id(male),id(female)); &#125; for(int i=1;i&lt;=tot;++i) if(!dfn[i]) dfs(i); for(int i=1;i&lt;=n;++i) &#123; if(scc[a[i]]==scc[b[i]]) puts("Unsafe"); else puts("Safe"); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>tarjan</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 2054 疯狂的馒头]]></title>
    <url>%2F2019%2F11%2F03%2Fbzoj-2054-%E7%96%AF%E7%8B%82%E7%9A%84%E9%A6%92%E5%A4%B4%2F</url>
    <content type="text"><![CDATA[并查集. 线段树的做法不够优秀. 只询问一次,每个点只受最后一次染色影响,考虑倒着做,将一段区间染色后,就将这些位置全部删掉. 用并查集维护从每个位置开始,右边第一个还没有被删掉的位置. 123456789101112131415161718192021222324252627282930313233343536373839404142//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e7+10;int n,m,p,q,fa[MAXN],col[MAXN];int Find(int x)&#123; return fa[x]==x?x:fa[x]=Find(fa[x]);&#125;int main()&#123; n=read(),m=read(),p=read(),q=read(); for(int i=1;i&lt;=n+1;++i) fa[i]=i; for(int i=m;i&gt;=1;--i) &#123; int l=(i*p+q)%n+1,r=(i*q+p)%n+1; if(l&gt;r) swap(l,r); for(int j=Find(l);j&lt;=r;j=Find(j)) &#123; col[j]=i; fa[j]=j+1; &#125; &#125; for(int i=1;i&lt;=n;++i) printf("%d\n",col[i]); return 0;&#125;]]></content>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3895 取石子]]></title>
    <url>%2F2019%2F11%2F03%2Fbzoj-3895-%E5%8F%96%E7%9F%B3%E5%AD%90%2F</url>
    <content type="text"><![CDATA[博弈论. 对于若干堆石子来说,能操作的次数为 石子数目 + 堆的数目 - 1. 如果这些石子中不存在单独一个石子一堆的情况,则答案只与操作次数的奇偶性有关. 证明:当操作次数为 $0$ 时,当前的先手就败了. 若先手从数目 $=2$ 的堆中拿了一个石子,后手可以把剩下那个石子与其他的合并. 若先手从数目 $\ge 3$ 的堆中拿了一个石子,后手可以再从那个堆中拿一个石子,或是将这堆与其他的合并. 操作次数的奇偶性不会变化,最后一定会变成只有一堆石子的情况,正确性就显然了. 而总堆数 $n$ 比较小,可以暴力把单独一个石子的数目记在状态里面. 设 $f(i,j)$ 表示当前有 $i$ 个单独的石子,其余石子的操作次数为 $j$ 时的胜负情况, $1$ 表示先手必胜, $0$ 表示先手必败. 边界为 $i=0$ ,此时可以直接判断胜负情况.转移时,可以进行以下几种操作: 拿走一个单独的石子,会使 $i$ 减少 $1$ . 从石子数目 $&gt;1$ 的堆中拿走一个石子,或者合并两个石子数目 $&gt;1$ 的堆,都只会使 $j$ 减少 $1$ . 合并一个单独的石子和一个石子数目 $&gt;1$ 的堆, 会使 $i$ 减少 $1$ ,而 $j$ 增加 $1$ . 合并两个单独的石子,会使 $i$ 减少 $2$ , $j$ 增加 $3​$ . 注意特判全都是单独的石子的情况,此时合并两个单独的石子, $j$ 只会增加 $2$ . 利用记忆化搜索实现,不同组数据也可以共用记录的 $f$ . 时间复杂度 $O(n\cdot \sum a_i)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=51,MAXM=1e3+10;int f[MAXN][MAXN*MAXM];int dfs(int i,int j)&#123; if(i==0) return j&amp;1; if(j==1) return dfs(i+1,0); if(f[i][j]!=-1) return f[i][j]; int &amp;res=f[i][j]; if(!dfs(i-1,j)) res=1; else if(j&gt;0 &amp;&amp; !dfs(i,j-1)) res=1; else if(j&gt;0 &amp;&amp; !dfs(i-1,j+1)) res=1; else if(i&gt;=2 &amp;&amp; !dfs(i-2,j+(j?3:2))) res=1; else res=0; return res;&#125;int main()&#123; memset(f,-1,sizeof f); int T=read(); while(T--) &#123; int n=read(); int x=0,y=-1; for(int i=1;i&lt;=n;++i) &#123; int v=read(); if(v==1) ++x; else y+=v+1; &#125; if(y==-1) y=0; puts(dfs(x,y)?"YES":"NO"); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3894 文理分科]]></title>
    <url>%2F2019%2F11%2F03%2Fbzoj-3894-%E6%96%87%E7%90%86%E5%88%86%E7%A7%91%2F</url>
    <content type="text"><![CDATA[最小割. 最小割经典模型,一个集合中的元素全选时会产生一个额外收益. 先把所有的收益和额外收益都加入答案,然后对于每个人 $x$ ,连边 $S\to x,x\to T$ ,权值分别为选文,选理的收益. 对于每个人,再新建一个点 $y$ ,将自己以及与它四连通的点向 $y$ 连边,权值为 $\infty$ . 将 $y$ 向 $T$ 连边,权值为这些人都选理的收益,表示这些人中只要有一个人选了文,都选理的收益就没有了. 都选理的处理方法同理. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int inf=1e9;const int MAXN=1e3+10;int art[MAXN][MAXN],sci[MAXN][MAXN],same_art[MAXN][MAXN],same_sci[MAXN][MAXN],id[MAXN][MAXN];int n,m,tot=0,ans=0;void Read(int a[MAXN][MAXN])&#123; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) ans+=(a[i][j]=read());&#125;const int N=3e4+10,M=2e6+10;int head[N],ecnt=1;struct Edge&#123; int nx,to,flow; Edge(int nx=0,int to=0,int flow=0):nx(nx),to(to),flow(flow) &#123;&#125;&#125;E[M];void addedge(int u,int v,int w)&#123; E[++ecnt]=Edge(head[u],v,w); head[u]=ecnt;&#125;void ins(int u,int v,int w)&#123; addedge(u,v,w); addedge(v,u,0);&#125;int cur[N],dep[N];queue&lt;int&gt; q;bool bfs(int S,int T)&#123; for(int i=1;i&lt;=tot;++i) dep[i]=-1,cur[i]=head[i]; dep[S]=0; q.push(S); while(!q.empty()) &#123; int u=q.front(); q.pop(); for(int i=head[u];i;i=E[i].nx) &#123; int v=E[i].to; if(E[i].flow&gt;0 &amp;&amp; dep[v]==-1) &#123; dep[v]=dep[u]+1; q.push(v); &#125; &#125; &#125; return dep[T]!=-1;&#125;int dfs(int u,int T,int limit)&#123; if(u==T || !limit) return limit; int f,flow=0; for(int &amp;i=cur[u];i;i=E[i].nx) &#123; int v=E[i].to; if(E[i].flow&gt;0 &amp;&amp; dep[v]==dep[u]+1 &amp;&amp; (f=dfs(E[i].to,T,min(limit,E[i].flow)))) &#123; E[i].flow-=f; E[i^1].flow+=f; flow+=f; limit-=f; &#125; if(!limit) break; &#125; return flow;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) id[i][j]=++tot; Read(art); Read(sci); Read(same_art); Read(same_sci); int S=++tot,T=++tot; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) &#123; int x=id[i][j],y=++tot; ins(S,x,art[i][j]); ins(x,T,sci[i][j]); ins(y,T,same_sci[i][j]); ins(x,y,inf); if(i&gt;1) ins(id[i-1][j],y,inf); if(i&lt;n) ins(id[i+1][j],y,inf); if(j&gt;1) ins(id[i][j-1],y,inf); if(j&lt;m) ins(id[i][j+1],y,inf); y=++tot; ins(S,y,same_art[i][j]); ins(y,x,inf); if(i&gt;1) ins(y,id[i-1][j],inf); if(i&lt;n) ins(y,id[i+1][j],inf); if(j&gt;1) ins(y,id[i][j-1],inf); if(j&lt;m) ins(y,id[i][j+1],inf); &#125; while(bfs(S,T)) ans-=dfs(S,T,inf); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191103]]></title>
    <url>%2F2019%2F11%2F03%2Ftest20191103%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>概率/期望</tag>
        <tag>矩阵加速</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191102]]></title>
    <url>%2F2019%2F11%2F02%2Ftest20191102%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>主席树</tag>
        <tag>test</tag>
        <tag>Trie树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1245]]></title>
    <url>%2F2019%2F11%2F02%2FCF1245%2F</url>
    <content type="text"><![CDATA[$Div.2$ 感觉这场的 E,F 都偏简单了啊. A Good ol’ Numbers Coloring只需要判断 $a,b$ 是否互质. 证明可以参考小凯的疑惑. 12345678910111213141516171819202122232425262728#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int main()&#123; int T=read(); while(T--) &#123; int a=read(),b=read(); if(__gcd(a,b)==1) puts("Finite"); else puts("Infinite"); &#125; return 0;&#125; B Restricted RPS先判断能否赢,若能,就先把需要赢的位置确定好,剩下的随便放即可. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=128;char buf[MAXN],ans[MAXN];int main()&#123; int T=read(); while(T--) &#123; int n=read(),r=read(),p=read(),s=read(); int x=(n+1)&gt;&gt;1,R=0,P=0,S=0; scanf("%s",buf); for(int i=0;i&lt;n;++i) &#123; if(buf[i]=='R') ++R; else if(buf[i]=='P') ++P; else ++S; &#125; x-=min(R,p)+min(P,s)+min(S,r); if(x&gt;0) puts("NO"); else &#123; puts("YES"); for(int i=0;i&lt;n;++i) ans[i]='#'; for(int i=0;i&lt;n;++i) &#123; if(buf[i]=='R' &amp;&amp; p) ans[i]='P',--p; else if(buf[i]=='P' &amp;&amp; s) ans[i]='S',--s; else if(buf[i]=='S' &amp;&amp; r) ans[i]='R',--r; &#125; for(int i=0;i&lt;n;++i) if(ans[i]=='#') &#123; if(p) ans[i]='P',--p; else if(s) ans[i]='S',--s; else ans[i]='R',--r; &#125; for(int i=0;i&lt;n;++i) putchar(ans[i]); puts(""); &#125; &#125; return 0;&#125; C Constanze’s Machine先特判掉存在字符 $w$ 或 $m$ 的情况,答案为 $0$ . 剩余情况,对于各段连续的 $u$ 串, $n$ 串,方案数是互不影响的,可以用乘法原理乘起来. 设计一个 $dp$ 计算长度为 $i$ 的 $u​$ 串的方案数,可以发现它就是斐波那契数. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=1e5+10;char buf[MAXN];int n,f[MAXN];int main()&#123; scanf("%s",buf); n=strlen(buf); f[0]=f[1]=1; for(int i=2;i&lt;=n;++i) f[i]=add(f[i-1],f[i-2]); int ans=1; for(int i=0,j;i&lt;n;++i) &#123; if(buf[i]=='m' || buf[i]=='w') ans=0; j=i; while(j+1&lt;n &amp;&amp; buf[j+1]==buf[i]) ++j; if(buf[i]=='n' || buf[i]=='u') ans=mul(ans,f[j-i+1]); i=j; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; D Shichikuji and Power Grid设置一个虚拟节点 $n+1$ ,每个点与这个虚拟节点之间连边,权值为向这个点直接供电的花费,即 $c_i$ . 任意两个点之间连边,权值为在它们之间修电线的花费,跑一颗最小生成树即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const ll inf=9e18;const int MAXN=2019;struct node&#123; int c,k,x,y,id; bool operator &lt; (const node &amp;rhs) const &#123; return c&gt;rhs.c; &#125;&#125;p[MAXN];ll calc(node i,node j)&#123; return 1LL*(i.k+j.k)*(abs(i.x-j.x)+abs(i.y-j.y));&#125;struct Edge&#123; int u,v; ll c; Edge(int u=0,int v=0,ll c=0):u(u),v(v),c(c)&#123;&#125; bool operator &lt; (const Edge &amp;rhs) const &#123; return c&lt;rhs.c; &#125;&#125;E[MAXN*MAXN+MAXN];int n,m=0,s=0,t[MAXN],e=0,ea[MAXN],eb[MAXN];int fa[MAXN];int Find(int x)&#123; return x==fa[x]?x:fa[x]=Find(fa[x]);&#125;ll ans=0;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) &#123; p[i].id=i; p[i].x=read(); p[i].y=read(); &#125; for(int i=1;i&lt;=n;++i) p[i].c=read(); for(int i=1;i&lt;=n;++i) p[i].k=read(); for(int i=1;i&lt;=n;++i) &#123; fa[i]=i; E[++m]=Edge(i,n+1,p[i].c); for(int j=i+1;j&lt;=n;++j) E[++m]=Edge(i,j,calc(p[i],p[j])); &#125; fa[n+1]=n+1; sort(E+1,E+1+m); int tot=0; for(int i=1;i&lt;=m &amp;&amp; tot&lt;=n;++i) &#123; int u=E[i].u,v=E[i].v; if(Find(u)!=Find(v)) &#123; fa[Find(u)]=Find(v); if(v==n+1) t[++s]=u; else &#123; ++e; ea[e]=u; eb[e]=v; &#125; ++tot; ans+=E[i].c; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; printf("%d\n",s); for(int i=1;i&lt;=s;++i) printf("%d ",t[i]); printf("\n%d\n",e); for(int i=1;i&lt;=e;++i) printf("%d %d\n",ea[i],eb[i]); return 0;&#125; E Hyakugoku and Ladders设 $f(x,y)$ 表示当前在位置 $(x,y)$ ,走到终点的最小期望步数. 终点处的 $f$ 值为 $0$ ,对于距离终点的步数 $&lt;6$ 的位置, $f$ 值为 $6$ . 其余位置直接枚举转移到哪个位置即可,记忆化搜索时还要记录上一步是不是用了梯子,因为不能连续用两次. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=11;double f[MAXN][MAXN][2];typedef pair&lt;int,int&gt; pii;#define mp make_pairpii nxt(int x,int y)&#123; if(y==10 &amp;&amp; x%2==0) return mp(x-1,y); if(y==1 &amp;&amp; x%2) return mp(x-1,y); if(x%2==0) return mp(x,y+1); return mp(x,y-1);&#125;int h[MAXN][MAXN];double dfs(int x,int y,bool ladder)&#123; if(x==1 &amp;&amp; y==1) return 0.0; if(x==1 &amp;&amp; y&lt;=6) return 6.0; if(f[x][y][ladder]&gt;0) return f[x][y][ladder]; double &amp;res=f[x][y][ladder]; res=0; int a=x,b=y; for(int i=1;i&lt;=6;++i) &#123; pii tmp=nxt(a,b); a=tmp.first,b=tmp.second; res+=dfs(a,b,true); &#125; res/=6.0; res+=1.0; if(ladder &amp;&amp; h[x][y]) res=min(res,dfs(x-h[x][y],y,false)); return res;&#125;int main()&#123; for(int i=1;i&lt;=10;++i) for(int j=1;j&lt;=10;++j) h[i][j]=read(); printf("%.10f\n",dfs(10,1,true)); return 0;&#125; F Daniel and Spring Cleaning设 $f(x,y)$ 表示 $0\le a\le x,0\le b\le y$ 时的合法方案数. 在二维平面上简单容斥,可以发现答案为 $f(r,r)-2\cdot f(l-1,r)+f(l-1,l-1)$ . 而 $a\oplus b=a+b$ 的充要条件为 $a\&amp;b=0$ ,所以直接数位 $dp$ 计算方案数即可. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int K=32;ll f[K][2][2];int x,y;int kp(int s,int i)&#123; return (s&gt;&gt;i)&amp;1;&#125;ll dfs(int k,bool lx,bool ly)&#123; if(k&lt;0) return 1LL; if(f[k][lx][ly]!=-1) return f[k][lx][ly]; ll &amp;res=f[k][lx][ly]; res=0; int maxx=lx?kp(x,k):1; int maxy=ly?kp(y,k):1; for(int i=0;i&lt;=maxx;++i) for(int j=0;j&lt;=maxy;++j) if(i+j&lt;2) res+=dfs(k-1,lx&amp;&amp;i==maxx,ly&amp;&amp;j==maxy); return res;&#125;ll calc(int l,int r)&#123; memset(f,-1,sizeof f); x=l,y=r; if(x&lt;0 || y&lt;0) return 0; return dfs(31,true,true);&#125;void solve()&#123; int l=read(),r=read(); ll ans=calc(r,r)-2LL*calc(r,l-1)+calc(l-1,l-1); cout&lt;&lt;ans&lt;&lt;endl;&#125;int main()&#123; int T=read(); while(T--) solve(); return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>数学</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191101]]></title>
    <url>%2F2019%2F11%2F01%2Ftest20191101%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>贪心</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191031]]></title>
    <url>%2F2019%2F10%2F31%2Ftest20191031%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX1+1c0QEjzEfZtAMh43PlOPX1xspMKO30x3ujeagrRd1fqvawHznfV+hP7MPYexOcIbXfOyaCp81tRoPxL3m1uN5uyA07fS3OCRocvtkdwKhSkM9s6Wc+hfunkB34Tro/OohFJMY/VirwWH7OupZaeQNJ8TWE2mAfzD1B5QmkZF1F3U3Dyl6BSaBbbZ3ywOIS3sNG2X2Ob7Zc/bPKZKBywTn0+ytuy7fenSqlVXm4DsKzN0LDy4YCEHIxBEQpamqTr7uDVIEWK2QmV/+XTHATSVMGF4347CvS3u7M6rmu0sdDR5k6X7gHXznAx/IZyovPKDNi3oLDy7h1mIGXfrAEBNfVldcdQEaqGsWNEzMRmVS9Bw8rZlBdoQSZl66HWZ5RR+Rn92usA6qlueggz2uimyV11brO/TvkuWNF+p5t5zoWSE/oFVTbulx/VZRLQ1F9m7MYk3f6cs/3p5Tg1AJvk+OjQpsuzANDJpYRbTDAvBq3NHpAfL3h+wFf/saLnWog39ro1YgXJWvPwvYNrR9n9F232+6OaSvTIw0JyZ7pPH3Cx14ed2swRevGh5mPY3huHgDTAIQXKVRLb1gopHwNaMwOXy2vefh2JSi7MFx2YR+pBv0md+8Iam1JBmo7h4zTOrlKHm8rdrYVt/FnPJBxRfzDZhRIjxSSFjBJFDdPNZTfrA8SnqigbidVV9V7sWpqsPzf4lsJYDuu2alHUzZXOHl/ijP39Q940I7z6VDAWTFAr3cOXKFmjiP4r0w0iLzinyRtXe/3bNWjE6Bduk2+nwlypj9MNblRwjXzKmqafuzMmTAjIZUXbrUbJKJ417rAXuKZTWQufwVlUkiFcgzZzPNL7v2g0VkcVsU1Iay0SKDorE1dXVP8LwYaw2/rS+eJgwsimDP5nPRKmi4xO+whhLsAEVh4NOsejdDHpYeWB2ZlN2OumQNkN5Oo/5sjX3cw4Ip47umeH4efi/9tCB3116l16ltGuWcEP96r9eIT+APRLbrXgHTa7/FRNueZqslu0k6mDG8WkoR9FhY05YkIoxbSyY+kYWwMnEAM1MM8b5Me/+U0yA74gfrloMyWpCbbq99r0My0fqeg/dBTexH5byeGqsn9RG4d5oyU/FovN5i95q48eh8Ob1aEs/m6enEQXjWyorMP42eFr2vBKUgcsd4O1n+HjLF4GcX74rWHJ1ij/P5J2kBxmmQkZ8zYD6P4M0wT0HkYxHZJy6mQ9rEH8YR0C6BNnogpJlQ3Tn4bvl68qSc6hYLgZlWH67F7G88u9nolhLzraXloPHa4MkqXXG8Mp9HJ+c4JCLmIFS6dDnSVsYHqUYFEjnYGSApp//agUwOInZ7WmVIPwPB0uelSjIrJon+gAynkMo8oE/iPz2tblCG4uliFBKjlf1GeoOTrkqFkDyNSSjdn2tQxu9Zx/PWtE93hBHW1FmqRv96iwbo/kwr5BbAoNbwBK2Tyiqi8CI5Kfuz3AbV+k0DZapfHgovpQt4DP/frXxuXh43nuw9X7izj8rRUfE28P1TE68BeDSywHPzaTMXPkWZQwGPiUJClnzyOh/AqHS7ZlIjeerNTQ7gTr+aBK5lWziBVwRWp8iG2lZSl58i5YS2GxrzVg9X3tKGs/PE4e5Dzb7lGjBoZvpv97UA1maV var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>容斥原理</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4566 找相同字符]]></title>
    <url>%2F2019%2F10%2F30%2Fbzoj-4566-%E6%89%BE%E7%9B%B8%E5%90%8C%E5%AD%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[$SAM$ . 对一个串建 $SAM$ ,把第二个串放到 $SAM$ 上去匹配. 到达一个状态 $x$ 时, $x$ 和它的所有祖先的匹配次数都会 $+1$ ,最后从下到上去更新就可以了. 匹配成功时,对每个祖先贡献为 $cnt\cdot |Right|\cdot (maxlen-minlen)​$ . 但需要注意对自己的贡献,串长不一定能取到 $maxlen$ ,需要记录当前的串长. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=4e5+10,S=26;int idx=1,lst=1,ch[MAXN][S],fa[MAXN],len[MAXN],siz[MAXN];int cnt[MAXN],f[MAXN];void Extend(int c)&#123; int p=lst,np=++idx; lst=np; siz[np]=1; len[np]=len[p]+1; while(p &amp;&amp; ch[p][c]==0) ch[p][c]=np,p=fa[p]; if(p==0) fa[np]=1; else &#123; int q=ch[p][c]; if(len[q]==len[p]+1) fa[np]=q; else &#123; int nq=++idx; len[nq]=len[p]+1; fa[nq]=fa[q]; fa[q]=fa[np]=nq; memcpy(ch[nq],ch[q],sizeof ch[q]); while(p &amp;&amp; ch[p][c]==q) ch[p][c]=nq,p=fa[p]; &#125; &#125;&#125;int t[MAXN],A[MAXN];void topsort()&#123; for(int i=1;i&lt;=idx;++i) ++t[len[i]]; for(int i=1;i&lt;=idx;++i) t[i]+=t[i-1]; for(int i=1;i&lt;=idx;++i) A[t[len[i]]--]=i; for(int i=idx;i&gt;=1;--i) siz[fa[A[i]]]+=siz[A[i]];&#125;char buf[MAXN];int n;int main()&#123; scanf("%s",buf+1); n=strlen(buf+1); for(int i=1;i&lt;=n;++i) Extend(buf[i]-'a'); topsort(); scanf("%s",buf+1); n=strlen(buf+1); int u=1,tmp=0; ll ans=0; for(int i=1;i&lt;=n;++i) &#123; int c=buf[i]-'a'; if(ch[u][c]) ++tmp,u=ch[u][c]; else &#123; while(u &amp;&amp; !ch[u][c]) u=fa[u]; if(!u) u=1,tmp=0; else tmp=len[u]+1,u=ch[u][c]; &#125; ++cnt[u]; ans+=1LL*siz[u]*(tmp-len[fa[u]]); &#125; for(int i=idx;i&gt;=1;--i) &#123; int x=A[i]; f[fa[x]]+=f[x]+cnt[x]; ans+=1LL*siz[x]*f[x]*(len[x]-len[fa[x]]); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191030]]></title>
    <url>%2F2019%2F10%2F30%2Ftest20191030%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX1+RyErVQGrHk09uia9uGUL/8nJd/HxxcwP9OX3tMWmkNJO8c6u9Li7wsc91TZ5eXMEQ5TSkO8kCWMYME6q7v9vg/8EFH3wK3AMTlp6E2kbXpzPC9EL+i3ozkRDMg9x44nLGh4FehdXZYIbmVEFNZeHYsDq7n5VQ4AF8kRvy1E9zJFINR+eXIe2f5RZuHsfH49LMvvPy9nVd1Sjc2FSy2hhxOf0h+C2G+m0UGgmQZjZ1gzHDOOzkbNueyNBt9FTn02oeD4cyrb0f5TeifbJv1HZXkWq/hGMA9GsX/6Me7K2CieEmDMPiP6V4b/8YX+ddrnd8LZXgt0hxILqCI0T51EJyLjvvPJYQK0A639K6Ing/2w0BMIh6cpN4D9lMuq61ztZYt7SexiVpgl5zT8hd54WVjb+i+KjUrN5Z8+pVHGideWnIhecbHsDgeoM/2W+9eaFaUmOuwEKIOsandz8mffhKzKfL85VSTj6yb5kLMNTXnmGuot5yRsabyMud+IyKZq0hJpJm0mAEtm+7qqShU531e690FuqC4NX6F2hwwA5ld9eCvvUWfCYZ4o+gg+eWFgzH60b8pnY68DwZR1nrJ8+4bsjjNVVdrOM3Jrn3lVYo2iil0wTClAefz4f9SkAvH7kEv3uKZfdymjFkKPk/2/zkTmEk8KtvVa7RNCWScZWI6ICDLJ8o6W7u+qIjj12eMgEaqCdKV9Xk3xUmv7nNnBFxb9PDghUQjUjZIZ1DxXsU/cgTVURAVRYZhb4azKXkdxjVMtg5yzKRHwBkKZej+tQ3VzpkFPwfPlyRzPwLH9rPX+0UTpgPPTe8Yz/UjCUxRpksoVYabYiuLAb4W9lPjetstSFDmcvy0tslm5ayLyT2o//Fiea6j3XbE0GcEd0plqDNS/JOFtaL6PDd/DEStjAljA5vnRgVfJd+/G01brd1qG3V9/zl3NdkKxevjLU7cyuaVQ8w6n5V/Vkx+r3cdpMOtKs76/+Pj2atOwQm0PHR9wgRRtJN7nVHWKz4eiplHsr+P2HFPFcHUQMh6ghXTsqnGLOVnL3/8sc5WSLmIEJArnG4nVCvPcKSZlPI9Qw0FI5jEaYXNNmtSYYfxSdGJtfI+M9O/F5b1OU4YB6Y7ME7zLAOJ4d8570qBHDUmzl4vZfYwQSFFmKdwL96oWdciXhs27USH0nORW0GoPGqgULeMIF9g5edqwftzNaRpV7z24iAGkbVQc20WOPmBbtaBNS1eEg7DPabRzOnRlQHAp3iO/eZXLa0g1n/VbdCB6/ti6ZPzi/QCbFedUxIZ4RiPVagEI77vNL09Zffh1YgXOYY6bLXNLLyOV+2fE519iqaGZQp1wG2e70J131lVbbBqK6+2I/8Sn+f/q7j0NFPzrScGJturHIvbXL50LX0+c+ukL7ExWFpW2ZYIUfUD4zOy113LHTS30ycsqY= var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>线段树</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4032 最短不公共子串]]></title>
    <url>%2F2019%2F10%2F30%2Fbzoj-4032-%E6%9C%80%E7%9F%AD%E4%B8%8D%E5%85%AC%E5%85%B1%E5%AD%90%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[$SAM$ + 子序列自动机. 对于两个串,建出它们各自的后缀自动机和子序列自动机. 对于每种询问,就将两个对应的自动机取出来,跑 $bfs$ . 某个状态 $(a,b)$ ,接受了一个字符 $c$ 后,若 $A$ 的自动机上有出边,而 $B$ 没有,则当前状态的深度 $+1$ 就是答案. 若两者都有出边,就将转移到的新的状态入队. 记忆化一下,时间复杂度 $O(n^2|S|)$ ,其中 $S$ 表示字符集大小. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=4e3+10,S=26;struct AutoMaton&#123; int ch[MAXN][S],fa[MAXN],len[MAXN],idx,lst; int st; AutoMaton()&#123;idx=lst=1;&#125; void init_seq(char *buf,int n) &#123; st=0; int cur[S]=&#123;0&#125;; for(int i=n;i&gt;=1;--i) &#123; memcpy(ch[i],cur,sizeof ch[i]); cur[buf[i]-'a']=i; &#125; memcpy(ch[0],cur,sizeof ch[0]); &#125; void Extend(int c) &#123; int p=lst,np=++idx; lst=np; len[np]=len[p]+1; while(p &amp;&amp; ch[p][c]==0) ch[p][c]=np,p=fa[p]; if(p==0) fa[np]=1; else &#123; int q=ch[p][c]; if(len[q]==len[p]+1) fa[np]=q; else &#123; int nq=++idx; len[nq]=len[p]+1; fa[nq]=fa[q]; fa[q]=fa[np]=nq; memcpy(ch[nq],ch[q],sizeof ch[nq]); while(p &amp;&amp; ch[p][c]==q) ch[p][c]=nq,p=fa[p]; &#125; &#125; &#125; void init_SAM(char *buf,int n) &#123; st=1; for(int i=1;i&lt;=n;++i) &#123; int c=buf[i]-'a'; Extend(c); &#125; &#125;&#125;A[2],B[2];struct node&#123; int a,b,dep; node(int a=0,int b=0,int dep=0):a(a),b(b),dep(dep) &#123;&#125;&#125;;queue&lt;node&gt; q;bool vis[MAXN][MAXN];int solve(const AutoMaton &amp;A,const AutoMaton &amp;B)&#123; while(!q.empty()) q.pop(); memset(vis,0,sizeof vis); q.push(node(A.st,B.st,0)); vis[A.st][B.st]=1; while(!q.empty()) &#123; node tmp=q.front(); q.pop(); int a=tmp.a,b=tmp.b; for(int i=0;i&lt;S;++i) &#123; if(A.ch[a][i] &amp;&amp; !B.ch[b][i]) return tmp.dep+1; else if(A.ch[a][i] &amp;&amp; B.ch[b][i] &amp;&amp; !vis[A.ch[a][i]][B.ch[b][i]]) &#123; q.push(node(A.ch[a][i],B.ch[b][i],tmp.dep+1)); vis[A.ch[a][i]][B.ch[b][i]]=1; &#125; &#125; &#125; return -1;&#125;char buf[MAXN];int main()&#123; scanf("%s",buf+1); int n=strlen(buf+1); A[0].init_SAM(buf,n); A[1].init_seq(buf,n); scanf("%s",buf+1); n=strlen(buf+1); B[0].init_SAM(buf,n); B[1].init_seq(buf,n); for(int i=0;i&lt;2;++i) for(int j=0;j&lt;2;++j) printf("%d\n",solve(A[i],B[j])); return 0;&#125;]]></content>
      <tags>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 2746 旅行问题]]></title>
    <url>%2F2019%2F10%2F30%2Fbzoj-2746-%E6%97%85%E8%A1%8C%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[$AC$ 自动机. 插入串的时候同时记录一下每个前缀在自动机上的编号以及 $Hash$ 值. 询问时,要求的公共后缀就是那两个前缀在 $fail$ 树上的 $LCA$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=1e6+10,S=26,K=22;int n,ch[MAXN][S],fail[MAXN],Hash[MAXN],idx=0;int fa[MAXN][K],dep[MAXN];vector&lt;int&gt; pos[MAXN];char buf[MAXN];queue&lt;int&gt; q;void getfail()&#123; for(int i=0;i&lt;S;++i) if(ch[0][i]) &#123; q.push(ch[0][i]); dep[ch[0][i]]=1; &#125; while(!q.empty()) &#123; int u=q.front(); q.pop(); for(int i=0;i&lt;S;++i) if(ch[u][i]) &#123; q.push(ch[u][i]); int x=ch[u][i],y=ch[fail[u]][i]; fail[x]=fa[x][0]=y; dep[x]=dep[y]+1; for(int j=1;(1&lt;&lt;j)&lt;=dep[x];++j) fa[x][j]=fa[fa[x][j-1]][j-1]; &#125; else ch[u][i]=ch[fail[u]][i]; &#125;&#125;int LCA(int x,int y)&#123; if(dep[x]&lt;dep[y]) swap(x,y); for(int i=K-1;i&gt;=0;--i) if((1&lt;&lt;i)&lt;=dep[x]-dep[y]) x=fa[x][i]; if(x==y) return x; for(int i=K-1;i&gt;=0;--i) if((1&lt;&lt;i)&lt;=dep[x] &amp;&amp; fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i]; return fa[x][0]; &#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) &#123; int x=scanf("%s",buf); pos[i].push_back(0); int u=0,m=strlen(buf); for(int j=0;j&lt;m;++j) &#123; int c=buf[j]-'a'; if(!ch[u][c]) ch[u][c]=++idx; Hash[ch[u][c]]=add(mul(Hash[u],S),c); u=ch[u][c]; pos[i].push_back(u); &#125; &#125; getfail(); int m=read(); for(int i=1;i&lt;=m;++i) &#123; int x=read(),px=read(),y=read(),py=read(); px=pos[x][px],py=pos[y][py]; int pz=LCA(px,py); printf("%d\n",Hash[pz]); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>AC自动机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3991 寻宝游戏]]></title>
    <url>%2F2019%2F10%2F29%2Fbzoj-3991-%E5%AF%BB%E5%AE%9D%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[$set$ . 考虑如果已经给出了所有有宝物的点,如何计算总距离. 可以将这些点按照 $dfs$ 序排序,按照这个顺序不断去走,总距离为相邻两点距离的总和(首尾也算) . 现在需要支持加点和删点,用一个 $set$ 维护所有有宝物的点,每次更新点时也更新答案. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10,K=17;int n,m,ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1],val[MAXN&lt;&lt;1];void addedge(int u,int v,int w)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; val[ecnt]=w; head[u]=ecnt;&#125;ll dist[MAXN];int dep[MAXN],dfn[MAXN],rnk[MAXN],fa[MAXN][K],idx=0;void dfs(int u,int f)&#123; fa[u][0]=f; for(int i=1;(1&lt;&lt;i)&lt;=dep[u];++i) fa[u][i]=fa[fa[u][i-1]][i-1]; dfn[u]=++idx; rnk[idx]=u; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==f) continue; dep[v]=dep[u]+1; dist[v]=dist[u]+val[i]; dfs(v,u); &#125;&#125;int LCA(int x,int y)&#123; if(dep[x]&lt;dep[y]) swap(x,y); for(int i=K-1;i&gt;=0;--i) if((1&lt;&lt;i)&lt;=dep[x]-dep[y]) x=fa[x][i]; if(x==y) return x; for(int i=K-1;i&gt;=0;--i) if((1&lt;&lt;i)&lt;=dep[x] &amp;&amp; fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i]; return fa[x][0];&#125;ll dis(int x,int y)&#123; int z=LCA(x,y); return dist[x]+dist[y]-2*dist[z];&#125;bool vis[MAXN];set&lt;int&gt; s;typedef set&lt;int&gt;::iterator sit;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(),w=read(); addedge(u,v,w); addedge(v,u,w); &#125; dfs(1,0); ll ans=0; for(int i=1;i&lt;=m;++i) &#123; int x=dfn[read()]; if(!vis[x]) // insert &#123; if(!s.empty()) &#123; sit r=s.lower_bound(x); if(r==s.end()) r=s.begin(); sit l; if(r==s.begin()) &#123; l=s.end(); --l; &#125; else &#123; l=--r; ++r; &#125; ans-=dis(rnk[*l],rnk[*r]); ans+=dis(rnk[*l],rnk[x]); ans+=dis(rnk[x],rnk[*r]); &#125; s.insert(x); &#125; else //delete &#123; s.erase(x); if(!s.empty()) &#123; sit r=s.lower_bound(x); if(r==s.end()) r=s.begin(); sit l; if(r==s.begin()) &#123; l=s.end(); --l; &#125; else &#123; l=--r; ++r; &#125; ans+=dis(rnk[*l],rnk[*r]); ans-=dis(rnk[*l],rnk[x]); ans-=dis(rnk[x],rnk[*r]); &#125; &#125; vis[x]^=1; printf("%lld\n",ans); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>STL</tag>
        <tag>dfs序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3925 地震后的幻想乡]]></title>
    <url>%2F2019%2F10%2F28%2Fbzoj-3925-%E5%9C%B0%E9%9C%87%E5%90%8E%E7%9A%84%E5%B9%BB%E6%83%B3%E4%B9%A1%2F</url>
    <content type="text"><![CDATA[$dp$ 计数. 只需要对于每个 $k$ ,算出从小到大加入第 $k$ 条边后图仍未连通的概率 $p_k$ ,则答案为 $\frac 1 {m+1}\sum_{i=1}^m p_k$ . 设 $cnt(S)$ 表示两端都在点集 $S$ 中的边的数目. 设 $f(S,i)$ 表示点集为 $i$ ,在点集中选了 $i$ 条边,使得这个点集不连通的方案数, $g(S,i)$ 表示连通的方案数. 显然有 $f(S,i)+g(S,i)={cnt(S)\choose i}$ . 计算 $f(S,i)$ 的做法相当经典,枚举 $S$ 中包含某个定点 $p$ 所在的连通块的点集 $T$ 进行转移. 为了方便,可以规定 $p$ 表示 $S$ 中编号最小的点.$$f(S,i+j)=\sum_{T\subset S,p\in T} g(T,i)\cdot {cnt(S-T)\choose j}$$概率就是合法的方案数除以总方案数. 通过枚举子集即可做到 $O(3^n\cdot m)$ 的复杂度. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;bool in(int S,int x)&#123; return (S&gt;&gt;x)&amp;1;&#125;#define lowbit(x) x&amp;(-x)const int MAXN=10,MAXM=45+1;int n,m,cnt[1&lt;&lt;MAXN];double C[MAXM][MAXM],f[1&lt;&lt;MAXN][MAXM],g[1&lt;&lt;MAXN][MAXM];int main()&#123; n=read(),m=read(); for(int i=0;i&lt;=m;++i) C[i][0]=1; for(int i=1;i&lt;=m;++i) for(int j=1;j&lt;=i;++j) C[i][j]=C[i-1][j-1]+C[i-1][j]; for(int i=0;i&lt;m;++i) &#123; int a=read()-1,b=read()-1; for(int S=0;S&lt;(1&lt;&lt;n);++S) if(in(S,a) &amp;&amp; in(S,b)) ++cnt[S]; &#125; for(int S=1;S&lt;(1&lt;&lt;n);++S) &#123; int p=lowbit(S); for(int T=(S-1)&amp;S;T;T=(T-1)&amp;S) if(T&amp;p) for(int i=0;i&lt;=m;++i) &#123; g[T][i]=C[cnt[T]][i]-f[T][i]; if(g[T][i]) for(int j=0;i+j&lt;=m;++j) f[S][i+j]+=g[T][i]*C[cnt[S-T]][j]; &#125; &#125; double ans=0; for(int i=0;i&lt;=m;++i) ans+=f[(1&lt;&lt;n)-1][i]/C[cnt[(1&lt;&lt;n)-1]][i]; ans/=m+1; printf("%.6f\n",ans); return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>概率/期望</tag>
        <tag>状压dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3993 星际战争]]></title>
    <url>%2F2019%2F10%2F28%2Fbzoj-3993-%E6%98%9F%E9%99%85%E6%88%98%E4%BA%89%2F</url>
    <content type="text"><![CDATA[二分答案 + 最大流. 二分答案 $t$ ,则每个武器最多输出 $t​$ 秒,需要对这些输出进行恰当分配,可以利用网络流. 建出源点 $S$ ,汇点 $T$ , $S$ 向每个武器 $i$ 连边,流量为 $t\cdot B_i$ . 每个武器向它可以攻击的机器人连边,流量为 $\infty$ . 每个机器人 $i$ 向汇点 $T$ 连边,流量为 $A_i$ . 若最大流恰好等于所有机器人的血量之和,则说明 $t$ 秒内能将它们全部打死,否则不能. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const double eps=1e-8,inf=1e9;const int MAXN=1e3+10;int n,m,ecnt=1,head[MAXN],a[MAXN],b[MAXN],tot,G[MAXN][MAXN];double sum;struct Edge&#123; int to,nx; double flow; Edge(int to=0,int nx=0,double flow=0):to(to),nx(nx),flow(flow)&#123;&#125;&#125;E[MAXN&lt;&lt;4];void addedge(int u,int v,double val)&#123; ++ecnt; E[ecnt]=Edge(v,head[u],val); head[u]=ecnt;&#125;void ins(int u,int v,double val)&#123; addedge(u,v,val); addedge(v,u,0);&#125;int dep[MAXN],cur[MAXN];queue&lt;int&gt; q;bool bfs(int S,int T)&#123; for(int i=1;i&lt;=tot;++i) &#123; cur[i]=head[i]; dep[i]=-1; &#125; dep[S]=0; q.push(S); while(!q.empty()) &#123; int u=q.front(); q.pop(); for(int i=head[u];i;i=E[i].nx) &#123; int v=E[i].to; if(dep[v]==-1 &amp;&amp; E[i].flow&gt;0) &#123; dep[v]=dep[u]+1; q.push(v); &#125; &#125; &#125; return dep[T]!=-1;&#125;double dfs(int u,int T,double limit)&#123; if(u==T || limit&lt;=eps) return limit; double f,flow=0; for(int &amp;i=cur[u];i;i=E[i].nx) if(E[i].flow&gt;0) &#123; int v=E[i].to; if(dep[v]==dep[u]+1 &amp;&amp; (f=dfs(v,T,min(limit,E[i].flow)))) &#123; E[i].flow-=f; E[i^1].flow+=f; flow+=f; limit-=f; &#125; if(!limit) return flow; &#125; return flow;&#125;bool check(double t)&#123; int S=n+m+1,T=n+m+2; ecnt=1; for(int i=1;i&lt;=tot;++i) head[i]=0; for(int i=1;i&lt;=m;++i) &#123; ins(S,i,t*(double)(b[i])); for(int j=1;j&lt;=n;++j) if(G[i][j]) ins(i,j+m,inf); &#125; for(int i=1;i&lt;=n;++i) ins(i+m,T,(double)a[i]); double maxflow=0; while(bfs(S,T)) maxflow+=dfs(S,T,inf); return fabs(sum-maxflow)&lt;=eps;&#125;int main()&#123; n=read(),m=read(); double L=0,R=0,res; for(int i=1;i&lt;=n;++i) R+=(a[i]=read()); sum=R; for(int i=1;i&lt;=m;++i) b[i]=read(); for(int i=1;i&lt;=m;++i) for(int j=1;j&lt;=n;++j) G[i][j]=read(); tot=n+m+2; for(int i=1;i&lt;=50;++i) &#123; double mid=(L+R)/2.0; if(check(mid)) R=mid,res=mid; else L=mid; &#125; printf("%f\n",res); return 0;&#125;]]></content>
      <tags>
        <tag>二分</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3992 序列统计]]></title>
    <url>%2F2019%2F10%2F28%2Fbzoj-3992-%E5%BA%8F%E5%88%97%E7%BB%9F%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[原根 + $NTT$ . $M$ 是奇质数,可以先求出它的一个原根 $g_M$ ,将 $S$ 中的每个元素以及 $x$ 都转化为以 $g_M$ 为底的对数. 找 $M$ 的原根时,先预处理出 $M-1$ 的每个质因数 $p_i$ . 从 $2​$ 开始枚举每个数,检验它是否为原根. 只需要对于每个 $i$ ,依次算出 $g^{(M-1)/p_i}$ ,若这些数中有 $1$ ,则 $g​$ 不是原根,否则是原根. 于是 $\prod a_i\bmod M=x$ 就变成了 $\sum a_i’\bmod (M-1)=x’$ . 利用生成函数计算,就是要求多项式 $A(x)^n \bmod x^{M-1}$ 第 $x’$ 项的系数. 系数模数是 $NTT$ 模数,由于 $m$ 比较小,用不着多项式快速幂,可以直接写倍增快速幂. 时间复杂度 $O(m\log n\log m)$ . 注意 $x$ 不可以为 $0$ ,要将集合中为 $0$ 的元素忽略掉. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=3.3e4+10;const ll P=1004535809,G=3;ll add(ll a,ll b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;ll mul(ll a,ll b)&#123; ll res=a*b-(ll)((long double)a/P*b+1e-8)*P; return res&lt;0?res+P:res;&#125;ll fpow(ll a,ll b)&#123; ll res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;ll omega[MAXN],inv[MAXN];int rev[MAXN],curn=0;void init(int n)&#123; if(curn==n) return; for(int i=0;i&lt;n;++i) rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)*(n&gt;&gt;1)); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; omega[l]=fpow(G,(P-1)/l); inv[l]=fpow(omega[l],P-2); &#125; curn=n;&#125;void DFT(ll *a,int n,bool invflag)&#123; init(n); for(int i=0;i&lt;n;++i) if(i&lt;rev[i]) swap(a[i],a[rev[i]]); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; int m=(l&gt;&gt;1); int gi=omega[l]; if(invflag) gi=inv[l]; for(ll *p=a;p!=a+n;p+=l) &#123; int g=1; for(int i=0;i&lt;m;++i) &#123; int t=mul(g,p[i+m]); p[i+m]=add(p[i],P-t); p[i]=add(p[i],t); g=mul(g,gi); &#125; &#125; &#125; if(invflag) &#123; int invn=fpow(n,P-2); for(int i=0;i&lt;n;++i) a[i]=mul(a[i],invn); &#125;&#125;ll NTT_A[MAXN],NTT_B[MAXN];int n,m,x,s,gm,Log[MAXN];void NTT(ll *A,ll *B,ll *C,int lenA,int lenB)&#123; int lenC=lenA+lenB-1,n=1; while(n&lt;lenC) n&lt;&lt;=1; for(int i=0;i&lt;lenA;++i) NTT_A[i]=A[i]; for(int i=lenA;i&lt;n;++i) NTT_A[i]=0; for(int i=0;i&lt;lenB;++i) NTT_B[i]=B[i]; for(int i=lenB;i&lt;n;++i) NTT_B[i]=0; DFT(NTT_A,n,false); DFT(NTT_B,n,false); for(int i=0;i&lt;n;++i) C[i]=mul(NTT_A[i],NTT_B[i]); DFT(C,n,true); for(int i=m;i&lt;2*m;++i) &#123; C[i-m]=add(C[i-m],C[i]); C[i]=0; &#125;&#125;int fpow_m(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=res*a%m; a=a*a%m; b&gt;&gt;=1; &#125; return res;&#125;int pr[MAXN],pcnt=0;int Find_gm()&#123; int t=m-1; for(int i=2;i*i&lt;=t;++i) if(t%i==0) &#123; pr[++pcnt]=i; while(t%i==0) t/=i; &#125; if(t!=1) pr[++pcnt]=t; for(int i=2;i&lt;m;++i) &#123; bool flag=true; for(int j=1;j&lt;=pcnt &amp;&amp; flag;++j) if(fpow_m(i,(m-1)/pr[j])==1) flag=false; if(flag) return i; &#125; return -1;&#125;ll a[MAXN],b[MAXN];void fpow_poly()&#123; while(n) &#123; if(n&amp;1) NTT(b,a,b,m,m); NTT(a,a,a,m,m); n&gt;&gt;=1; &#125;&#125;int main()&#123; n=read(),m=read(),x=read(),s=read(); gm=Find_gm(); int pw=1; Log[1]=0; for(int i=1;i&lt;m-1;++i) &#123; pw=pw*gm%m; Log[pw]=i; &#125; --m; x=Log[x]; for(int i=1;i&lt;=s;++i) &#123; int k=read(); if(k) ++a[Log[k]]; &#125; b[0]=1; fpow_poly(); printf("%lld\n",b[x]); return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AGC031B Reversi]]></title>
    <url>%2F2019%2F10%2F28%2FAGC031B-Reversi%2F</url>
    <content type="text"><![CDATA[$dp$ 计数. 设 $f(i)$ 表示前 $i$ 个位置的方案数. 转移时,若能找到上一个与 $i$ 颜色相同的位置 $j$ ,并且 $i,j$ 中间还有数,那么将这段染色是有贡献的. 注意此时应当加上 $f(j)$ 而不是 $f(j-1)$ ,因为 $i,j$ 同色,将 $j\sim i$ 这段染色不会影响以 $j$ 为右端点向前面染色.$$f(i)=f(i-1)+f(j)\cdot [i-j&gt;1]$$ 123456789101112131415161718192021222324252627282930313233343536373839404142//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=2e5+10;int n,f[MAXN],lst[MAXN];int main()&#123; n=read(); f[0]=1; for(int i=1;i&lt;=n;++i) &#123; f[i]=f[i-1]; int c=read(); if(lst[c] &amp;&amp; i-lst[c]&gt;1) f[i]=add(f[i],f[lst[c]]); lst[c]=i; &#125; cout&lt;&lt;f[n]&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>atcoder</tag>
        <tag>dp计数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Atcoder Beginner Contest 144]]></title>
    <url>%2F2019%2F10%2F28%2FAtcoder-Beginner-Contest-144%2F</url>
    <content type="text"><![CDATA[被 $D$ 卡了一会. D Water Bottle分两种情况做. 第一种情况,初始的水没有达到容器体积的一半. 第二种情况,初始的水达到了容器体积的一半. 利用反三角函数求出角度. 1234567891011121314151617181920212223242526272829303132//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const double pi=acos(-1.0);int main()&#123; double a=(double)(read()),b=(double)(read()),x=(double)(read()); if(x/a/a/b&lt;0.5) &#123; double s=x/a; printf("%.10lf\n",atan(b*b/2/s)/pi*180.0); &#125; else &#123; double s=a*b-x/a; printf("%.10lf\n",atan(2*s/a/a)/pi*180.0); &#125; return 0;&#125; E Gluttony可以二分一个答案 $mx$ . 检验时,贪心去匹配,让 $a$ 最小的人去吃 $f$ 最大的食物. 限定 $a\cdot f\le mx$ ,可以算出每个人的权值至少要减少几次,判断这个总和是否超过 $k$ 即可. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;ll n,k,a[MAXN],f[MAXN];bool check(ll mx)&#123; ll t=k; for(int i=1;i&lt;=n;++i) &#123; int j=n+1-i; ll x=mx/f[j]; t-=max(0LL,a[i]-x); if(t&lt;0) return false; &#125; return true;&#125;int main()&#123; n=read(),k=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); for(int i=1;i&lt;=n;++i) f[i]=read(); ll L=0,R=(ll)(1e12),res; sort(a+1,a+1+n); sort(f+1,f+1+n); while(L&lt;=R) &#123; ll mid=(L+R)&gt;&gt;1; if(check(mid)) res=mid,R=mid-1; else L=mid+1; &#125; cout&lt;&lt;res&lt;&lt;endl; return 0;&#125; F Fork in the Road设 $f(i)$ 表示点 $i$ 到 $n$ 的期望步数,设 $S_i={j|(i,j)\in E }$ ,则转移有$$f(n)=0,f(i)=\frac{1}{|S_i|} \sum_{j\in S_i} f(j)$$暴力做法是枚举每条边,计算出删掉它之后的答案,时间复杂度是 $O(m^2)$ 的. 其实对于所有以 $i$ 为起点的边 $(i,j)$ ,只需要贪心删去 $f(j)$ 最大的那条边去更新答案即可. 这样只用删 $O(n)$ 次边,时间复杂度 $O(nm)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const double inf=1e18;const int MAXN=601;vector&lt;int&gt; G[MAXN];int n,m;double f[MAXN];double calc(int x)&#123; f[n]=0; for(int i=n-1;i&gt;=1;--i) &#123; f[i]=0; int siz=G[i].size(); double mx=0; for(auto j:G[i]) &#123; f[i]+=f[j]; mx=max(mx,f[j]); &#125; if(i==x &amp;&amp; siz&gt;1) --siz,f[i]-=mx; f[i]/=(double)siz; f[i]+=1; &#125; return f[1];&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=m;++i) &#123; int u=read(),v=read(); G[u].push_back(v); &#125; double ans=calc(n); for(int i=1;i&lt;n;++i) ans=min(ans,calc(i)); printf("%.10lf\n",ans); return 0;&#125;]]></content>
      <tags>
        <tag>atcoder</tag>
        <tag>贪心</tag>
        <tag>二分</tag>
        <tag>概率/期望</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Project Euler 409]]></title>
    <url>%2F2019%2F10%2F27%2FProject-Euler-409%2F</url>
    <content type="text"><![CDATA[$dp$ 计数. 记 $p(i)=\prod_{j=2^n-i}^{2^n-1} j$ ,即不考虑胜负情况的所有合法方案. 记 $f(i)=p(i)-W(i)$ ,即先手必败的状态数,考虑如何求出 $f(i)$ . 让前 $i-1​$ 个数随便选,共有 $p(i-1)​$ 种情况,最后一个数通过恰当的选法使得所有数的异或和为 $0​$ . 考虑将不合法的情况减掉,由于不能选 $0​$ ,所以前 $i-1​$ 个数异或和为 $0​$ 时,就不合法. 由于不能选相同的元素,所以当前 $i-1​$ 个数中,有 $i-2​$ 个数异或和为 $0​$ 时,剩下一个数怎么选都不合法. 剩下的这个数有 $i-1$ 个的可能的位置,由于前面的数没有重复,所以每个位置有 $2^n-i+1$ 个可能的值. 将这两种情况减掉,得到$$f(i)=p(i-1)-f(i-1)-(i-1)\cdot (2^n-i+1) \cdot f(i-2)$$边界有 $f(1)=f(2)=0$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=1e7+10;int n=10000000,m,p[MAXN],f[MAXN];int main()&#123; m=add(fpow(2,n),P-1); p[1]=m,p[2]=mul(m,add(m,P-1)); f[1]=f[2]=0; for(int i=3;i&lt;=n;++i) &#123; f[i]=add(p[i-1],P-f[i-1]); inc(f[i],P-mul(mul(i-1,add(m+2,P-i)),f[i-2])); p[i]=mul(p[i-1],add(m+1,P-i)); &#125; cout&lt;&lt;add(p[n],P-f[n])&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>Project Euler</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Project Euler 638]]></title>
    <url>%2F2019%2F10%2F27%2FProject-Euler-638%2F</url>
    <content type="text"><![CDATA[算两次的思想. 一条路径的权值定义为 $k^s​$ ,其中 $s​$ 表示路径下方的面积. 设 $f(i,j)$ 表示从 $(0,0)$ 走到 $(i,j)$ 的所有路径的权值和,边界有 $f(i,0)=f(0,j)=1$ . 若上一步是从下方走过来的,面积不会变,若是从左边走过来的,面积就会加上 $i$ . 即$$f(i,j)=f(i-1,j)+f(i,j-1)\cdot k^i$$而从另一个方向上来考虑,这个面积 $s$ 也可以看做是路径右边的面积. 那么同理可以得到$$f(i,j)=f(i-1,j)\cdot k^j+f(i,j-1)$$比较两个方程,可以得出,当 $k\neq 1$ 时,$$f(i-1,j)=\frac{k^i-1}{k^j-1}\cdot f(i,j-1) \\f(i,j)=\frac{k^{i+1}-1}{k^j-1}\cdot f(i+1,j-1)$$用这个式子递归下去算,直到 $j=0$ . 当 $k=1$ 时,求的就是路径条数,即 ${i+j\choose j}$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int calc(int a,int b,int k)&#123; int res=1; if(k==1) &#123; for(int i=a+1;i&lt;=a+b;++i) res=mul(res,i); for(int i=1;i&lt;=b;++i) res=mul(res,fpow(i,P-2)); &#125; else &#123; for(int i=a+1;i&lt;=a+b;++i) res=mul(res,add(fpow(k,i),P-1)); for(int j=1;j&lt;=b;++j) res=mul(res,fpow(add(fpow(k,j),P-1),P-2)); &#125; return res;&#125;int main()&#123; int ans=0,pw=1; for(int k=1;k&lt;=7;++k) &#123; pw*=10; inc(ans,calc(pw+k,pw+k,k)); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>Project Euler</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191026]]></title>
    <url>%2F2019%2F10%2F26%2Ftest20191026%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX19XDCPhLzi+ngFsoitZkc6Btl60fyAbb+cXyu1VZPGxP7idRP2PJ8ohyxYkkPUbbm6XFQwc7IK2Csw3o+7zc3O0OzxEA0aEur1LJrWxfN3XM1i4pIF6knLXT3wkPivIVHmH+opsOT4Lq0ZaG/W+P6viS5iscXVPzPABBtkzewDLWaiY1QOp0S5+yXfFvhA0C0l6qu8Mph2n18ElqVpe5x+FiB4WBJz4406XAKmUsVRQhPzvJlrnmyc6qCuuxQTF7Oz0yUZmokUE4z6g3Pd7qLf4+hnBRb8G0L470QB1ZSqBYLotn1QWOuaE/o0cK8qbXZBpiKPEZ8gASdPu6qDfdjyj1uMiUaWXl7O25r3hFgpO5LJQBz5+0l5hyTu1DWcfoDZyfA3rUeABiDMICUso5AR3B6Y92jjV8HpJJnb2mldcMr01yzU7Hora26AsJVky5nP+0VweqvaDZflAl21MHJfxfnmJqUycSbGEgXkMnBO+QWMSrn9ZxKPnAP9OU5mXF86rEZPDP0N5zNr9L3g5vBpDjMVPK9ZStTo4n3gUFmWnDHuFGbSMPx0T8OiBHlljBpvfwl535p1cWSSQHn6HJAzy3moo67RT979xXLxNwV9bm9ZnW0d3r5sVBbXfe40roDcuEDPIxwB3HWMt/k21r6t3dJco+6k2cnQYP2wWf3Erc/Nwbu+G/LSIuLw5w/u2jqQcWMWk0bqUv9DWFwn8XZ3R81dqveN8QbhN25jvWbSCN+dwc992et4tpQB6Kd8ArKFz7DEtA8flsIDROV/RUx2mbbTlqlbaFcBxT21NrVrO9fbibjsknAfbS5ijuDu3G6cOwkHxOziJsdjQd9yfqmLRyI7GVk2sTpOFcxgfKI3cByPZI1ahaJfKvvz0IEQJKjDMImGFbdNMRmDkYzQ7l8/++tq5dI54ocE7ESawjVHq7GFa0uJjP0vP7znztUFqNFN63OR94fAA2pEjVqGzIDvWEjkgPQ4mUJ21GDH1PxciMWlaU+gQ+zOKrlBpdJiPIzseNAq3LbI15zDkx12RsBPO9eS6TUPa5v7SFxpzfw9/09Eq2PlakFvYxxYJmFFGZZXCm93at6ANvsu7VJAZrpatbwDuN5RSVWIX2Us1koNu+sRc9AZJlvDOk2S2ZjqBn63w3Q0WWYxNgGSVzH+U5a8HkKuFIhnZvaTe9b1f0WQaAz05dEF0mYHtMgAVuqkaqvS4VMVTBeRzPtiXHlNxqfRL+LeS9gRjPtAdu9g3Blt0E+eSsu3Grij00wD940XXVzd3XB/0j8RIpSMHRGWHJyW4hzUQOd4Kih+A8XPwkAoVai9HjbgMtxDinnv61PbHqbkTLU8/ZEHvuzHdY1m4syBiPxW28VNEjHYfHqfCG92kLuPrZtgiGXGdIJwNfHv6j+SKNaCgM5R6bQ== var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>二分</tag>
        <tag>线段树</tag>
        <tag>树链剖分</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1251]]></title>
    <url>%2F2019%2F10%2F25%2FCF1251%2F</url>
    <content type="text"><![CDATA[$Div.2$ A Broken Keyboard若某段连续出现这个字符 $c$ 的次数为奇数,则字符 $c$ 一定没有坏掉. 时间复杂度 $O(n)$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=512;char buf[MAXN];int n,t,ans[26];void solve()&#123; scanf("%s",buf); n=strlen(buf); memset(ans,0,sizeof ans); for(int l=0,r;l&lt;n;l=r+1) &#123; r=l; while(r+1&lt;n &amp;&amp; buf[r+1]==buf[r]) ++r; if((r-l+1)&amp;1) ans[buf[l]-'a']=1; &#125; for(int i=0;i&lt;26;++i) if(ans[i]) putchar('a'+i); puts("");&#125;int main()&#123; int T=read(); while(T--) solve(); return 0;&#125; B Binary Palindromes由于对交换的次数不作限制,那么任意一个 $0,1$ 个数都不变的方案,都可以得到. 于是答案只与 $0,1$ 的个数,以及每个串的长度有关. 统计出 $0,1​$ 的个数后,对于每个长度确定的字符串,依次构造. 这里可以贪心来放,若串长为偶,就任意选出 $\frac {len} {2}$ 个对子放入. 若串长为奇,此时若 $0,1$ 的个数有一个为奇,就让它去作为中心的数,否则就任意选一个填在中心. 剩下的部分仍然任意选对子放入,时间复杂度 $O(n)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=51;int n,len[MAXN],cnt[2];char buf[MAXN];int solve()&#123; n=read(); cnt[0]=cnt[1]=0; for(int i=1;i&lt;=n;++i) &#123; scanf("%s",buf); len[i]=strlen(buf); for(int j=0;j&lt;len[i];++j) ++cnt[buf[j]-'0']; &#125; for(int i=1;i&lt;=n;++i) &#123; if(len[i]&amp;1) &#123; if(cnt[0]+cnt[1]==0) return i-1; else if(cnt[0]==0) --cnt[1]; else if(cnt[1]==0) --cnt[0]; else if(cnt[0]&amp;1) --cnt[0]; else --cnt[1]; &#125; len[i]&gt;&gt;=1; if((cnt[0]&gt;&gt;1)&gt;=len[i]) cnt[0]-=len[i]&lt;&lt;1; else &#123; len[i]-=cnt[0]&gt;&gt;1; cnt[0]&amp;=1; if((cnt[1]&gt;&gt;1)&gt;=len[i]) cnt[1]-=len[i]&lt;&lt;1; else return i-1; &#125; &#125; return n;&#125;int main()&#123; int T=read(); while(T--) printf("%d\n",solve()); return 0;&#125; C Minimize The Integer从前往后考虑每一位,根据数的比较方式,只需要贪心地让当前这一位尽可能的小. 注意到一个奇数往前换,如果它的前面还有奇数,则它一定会被挡住,不能来到当前的这位,偶数同理. 于是当前的这位就只能取剩下的第一个奇数或者第一个偶数. 这就是一个归并排序的过程,时间复杂度 $O(n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=3e5+10;char buf[MAXN];int n,pos[2][MAXN],t[2];void solve()&#123; scanf("%s",buf); n=strlen(buf); for(int i=n-1;i&gt;=0;--i) &#123; int x=buf[i]-'0'; pos[x&amp;1][++t[x&amp;1]]=x; &#125; while(t[0]+t[1]) &#123; if(!t[0]) putchar(pos[1][t[1]--]+'0'); else if(!t[1]) putchar(pos[0][t[0]--]+'0'); else if(pos[0][t[0]]&lt;pos[1][t[1]]) putchar(pos[0][t[0]--]+'0'); else putchar(pos[1][t[1]--]+'0'); &#125; puts("");&#125;int main()&#123; int T=read(); while(T--) solve(); return 0;&#125; D Salary Changing二分答案 $k$ ,则需要算出至少有 $\frac{n+1}{2}$ 个人的薪水 $\ge k$ 时,最小的总薪水是否 $\le s$ . 每个人的薪水区间 $[l,r]$ 要么满足 $l&gt;k$ ,要么满足 $r&lt;k$ ,要么满足 $l\le k\le r$ . 对于前两种区间,显然都选它们的左端点作为薪水. 若薪水 $\ge k$ 的人数还不够,则还要将一部分 $l\le k\le r$ 的区间选取的薪水从 $l$ 调整为 $k$ . 实现时,可以先将所有区间按照 $l,r$ 为两个关键字排序,从后往前扫一遍即可验证. 时间复杂度 $O(n\log n+n\log \max r)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;const int inf=1e9;int n,m;ll s;struct Interval&#123; int l,r; bool operator &lt; (const Interval &amp;rhs) const &#123; return l==rhs.l?r&lt;rhs.r:l&lt;rhs.l; &#125;&#125;p[MAXN];bool check(int k)&#123; ll tot=0; int cnt=0; for(int i=n;i&gt;=1;--i) &#123; if(cnt==m) &#123; tot+=p[i].l; continue; &#125; if(p[i].l&gt;k) tot+=p[i].l,++cnt; else if(p[i].r&gt;=k) tot+=k,++cnt; else tot+=p[i].l; &#125; return cnt==m &amp;&amp; tot&lt;=s;&#125;void solve()&#123; n=read(),s=read(); m=(n+1)&gt;&gt;1; for(int i=1;i&lt;=n;++i) p[i].l=read(),p[i].r=read(); sort(p+1,p+1+n); int L=1,R=inf,res; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(check(mid)) res=mid,L=mid+1; else R=mid-1; &#125; printf("%d\n",res);&#125;int main()&#123; int T=read(); while(T--) solve(); return 0;&#125; E Voting将所有人按照 $m_i$ 从小到大排序,依次考虑. 记录一个 $cnt$ ,表示当前已经投了票的人数,到第 $i$ 个人时,若 $n-i+cnt&lt;m_i$ ,则在 $[1,i]$ 中必须有人要投票. 用一个小根堆维护还没有投票的所有人的 $p$ ,需要投票时,就弹出堆顶,更新答案和 $cnt$ . 一个人最多只会被弹出一次,时间复杂度 $O(n\log n)$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;int n;struct node&#123; int m,p; bool operator &lt; (const node &amp;rhs) const &#123; return m&gt;rhs.m; &#125;&#125;a[MAXN];priority_queue&lt;int&gt; q;void solve()&#123; while(!q.empty()) q.pop(); n=read(); for(int i=1;i&lt;=n;++i) a[i].m=read(),a[i].p=read(); sort(a+1,a+1+n); ll ans=0; int cnt=0; for(int i=1;i&lt;=n;++i) &#123; q.push(-a[i].p); while(cnt+(n-i)&lt;a[i].m) &#123; ++cnt; ans-=q.top(); q.pop(); &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl;&#125;int main()&#123; int T=read(); while(T--) solve(); return 0;&#125; F Red-White Fence容易得出一个图形的周长为 $2(mx+1+w)$ ,其中 $w$ 表示使用的白色板子数目. $k$ 很小,可以直接去枚举用的红色板子的高度 $mx$ ,尝试将每个 $w$ 的方案数都算出来,加入对应贡献. 从高到低考虑每种长度的白色板子,从高度 $&lt;mx$ 的白色板子开始计算. 若这种长度只有 $1$ 块,则只能选择不加,或者加在某一边,生成函数表示为 $(1+2x)$ . 若 $&gt;1$ 块,则可以选择不加,或者加在某一边,或者两边都加,生成函数表示为 $(1+2x+x^2)=(x+1)^2$ . 那么这些生成函数之积就是 $(1+2x)^a\cdot (x+1)^{2b}$ 的形式,用二项式定理算出两个多项式,再用 $NTT$ 将它们乘起来. 最后利用维护的贡献 $O(1)$ 回答每个询问. 时间复杂度 $O(kn\log n+q)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353,G=3;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=1.8e6+10;int omega[MAXN],inv[MAXN],rev[MAXN],curn;void NTT_init(int n)&#123; if(curn==n) return; for(int i=0;i&lt;n;++i) rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((n&gt;&gt;1)*(i&amp;1)); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; omega[l]=fpow(G,(P-1)/l); inv[l]=fpow(omega[l],P-2); &#125; curn=n;&#125;void DFT(int *a,int n,bool invflag)&#123; NTT_init(n); for(int i=0;i&lt;n;++i) if(i&lt;rev[i]) swap(a[i],a[rev[i]]); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; int m=(l&gt;&gt;1); int gi=omega[l]; if(invflag) gi=inv[l]; for(int *p=a;p!=a+n;p+=l) &#123; int g=1; for(int i=0;i&lt;m;++i) &#123; int t=mul(g,p[i+m]); p[i+m]=add(p[i],P-t); p[i]=add(p[i],t); g=mul(g,gi); &#125; &#125; &#125; if(invflag) &#123; int invn=fpow(n,P-2); for(int i=0;i&lt;n;++i) a[i]=mul(a[i],invn); &#125;&#125;int NTT_A[MAXN],NTT_B[MAXN];void NTT(int *A,int *B,int *C,int lenA,int lenB)&#123; int lenC=lenA+lenB-1,n=1; while(n&lt;lenC) n&lt;&lt;=1; for(int i=0;i&lt;lenA;++i) NTT_A[i]=A[i]; for(int i=lenA;i&lt;n;++i) NTT_A[i]=0; for(int i=0;i&lt;lenB;++i) NTT_B[i]=B[i]; for(int i=lenB;i&lt;n;++i) NTT_B[i]=0; DFT(NTT_A,n,false); DFT(NTT_B,n,false); for(int i=0;i&lt;n;++i) C[i]=mul(NTT_A[i],NTT_B[i]); DFT(C,n,true);&#125;int n,k,fac[MAXN],invfac[MAXN],pw2[MAXN];void init()&#123; int m=n&lt;&lt;1; fac[0]=pw2[0]=1; for(int i=1;i&lt;=m;++i) &#123; fac[i]=mul(fac[i-1],i); pw2[i]=mul(pw2[i-1],2); &#125; invfac[m]=fpow(fac[m],P-2); for(int i=m-1;i&gt;=0;--i) invfac[i]=mul(invfac[i+1],i+1);&#125;int binom(int M,int N)&#123; if(M&lt;N || N&lt;0 || M&lt;0) return 0; return mul(fac[M],mul(invfac[N],invfac[M-N]));&#125;int h[MAXN],ans[MAXN];int A[MAXN],B[MAXN],tmp[MAXN];void solve(int mx)&#123; int a=0,b=0; //(1+2x)^a \cdot (1+2x+x^2)^b for(int l=0,r;l&lt;n &amp;&amp; h[l]&lt;mx;l=r+1) &#123; r=l; while(r+1&lt;n &amp;&amp; h[r+1]==h[r]) ++r; if(l==r) ++a; else ++b; &#125; for(int i=0;i&lt;=a;++i) A[i]=mul(binom(a,i),pw2[i]); for(int i=0;i&lt;=2*b;++i) B[i]=binom(2*b,i); NTT(A,B,tmp,a+1,2*b+1); int len=a+2*b+1; for(int i=0;i&lt;len;++i) ans[i+1+mx]=add(ans[i+1+mx],tmp[i]);&#125;int main()&#123; n=read(),k=read(); init(); for(int i=0;i&lt;n;++i) h[i]=read(); sort(h,h+n); for(int i=0;i&lt;k;++i) &#123; int x=read(); solve(x); &#125; int q=read(); while(q--) printf("%d\n",ans[read()&gt;&gt;1]); return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>二分</tag>
        <tag>构造</tag>
        <tag>codeforces</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191025]]></title>
    <url>%2F2019%2F10%2F25%2Ftest20191025%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX1+ZcwTxWHwoeNnFX8ZaG0lfbO5g2OFEVO4IwTN91Mk9GgEUNhvsgafr+DX9yOJDBZuXGFpXX+0YzuGGBWeAUpcAVChiI5DeUqrng/2YCh5mE1ABDh2/dLzEL0yOqOKoKK9iUwxgbKjlmaaZQAGgczqi4UWmjHLp3s+UFeOwcTaSaQmDK6LBJEf8rrtPIARW2ooEXhQhCxJQ1VBGYyZsc2wPVdTxsp+ZspdwSfsrRr7p5VnsdrxTBML0pXMLi7XSUf5PCz4qd+P/ppHAzB6mWBAOFkZ1rifmQMHaWx5bJj/WVx3az+KY2leuiDRzvHjBmVP+HfG7O+Cvei++gjQk5glPIRCIiwqUhJ5/Xlsn4N2/EhFNVoeaFn+LsTliiHIGa+dKJGKhcO+ccHK2fbHwWfFfIgu2sMPL558MWzPdEI2FpBtokghmtuD6nKRyd2+HSHycex0QeyfeqR+AcsT0ZJ2LEn0tc4teUl+YugHC1DRsArzIiXa+kFbn+aSovye+lFGk4sE5hkIhEXl6f+YWnRgFQ0Gxj7hrBoz/bqdNR7PlcLER9S1IhkSRy9EWxR8ThtmkWo1xkGSVApKsecMAGfPI7OK4h8hwaMYXh+H3r/ZWp24Mqdl8gVi1gHuVUKL4rpetuSRobZuVS8PqlJxdUGcuV1HEszozcfH7+m8G1MU+XUs9YP3WdMkb1n/dVB1BdgJrbAokFxZAoYmqKK72H/SHP/QVWtoBXAonkXU6mNytKNMmUte4wC78bGy7pgSoBCPru9DAescmtuoXSH4KH0rlAH4DsdW/6OFhtxmBPwITV5uGap2jsoQzZM3LK8Xu99v2jli7yPzAFTC1gkD1QCOEBA9OSAeIuGQLX8Rhrj2/Rf+pJ/FybZHjsuv28K9UrnTZhSTdPXQpmCpVy79IoDBRcK95cwdQLe26Jn5s1B8GwQWftx7NipnOj1clyqCU5iHS4qhUyDIqeVACZVtsA2Cs1nLDxSDTcXENf+kuIuJ8jBfnGzA/PoToAmxCwYdk8fi5eeIBpzyEbQybJ51qsOqNcf62oS5XDuLCJLcGuvHPDGm2hOLmfdaBnZoq+C9BZeA0L2QEE7Ite0JTp/J604kDc67War88nmyN3/DNS8pHfK6jm+QDmc/JH3elBo+bKBsCiCP/DZ8kfGWGK8Uzf487sOv/kd4Ta/rbGMu50pdXQkO2z8Cg/pcEwNkzf8b6OzF4yiVKh2//+qU0rJGB8lLahm7/Tigmapr882ONB5lYGzUzdOsm8uVRN2eMZzt97RWH5lAtqH0LjfyWO8A1m13VMRdv+n4YQ8Jlh4wtdhedBDjXPBLeUuedg8uPxPTpa6mK5MOZglZxZI2Fypl9qOAL9GIZ335xcKoDWfF/b9+ojdFEgiXf9dv+cwfRd+/DUHI9sjuNV+4C3YGCyXVR/UNtgk/yOG7YxXssLtT66up1lq/dN90IUgKtkza8/mKirwPzP4lli5OP6yxH00hVkE/+TPOe+NPHvtY= var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>STL</tag>
        <tag>启发式合并</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191024]]></title>
    <url>%2F2019%2F10%2F24%2Ftest20191024%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>二分</tag>
        <tag>树状数组</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191023]]></title>
    <url>%2F2019%2F10%2F23%2Ftest20191023%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>STL</tag>
        <tag>博弈论</tag>
        <tag>test</tag>
        <tag>笛卡尔树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191022]]></title>
    <url>%2F2019%2F10%2F22%2Ftest20191022%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX1+STlSwLscGxaz6Zb6oeAlF09YKHJb795/7h3qHYAq/fq9fzmeLnDANEzX+SS9LZ/fxcQsfWUTZBXAa91g4ZKMC0S6Q5zVvqs3RUNna45EDcvdB8K0TDRgnEzHEIqwK552DrxNoqERLi+z12rTjC8N/IyxJDlJT32UCAfhgC6i4WuTf+slz9hNTKkvZYzgPBHBzw21PUS/Q2javsu8aGvYvTxG7E7cKgEqacq30J0cx3EidfgUP0KhT3g+AKlj7kfcIcuM74LOqMcNsccpHJom//wvFckAJCotEdxWLYGFONzXbVjSf2v2VD13MYXcQSgrPLT7vlJNMBdA2/P0/Mdbrh/ptu5hwMYshal5QtGHq3ohPNqiUqLOg7uidalJHPbJBXzQBSdgItsO0NlXIBcMSvZNyjQlj5kEMqHxPAoo9LQAi2SbWE3+tef1Y7m7pZdl2G07fldVgFWxqNeeZanPjhmcA/fcA+GhlccH3qVYkI2KiM4UF3QZRnZgG6weSrSSQFEnByiVsCPjSUHuSGSrdokd0D1q4+UGq98sn4NkoRpA7aet8zLDqsK1kWavtXFLFOCjOTeNn0w1h5JYafoHa5GcJeHjJGzPVnCFrWM1QkpPdQ5mnfTrPhKnlHl6Mk5yGxPP1M45d8MHkWq7ONrx1on8aWYURYYnZYE0XxEH38LMxIUVbbNS7wZG3M36vIfXLXyg02rgmD0cl9Vb43H3I4Tq/Ijkj9BOPglqIBelmjL1ort6Ei13ZW4rJxiPjJersBAeByQk2sKHl3KTvXWDNgm7h/coJc4Ffk2MBrsb1sQfSOa7+YlsgdNNs4bfbp1VEthDLd2J14ezk/8hhgLQDNhiVZFYyC6p1Gv4lxFUcJW0Fxd5+5txrZCVn0k+RvGfWZsReMGxEaDTd2caWnru1dRIfg0IDIAW/yKJsNau/duQjygAjxC57k5LwwgL9H5Ny/irX/zJ06GtbMiZ2wp17i98W1go7jQjapwU+F2+De5iIg20K0ogFc7YS0fwmRXwvwHIxvV0eRQLLU4Y+pHI6/nPZaq75ekJhu+8JV0zScwLm41wQQiguO4xF0IaY1y0e0MNZlr8TZRHKR689+ro0OzTRf93/vT9QyU7BhYFsSmU0veQfCWCQKVNZhX9vU08RUlGgJ66RWaEzYt/rXyExWeAIlqffOUxgxFaIuM32RRmRuqS6pC9JdSM2oeAS1tj1pBbDQoJKgGVHFnlMvC8GcHUd38dRO/99RQqfWgQnn8DzKdJMl+QV7AQ+zs4zEBYqQrTtUEAJGKAtMSUHlUB1gOZBZ+15pYXlqSx8mOz0PEeJ8NgI5EVRh79S6+eYG4FHmKP759izmHtE4CM1EgiSY+7t28ZEYKIj+0+frmhCe60tCzgND4tpf+f0lNTd4LhpY5NjOBhUwg== var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>test</tag>
        <tag>FWT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3932 任务查询系统]]></title>
    <url>%2F2019%2F10%2F21%2Fbzoj-3932-%E4%BB%BB%E5%8A%A1%E6%9F%A5%E8%AF%A2%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[主席树. 将每个任务视作在时刻 $S_i$ 插入,时刻 $T_i+1$ 删除. 用主席树维护每个时刻存在的所有任务,查询时在主席树上二分. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,m,val[MAXN],tot=0;struct opt&#123; int pos,c,tp; opt(int pos=0,int c=0,int tp=0):pos(pos),c(c),tp(tp) &#123;&#125; bool operator &lt; (const opt &amp;rhs) const &#123; return pos&lt;rhs.pos; &#125;&#125;p[MAXN&lt;&lt;1];int rt[MAXN],idx=0;struct node&#123; int ls,rs,cnt; ll sum;&#125;Tree[MAXN*40];#define root Tree[o]#define lson Tree[root.ls]#define rson Tree[root.rs]void upd(int &amp;o,int lst,int l,int r,int pos,int tp)&#123; o=++idx; root=Tree[lst]; root.cnt+=tp,root.sum+=1LL*tp*val[pos]; if(l==r) return; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) upd(root.ls,Tree[lst].ls,l,mid,pos,tp); else upd(root.rs,Tree[lst].rs,mid+1,r,pos,tp);&#125;ll query(int o,int l,int r,int k)&#123; if(root.cnt&lt;=k) return root.sum; if(l==r) return 1LL*val[l]*k; int mid=(l+r)&gt;&gt;1; if(lson.cnt&gt;=k) return query(root.ls,l,mid,k); else return query(root.rs,mid+1,r,k-lson.cnt)+lson.sum;&#125;int main()&#123; m=read(),n=read(); for(int i=1;i&lt;=m;++i) &#123; int L=read(),R=read(),c=read(); val[++tot]=c; p[2*i-1]=opt(L,c,1); p[2*i]=opt(R+1,c,-1); &#125; sort(val+1,val+1+tot); tot=unique(val+1,val+1+tot)-val-1; sort(p+1,p+1+2*m); for(int i=1,j=0;i&lt;=n;++i) &#123; int tmp=rt[i-1],nxt; while(j&lt;2*m &amp;&amp; p[j+1].pos==i) &#123; ++j; p[j].c=lower_bound(val+1,val+1+tot,p[j].c)-val; upd(nxt,tmp,1,tot,p[j].c,p[j].tp); tmp=nxt; &#125; rt[i]=tmp; &#125; ll lastans=1; for(int i=1;i&lt;=n;++i) &#123; int x=read(); int k=1+(lastans*read()+read())%read(); lastans=query(rt[x],1,n,k); printf("%lld\n",lastans); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3931 网络吞吐量]]></title>
    <url>%2F2019%2F10%2F21%2Fbzoj-3931-%E7%BD%91%E7%BB%9C%E5%90%9E%E5%90%90%E9%87%8F%2F</url>
    <content type="text"><![CDATA[最大流. 先跑最短路,求出可以用的边. 边没有流量限制,但点有流量限制,可以将每个点拆成入点和出点,两者间连流量为原来那个点的流量的边. 对于可以用的边 $(u,v)$ ,就将 $u$ 的入点和 $v$ 的出点连起来, $u$ 的出点和 $v$ 的入点连起来,容量均为 $\infty$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int inf=1e9;const ll INF=1e18;const int MAXN=1024,MAXM=3e5+10;int n,m,vis[MAXN];typedef pair&lt;ll,int&gt; pli;#define mp make_pairpriority_queue&lt;pli&gt; q;queue&lt;int&gt; Q;struct Graph&#123; struct Edge &#123; int u,v,w; Edge(int u=0,int v=0,int w=0):u(u),v(v),w(w) &#123;&#125; &#125;E[MAXM&lt;&lt;1]; int tot,ecnt,cur[MAXN],head[MAXN],to[MAXM&lt;&lt;1],nx[MAXM&lt;&lt;1],flow[MAXM&lt;&lt;1]; Graph()&#123;tot=0;ecnt=1;&#125; void addedge(int u,int v,int w) &#123; E[++tot]=Edge(u,v,w); ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; flow[ecnt]=w; head[u]=ecnt; &#125; void ins(int u,int v,int w) &#123; addedge(u,v,w); addedge(v,u,0); &#125; void Dijkstra(ll *dis,int S) &#123; for(int i=1;i&lt;=n;++i) dis[i]=INF,vis[i]=0; dis[S]=0; q.push(mp(-dis[S],S)); while(!q.empty()) &#123; int u=(q.top()).second; q.pop(); if(vis[u]) continue; vis[u]=1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(dis[v]-dis[u]&gt;flow[i]) &#123; dis[v]=dis[u]+flow[i]; q.push(mp(-dis[v],v)); &#125; &#125; &#125; &#125; int dep[MAXN]; bool bfs(int S,int T) &#123; for(int i=1;i&lt;=2*n;++i) dep[i]=-1,cur[i]=head[i]; dep[S]=0; Q.push(S); while(!Q.empty()) &#123; int u=Q.front(); Q.pop(); for(int i=head[u];i;i=nx[i]) if(flow[i]&gt;0) &#123; int v=to[i]; if(dep[v]==-1) &#123; dep[v]=dep[u]+1; Q.push(v); &#125; &#125; &#125; return dep[T]!=-1; &#125; ll dfs(int u,int T,int limit) &#123; if(u==T || !limit) return limit; int f,Flow=0; for(int &amp;i=cur[u];i;i=nx[i]) &#123; int v=to[i]; if(dep[v]==dep[u]+1 &amp;&amp; (f=dfs(v,T,min(limit,flow[i])))) &#123; Flow+=f; limit-=f; flow[i]-=f; flow[i^1]+=f; if(!limit) break; &#125; &#125; return Flow; &#125; ll Maxflow(int S,int T) &#123; ll res=0; while(bfs(S,T)) res+=dfs(S,T,inf); return res; &#125;&#125;G1,G2;ll ds[MAXN],dt[MAXN];int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=m;++i) &#123; int u=read(),v=read(),w=read(); G1.addedge(u,v,w); G1.addedge(v,u,w); &#125; G1.Dijkstra(ds,1); G1.Dijkstra(dt,n); int S=1,T=n+n; for(int i=1;i&lt;=n;++i) &#123; int c=read(); G2.ins(i+n,i,c); G2.ins(i,i+n,c); &#125; for(int i=1;i&lt;=2*m;++i) &#123; int u=G1.E[i].u,v=G1.E[i].v,w=G1.E[i].w; if(ds[u]+w+dt[v]==ds[n]) G2.ins(u,v+n,inf); &#125; ll ans=G2.Maxflow(S,T); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>最短路</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191021]]></title>
    <url>%2F2019%2F10%2F21%2Ftest20191021%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>线段树</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3930 选数]]></title>
    <url>%2F2019%2F10%2F20%2Fbzoj-3930-%E9%80%89%E6%95%B0%2F</url>
    <content type="text"><![CDATA[$\gcd$ 的性质. 首先可以转化为在 $[\lceil \frac L k\rceil,\lfloor \frac R k\rfloor]$ 中取出 $n$ 个数,满足它们的 $\gcd$ 为 $1$ . 接下来的 $L,R$ 都是转化后的. 若取的 $n$ 个数不完全相同,那么它们的 $\gcd$ 一定会 $\le R-L$ . 计算出 $f(i)$ 表示取出 $n$ 个数,它们的 $\gcd$ 是 $i$ 的倍数的方案数,这个 $i$ 只用枚举到 $R-L$ . 再从大到小将 $f(2i),f(3i)\dots$ 减掉,得到的 $f(i)$ 就表示 $\gcd$ 恰好是 $i$ 的方案数了. 时间复杂度 $O((R-L+1)\cdot \log (R-L+1))$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=1e5+10;int n,k,l,r;int f[MAXN];int main()&#123; n=read(),k=read(),l=read(),r=read(); l+=k-1,l/=k,r/=k; for(int i=1;i&lt;=r-l;++i) &#123; int x=r/i-(l-1)/i; f[i]=add(fpow(x,n),P-x); &#125; for(int i=r-l;i&gt;=1;--i) &#123; for(int j=2*i;j&lt;=r-l;j+=i) f[i]=add(f[i],P-f[j]); &#125; if(l==1) f[1]=add(f[1],1); cout&lt;&lt;f[1]&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4036 按位或]]></title>
    <url>%2F2019%2F10%2F20%2Fbzoj-4036-%E6%8C%89%E4%BD%8D%E6%88%96%2F</url>
    <content type="text"><![CDATA[min-max 容斥. 记 $\max(S)$ 表示集合 $S$ 中的位置全部变成 $1$ 的期望次数,即每一位变成 $1$ 的期望次数的最大值. $\min(S)$ 表示集合 $S$ 中至少有一个位置变成 $1$ 的期望次数,即每一位变成 $1$ 的期望次数的最小值. 记 $U$ 为全集. 则根据 min-max 容斥,有$$ans=\max(U)=\sum_{S\neq \emptyset} (-1)^{|S|-1}\cdot \min(S)$$ 考虑 $S$ 中每个元素对 $\min(S)$ 的贡献,有$$\min(S)=\frac{1}{\sum_{T\cap S= \emptyset}p(T)}$$其中 $p(T)$ 表示每次选中 $T$ 中某个元素的概率. 而$$\sum_{T\cap S= \emptyset}p(T)=1-\sum_{T\subseteq(U-S)} p(T)$$暴力预处理每个集合的所有子集贡献之和是 $O(3^n)$ 的. 利用 ​$\rm FWT$ 处理,时间复杂度优化到 $O(n\cdot 2^n)$ . 注意判断无解的情况. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const double eps=1e-6;#define lowbit(x) (x&amp;(-x))const int MAXN=20;int n,conf[1&lt;&lt;MAXN];double p[1&lt;&lt;MAXN];int main()&#123; n=read(); int U=0; for(int i=0; i&lt;(1&lt;&lt;n); ++i) &#123; scanf("%lf",&amp;p[i]); if(p[i]&gt;eps) U|=i; &#125; if(U!=(1&lt;&lt;n)-1) return puts("INF")&amp;0; conf[0]=-1; for(int i=1; i&lt;(1&lt;&lt;n); ++i) conf[i]=-conf[i-lowbit(i)]; for(int i=1; i&lt;(1&lt;&lt;n); i&lt;&lt;=1) //FWT or &#123; for(int j=0; j&lt;(1&lt;&lt;n); j+=(i&lt;&lt;1)) for(int k=j; k&lt;j+i; ++k) p[k+i]+=p[k]; &#125; double ans=0; for(int i=0; i&lt;(1&lt;&lt;n); ++i) &#123; double tmp=1-p[U^i]; if(tmp&gt;eps) tmp=1/tmp; else tmp=0; ans+=tmp*(double)conf[i]; &#125; printf("%.10lf\n",ans); return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>min-max 容斥</tag>
        <tag>FWT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[min-max 容斥学习笔记]]></title>
    <url>%2F2019%2F10%2F20%2Fmin-max%E5%AE%B9%E6%96%A5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[$$\max(S)=\sum_{T\subseteq S,T\neq \emptyset} (-1)^{|T|-1}\cdot \min(T) \\\min(S)=\sum_{T\subseteq S,T\neq \emptyset} (-1)^{|T|-1}\cdot \max(T)$$ 其中 $\min(S)$ 表示非空集合 $S$ 中元素的最小值, $\max(S)$ 表示非空集合 $S$ 中元素的最大值. 只用证第一个等式,将所有元素取反即可得到第二个等式. 假设这个容斥系数是 $f(|T|)$ ,则需要证明 $f(x)=(-1)^{x-1}​$ . 考虑集合 $S$ 中第 $x+1​$ 大的元素,它对等式左右两边的贡献应当是相等的.$$[x=0]=\sum_{i=0}^{x}{x\choose i}\cdot f(i+1)$$对这个等式二项式反演.$$\begin{aligned}f(x+1)&amp;=\sum_{i=0}^x(-1)^{x-i}{x\choose i}\cdot [i=0]\\&amp;=(-1)^x\end{aligned}$$得证. 这个式子对于概率/期望同样成立,常用于将期望中的 $\max$ 转化为 $\min​$ 进行处理.]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>min-max 容斥</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191020]]></title>
    <url>%2F2019%2F10%2F20%2Ftest20191020%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX19DKNV4x+yA325sQJklTu/WXLVmX5TDu97YVeBQYPaCZ22wPbmeUyrUfh9wBoSvdgW4bwt0Cwl8Nk8vWRTNukTOO2u/AupqhKFSe9ei+Ai9ut2euNU8W0JdgV4cqvCQXENrXx/emvqe4bpbj2LBbY2E5KqmTWDJdRAGVJXkc+sNO9squCvKRD+9D23KnLxiF6grTuMwX5hx8Al5tfB3Y5pRnN9ThJm8yiKfxvmo5Vv3qWdh11GF9V3Xl1DjGB2cW4RepwRA0kc4159Ai66Mjstyagjjg3G1gkMv+SfB/Hq+T0aSiwYmrFVb00xbcTnWWsPGIANROlw7gBqVf5M0oubsL8P8BQ2rUUQih0tqB5zVKzW/uatdvsDbRINY5aRGoKAictF8+oPME5M/OaJsPBJW2OoObxlnUX2dngQY1yzXW5+abYvD/fmIBMqB4eZIw8Bj6BlBRBX8TabpV9iGc+TLelmVyTJboha+7YIZlEomk8EEK6Yd6Nle2CZLaFWUmPVhJwH4RKFheQnYMUc6pEZ9vDBKaB77OlGuqSKy5ucXJmAd95EBJu9Q9+EQAqlw0fQKSOa9A40d3h65AzVa/78HqIfDpjeza/VJvV2EcIsOtaagUm8fT9vIAOSokILXWv4JulSloVlST5C12emSuAn5Cxg65z4LwC8ACyk76to/bPbmZ12lRIaLP4MHC6vhEH/A2fJ4VBRz0FFNltQ8SbwWufvar72LtNNLFJzn7qRWtsMwm8tAFZqJ1xJsSxbPJ40+afTpSJoS4vdXvHqfHnbKIVx2Qt7XqH5qc+FSgieCmpkOR920ndlTY5EHQQ5iq/E5OwrMD5j/rLVj2Mon1UQD6i/+0n2Xz2OnhxiP0sdpxqxCeMnqmGzSJBycW5+uXIS5Ikbvm6np0NreCmu+J2+M9UgCDbmeEMH2zuOzwUnWeTXdeWpfXE8zquENyy6ruIQjeG4gwYEKTcbJmXX3Z2mMkkFxZVepINQcDCOixRgBoVKMbx3MQeHuglkWycnXnHMrSpK8btLZ1YXjNp0ZqH+KW1pF16H01c0i7cPiFqCfqllHZF9razic0uSKAjn23esm2dVs1WhGt50TSDAIs9VINMvklmbTkWThHNS6OZczFP58v356LdHX8owKyid84jjClRg3ByC1N9GO3PyL5umX0RDRq8A6acikknUb1H8cG1eZtS6fBkpZJqxIxruQZ4F9NDhdnnT6qyqjBIICIGnQThW4qIeCjmQVb2nHL3JoMRnYT8ntxO7tsJowKsFeBlTq/hdrcHos3NEa90Lnamwo9RIoVW5NUf2iLR9GdvGkoZnJ0gAgbbupAVdS1asMzzIeYlWDFhQs9HckzruFtZCXHUCpQBcol6N/yJWJpVk+NeHKhen/33/wkd1sqlsEKxaG/8TsStN4MUkdAXYgGyyuImtTqPTeO/zYIRH4Jz+e0UdxdfYZpZjmm7ESdnSbJ6SYJy1rDAg/dDaCfMgT7gGJLnUfDuuGWEl6NhtvKb0lI/tnV2+Uw7klPKUqoJAJQWJyqUZME9FOv8iCAB52ga/yuc5x8qy+SqsI7Vwpg51U6jim1JR0dP62iResQE7m2NfsxAlD29gqfCIHDxhmlM07KlLy3qSenoEmukyaKsVHnzCRh51aFxjg54m7Cl547TR9cT1hxrq84aEepqSvf8m4h/ybYf5VMk8sgXdDf7hCPJdF+lhrvwJf3cyLa7/v8pqHFn9OpNwgw9s8dhi37H59KybsRZWMGcr7+/5ii3b2S7jKWAK/RdIuM1eXnm7zjJSZVrkR/8yO5w== var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>STL</tag>
        <tag>矩阵加速</tag>
        <tag>打表</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3884 上帝与集合的正确用法]]></title>
    <url>%2F2019%2F10%2F19%2Fbzoj-3884-%E4%B8%8A%E5%B8%9D%E4%B8%8E%E9%9B%86%E5%90%88%E7%9A%84%E6%AD%A3%E7%A1%AE%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[拓展欧拉定理. 拓展欧拉定理 $a^b\equiv a^{b\bmod \varphi(p)+\varphi(p)} \bmod p$ ,并不要求 $b$ 与 $p$ 互质. 则 $2^{2^{2^{\dots}}}\equiv (2)^{2^{2^{2^{\dots}}}}\equiv (2)^{2^{2^{2^{\dots}}}\bmod \varphi(p)+\varphi(p)}\bmod p$ . 求出 $\varphi(p)$ 后递归求解,边界是当 $p=1$ 时,答案为 $0$ . 打表发现,对于 $10^7$ 之内的任何 $p$ ,最多递归 $3$ 次后就会变成 $1$ ,这样做速度是有保证的. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e7+1;int mul(int a,int b,int P)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b,int P)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a,P); a=mul(a,a,P); b&gt;&gt;=1; &#125; return res;&#125;int getphi(int x)&#123; int res=x; for(int i=2;i*i&lt;=x;++i) if(x%i==0) &#123; res/=i; res*=(i-1); while(x%i==0) x/=i; &#125; if(x!=1) res/=x,res*=(x-1); return res;&#125;int calc(int p)&#123; if(p==1) return 0; int x=getphi(p); return fpow(2,calc(x)+x,p);&#125;/*int prime[MAXN],cnt=0,phi[MAXN],f[MAXN],ism[MAXN];void init(int n)&#123; int ans=0; f[1]=0; phi[1]=ism[1]=1; for(int i=2;i&lt;=n;++i) &#123; f[i]=f[phi[i]]+1; ans=max(ans,f[i]); if(!ism[i]) &#123; prime[++cnt]=i; phi[i]=i-1; &#125; for(int j=1;j&lt;=cnt &amp;&amp; n/i&gt;=prime[j];++j) &#123; int x=prime[j]*i; if(i%prime[j]==0) &#123; phi[x]=phi[i]*prime[j]; break; &#125; phi[x]=phi[i]*(j-1); &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl;&#125;*/int main()&#123;// init(MAXN-1); int T=read(); while(T--) &#123; int p=read(); int ans=calc(p); printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4001 概率论]]></title>
    <url>%2F2019%2F10%2F18%2Fbzoj-4001-%E6%A6%82%E7%8E%87%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[小水题. 感觉和那次考试的题差不多啊. 答案等于所有情况的叶子数目之和 除以 不同构的二叉树数目. 后者显然是卡特兰数 $C_n$ . 前者的计算也很简单,考虑有 $n-1$ 个点的时候,剩下的一个点可以有 $n$ 个位置插入作为叶子. 于是答案为$$ans=\frac{nC_{n-1}}{C_n}=\frac{n(n+1)}{2(2n-1)}$$ 1234567891011121314151617181920212223//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int main()&#123; double n=(double)read(); double ans=n*(n+1)/2/(2*n-1); printf("%.9lf\n",ans); return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4066 简单题]]></title>
    <url>%2F2019%2F10%2F18%2Fbzoj-4066-%E7%AE%80%E5%8D%95%E9%A2%98%2F</url>
    <content type="text"><![CDATA[$kd$ 树 + 定期重构. 由于这道题强制在线 + 卡空间,其它时间效率上比较优秀的二维数点方法不太适用. 利用 $kd$ 树维护所有点, $kd​$ 树的本质是高维的二叉搜索树,所以插入的时候就在上面选方向走. 需要定期重构保证树的形态平衡一些,也可以像替罪羊树一样,维护一个因子判断是否需要重构. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int inf=1e9;const int MAXN=2e5+10;int n,lastans,D;struct node&#123; int ch[2],v[2],mx[2],mi[2]; node() &#123; ch[0]=ch[1]=0,mx[0]=mx[1]=-inf,mi[0]=mi[1]=inf; val=sum=0; &#125; bool operator &lt; (const node &amp;rhs) const &#123; return v[D]==rhs.v[D]?v[D^1]&lt;rhs.v[D^1]:v[D]&lt;rhs.v[D]; &#125; int val,sum;&#125; Tree[MAXN];#define root Tree[o]#define lson Tree[root.ch[0]]#define rson Tree[root.ch[1]]void pushup(int o)&#123; root.sum=lson.sum+rson.sum+root.val; for(int i=0; i&lt;2; ++i) &#123; root.mx[i]=max(root.mx[i],max(lson.mx[i],rson.mx[i])); root.mi[i]=min(root.mi[i],min(lson.mi[i],rson.mi[i])); &#125;&#125;int xl,xr,yl,yr;void ins(int o,int d)&#123; int k=Tree[n].v[d]&gt;root.v[d]; if(root.ch[k]) ins(root.ch[k],d^1); else root.ch[k]=n; pushup(o);&#125;int BuildTree(int l,int r,int d)&#123; D=d; int mid=(l+r)&gt;&gt;1; int o=mid; nth_element(Tree+l,Tree+mid,Tree+r+1); for(int i=0;i&lt;2;++i) root.mx[i]=root.mi[i]=root.v[i]; if(l&lt;=mid-1) root.ch[0]=BuildTree(l,mid-1,d^1); else root.ch[0]=0; if(mid+1&lt;=r) root.ch[1]=BuildTree(mid+1,r,d^1); else root.ch[1]=0; pushup(o); return o;&#125;bool check(int o)&#123; if(!o || root.mx[0]&lt;xl || root.mi[0]&gt;xr || root.mx[1]&lt;yl || root.mi[1]&gt;yr) return 0; return 1;&#125;int query(int o)&#123; if(xl&lt;=root.mi[0] &amp;&amp; root.mx[0]&lt;=xr &amp;&amp; yl&lt;=root.mi[1] &amp;&amp; root.mx[1]&lt;=yr) return root.sum; int res=0; if(xl&lt;=root.v[0] &amp;&amp; root.v[0]&lt;=xr &amp;&amp; yl&lt;=root.v[1] &amp;&amp; root.v[1]&lt;=yr) res+=root.val; if(check(root.ch[0])) res+=query(root.ch[0]); if(check(root.ch[1])) res+=query(root.ch[1]); return res;&#125;int main()&#123; read(); int rt=0; while("RLDAKIOI") &#123; int tp=read(); if(tp==1) &#123; ++n; Tree[n].v[0]=Tree[n].mx[0]=Tree[n].mi[0]=read()^lastans; Tree[n].v[1]=Tree[n].mx[1]=Tree[n].mi[1]=read()^lastans; Tree[n].val=Tree[n].sum=read()^lastans; if(n==1) rt=n; else ins(rt,0); if(n%5000==0) rt=BuildTree(1,n,0); &#125; else if(tp==2) &#123; xl=read()^lastans; yl=read()^lastans; xr=read()^lastans; yr=read()^lastans; if(check(rt)) lastans=query(rt); else lastans=0; printf("%d\n",lastans); &#125; else if(tp==3) break; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>kdtree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4031 小Z的房间]]></title>
    <url>%2F2019%2F10%2F18%2Fbzoj-4031-%E5%B0%8FZ%E7%9A%84%E6%88%BF%E9%97%B4%2F</url>
    <content type="text"><![CDATA[矩阵树定理. 把每个房间看成一个点,每堵可以打的墙看成一条边,不难发现就是要求这张无向图的生成树个数. 使用矩阵树定理计算,但模数不是质数,需要用辗转相除法来消元. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=100;int n=0,a[MAXN][MAXN],id[MAXN][MAXN];void addrow(int x,int y,int k)&#123; for(int i=1;i&lt;=n;++i) inc(a[x][i],mul(a[y][i],k));&#125;int ans=1;void Euclid(int x,int y)//最后使x不为0,y为0 &#123; if(!a[y][x]) return; else if(!a[x][x]) &#123; swap(a[x],a[y]); ans=add(P,-ans); return; &#125; if(a[x][x]&gt;a[y][x]) addrow(x,y,P-a[x][x]/a[y][x]); else addrow(y,x,P-a[y][x]/a[x][x]); Euclid(x,y);&#125;void Det()&#123; for(int i=1;i&lt;=n;++i) &#123; for(int j=i+1;j&lt;=n;++j) Euclid(i,j); ans=mul(ans,a[i][i]); if(!ans) return; &#125; &#125;int N,M;char buf[MAXN];int main()&#123; N=read(),M=read(); for(int i=1;i&lt;=N;++i) &#123; scanf("%s",buf+1); for(int j=1;j&lt;=M;++j) if(buf[j]=='.') &#123; id[i][j]=++n; if(id[i-1][j]) &#123; int x=id[i-1][j],y=id[i][j]; a[x][y]=a[y][x]=P-1; ++a[x][x],++a[y][y]; &#125; if(id[i][j-1]) &#123; int x=id[i][j-1],y=id[i][j]; a[x][y]=a[y][x]=P-1; ++a[x][x],++a[y][y]; &#125; &#125; &#125; --n; Det(); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>高斯消元</tag>
        <tag>矩阵树定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1236]]></title>
    <url>%2F2019%2F10%2F18%2FCF1236%2F</url>
    <content type="text"><![CDATA[$Div.2$ A Stones贪心地拿,先拿 $b,c$ 组合的,不能拿时再拿 $a,b$ 组合. B Alice and the List of Presents显然答案为 $(2^m-1)^n$ . C Labs进行 $n$ 轮填数,第 $i$ 轮将 $(i-1)\cdot n+1\sim i\cdot n$ 这 $n$ 个数分配给 $n$ 组. 每轮中,若给某组填入该轮的第 $x$ 个数,则该组的 $sum$ 加上 $x$ . 每轮填数前将所有组按照 $sum$ 从大到小排序,依次从小到大填入 $n$ 个数. D Alice and the Doll模拟走的过程,只有撞上障碍点或者边界时才拐弯. 用 $set$ 将所有障碍点和边界存下来,每次根据当前方向,二分出下个拐弯的位置,走的时候记录访问过的格子数目. 若某个时刻,走过的格子数目达到了 $n\cdot m-k$ ,就说明找到了一组合法解. E Alice and the Unfair Game可以发现,以某个确定的起点出发,可能的终点一定是一段连续的区间. 只需要找出这段区间的左,右端点. 若能向左走,就走,否则留在原地,可以找出左端点,同理可找出右端点,但这样暴力找是 $O(n^2)$ 的. 考虑遍历数组 $a$ ,当前的第一个元素只会对某个位置的起点有影响,将它们全部移开. 若当前在找左端点,就移到右边,否则移到左边,用并查集实现. 需要特判 $n=1$ 以及 $a_i=1$ 或 $a_i=n$ 的情况. F Alice and the Cactus对于一棵仙人掌,每个点最多在一个环上,删掉某些点后,每个点仍然在最多一个环上. 记点数为 $a$ ,边数为 $b$ ,环的数目为 $c$ ,于是连通块数目 $X=a-b+c$ . 方差可以看做 $E(X^2)-E(X)^2$ ,而 $X^2$ 可以拆成 $a^2+b^2+c^2-2ab-2bc+2ac$ . 根据期望的线性性,答案为$$E(a^2)+E(b^2)+E(c^2)-E(2ab)-E(2bc)+2E(ac)-(E(a)+E(b)-E(c))^2$$把这 $9​$ 种情况的贡献都统计进去,需要计算逆元,时间复杂度 $O(n\log P)​$ .]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>构造</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1237]]></title>
    <url>%2F2019%2F10%2F17%2FCF1237%2F</url>
    <content type="text"><![CDATA[$Global\ Round\ 5$ A Balanced Rating Changes只需要保证向上取整的次数和向下取整的次数相同就可以了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int n,t=0,sum=0;int trans(double x,bool f)&#123; int k=x&lt;0?-1:1; f^=(x&lt;0); x=fabs(x); return (f?k*floor(x):k*ceil(x));&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) &#123; int x=read(); if(x%2==0) &#123; printf("%d\n",x&gt;&gt;1); continue; &#125; if(t) &#123; printf("%d\n",trans((double)(x)/2.0,0)); --t; &#125; else &#123; printf("%d\n",trans((double)(x)/2.0,1)); ++t; &#125; &#125; return 0;&#125; B Balanced Tunnel按照进入的顺序依次遍历,判断一下有没有先进入的车在它之后出去. 123456789101112131415161718192021222324252627282930313233343536373839//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,a[MAXN],pos[MAXN];int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); for(int i=1;i&lt;=n;++i) &#123; int x=read(); pos[x]=i; &#125; int mx=0,ans=0; for(int i=1;i&lt;=n;++i) &#123; int x=a[i]; if(mx&gt;pos[x]) ++ans; mx=max(mx,pos[x]); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; C Balanced Removals把所有点以 $x,y,z$ 坐标分别为第一,二,三关键字排序. 构造方案时,对于 $x$ 坐标相同的一段,递归进去通过比较 $y,z$ ,将它们删到只剩一个点或者没有点. 于是剩下所有点的 $x$ 都互不相同,从前往后,相邻的作为一对删掉即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=5e4+10;struct node&#123; int v[3],id; bool operator &lt; (const node &amp;rhs) const &#123; for(int i=0;i&lt;3;++i) if(v[i]!=rhs.v[i]) return v[i]&lt;rhs.v[i]; return false; &#125;&#125;p[MAXN];int solve(int L,int R,int k)&#123; if(L==R) return p[L].id; int head=L,cur=0; for(int i=L;i&lt;=R+1;++i) &#123; if(i==R+1 || p[i].v[k]!=p[head].v[k]) &#123; int x=solve(head,i-1,k+1); if(x &amp;&amp; !cur) cur=x; else if(x &amp;&amp; cur) &#123; printf("%d %d\n",cur,x); cur=0; &#125; head=i; &#125; &#125; return cur;&#125;int main()&#123; int n=read(); for(int i=1;i&lt;=n;++i) &#123; p[i].id=i; for(int j=0;j&lt;3;++j) p[i].v[j]=read(); &#125; sort(p+1,p+1+n); solve(1,n,0); return 0;&#125; D Balanced Playlist可以将链复制两份,接在后面. 复制两份而不是一份,是为了方便判断答案为无穷大的情况. 只考虑这 $3n$ 个点,若某个点答案 $&gt;2n$ ,则实际答案一定为无穷大,否则就是该答案. 考虑第 $i$ 个点对前面哪些点有贡献,这可以在线段树上二分出来,还要和所有前缀的限制取 $\max$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=3e5+10;int n,m,a[MAXN];struct Segtree&#123; int mx[MAXN&lt;&lt;2];#define root mx[o]#define lson mx[o&lt;&lt;1]#define rson mx[o&lt;&lt;1|1] void pushup(int o) &#123; root=max(lson,rson); &#125; void BuildTree(int o,int l,int r) &#123; if(l==r) return (void)(root=a[l]); int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); pushup(o); &#125; int query(int o,int l,int r,int L,int R) &#123; if(L&lt;=l &amp;&amp; r&lt;=R) return root; int mid=(l+r)&gt;&gt;1; int res=0; if(L&lt;=mid) res=max(res,query(o&lt;&lt;1,l,mid,L,R)); if(R&gt;mid) res=max(res,query(o&lt;&lt;1|1,mid+1,r,L,R)); return res; &#125;&#125;T;#define lowbit(x) x&amp;(-x)int bit[MAXN];void add(int x,int c)&#123; for(;x&lt;=n;x+=lowbit(x)) bit[x]+=c;&#125;int sum(int x)&#123; int s=0; for(;x;x-=lowbit(x)) s+=bit[x]; return s;&#125;int main()&#123; m=n=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); for(int i=n+1;i&lt;=2*n;++i) a[i]=a[i-n]; for(int i=2*n+1;i&lt;=3*n;++i) a[i]=a[i-n]; n*=3; T.BuildTree(1,1,n); int lst=0; for(int i=1;i&lt;=n;++i) &#123; int L=1,R=i,pos; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; int mx=T.query(1,1,n,mid,i); if(2*a[i]&gt;=mx) R=mid-1,pos=mid; else L=mid+1; &#125; pos=max(pos,lst); add(pos,1); add(i+1,-1); lst=pos; &#125; for(int i=1;i&lt;=m;++i) &#123; int ans=sum(i); if(ans&gt;2*m) ans=-1; printf("%d ",ans); &#125; puts(""); return 0;&#125; E Balanced Binary Search TreesF Balanced Domino PlacementsG Balanced DistributionH Balanced Reversals]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>构造</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初赛试题选做]]></title>
    <url>%2F2019%2F10%2F17%2F%E5%88%9D%E8%B5%9B%E8%AF%95%E9%A2%98%E9%80%89%E5%81%9A%2F</url>
    <content type="text"><![CDATA[马上初赛了,假装准备一下. 主定理假设有递推关系式 $T(n)=aT(\frac n b)+f(n)$ . 三种情况分别对应了 $f(n)=O(n^d)$ 的 $d$ 较小,适中,与较大的情况. Case 1若 $f(n)=O(n^{\log_b a-\epsilon}),\epsilon &gt;0$ ,则 $T(n)=\Theta(n^{\log_b a})$ . 此时复杂度由 $a,b$ 决定. Case 2若 $f(n)=\Theta(n^{\log_b a}\log^k n)$ ,则 $T(n)=\Theta(n^{\log_b a}\log^{k+1} n)$ . 此时两者均衡,复杂度在共同决定的基础上还要乘上一个 $\log n$ . Case 3若 $f(n)=\Omega(n^{\log_b a+\epsilon}),\epsilon&gt;0$ ,对于某个常数 $c&lt;1$ 和所有充分大的 $n$ 有 $af(\frac n b)&lt;cf(n)$ ,则 $T(n)=\Theta(f(n))$ . 此时复杂度由 $f(n)$ 决定. 例一若某算法的计算时间表示为递推关系式 $T(n)=2T(\frac n 2)+n\log n,T(1)=1$ ,求解该算法的时间复杂度. 观察发现是 Case 2 ,其中 $a=b=2,k=1$ . 于是时间复杂度为 $T(n)=\Theta(n\log^2 n)$ . 例二若某算法的计算时间表示为递推关系式 $T(n)=2T(\frac n 4)+\sqrt n,T(1)=1​$ ,求解该算法的时间复杂度. 观察发现是 Case 2 ,其中 $a=2,b=4,k=0$ . 于是时间复杂度为 $T(n)=\Theta(\sqrt n\log n)$ . 例三若某算法的计算时间表示为递推关系式 $T(n)=9T(\frac n 3)+n,T(1)=1$ ,求解该算法的时间复杂度. 观察发现是 Case 1 ,其中 $a=9,b=3$ . 于是时间复杂度为 $T(n)=\Theta(n^2)$ . 例四若某算法的计算时间表示为递推关系式 $T(n)=T(\frac n 2)+n,T(1)=1$ ,求解该算法的时间复杂度. 观察发现是 Case 3 ,其中 $a=1,b=2$ ,常数 $c$ 可取 $(\frac 1 2,1)$ 中的任意实数. 于是时间复杂度为 $T(n)=\Theta(n)$ . 杂题整理NOIP2018 提高组初赛 T17求出当 $a, b$ 都取 $[0, 31]$ 中的整数时,方程 a*b = (a or b) * (a and b) 一共有多少组解. 首先可以注意到 (a or b) + (a and b) = a + b . 证明方式是把每个二进制位分开考虑. 若两个都是 $1$ ,贡献为 $2$ ,只有一个 $1$ ,贡献为 $1$ ,都是 $0$ ,贡献为 $0$ ,不难发现等式两边都满足以上性质. 记 x = (a or b),y = (a and b) ,则有 $a+b=x+y,ab=xy$ . 而 $x\ge y$ ,所以只可能是 $x=\max(a,b),y=\min(a,b)$ . 那么也就是求满足 (a and b) = b 或者 (a and b) = a 的数对个数. 先假设 $a&gt;b$ ,求出答案后 $\times 2$ ,再加上 $a=b$ 的 $32​$ 组解,就是答案. 枚举 $a$ 有几个二进制位是 $1$ 即可求出 $a&gt;b​$ 部分的答案. $$ans=32+2\times \sum_{i=0}^5 {5\choose i}\cdot(2^i-1)=454$$ NOIP2017 提高组初赛 T8求出由 $4​$ 个有标号的点构成的无向简单连通图的数目. 这个就是 bzoj 3456 城市规划 ,于是可以手算 NTT . 用那个暴力 $dp$ 手算一下. 设 $f(i)$ 表示 $i$ 个有标号的点构成的无向简单连通图的数目,边界有 $f(1)=1$ . 转移时用所有图的数目减去不连通的图的数目, 为了计算不连通的图的数目,可以枚举 $1$ 号点所在连通块的大小为 $j$ . 其它的点内部任意连边,但不与这个连通块内的点连边,这样就不连通了.$$f(i)=2^{i\choose 2} -\sum_{j=1}^{i-1}{i-1\choose j-1}\cdot f(j)\cdot 2^{i-j\choose 2}$$前 $3$ 项可以口算, $f(1)=1,f(2)=1,f(3)=4$ ,代入得到 $f(4)=38$ . NOIP2017 提高组初赛 T9将 $7$ 个名额分给 $4$ 个不同的班级,允许有的班级没有名额,求分配方案的数目. 设 $f(i,j)$ 表示 $i$ 个班级分 $j$ 个名额的方案数. 转移时枚举最后一个班级得到了 $k$ 个名额.$$f(i,j)=\sum_{k=0}^j f(i-1,j-k)$$用前缀和优化一下,得到 $f(i,j)=f(i,j-1)+f(i-1,j)$ ,边界有 $f(i,0)=1,f(0,j)=0$ . 这等价于从 $(1,0)$ 出发,每次向右或向上走一步,走到 $(4,7)$ 的方案数. 则答案为 ${4-1+7\choose 4-1}=120$ . NOIP2017 提高组初赛 T22删除一条细边代价是 $1$ ,删除一条粗边代价是 $2$ . 需要以最小的代价使得 $A$ 与 $B$ 不连通,求出这个代价,以及有多少种删边方案的代价是最小的. 平面图转对偶图,对偶图中的最短路长度以及最短路数目就是答案.]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4007 战争调度]]></title>
    <url>%2F2019%2F10%2F16%2Fbzoj-4007-%E6%88%98%E4%BA%89%E8%B0%83%E5%BA%A6%2F</url>
    <content type="text"><![CDATA[状压 $dp$ . 设 $f(i,j,S)$ 表示考虑了前 $i$ 个平民,其中有 $j$ 个人去打仗,且第 $i$ 个人所有祖先去打仗/管理的状态为 $S$ 时最大收益. 转移时需要限制当前的节点与上一个节点的 $LCA​$ 到根的部分状态相同. 需要把第一维滚掉来优化空间. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=9;int n,m,val[(1&lt;&lt;MAXN)+1][1&lt;&lt;MAXN][2],tmp[MAXN];int f[2][(1&lt;&lt;MAXN)+1][1&lt;&lt;MAXN];int dep(int x,int y)&#123; int s=-1; while(x^y) ++s,x&gt;&gt;=1,y&gt;&gt;=1; return s;&#125;void upd(int &amp;x,int y)&#123; x=max(x,y);&#125;int main()&#123; n=read(),m=read(); for(int k=1;k&gt;=0;--k) &#123; for(int i=1;i&lt;=1&lt;&lt;(n-1);++i) &#123; for(int j=0;j&lt;n-1;++j) tmp[j]=read(); for(int S=0;S&lt;1&lt;&lt;(n-1);++S) for(int j=0;j&lt;n-1;++j) if(((S&gt;&gt;j)&amp;1)==k) val[i][S][k]+=tmp[j]; &#125; &#125; int id=0; for(int k=0;k&lt;=1;++k) for(int S=0;S&lt;1&lt;&lt;(n-1);++S) f[id][k][S]=val[1][S][k]; int ans=0,base=(1&lt;&lt;(n-1))-1; for(int i=2;i&lt;=1&lt;&lt;(n-1);++i) &#123; id^=1; memset(f[id],0,sizeof f[id]); int d=dep(base+i-1,base+i); for(int k=0;k&lt;=1;++k) for(int l=0;l&lt;=i &amp;&amp; l+k&lt;=m;++l) &#123; for(int a=0;a&lt;(1&lt;&lt;(n-1-d));++a) for(int b=0;b&lt;(1&lt;&lt;d);++b) for(int c=0;c&lt;(1&lt;&lt;d);++c) &#123; upd(f[id][l+k][c^(a&lt;&lt;d)],f[id^1][l][b^(a&lt;&lt;d)]+val[i][c^(a&lt;&lt;d)][k]); if(i==(1&lt;&lt;(n-1))) upd(ans,f[id][l+k][c^(a&lt;&lt;d)]); &#125; &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>状压dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191016]]></title>
    <url>%2F2019%2F10%2F16%2Ftest20191016%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>博弈论</tag>
        <tag>容斥原理</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4005 骗我呢]]></title>
    <url>%2F2019%2F10%2F15%2Fbzoj-4005-%E9%AA%97%E6%88%91%E5%91%A2%2F</url>
    <content type="text"><![CDATA[$dp$ 计数 + 容斥原理. 容易发现,每一行填的数都是从 $0\sim m$ 这 $m+1$ 个数中去掉一个数,将剩下的从小到大依次填进去形成的. 设 $f(i,j)$ 表示考虑了前 $i$ 行,第 $i$ 行去掉的数是 $j​$ 的方案数. 为了满足第二个条件,观察可以得出 $f$ 的转移$$f(i,j)=\sum_{k=0}^{j+1} f(i-1,k)$$则答案为 $\sum_{j=0}^m f(n,m)= f(n+1,m-1)$ . 考虑将 $f(i,j)$ 与 $f(i,j-1)$ 做差,可以得出递推式$$f(i,j)=f(i,j-1)+f(i-1,j+1)$$直接 $dp$ 是 $O(n^2)$ 的,不能接受. 发现 $f$ 的转移形式与组合数比较像,尝试转化到坐标系中. $f(n+1,m-1)$ 就表示从 $(0,0)$ 出发,每次可以向右走一步,或者向上与左走一步,走到 $(n+1,m-1)$ 方案数. 向上与左走的步数是确定的,要走 $n+1$ 步,那么向右走的步数就是 $n+m$ 步. 再转化一步,就变成从 $(0,0)$ 出发,只能向右走一步,或向上走一步,走到 $(n+1,n+m)$ 的方案数. 但现在向上走一步,对应的是原来向上,左各走一步,若原来的 $j&lt;0$ 或者 $j&gt;m$ 了,就不合法了. 也就是说,从 $(0,0)$ 走到 $(n+1,n+m)$ 时,还不能穿过直线 $y=x$ 和 $y=x-m$ . 记穿过 $y=x$ 再穿回来的事件为 $A$ ,穿过 $y=x-m$ 再穿回来的事件为 $B$ . 考虑容斥,考虑交错子序列 $ABABAB\dots$ ,则至少发生了前 $i$ 次事件的方案数 $s_i$ 对答案的贡献就是 $(-1)^i\cdot s_i$ . 将终点 $(n+1,n+m)$ 不断沿着两条直线对称,每对称一次就更新答案. 对另一个交错子序列 $BABABA\dots$ 也同样计算一遍贡献. 不断对称的时间复杂度是 $O(\log n)$ ,瓶颈在预处理阶乘及其逆元,时间复杂度 $O(n)$ .]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>数学</tag>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4004 装备购买]]></title>
    <url>%2F2019%2F10%2F15%2Fbzoj-4004-%E8%A3%85%E5%A4%87%E8%B4%AD%E4%B9%B0%2F</url>
    <content type="text"><![CDATA[求解最小权值极大线性无关组. 根据拟阵的那套理论,只需要将所有向量按照权值从小到大排序. 然后依次尝试加入,能加入就加入,维护一个上三角矩阵来进行判断. 精度上可能会有问题.可以开 long double 并加入 eps 进行判断,也可以用 $\gcd$ 消元法,会多一个 $\log$. 写的时候比较偷懒,就模了个大质数来做. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=512;int n,m;struct Vector&#123; int v[MAXN],cost; bool operator &lt; (const Vector &amp;rhs) const &#123; return cost&lt;rhs.cost; &#125;&#125;a[MAXN];int tot=0,matrix[MAXN][MAXN];int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) a[i].v[j]=read(); for(int i=1;i&lt;=n;++i) a[i].cost=read(); sort(a+1,a+1+n); int cnt=0,ans=0; for(int t=1;t&lt;=n;++t) &#123; for(int i=1;i&lt;=m;++i) &#123; if(!a[t].v[i]) continue; if(!matrix[i][i]) &#123; for(int j=i;j&lt;=n;++j) matrix[i][j]=a[t].v[j]; ++cnt; ans+=a[t].cost; break; &#125; int tmp=mul(a[t].v[i],fpow(matrix[i][i],P-2)); for(int j=i;j&lt;=m;++j) inc(a[t].v[j],mul(P-tmp,matrix[i][j])); &#125; &#125; cout&lt;&lt;cnt&lt;&lt;' '&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>拟阵</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191015]]></title>
    <url>%2F2019%2F10%2F15%2Ftest20191015%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>概率/期望</tag>
        <tag>容斥原理</tag>
        <tag>test</tag>
        <tag>Pollard-Rho</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4003 城池攻占]]></title>
    <url>%2F2019%2F10%2F14%2Fbzoj-4003-%E5%9F%8E%E6%B1%A0%E6%94%BB%E5%8D%A0%2F</url>
    <content type="text"><![CDATA[可并堆. 如果对于每个骑士,我们都求出他在哪个城池牺牲,那么两个问题都可以解决. 对于树上的每个节点,开一个可并堆,维护当前这个点上所有骑士的战斗力. 对树进行 $dfs$ . 先将堆中的战斗力修改,然后弹出在当前节点牺牲的骑士,更新答案,再将剩余的骑士合并到父亲上去. 加或者乘一个正数是不会改变战斗力的大小关系的,所以修改时在根节点处打标记就可以了,堆的形态不会变化. 最后还要处理攻占根节点后仍未牺牲的骑士. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=3e5+10;int n,m,ecnt=0,head[MAXN],to[MAXN],nx[MAXN];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int dep[MAXN],st[MAXN],a[MAXN];ll h[MAXN],v[MAXN];struct node&#123; int ls,rs; ll addtag,multag,val; node()&#123;addtag=0,multag=1;ls=rs=0;&#125;&#125;Heap[MAXN];int rt[MAXN];void upd_mul(int x,ll c)&#123; Heap[x].val*=c; Heap[x].multag*=c; Heap[x].addtag*=c;&#125;void upd_add(int x,ll c)&#123; Heap[x].val+=c; Heap[x].addtag+=c;&#125;void pushdown(int x)&#123; if(Heap[x].multag!=1) &#123; if(Heap[x].ls) upd_mul(Heap[x].ls,Heap[x].multag); if(Heap[x].rs) upd_mul(Heap[x].rs,Heap[x].multag); Heap[x].multag=1; &#125; if(Heap[x].addtag) &#123; if(Heap[x].ls) upd_add(Heap[x].ls,Heap[x].addtag); if(Heap[x].rs) upd_add(Heap[x].rs,Heap[x].addtag); Heap[x].addtag=0; &#125;&#125;int merge(int x,int y)&#123; if(!x || !y) return x+y; if(Heap[x].val&gt;Heap[y].val) swap(x,y); pushdown(x); Heap[x].rs=merge(Heap[x].rs,y); swap(Heap[x].ls,Heap[x].rs); return x;&#125;void pop(int &amp;x)&#123; pushdown(x); x=merge(Heap[x].ls,Heap[x].rs);&#125;int ans1[MAXN],ans2[MAXN];void dfs(int u)&#123; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; dep[v]=dep[u]+1; dfs(v); rt[u]=merge(rt[u],rt[v]); &#125; while(rt[u] &amp;&amp; Heap[rt[u]].val&lt;h[u]) &#123; ++ans1[u]; ans2[rt[u]]=dep[st[rt[u]]]-dep[u]; pop(rt[u]); &#125; if(a[u]==0) upd_add(rt[u],v[u]); else upd_mul(rt[u],v[u]);&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) h[i]=read(); for(int i=2;i&lt;=n;++i) &#123; int f=read(); addedge(f,i); a[i]=read(); v[i]=read(); &#125; for(int i=1;i&lt;=m;++i) &#123; Heap[i].val=read(); st[i]=read(); rt[st[i]]=merge(rt[st[i]],i); &#125; dfs(1); while(rt[1]) &#123; ans2[rt[1]]=dep[st[rt[1]]]+1; pop(rt[1]); &#125; for(int i=1;i&lt;=n;++i) printf("%d\n",ans1[i]); for(int i=1;i&lt;=m;++i) printf("%d\n",ans2[i]); return 0;&#125;]]></content>
      <tags>
        <tag>可并堆</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191014]]></title>
    <url>%2F2019%2F10%2F14%2Ftest20191014%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>概率/期望</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191013]]></title>
    <url>%2F2019%2F10%2F13%2Ftest20191013%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>数学</tag>
        <tag>数位dp</tag>
        <tag>test</tag>
        <tag>crt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4002 有意义的字符串]]></title>
    <url>%2F2019%2F10%2F13%2Fbzoj-4002-%E6%9C%89%E6%84%8F%E4%B9%89%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[数学套路题. 考虑将 $\frac {b+\sqrt d}{2}$ 写成某个递推数列的特征方程的根. 设数列 $a_i=A\cdot (\frac{b+\sqrt d}{2})^i+B\cdot (\frac{b-\sqrt d}{2})^i$ . 可以根据韦达定理得出该数列的递推式 $a_i=b\cdot a_{i-1}+\frac{d-b^2}{4}\cdot a_{i-2}$ . 令 $A=B=1$ ,得到这个数列的前两项 $a_1=b,a_2=\frac{b^2+d}{2}$ . 由于 $b\bmod 2=1,d\bmod 4=1$ ,所以 $\frac {d-b^2}{4},\frac{b^2+d}{2}$ 一定是个整数. 于是可以用矩阵快速幂求出 $a_n$ . 而 $(\frac{b+\sqrt d}{2})^n=a_n-(\frac{b-\sqrt d}{2})^n$ ,答案需要向下取整. 有限制 $0&lt;b^2\leq d&lt;(b+1)^2$ ,所以有 $(\frac {b-\sqrt d}{2})^n\in(-1,0]$ . 于是当且仅当 $b^2&lt;d,n\bmod 2=0​$ 时,答案为 $a_n-1​$ ,其余情况为 $a_n​$ . 时间复杂度 $O(\log n)​$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const ll P=7528443412579576937;ll add(ll a,ll b)&#123; return (P-a&lt;=b)?(a-P+b):(a+b);&#125;ll mul(ll a,ll b)&#123; ll res=a*b-(ll)((long double)a/P*b+1e-8)*P; return res&lt;0?res+P:res%P;&#125;struct Matrix&#123; ll v[2][2]; Matrix()&#123;memset(v,0,sizeof v);&#125; Matrix operator * (const Matrix &amp;rhs) const &#123; Matrix res; for(int i=0;i&lt;2;++i) for(int k=0;k&lt;2;++k) if(v[i][k]) for(int j=0;j&lt;2;++j) res.v[i][j]=add(res.v[i][j],mul(v[i][k],rhs.v[k][j])); return res; &#125;&#125;st,trans,I;Matrix fpow(Matrix a,ll b)&#123; Matrix res=I; while(b) &#123; if(b&amp;1) res=res*a; a=a*a; b&gt;&gt;=1; &#125; return res;&#125;int main()&#123; I.v[0][0]=I.v[1][1]=1; ll b=read(),d=read(),n=read(); if(n==0) return printf("1\n")&amp;0; if(n==1) return printf("%lld\n",floor((double)((b+sqrt(d))/2)))&amp;0; st.v[0][0]=((b*b+d)/2)%P,st.v[1][0]=b; trans.v[0][0]=b,trans.v[0][1]=((d-b*b)/4)%P,trans.v[1][0]=1; st=fpow(trans,n-2)*st; ll ans=st.v[0][0]; if(n%2==0 &amp;&amp; b*b&lt;d) --ans; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>矩阵优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191012]]></title>
    <url>%2F2019%2F10%2F12%2Ftest20191012%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>数学</tag>
        <tag>树状数组</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191011]]></title>
    <url>%2F2019%2F10%2F11%2Ftest20191011%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX184sCInXz4XwMy9P2FiFnq91O9vrSxew//kpVsKKnKmAXqjjuDqD2EA0Xj6tugBFXWPdvyVxm1vhRCQZoPh8shWhAu69ZAMXE2YIwBx/cWqylsOqzlpeEfdmN01et404Y8Q64AfDBMVyK4qLFxZyidjpgIgVVIAT3LwyBR5/R4HKBUJ8eMSPuA0dnEGjORXeJ9WYUroWflPLmIQxkCe3dOlyxoyoeXutq1sz9sCYV2qFWfYnYZFZDkVrXu/mNnxi2bO0WAGbbxVRkhCCPzzUG6hwTTxSuNiBszRW0U7eIFzOLXwvsLzFh8D07Z7cLlnKF65rcS94YcsNrLo6tLeZFMNpUMHT5+EVUpE6EQyT1DVYguyaV9Cq82qnIrcLWFq5gAJOgbfEApLpHCEMIdvd21eocGfrtzstKJzxAdYErE7ARWLWedXiodUycwy9ZC+FOI/fuQg6BSV40E5Eh4gwgeWiG7KVPbBQFIbhi5l+TTzXMM7DASLB6sEMw8WSDdnD8rpMYTV8q4JmTQOpQazvMhR1JQXWEgUUPOYtbf3g+RzzDZhkXfZ8TTtySBRMwp9mkEd8oZFvPz5/G6vqGyhTW9sg3uqTriOkv3/lq0RX6BSG7gnc6QNRtvpN9bpx9SBc1UVm+EwPzhoNT8+RB47e2EJABbGZpFO2acnyLUR/74yHZSYIefipCvTbCRECUNkrTEvDl6Gw+wfGvPvscrNagcqKFurQgOGh60Gb/zvLlhdUuGlQb7yjb9vyhoMbjNcP+dpYNqqmg5bUdVNZnzBJYVwzAikNW/1X7T1HF4pgl5yK3XCAPMZWVOV1StXXIi9Lu5XS2umpxhoVic1vyt8GY3MpRCuYJI8+0TFoIvMRyGWOtOeP6iBJaH7YYKm8EEskXjdmhtgCMXyCLG6HZg4mXwupYUiycK0kKTLFKOI0yYcD4Ee/PTI6gKVkbHMgfGZha6nY/vItXC+ZnvdfXDAZhe5ztTOTHnINjk/WrMyQG0iEs1asxBrJfOd8qwTjhFYPL0jD81yUX+HEuVlvrZ4ZWL8bJxL+D3CiJJVuLV0d9klvYgGiPSEOYxdnp8KivCQKuiWdqI8BYQdJkRaPrt12YlJSwU3e2BKbXaGXNHw284n/gz8/TxNpSBSicJfJHMCuRrIa5NtEq6hNFFYI8S74vd1mXdFCD9Wcj0= var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>二分</tag>
        <tag>倍增</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF985D Sand Fortress]]></title>
    <url>%2F2019%2F10%2F10%2FCF985D-Sand-Fortress%2F</url>
    <content type="text"><![CDATA[二分答案. 把 $n$ 个物品摆成一排,一个位置上可以放多个物品,但要满足两个限制. 第一个位置上放的物品数目不能超过 $H$ . 任意两个相邻位置上放的物品数目之差必须 $\le 1$ ,这个规则对于最后一个位置也适用,即最后一个位置必须恰好放 $1​$ 个物品. 求出摆下这 $n$ 个物品至少需要的位置数目. 首先需要注意到答案是可以二分的,因为差值可以为 $0$ ,所以多出来的位置总可以通过调整得到合法解. 考虑二分一个答案 $k$ ,于是需要求出 $k$ 个位置最多能放下的物品数目. 由于最后一个位置必须是 $1$ ,且第一个位置的所以 $k$ 个位置最优的方案一定是先上升,再下降到 $1$ . 感性理解一下. 判断一下直接这样放,第一个元素的位置是不是 $\le H$ 的,否则就只能从 $H$ 开始依次递减摆放. 如果二分答案的上界设为 $n$ ,对等差数列求和时会爆掉 $\rm long\ long$ . 可以对称的放,即高度从 $1$ 到某个 $x$ ,再到 $1$ .于是可以将上界设到 $2\sqrt n$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;ll n,H;ll sum(ll l,ll r)&#123; if(l&gt;r) swap(l,r); return (l+r)*(r-l+1)/2;&#125;bool check(ll k)&#123; if(k&lt;=H) return sum(1,k)&gt;=n; ll tot=sum(1,H-1); k-=H; if(k&amp;1) tot+=2*sum(H,H+k/2); else tot+=sum(H,H+k/2)+sum(H+k/2-1,H); return tot&gt;=n;&#125;int main()&#123; n=read(),H=read(); ll L=1,R=2*sqrt(n),ans; while(L&lt;=R) &#123; ll mid=(L+R)&gt;&gt;1; if(check(mid)) ans=mid,R=mid-1; else L=mid+1; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3997 组合数学]]></title>
    <url>%2F2019%2F10%2F10%2Fbzoj-3997-%E7%BB%84%E5%90%88%E6%95%B0%E5%AD%A6%2F</url>
    <content type="text"><![CDATA[$Dilworth$ 定理. 图是一张 $DAG$ ,根据 $Dilworth$ 定理,它的最小链覆盖数就等于最长反链长度. 一条反链中的任意两点间都不存在边,所以一定是从左下到右上的一条链. 设 $f(i,j)$ 表示用了以 $(i,j)$ 为右上角的矩阵中的点,最长反链的长度. 从左下到右上进行 $dp$ 即可. 1234567891011121314151617181920212223242526272829303132333435363738394041//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e3+10;int n,m,val[MAXN][MAXN];ll f[MAXN][MAXN];int main()&#123; int T=read(); while(T--) &#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) val[i][j]=read(); memset(f,0,sizeof f); for(int i=n;i&gt;=1;--i) for(int j=1;j&lt;=m;++j) &#123; f[i][j]=0; f[i][j]=max(f[i][j],f[i+1][j]); f[i][j]=max(f[i][j],f[i][j-1]); f[i][j]=max(f[i][j],f[i+1][j-1]+val[i][j]); &#125; printf("%lld\n",f[1][m]); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>DAG</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1168A Increasing by Modulo]]></title>
    <url>%2F2019%2F10%2F10%2FCF1168A-Increasing-by-Modulo%2F</url>
    <content type="text"><![CDATA[二分答案 + 贪心. 给出一个长度为 $n$ 的自然数序列 $a$ ,满足 $a_i\in [0,m)$ . 每次操作可以选出任意个元素进行修改,元素 $x$ 在修改后会变为 $(x+1)\bmod m$ . 需要求出至少操作几次,可以使得整个序列单调不降. 可以二分一个答案 $k$ ,则只需判断在 $k$ 次操作内能否达到要求. 贪心一下,如果一个数能在 $k​$ 次操作内变成上一个数,就把它变过去. 否则不变,若此时它比上个数小,就不合法了. 一个比较显然的答案上界是 $m$ ,因为操作 $m$ 次一定可以让所有数变成 $0$ . 时间复杂度 $O(n\log m)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=3e5+10;int n,m,a[MAXN];bool check(int k)&#123; int lst=0; for(int i=1;i&lt;=n;++i) &#123; int x=a[i]; if((x&lt;=lst &amp;&amp; x+k&gt;=lst) || (x&gt;lst &amp;&amp; x+k-m&gt;=lst)) continue; else &#123; if(x&lt;lst) return false; lst=x; &#125; &#125; return true;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); int L=0,R=m,ans; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(check(mid)) ans=mid,R=mid-1; else L=mid+1; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>二分</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF360E Levko and Game]]></title>
    <url>%2F2019%2F10%2F10%2FCF360E-Levko-and-Game%2F</url>
    <content type="text"><![CDATA[最短路 + 贪心. 有一张 $n$ 个点, $m+k$ 条边的有向图,可能存在重边与自环. 前 $m$ 条边的长度是给定的,你需要为后 $k$ 条边分别钦定长度,其中第 $i$ 条边的长度必须在区间 $[l_i,r_i]$ 中. 给出三个点 $s_1,s_2,f$ ,求一种钦定的方案,使得 $s_1\to f$ 的最短路长度小于 $s_2\to f$ 的最短路长度. 如果不能达到上述要求,就给出一种使两者相等的钦定方案. 若两个要求都无法达到,输出 LOSE . 首先可以确定,对于这 $k$ 条边,每条边的权值只可能是 $l_i$ 或者 $r_i$ . 因为权值取在中间时,可以往两边调整,至少有一边不会更劣. 于是可以先将它们的权值都设为 $r_i$ ,分别以 $s_1,s_2$ 作为起点跑一遍 $Dijkstra$ . 对于一条可以改的边 $u\to v$ ,若 $dis(s_1,u)\le dis(s_2,u)$ ,就把它的权值改为 $l_i$ . 因为它更可能出现在 $s_1\to f$ 的最短路上. 最简单的想法是,每次改了一条边之后,重新计算一遍距离,再去找需要改的边. 但实际上可以一次将所有的边改完,再去重新计算距离,这样做是等价的. 用三角形不等式,可以证明每次修改后,没有 $dis(s_1,u)\le dis(s_2,u)$ 变成 $dis(s_1,u)&gt;dis(s_2,u)$ 的情况. 时间复杂度 $O(k(m+k)\log n)$. 用链表删掉已经改过的边,否则复杂度会退化. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const ll inf=9e18;const int MAXN=1e4+10;int n,m,k,s1,s2,f;typedef pair&lt;ll,int&gt; pli;#define mp make_pairpriority_queue&lt;pli&gt; q;struct Graph&#123; int ecnt,to[MAXN],nx[MAXN],head[MAXN],val[MAXN]; void addedge(int u,int v,int w) &#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; val[ecnt]=w; head[u]=ecnt; &#125; int vis[MAXN]; ll dis[MAXN]; void Dijkstra(int S) &#123; for(int i=1;i&lt;=n;++i) dis[i]=inf,vis[i]=0; dis[S]=0; q.push(mp(-dis[S],S)); while(!q.empty()) &#123; int u=(q.top()).second; q.pop(); if(vis[u]) continue; vis[u]=1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(dis[v]-dis[u]&gt;val[i]) &#123; dis[v]=dis[u]+val[i]; q.push(mp(-dis[v],v)); &#125; &#125; &#125; &#125;&#125;G1,G2;int id[MAXN],x[MAXN],y[MAXN],l[MAXN],r[MAXN];int ans[MAXN];int pre[MAXN],nxt[MAXN];void del(int x)&#123; int l=pre[x],r=nxt[x]; pre[r]=l; nxt[l]=r;&#125;int main()&#123; n=read(),m=read(),k=read(); s1=read(),s2=read(),f=read(); for(int i=1;i&lt;=m;++i) &#123; int u=read(),v=read(),w=read(); G1.addedge(u,v,w); G2.addedge(u,v,w); &#125; nxt[0]=1; for(int i=1;i&lt;=k;++i) &#123; pre[i]=i-1,nxt[i]=i+1; x[i]=read(),y[i]=read(); l[i]=read(),r[i]=read(); G1.addedge(x[i],y[i],r[i]); G2.addedge(x[i],y[i],r[i]); id[i]=G1.ecnt; ans[i]=r[i]; &#125; pre[k+1]=k; while("RLDAKIOI") &#123; G1.Dijkstra(s1); G2.Dijkstra(s2); bool flag=false; for(int i=nxt[0];i!=k+1;i=nxt[i]) if(G1.val[id[i]]!=l[i] &amp;&amp; G1.dis[x[i]]&lt;=G2.dis[x[i]]) &#123; G1.val[id[i]]=l[i]; G2.val[id[i]]=l[i]; ans[i]=l[i]; flag=true; del(i); &#125; if(!flag) break; &#125; G1.Dijkstra(s1); G2.Dijkstra(s2); if(G1.dis[f]&lt;=G2.dis[f]) &#123; if(G1.dis[f]&lt;G2.dis[f]) puts("WIN"); else puts("DRAW"); for(int i=1;i&lt;=k;++i) printf("%d ",ans[i]); puts(""); &#125; else puts("LOSE"); return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>codeforces</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2289 在美妙的数学王国中畅游]]></title>
    <url>%2F2019%2F10%2F09%2FLoj-2289-%E5%9C%A8%E7%BE%8E%E5%A6%99%E7%9A%84%E6%95%B0%E5%AD%A6%E7%8E%8B%E5%9B%BD%E4%B8%AD%E7%95%85%E6%B8%B8%2F</url>
    <content type="text"><![CDATA[$LCT$ + 泰勒展开. 如果只有类型 $3$ 的函数,就直接用 $LCT$ 维护路径上的 $\sum a,\sum b$ . 对于前两种函数,题面都明示你了,进行麦克劳林展开,就变成多项式函数了.$$\sin(ax+b)=\sin (b)+\frac{a\cos(b)\cdot x}{1!}-\frac{a^2\sin(b)\cdot x^2}{2!}-\frac{a^3\cos(b)\cdot x^3}{3!}+\frac{a^4\sin(b)x^4}{4!}+\dots \\e^{ax+b}=e^b+\frac{ae^b\cdot x}{1!}+\frac{a^2e^b\cdot x^2}{2!}+\frac{a^3e^b\cdot x^3}{3!}+\frac{a^4e^b\cdot x^4}{4!}$$拆到 $12$ 项,精度差不多就够用了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10,L=12;double fac[L];struct node&#123; int fa,ch[2]; double poly[L],a,b; int rev,f;&#125;Tree[MAXN];#define root Tree[x]#define lson Tree[root.ch[0]]#define rson Tree[root.ch[1]]bool isroot(int x)&#123; return Tree[root.fa].ch[0]!=x &amp;&amp; Tree[root.fa].ch[1]!=x;&#125;void reverse(int x)&#123; if(!x) return; swap(root.ch[0],root.ch[1]); root.rev^=1;&#125;void pushup(int x)&#123; for(int i=0;i&lt;L;++i) root.poly[i]=lson.poly[i]+rson.poly[i]; if(root.f==1) &#123; double Sinb=sin(root.b),Cosb=cos(root.b),pw=1.0; for(int i=0;i&lt;L;i+=4) &#123; root.poly[i]+=Sinb*pw/fac[i],pw*=root.a; root.poly[i+1]+=Cosb*pw/fac[i+1],pw*=root.a; root.poly[i+2]+=-Sinb*pw/fac[i+2],pw*=root.a; root.poly[i+3]+=-Cosb*pw/fac[i+3],pw*=root.a; &#125; &#125; else if(root.f==2) &#123; double Expb=exp(root.b),pw=1.0; for(int i=0;i&lt;L;++i) &#123; root.poly[i]+=Expb*pw/fac[i]; pw*=root.a; &#125; &#125; else if(root.f==3) &#123; root.poly[1]+=root.a; root.poly[0]+=root.b; &#125;&#125;void pushdown(int x)&#123; if(root.rev) &#123; reverse(root.ch[0]); reverse(root.ch[1]); root.rev=0; &#125;&#125;void rotate(int x)&#123; int y=Tree[x].fa; int z=Tree[y].fa; int k=(Tree[y].ch[1]==x); if(!isroot(y)) Tree[z].ch[Tree[z].ch[1]==y]=x; Tree[x].fa=z; Tree[y].ch[k]=Tree[x].ch[k^1]; Tree[Tree[x].ch[k^1]].fa=y; Tree[x].ch[k^1]=y; Tree[y].fa=x; pushup(y);&#125;int stk[MAXN],tp=0;void Splay(int x)&#123; stk[++tp]=x; for(int pos=x;!isroot(pos);pos=Tree[pos].fa) stk[++tp]=Tree[pos].fa; while(tp) pushdown(stk[tp--]); while(!isroot(x)) &#123; int y=Tree[x].fa,z=Tree[y].fa; if(!isroot(y)) (Tree[y].ch[0]==x)^(Tree[z].ch[0]==y)?rotate(x):rotate(y); rotate(x); &#125; pushup(x);&#125;void Access(int x)&#123; for(int y=0;x;y=x,x=Tree[x].fa) &#123; Splay(x); Tree[x].ch[1]=y; pushup(x); &#125;&#125;void makeroot(int x)&#123; Access(x); Splay(x); reverse(x);&#125;int findroot(int x)&#123; Access(x); Splay(x); while(Tree[x].ch[0]) x=Tree[x].ch[0]; return x;&#125;void split(int x,int y)&#123; makeroot(x); Access(y); Splay(y);&#125;void Link(int x,int y)&#123; makeroot(x); Tree[x].fa=y;&#125;void Cut(int x,int y)&#123; split(x,y); Tree[y].ch[0]=0; Tree[x].fa=0;&#125;int n,m;char buf[20];int main()&#123; fac[0]=1.0; for(int i=1;i&lt;L;++i) fac[i]=fac[i-1]*(double)(i); n=read(),m=read(); scanf("%s",buf); for(int i=1;i&lt;=n;++i) &#123; Tree[i].f=read(); scanf("%lf%lf",&amp;Tree[i].a,&amp;Tree[i].b); pushup(i); &#125; for(int i=1;i&lt;=m;++i) &#123; scanf("%s",buf); if(buf[0]=='a') &#123; int u=read()+1,v=read()+1; Link(u,v); &#125; else if(buf[0]=='d') &#123; int u=read()+1,v=read()+1; Cut(u,v); &#125; else if(buf[0]=='m') &#123; int c=read()+1; makeroot(c); Tree[c].f=read(); scanf("%lf%lf",&amp;Tree[c].a,&amp;Tree[c].b); pushup(c); &#125; else if(buf[0]=='t') &#123; int u=read()+1,v=read()+1; double x; scanf("%lf",&amp;x); if(findroot(u)!=findroot(v)) puts("unreachable"); else &#123; split(u,v); double ans=0; for(int i=L-1;i&gt;=0;--i) ans=ans*x+Tree[v].poly[i]; printf("%.8e\n",ans); &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>LCT</tag>
        <tag>泰勒展开</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4198 荷马史诗]]></title>
    <url>%2F2019%2F10%2F08%2Fbzoj-4198-%E8%8D%B7%E9%A9%AC%E5%8F%B2%E8%AF%97%2F</url>
    <content type="text"><![CDATA[贪心. $k$ 叉 $Huffman$ 树编码问题,可以等价为每次最多合并 $k$ 个果子的合并果子问题. 这是因为两者的合并树是相同的. 于是就像合并果子那样贪心,维护一个小根堆,每次取出前 $k$ 小的元素合并,需要先补 $0$ ,使得每次都恰好合并 $k$ 个. 这道题还需要让最大的长度最小,所以在权值相同时,按照深度从小到大排序,优先合并深度小的. 时间复杂度 $O(n\log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;typedef pair&lt;ll,int&gt; pli;#define mp make_pairint n,k,mx=0;ll ans=0;priority_queue&lt;pli&gt; q;int main()&#123; n=read(),k=read(); for(int i=1;i&lt;=n;++i) q.push(mp(-read(),-1)); while((n-1)%(k-1)) &#123; q.push(mp(-0,-1)); ++n; &#125; while(q.size()&gt;1) &#123; ll val=0; int mxd=0; for(int i=1;i&lt;=k;++i) &#123; val-=(q.top()).first; mxd=max(mxd,-(q.top()).second); q.pop(); &#125; q.push(mp(-val,-mxd-1)); ans+=val; mx=max(mx,mxd); &#125; cout&lt;&lt;ans&lt;&lt;endl&lt;&lt;mx&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3211 花神游历各国]]></title>
    <url>%2F2019%2F10%2F08%2Fbzoj-3211-%E8%8A%B1%E7%A5%9E%E6%B8%B8%E5%8E%86%E5%90%84%E5%9B%BD%2F</url>
    <content type="text"><![CDATA[线段树. 对于修改操作,若区间内全为 $1$ ,就跳过,否则就暴力开根. 利用线段树维护区间和. 因为每个数是不会增大的,所以每个数最多被开 $\log \log a_i$ 次根号就被开成 $1$ 了. 时间复杂度 $O(m\log n+n\log \log a)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113//%std#include&lt;bits/stdc++.h&gt;#define rg registerusing namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;inline int Sq(int x)&#123; return (int)(sqrt(x));&#125;const ll inf=9e18;const int MAXN=1e5+10;int n,m,a[MAXN];struct node&#123; int mx; ll sum;&#125; Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1]void pushup(int o)&#123; root.mx=max(lson.mx,rson.mx); root.sum=lson.sum+rson.sum;&#125;void BuildTree(int o,int l,int r)&#123; if(l==r) &#123; root.sum=root.mx=a[l]; return; &#125; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); pushup(o);&#125;int query_mx(int o,int l,int r,int L,int R)&#123; if(L&lt;=l &amp;&amp; r&lt;=R) return root.mx; int res=0; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) res=max(res,query_mx(o&lt;&lt;1,l,mid,L,R)); if(R&gt;mid) res=max(res,query_mx(o&lt;&lt;1|1,mid+1,r,L,R)); return res;&#125;ll query_sum(int o,int l,int r,int L,int R)&#123; if(L&lt;=l &amp;&amp; r&lt;=R) return root.sum; ll res=0; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) res+=query_sum(o&lt;&lt;1,l,mid,L,R); if(R&gt;mid) res+=query_sum(o&lt;&lt;1|1,mid+1,r,L,R); return res;&#125;void Rebuild(int o,int l,int r,int L,int R)&#123; if(root.mx&lt;=1) return; if(l==r) &#123; root.mx=root.sum=Sq(root.mx); return; &#125; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) Rebuild(o&lt;&lt;1,l,mid,L,R); if(R&gt;mid) Rebuild(o&lt;&lt;1|1,mid+1,r,L,R); pushup(o);&#125;void Sqrt(int L,int R)&#123; int mx=query_mx(1,1,n,L,R); if(mx&lt;=1) return; Rebuild(1,1,n,L,R);&#125;int main()&#123; n=read(); for(rg int i=1; i&lt;=n; ++i) a[i]=read(); BuildTree(1,1,n); m=read(); for(rg int i=1; i&lt;=m; ++i) &#123; int op=read(),L=read(),R=read(); if(op==1) printf("%lld\n",query_sum(1,1,n,L,R)); else Sqrt(L,R); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1229]]></title>
    <url>%2F2019%2F10%2F08%2FCF1229%2F</url>
    <content type="text"><![CDATA[$Div.1$ A Marcin and Training Camp 有 $n$ 个人,每个人有一个集合,用二进制数 $a_i$ 表示,以及一个能力值 $b_i$ . 现在需要选出一些人形成一个大小 $\ge 2$ 的集合 $S$ ,满足 $\forall i\in S,\exists j\not=i,a_i \&amp; a_j=a_i$ . 需要求出最大的 $\sum_{i\in S}b_i$ ,无解输出 $0$ . 容易发现,选出的人中至少有两个人的 $a_i$ 是相同的,即形成自环.否则就会存在拓扑序,至少存在一个不合法的元素. 可以先将有相同的元素都选上. 对于其他元素,只需要判一下能否被那些有相同的元素限制,即找到 $a_i \&amp; a_j=a_i$ 的 $j$ ,内部不需要判断. 这是因为 $a_i \&amp; a_j=a_i$ 这个关系是可以传递的. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=7777;int n,m;struct node&#123; ll first; int second; bool operator &lt; (const node &amp;rhs) const &#123; return first&lt;rhs.first; &#125; bool operator == (const node &amp;rhs) const &#123; return first==rhs.first; &#125; &#125;a[MAXN],p[MAXN],q[MAXN];unordered_map&lt;ll,bool&gt; vis;int main()&#123; n=read(); int t=0; if(n==1) return puts("0")&amp;0; for(int i=1;i&lt;=n;++i) a[i].first=read(); for(int i=1;i&lt;=n;++i) a[i].second=read(); sort(a+1,a+1+n); for(int i=1;i&lt;=n;++i) &#123; if(vis[a[i].first]) q[++t]=a[i]; else p[++m]=a[i]; vis[a[i].first]=true; &#125; for(int i=1;i&lt;=t;++i) p[m+i]=q[i]; ll ans=0; for(int i=1;i&lt;=m;++i) &#123; bool f=false; for(int j=m+1;j&lt;=n &amp;&amp; !f;++j) if((p[i].first&amp;p[j].first)==p[i].first) f=true; if(f) ans+=p[i].second; &#125; if(!ans) return puts("0")&amp;0; for(int i=m+1;i&lt;=n;++i) ans+=p[i].second; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; B Kamil and Making a Stream 给一棵以 $1$ 为根的有根树,每个点有一个权值 $x_i$ . 设 $f(x,y)$ 表示从 $x$ 到 $y$ 的路径上所有权值的 $\gcd$ . 需要求出$\sum_{\text {u is an ancestor of v}} f(v,u)$ ,答案对 $10^9+7$ 取模. 一个点到根的路径上,不同的 $\gcd$ 最多只有 $\log x$ 种,因为 $\gcd$ 每次改变时至少会 $/2$ . 于是倍增处理每个点向上跳 $2^i$ 步这段的 $\gcd$ 进行处理. 或者 $dfs$ 时直接把 $\gcd$ 的 $vector$ 数组传下来,相同的数合并,只记录次数. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;ll gcd(ll a,ll b)&#123; return b?gcd(b,a%b):a;&#125;const int P=1e9+7;inline int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=1e5+10,L=17;int n,ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;struct node&#123; ll v; int t; bool operator &lt; (const node &amp;rhs) const &#123; return v&lt;rhs.v; &#125; node(ll v=0,int t=0):v(v),t(t) &#123;&#125;&#125;;int ans=0;ll val[MAXN];vector&lt;node&gt; G[MAXN],tmp;void dfs(int u,int f)&#123; G[u].push_back(node(val[u],1)); for(auto x:G[f]) G[u].push_back(node(gcd(x.v,val[u]),x.t)); sort(G[u].begin(),G[u].end()); ll cv=-1; int ct=0; for(auto x:G[u]) &#123; if(cv!=x.v) &#123; if(cv!=-1) tmp.push_back(node(cv,ct)),ans=add(ans,mul(cv%P,ct)); cv=x.v; ct=x.t; &#125; else ct+=x.t; &#125; tmp.push_back(node(cv,ct)); ans=add(ans,mul(cv%P,ct)); G[u]=tmp; tmp.clear(); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==f) continue; dfs(v,u); &#125;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) val[i]=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; dfs(1,0); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; C Konrad and Company Evaluation 有 $n$ 个人,每个人有一个工资,初始时等于他的编号. 给出一张图,对于一条边 $(u,v)$ ,若 $u$ 的工资比 $v$ 高,则从 $u$ 连向 $v$ ,否则从 $v$ 连向 $u$ . 有 $q$ 次询问,第 $i$ 次询问给出一个 $x$ ,表示将第 $x$ 个人的工资改为 $n+i$ ,再求出图中长度为 $3$ 的链的数目. 将 $a$ 向 $b$ 炫耀看成一条有向边 $a\to b$ . 记录每个点的入度 $indeg_i$ 和出度 $outdeg_i$ ,答案为 $\sum_i indeg_i\cdot outdeg_i$ . 每次将 $v$ 的工资调到最大,就是将所有 $u\to v$ 的边全部反向. 只要将这些边一条条的暴力反向的同时维护答案就可以了. 通过一些势能分析,可以得出每次修改时均摊反向 $O(\sqrt m)$ 条边. 时间复杂度 $O(n+m+q\cdot \sqrt m)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;ll gcd(ll a,ll b)&#123; return b?gcd(b,a%b):a;&#125;const int P=1e9+7;inline int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=1e5+10,L=17;int n,ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;struct node&#123; ll v; int t; bool operator &lt; (const node &amp;rhs) const &#123; return v&lt;rhs.v; &#125; node(ll v=0,int t=0):v(v),t(t) &#123;&#125;&#125;;int ans=0;ll val[MAXN];vector&lt;node&gt; G[MAXN],tmp;void dfs(int u,int f)&#123; G[u].push_back(node(val[u],1)); for(auto x:G[f]) G[u].push_back(node(gcd(x.v,val[u]),x.t)); sort(G[u].begin(),G[u].end()); ll cv=-1; int ct=0; for(auto x:G[u]) &#123; if(cv!=x.v) &#123; if(cv!=-1) tmp.push_back(node(cv,ct)),ans=add(ans,mul(cv%P,ct)); cv=x.v; ct=x.t; &#125; else ct+=x.t; &#125; tmp.push_back(node(cv,ct)); ans=add(ans,mul(cv%P,ct)); G[u]=tmp; tmp.clear(); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==f) continue; dfs(v,u); &#125;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) val[i]=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; dfs(1,0); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; D Wojtek and Card Tricks 给出 $n$ 个长度为 $k$ 的置换, $n\le 2\times 10^5,k\le 5$ . 定义 $f(l,r)$ 表示只用第 $l$ 个到第 $r$ 个置换对排列 $1,2,3,\dots,k$ 进行若干次操作,最多能得到的排列的数目. 需要求出 $\sum_{l=1}^n \sum_{r=l}^n f(l,r)$ . 对于每个左端点 $l$ ,先预处理出从 $l$ 向后走,哪些置换是第一次出现的,这可以从后往前扫一遍完成. 枚举左端点 $l$ ,只用考虑从 $l$ 开始第一次出现的置换,最多只有 $k!$ 个,其它地方答案不变,可以直接计算. 加入一个新的置换时,如果它能被已经加入的置换组合出,就没有用,直接跳过. 否则,直接大力 $bfs$ 出所有已经加入的有用的置换能操作出的排列,若答案改变,说明这个排列有用. 状态数最多为 $k!$ ,而有用的置换不会超过 $O(\log k!)$ 个,所以每加入一个有用的置换复杂度为 $O(k!\log k!)$ . 时间复杂度 $O((k!)^2+nk!k)$ . 常数没卡过去,不想卡了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10,MAXS=120;typedef vector&lt;int&gt; perm;map&lt;perm,int&gt; id;int n,k,idx=0;int calc(perm p)&#123; if(id.find(p)==id.end()) id[p]=idx++; return id[p];&#125;perm p[MAXN];perm lst,pos[MAXN];perm rep;int S,vis[MAXS],tid;queue&lt;int&gt; Q;int ts=0,pt;int G[MAXS][MAXS];perm p1,p2,p3;void init()&#123; p1.resize(k),p2.resize(k),p3.resize(k); for(int i=0;i&lt;k;++i) p1[i]=p2[i]=i; for(int i=0;i&lt;S;++i) &#123; for(int j=0;j&lt;S;++j) &#123; for(int t=0;t&lt;k;++t) p3[t]=p2[p1[t]]; G[calc(p1)][calc(p2)]=calc(p3); next_permutation(p2.begin(),p2.end()); &#125; next_permutation(p1.begin(),p1.end()); &#125;&#125;int bfs()&#123; ++tid; int res=ts; int st,newst; if(vis[0]&lt;=pt) res++; vis[0]=tid; Q.push(0); int tot=rep.size(); while(!Q.empty()) &#123; st=Q.front(); Q.pop(); if(vis[st]==tid) &#123; for(auto trans:rep) &#123; newst=G[st][trans]; if(vis[newst]&lt;=pt) &#123; ++res; vis[newst]=tid; Q.push(newst); &#125; &#125; &#125; else &#123; int trans=rep[tot-1]; newst=G[st][trans]; if(vis[newst]&lt;=pt) &#123; ++res; vis[newst]=tid; Q.push(newst); &#125; &#125; &#125; return ts=res;&#125;int main()&#123; n=read(),k=read(); for(int i=0; i&lt;n; ++i) &#123; S=1; for(int j=0; j&lt;k; ++j) p[i].push_back(read()-1),S*=(j+1); &#125; init(); lst.resize(S); for(int i=0; i&lt;S; ++i) lst[i]=n; for(int i=n-1; i&gt;=0; --i) &#123; int x=calc(p[i]); lst[x]=i; pos[i]=lst; sort(pos[i].begin(),pos[i].end()); &#125; ll ans=0; for(int l=0; l&lt;n; ++l) &#123; rep.clear(); ts=0; pt=tid; int tmp=1,head=-1; for(auto x:pos[l]) &#123; if(x==n) break; if(head!=-1) ans+=1LL*tmp*(x-head); head=x; if(vis[calc(p[x])]&gt;pt) continue; rep.push_back(calc(p[x])); int newtmp=bfs(); if(newtmp==tmp) rep.pop_back(); else tmp=newtmp; &#125; ans+=1LL*tmp*(n-head); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>codeforces</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191007-eve]]></title>
    <url>%2F2019%2F10%2F08%2Ftest20191007-eve%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX1886MmnuKzgG8SlznepS/wjHA7cS4IWMOJNVioJf+jpgUPudeABKfTD/GqpVRsKG1o7m3Su71dsgHm+eWL+PVjCTD8U4Qawurt1tKMOhAIVPKHsFs/EMSzg2Q742e9tR8SiRS+TPvOfX2sPdzDgQ9WKtEDuVdBNCg1JZFrD1BjR7JR+4oYf8JRjuDTdomsStS9kQ5Z5ksq7cMa586ydnc4/ITrvmo1KCz+HsNKPEySSxVzGLq9R21WuG0Tx6o3EZr78TanpKnvbKTTclWynyRqwq+dsphAOR3aOyB0QtJuVuP/9/uXqv35Z9AQajNGp5wurzhAi6wcnE3TWw3TXMnmZljokFlaRDETmnNFhutKAkX05f2efqxDXPK7peWg5QM8A2BKEend0kPHC7zhJ9zERp0WLkpSOAQaAIuJlt1W1TDll6RuurrSwLbqws4Gp46jumwyfNA6OUysPrMJ8iqVjQuPHLK8Nmas6JPN9ckt8IEXTkDxTecVEz2FPgJaZcuo5gL9CsIJaChPw0H5ydIpLzpCrO/Pt6UaCUXiwttqYbPexFnX5QvPQGFFH+EKp9glSDAR0phrEmgp4zU8qJ9vsCamp0L4y1Bhrm6RPKBCJgSp/Oz4zM8T3l9bD0PsE1tdACG4AH6pNNXK8GTgZOvDIE3wi9HUyxAulwIIi4tg6IwvoE0kZ1tWz8aJtBy0YUxf1z1+e2+3mIIopDcc2gCl7PsF0zfeWrCzGtzV/0VZAMhkSF7iatYuJnwMKWopVOBozCzGhnCecsD/HMZugaD3rA6LH8tohp5lWPc3XIl5Gp1pzpTx67Vhs5iESZaYxMtSQAgAd2m9g4zJQIQYPKJkco9WsM7xgNvCacBEJaNmzQRfiLAniwYFhP/BwrBqLkWA7vghlM43e3j2KlfOGNfqVMGMKA2NVuHKkskC4InFIz1vPG43qq4Q1sOPLGx3+Ao6c+53ZZ/FcKkKNctxxGfqkEFxWmhFa08JGTGJ435zhw8KKf2+jgaR7c54awq3tOnv5JfYVmADePLMD6UrMlA8xy9rteBBLxtMkT9Hjh5vbRKniCfmOGIefrwLw+/o0p2hgEAdwxCeMSskFGmQ8UWA5MfPbqgE6u0soSZRpOBpfBnwYaANrby3nPtEocaspIPz2YmkVOWa7nj2TlxirARAEedJGeMEQoOT2BBZwpVX217OqxhG12rEGbfEm52rpySbEfWH0WHFZSlIoNanvDw1BYG+hjJIL1533ZS/uJ4Zd4uR6sU3AxggZtarg1rGqvol1mUlmLQ7XNGyTUy+dEN/vlSh3VA7JJ4njwKFCzJbapQc8sO6Nx+RE5kn++lqXzGCWYjhNWA5/OwgyNXeZAS2+uVC3ZZcjw0xKkQY6Amm+Kny+M3Qx/h9ChcY3Qj5t7jN3WhMPgLyOosS6W7UJIFPBvenXDkbBoBIC/R6DMaeWVRjf0yJL0MrbrUhDQEz7N5uewNC5Ja/7ddA3mwlyDLGBhpMFIgpO/i9OR7ubS6AWHjlAo+JJ8tprbkVJGbIIsBhgfQbWT2bqVHz/aseu6wFgQNR/A4FfxBvE4ZuL6whY9rqyMHhczCXnG5p+gdIBTIMT0vvzxPkCKE9JE56AhJkAdN+sVw3EG9LLlH/z5hWR6jRiNB873rw4e/gP9RUuOLJsYJaguWOHLO+M0DvaH9nRE7U8nXD4j3UXNoAduvy0+VbzrOGBTW7JiotcQF3fXU1SX7RY5L1rwQ== var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>线段树</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191007-am]]></title>
    <url>%2F2019%2F10%2F07%2Ftest20191007-am%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>构造</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 5416 冒泡排序]]></title>
    <url>%2F2019%2F10%2F06%2Fbzoj-5416-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[观察结论 + $dp$ 计数. 通过提示,可以发现一个排列合法,当且仅当它的最长下降子序列长度 $&lt;3$ . 否则,若存在 $\ge 3$ 的下降子序列,中间的元素需要先与左边的交换,再与右边的交换,就存在了冗余的步数,不合法. 而根据 $Dirworth$ 定理,该条件又等价于这个排列能被 $2$ 个上升子序列覆盖. 从前往后依次填入所有数,设 $f(i,j)$ 表示还有 $i$ 个数没填,且这 $i$ 个数中有 $j$ 个数大于已经填入的最大值的方案数. 转移时,枚举填的数是这 $j$ 个数中的第 $k$ 小,若 $k=0$ ,则表示填入的数不在这 $j$ 个数中.$$f(i,j)=\sum_{k=0}^j f(i-1,j-k)$$容易发现它是个前缀和,$$f(i,j)=f(i,j-1)+f(i-1,j)$$而 $f(i,i)=0$ ,即不合法,那么可以看出 $f(i,j)$ 的组合意义. 它表示从 $(0,0)$ 出发,每次可以向右方或上方走一步,在中途不触碰直线 $y=x$ ,到达 $(i,j)$ 的方案数. 于是预处理阶乘及其逆元后,可以 $O(1)$ 求 $f(i,j)$ . 还有一个限制是字典序必须大于给出的排列 $p$ ,就像数位 $dp$ 那样做就可以了,时间复杂度 $O(n\log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b); &#125; int mul(int a,int b)&#123; return 1LL * a * b % P; &#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=6e5+10;int fac[MAXN&lt;&lt;1],invfac[MAXN&lt;&lt;1];void init(int N)&#123; fac[0]=1; for(int i=1;i&lt;=N;++i) fac[i]=mul(fac[i-1],i); invfac[N]=fpow(fac[N],P-2); for(int i=N-1;i&gt;=0;--i) invfac[i]=mul(invfac[i+1],i+1);&#125;int C(int M,int N)&#123; if(M&lt;0 || N&lt;0 || M&lt;N) return 0; return mul(fac[M],mul(invfac[N],invfac[M-N]));&#125;int f(int i,int j)&#123; return add(C(i+j-1,j),P-C(i+j-1,j-2));&#125;int n,a[MAXN],val[MAXN],pre[MAXN],suf[MAXN];struct FenwickTree&#123; int bit[MAXN];#define lowbit(x) x&amp;(-x) void init() &#123; memset(bit,0,sizeof bit); &#125; void add(int x,int c) &#123; for(;x&lt;=n;x+=lowbit(x)) bit[x]+=c; &#125; int query(int x) &#123; int s=0; for(;x;x-=lowbit(x)) s+=bit[x]; return s; &#125;&#125;T;void solve()&#123; n=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); T.init(); for(int i=n;i&gt;=1;--i) &#123; suf[i]=n-i-T.query(a[i]); T.add(a[i],1); pre[i]=i-1-(n-a[i]-suf[i]); &#125; int cnt=n,ans=0; for(int i=1;i&lt;=n;++i) &#123; if(!suf[i]) break; bool flag=(suf[i]&lt;cnt); cnt=min(cnt,suf[i]); ans=add(ans,f(n-i+1,cnt-1)); if(!flag &amp;&amp; pre[i]!=a[i]-1) break; &#125; cout&lt;&lt;ans&lt;&lt;endl;&#125;int main()&#123; init(MAXN-10&lt;&lt;1); int T=read(); while(T--) solve(); return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191004]]></title>
    <url>%2F2019%2F10%2F06%2Ftest20191004%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX18sLjOzU3gDUgFub+Fxlxd+/ruxkgNRxuKLtpVbp+ipgvMY+yDtSWq86B/O0JbF+xNDVhfTScd3dp6oOZ2ilPknO3lCsySwPJi0etIo4hyXcqGsdLARbn7pKwyFaCEvhrBALZh0TrasDy9ntU6VDFKCEQu9r7Bam/++FjHzam5tRYC8kze4tNNewjJiiMrfXhf0G5b02EoKHlrgOsYr7Lc0KtOqUII0bYEgwiIu5i10kjpe0rBKmmXsrBDmuyqO+aKlUpBvKXHIy1buBpvVPfeZwfaLXWSBROoiHW5tuDcMOPfeqnz8r8kZo/SxdnkE5kJx4Ar2AkFtVqPWfmfdkDZR1bBUxO4nQN3+Yhvd5OoKBp6pP8M8SOfuYta75A6OMdjdphvrkjqOT9lOqm/m6EtUVYZmNXUS1GCF0jL0QVOF6OHxgUjYILiudqax4bHnyah8cQB6JnW5DOsLNZDZLKq3rgQoesw+RpQtly1Z6c/1PTuXgvmGfKuJHwy44KA4hQlDrQtIix6vAuf/fqZP+3Wps2epM258bRuoUJxxpwfgLPyCMlY1EeDyIWI3sK2t4b6fby3yN+2SubXbeaKeE/D6Li5Fpw/13Uz63SDf8u/+Cxz6AQcZphumqXRL7++rW8ZkfxddX5vGtdZuNxFIfwTARw9kY9VXC5sKktfOBPZvsh5y6DuK5lnHRafEUSWHGjZSYFJvWmXn2QmvmGMa67BT5+8vlKVbJsksD1s1PLa4ITmvRRoArAng8/kc8XE6LfMH2ADKUfvB2uNI/ld7V2tBecSiNs+DS6g7ACMLfDp8VNlfdZYk/9EHZKa+mlf0cAQxERCxlCB0itWNWXZ1gf5VbpVobShy+vrHp4g8y3NFWoPKjNQmySYSYusQ1PJCiB7do0e1bAFxogOM+Hi8K9LXed+apTMiWQri10xtEqdAjatYKbpviIzY+LioiaA+yvsSXOgEVCy5SQm5LqTa7Dev53z//UF6fg85dhCNkFFmOfFV9Oa5MeQgvaLpYYg4IiQ/zHkPycmOaGX1Iv2UCHisy31Dm4lTDLYYynTSsIWRGwZl1kha5DUmnGR1uXubbpOG3lx/j/gdYFcnToGeY+Et7mGXlOyGLftEO2dWxVZCdRvbDQxxlo2vKXkE7TvR28A2bKKvGeojYuKsJatcaI341ERSrz07o+zapFkVzNl9j0xpLYxv+urH var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>并查集</tag>
        <tag>test</tag>
        <tag>meet in the middle</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20191001]]></title>
    <url>%2F2019%2F10%2F06%2Ftest20191001%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } }  var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>概率/期望</tag>
        <tag>矩阵加速</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1228]]></title>
    <url>%2F2019%2F09%2F30%2FCF1228%2F</url>
    <content type="text"><![CDATA[$Div.2$ A Distinct Digits$l,r$ 比较小,不需要数位 $dp$ ,直接按照题意模拟即可. B Filling the Grid每个 $r,c$ 都可以确定一些格子的颜色.如果出现矛盾,答案为 $0$ . 否则没有被确定颜色的 $k$ 个格子可以任意选颜色,答案为 $2^k$ . 写完直接测第三个样例,就交上去了,把 $C$ 写了才发现 $B$ 没过,没判无解的情况… C Primes and Multiplication$x$ 的各个质因子之间贡献独立,分开计算. 一个质因子 $p$ 的贡献显然是 $\prod p^{n/p^k}$ ,注意判断是否令 $k$ 增加 $1$ 继续循环时,需要用除法判断,否则会爆 $\rm long\ long$ . D Complete Tripartite先随便选一个点 $x$ ,尝试将所有点划分成两个集合. 将 $x$ 加入第一个集合,若 $y$ 与 $x$ 有边,则加入第二个集合,否则加入第一个集合. 然后再在第二个集合中选一个点 $x$ ,将第二个集合划分成两个集合. 若划分后出现了空集,则无解.最后需要判断一下集合内的点是否没有边,以及跨越集合的点对都有边. 可以枚举每一个点 $u$ 和它的邻居 $v$ ,判断所有的 $v$ 是否恰好覆盖了 $u$ 所在集合外的所有点. E Another Filling the Grid直接容斥,枚举有 $x$ 行 $y$ 列一定没有 $1$ . $x=n$ 或者 $y=n$ 的贡献只能算一次,因为它们都是覆盖了整个矩形,而其他情况显然都是互异的. F One Node is Gone注意到删掉一个点后,根节点一定是直径最中间的两个点之一. Case 1若删掉的点是根节点的儿子,直径会 $-1$ ,就可能产生两个答案,且根节点为直径最中间的那两个点之一. 还需要判断它们的子树是否都是满二叉树. Case 2删掉的点不是根节点的儿子,此时直径不变,为偶数,只可能有一个答案,且根节点为直径最中间的那一个点. 可以将剩下的树遍历一次,对于度数异常的点进行判断. 若度数为 $1$ 或 $3$ ,那么这个节点是正常的. 若度数为 $2$ ,那么被删的是它的儿子.只需判断它剩下的那个儿子是不是叶子. 若度数为 $4$ ,那么被删的是它的儿子.需要判断它的三个儿子的子树是否都是满二叉树,且高度为 $h,h,h+1​$ . 若度数 $&gt;4$ ,显然不合法. 若有多个度数异常的点,显然也不合法. 判断某个子树是否为满二叉树,可以对树 $dfs$ 处理. 这颗子树为满二叉树,当且仅当它是叶子,或左右儿子的子树都是满二叉树,且高度相同.]]></content>
      <tags>
        <tag>构造</tag>
        <tag>codefoces</tag>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190929]]></title>
    <url>%2F2019%2F09%2F29%2Ftest20190929%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Comet OJ 模拟赛Day2]]></title>
    <url>%2F2019%2F09%2F28%2FComet-OJ-%E6%A8%A1%E6%8B%9F%E8%B5%9BDay2%2F</url>
    <content type="text"><![CDATA[昨天忘打了,就只打了今天这一场. $reorder$像归并排序那样直接贪心就可以了. $prefix$把 $n$ 个串搞到 $Trie$ 树上,利用 $dfs$ 求出每个串的排名. 然后就是个类似于康拓展开的东西,用树状数组搞一搞. $monotony$ 一上来就口胡了个做法,写到最后一步的时候发现不会做了. 暂时先咕了.]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>树状数组</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190928]]></title>
    <url>%2F2019%2F09%2F28%2Ftest20190928%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>线段树分治</tag>
        <tag>高斯消元</tag>
        <tag>暴力</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190927]]></title>
    <url>%2F2019%2F09%2F27%2Ftest20190927%2F</url>
    <content type="text"><![CDATA[修数据场. $decoration$对单调不降,单调不增分别用树状数组维护 $dp$ 值. 转移时注意相邻两个元素相等时对两种序列都可以产生贡献. $path$从高位到低位贪心即可,用并查集判断只用当前这位为 $0$ 的边能否让 $1$ 与 $n$ 连通. $multiplication$判掉无解的情况,然后 $tarjan$ 缩点后在 $DAG$ 上 $dp$ 计数.]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>tarjan</tag>
        <tag>并查集</tag>
        <tag>树状数组</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190926]]></title>
    <url>%2F2019%2F09%2F26%2Ftest20190926%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190925]]></title>
    <url>%2F2019%2F09%2F25%2Ftest20190925%2F</url>
    <content type="text"><![CDATA[$CF\ vp$ 场. $per$用所有的方案 $n!$ 减去 $a$ 单调不减的方案,再减去 $b$ 单调不减的方案,再把 $a,b$ 都不减的方案加回来. $medium$记 $pr=\frac a b$ ,单场概率确定的情况下,答案只与点的个数有关. 设 $f(x)$ 表示有 $x$ 个点时,游戏总场次的期望.边界有 $f(0)=f(1)=0$ . 强连通分量在缩成一个点后,最终会形成一个 $\text{DAG}$ ,所以缩点前,一定存在一个出度为 $0$ 的强连通分量. 枚举这个出度为 $0$ 的强连通分量的大小进行转移.$$f(n)=\sum_{i=1}^n p(i)\cdot g(n,i)\cdot (f(i)+f(n-i)+i\cdot(n-i)+{i\choose 2})$$其中 $p(i)$ 表示 $i$ 个点形成强连通分量的概率, $g(n,i)$ 表示从 $n$ 个点中选出 $i$ 个点,被其他 $n-i$ 个点打败的概率. 注意到枚举时有 $f(n)$ 转移到自己的情况,所以要移项解方程来计算. 考虑如何计算 $g(n,i)$ ,枚举 $n$ 是被打败的 $i$ 个点中的一个,还是 $n-i$ 个点中的一个.$$g(n,i)=pr^{n-i}\cdot g(n-1,i)+(1-pr)^i \cdot g(n-1,i-1)$$考虑如何计算 $p(i)$ ,仍然像计算 $f(i)$ 那样,枚举出度为 $0$ 的强连通分量大小.$$p(n)=1-\sum_{i=1}^{n-1}p(i)\cdot g(n,i)$$时间复杂度 $O(n^2)$ . $easy$把每个套娃看成一个点, $a​$ 能套住 $b​$ 看做一条边 $a\to b​$ ,权值是产生的空隙大小,即 $a_{in}-b_{out}​$ . 直接连边的复杂度是 $O(n^2)$ ,把套娃按 $out$ 排序,每个套娃能连向的点是一段区间,可以线段树优化连边. 从 $S$ 向每个入度为 $0$ 的点连边权为 $0$ 的边,从每个出度为 $0$ 的点向 $T$ 连边权为 $x_{in}$ 的边. 那么要求的方案数就是从 $S$ 到 $T$ 的最短路数目,图是 $\text{DAG}$ ,可以直接记忆化搜索求出.]]></content>
      <tags>
        <tag>概率/期望</tag>
        <tag>线段树连边</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190924]]></title>
    <url>%2F2019%2F09%2F24%2Ftest20190924%2F</url>
    <content type="text"><![CDATA[乱搞场. $func$考虑推式子.当 $n&gt;m$ 时,有$$a_n=n-1+\frac 2 n \cdot S_{n-1} \\S_n=n-1+\frac {n+2}{n} S_{n-1} \\\frac{S_n}{(n+1)(n+2)}=\frac {n-1}{(n+1)(n+2)}+\frac {S_{n-1}}{n(n+1)}$$记 $f(n)=\frac {S_n}{(n+1)(n+2)}$ ,得到$$f(n)=f(n-1)+\frac{n-1}{(n+1)(n+2)}$$分块打表处理 $\frac{n-1}{(n+1)(n+2)}$ 的前缀和即可. $ill$考虑写出一个集合 $S$ 的答案.$$\sum_{i\in S}\frac{p_i}{1-p_i} \cdot \prod_{i\in S}(1-p_i)$$记 $x=\sum_{i\in S}\frac{p_i}{1-p_i},y=\prod_{i\in S}(1-p_i)$ . 考虑加入一个 $p_x$ ,答案会增加 $p_x\cdot y\cdot (1-x)$ . 可以贪心地将所有 $p_x$ 从大到小加入,当 $x\ge 1$ 时退出,得到最优解. $mask$经典题目. 带修莫队,二维数点,分块 + 树状数组都比较可做.]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>莫队</tag>
        <tag>打表</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4151 The Cave]]></title>
    <url>%2F2019%2F09%2F23%2Fbzoj-4151-The-Cave%2F</url>
    <content type="text"><![CDATA[结论题. 以 $1$ 为根,预处理出每个点的深度 $dep$ . 对于一条限制 $(a,b,d)$ ,满足限制的点中,深度最小的点一定在 $a,b$ 的 $lca$ 到根的路径上. 设这个点为 $x​$ ,则 $x​$ 需要满足 $dep_a+dep_b-2dep_x\le d​$ ,可得 $dep_x\ge \lceil \frac{dep_a+dep_b-d}{2} \rceil​$ . 考虑所有的 $m​$ 条限制,可得 $dep_x\ge \max \lceil \frac{dep_a+dep_b-d}{2} \rceil​$ . 记点 $p$ 为所有 $m$ 条限制中, $\lceil \frac{dep_a+dep_b-d}{2} \rceil$ 最大的那条限制对应的点 $x$ . 有结论,若 $p$ 点不能满足所有限制,则一定无解.于是判断 $p$ 是否合法即可. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=3e5+10;int ecnt=0,head[MAXN],nx[MAXN&lt;&lt;1],to[MAXN&lt;&lt;1];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int n,m,dep[MAXN],fa[MAXN];void dfs(int u)&#123; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa[u]) continue; fa[v]=u; dep[v]=dep[u]+1; dfs(v); &#125;&#125;int a[MAXN],b[MAXN],d[MAXN];void solve()&#123; ecnt=0; memset(head,0,sizeof head); n=read(),m=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; dep[1]=fa[1]=0; dfs(1); int mx=0,p; for(int i=1;i&lt;=m;++i) &#123; a[i]=read(),b[i]=read(),d[i]=read(); int tmp=dep[a[i]]+dep[b[i]]-d[i]; if(tmp&gt;mx) mx=tmp,p=i; &#125; if(!mx) return (void)(puts("TAK 1")); mx=(mx+1)/2; int x=a[p]; for(int t=dep[x]-mx;t&gt;0;--t,x=fa[x]); dep[x]=fa[x]=0; dfs(x); bool flag=true; for(int i=1;i&lt;=m &amp;&amp; flag;++i) if(dep[a[i]]+dep[b[i]]&gt;d[i]) flag=false; if(flag) printf("TAK %d\n",x); else puts("NIE");&#125;int main()&#123; int T=read(); while(T--) solve(); return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4195 程序自动分析]]></title>
    <url>%2F2019%2F09%2F23%2Fbzoj-4195-%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%8A%A8%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[并查集. 把所有 $x_i=x_j$ 的 $(i,j)$ 用并查集合并在一起,再对于所有 $x_i\not= x_j$ 的 $(i,j)$ ,查询是否在同一个并查集中即可. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e6+10;struct edge&#123; int u,v,tp;&#125;E[MAXN];int n,val[MAXN&lt;&lt;1],tot=0;int fa[MAXN];int Find(int x)&#123; return x==fa[x]?x:fa[x]=Find(fa[x]);&#125;bool solve()&#123; tot=0; n=read(); for(int i=1;i&lt;=n;++i) &#123; val[++tot]=E[i].u=read(); val[++tot]=E[i].v=read(); E[i].tp=read(); &#125; sort(val+1,val+1+tot); tot=unique(val+1,val+1+tot)-val-1; for(int i=1;i&lt;=tot;++i) fa[i]=i; for(int i=1;i&lt;=n;++i) &#123; E[i].u=lower_bound(val+1,val+1+tot,E[i].u)-val; E[i].v=lower_bound(val+1,val+1+tot,E[i].v)-val; if(E[i].tp &amp;&amp; Find(E[i].u)!=Find(E[i].v)) fa[Find(E[i].u)]=Find(E[i].v); &#125; for(int i=1;i&lt;=n;++i) if(!E[i].tp &amp;&amp; Find(E[i].u)==Find(E[i].v)) return false; return true;&#125;int main()&#123; int T=read(); while(T--) &#123; if(solve()) puts("YES"); else puts("NO"); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4543 Hotel加强版]]></title>
    <url>%2F2019%2F09%2F23%2Fbzoj-4543-Hotel%E5%8A%A0%E5%BC%BA%E7%89%88%2F</url>
    <content type="text"><![CDATA[长链剖分经典题目. 设 $f(i,j)$ 表示子树 $i$ 中距离 $i$ 为 $j$ 的点的数目. 设 $g(i,j)$ 表示子树 $i$ 中点对 $(x,y)$ 的数目,其中点对满足 $x,y$ 的 $lca$ 与它们的距离都为 $d$ ,而与 $i$ 的距离为 $d-j$ . 借用一下 $\text{Bill Yang}$ 的图片. 直接暴力合并 $u$ 与它的儿子节点 $v$ 的信息,时间复杂度是 $O(n^2)$ 的,只能通过原题. 注意到维护的下标是以深度为下标,利用长链剖分即可做到 $O(n)$ . 合并 $u$ 当前信息与它的儿子 $v​$ 的信息时,转移有,$$ans+=f(u,j-1)\cdot g(v,j)+g(u,j+1)\cdot f(v,j) \\g(u,j+1)+=f(u,j+1)\cdot f(v,j)\\g(u,j)+=g(v,j+1) \\f(u,j)+=f(v,j-1)$$利用指针移动实现空间的高效分配,以及继承重儿子信息. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,ecnt=0,nx[MAXN&lt;&lt;1],to[MAXN&lt;&lt;1],head[MAXN];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int mxdep[MAXN],mxson[MAXN];void dfs_init(int u,int fa)&#123; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa) continue; dfs_init(v,u); mxdep[u]=max(mxdep[u],mxdep[v]); if(!mxson[u] || mxdep[v]&gt;mxdep[mxson[u]]) mxson[u]=v; &#125; mxdep[u]=mxdep[mxson[u]]+1;&#125;ll *f[MAXN],*g[MAXN],tmp[MAXN&lt;&lt;2],*id=tmp,ans=0;void dfs(int u,int fa)&#123; if(mxson[u]) &#123; f[mxson[u]]=f[u]+1; g[mxson[u]]=g[u]-1; dfs(mxson[u],u); &#125; f[u][0]=1; ans+=g[u][0]; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa || v==mxson[u]) continue; f[v]=id,id+=mxdep[v]&lt;&lt;1,g[v]=id,id+=mxdep[v]&lt;&lt;1; dfs(v,u); for(int j=0;j&lt;mxdep[v];++j) &#123; if(j) ans+=f[u][j-1]*g[v][j]; ans+=g[u][j+1]*f[v][j]; &#125; for(int j=0;j&lt;mxdep[v];++j) &#123; g[u][j+1]+=f[u][j+1]*f[v][j]; if(j) g[u][j-1]+=g[v][j]; f[u][j+1]+=f[v][j]; &#125; &#125;&#125;int main()&#123; n=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; dfs_init(1,0); f[1]=id,id+=mxdep[1]&lt;&lt;1,g[1]=id,id+=mxdep[1]&lt;&lt;1; dfs(1,0); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>长链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190922]]></title>
    <url>%2F2019%2F09%2F22%2Ftest20190922%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>贪心</tag>
        <tag>树状数组</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190921]]></title>
    <url>%2F2019%2F09%2F21%2Ftest20190921%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX19IQqYhwrkTiYubkARLa4x5VEEhCjR6QvY8waKLClNuT+8WlR+t7uwYRgpfzmwjcs7X6UonUSyArB5CkGK9ebngLJo58GW7WFGXBTxB7jkRspf0uN+/hELFAug7CnpwDLxyiKuAV2Ev7giS8FRyg3boprw07Jr2STI/tlsw89KAhtsUvjWqq8ruXQlpM2jzKXZfiSsbzvcNY9J17/b9TYo6sdnl/KYhWSjMA01hjIk12Kx1BfTkGySTrBL/iRZ3p5tWzp8ytG7wQnziqpdIxs5G/c9p1HgyfscWlYkx+n0yvRj5UoizAHiFrjaTiJ2ASgKxwMRjSK+jSVHUIX8rnNSPRrQd+cZOTorlC0QiRaEiktSQXJwD8/dBaP8NJ5EPOJ0vqSq+zcrltBPcFj2Jus2NKIxcD+/Tj69Jb6nnJpXW3HgsiApGiP/mq8RB7hb/pneCQ+3cMXvrfS5+2xkYehA8TVIPWCUulH5QwbyONOwUFNeksWmQvyXwv7+tceDVt9LdBd2ZSSmdvXttWlfn7+/lYzv35u0KPRCTUuhIcoW1u4SDUU/8Img1T9ww3HxlPuCcyHrDoDlBQkutvPd0U84nxveaCNjRHdijpBHD2Kg3sVW1YMqqnV2K4nYkz/pSmJErsnI/+SL+9Jf6ibWeHoN2qYKDp0HawrXcsgwRX5oWcv0Tg5KwWuqaRK1v8GH/NyWm1wLyfR45fBkYQGbV8s+0vC8Nigbpc+8cyNxXaL60E7hXYNchg5+EssKJLnqVYCU8xW+K7D3QAtTwhA8OHh+Mtm0FbNluDO9Pt6+thlLmgDLvKE/Nco2qu9IWa21YZpaCrcNXG7/jZCjbkq+uBqO7FSfEjuXTBjBJhkzAvHVwsaIQ1PBSCGQPVJDUhH/6RRblVe5Wtie8XdxIpCIsbTns5Zo1Yux08cuTAnnJsE1NB8n0yZlC+IpMlz2GojpRh0Pv3h+EhsCWGW3KL/xbMLK3eUQY0xiEQgRKEj/TgLo0J0aPNNNM2p4DW3bReope95wp4I8lUIYbPPE5q7E5RiELh7LNr+Ii0ZH6h7/kxv8pGVK6ZXsXukZ8hJsw23JtArI/U8DECb2RU9CPlFwqKUeknVq53hekVY90SKSgbZ9hdVmzTIw0yNgVXsR740FuU6FHjV2H4VppsxqcrfonFdcjZq38EesTo2tvrAc5N2fM2Zqdu4Qflx9Z574GbueKsa6xMcv3ksP8QkLiNNCWLBDNGAKQUjbt3QzIjUle0lvSGf1PUAJWLXlWTEdcBq0qd/jxwvfQlfsk6PNEygfUYRmCRFsyHb/PHeATOIHTVC8er+vjbcoTAzATvRsndDdda5M1l0z56HYdzwPGvHAjIa0HgiTzub/yUjEb0l0Gfkqi+oNvmzEx6Zog77q5xSnysCv3uYOgcYSpsA== var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>线段树</tag>
        <tag>树形dp</tag>
        <tag>树链剖分</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190920-pm]]></title>
    <url>%2F2019%2F09%2F20%2Ftest20190920-pm%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>树状数组</tag>
        <tag>容斥原理</tag>
        <tag>数位dp</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190920-am]]></title>
    <url>%2F2019%2F09%2F20%2Ftest20190920-am%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX1/UuuSotSs/33qHQW18gaA2FrKmn96V3t3LuvS+AlHaghmPO2nIXrYSsL2rZLTezY2nlukkfr9Iy2SsfwZdpWrNO/a/yKTIB2uo3QTu/kR5mi1sf3c06Z70k+it4Yb8j/IRBOtPtOcFEDle2eQN0B3fLsNblErse1waG+0bElWzZ8UFBJElwZdU29hC6N37q2nAnlNqT4A2rYkNdY1eocdz9tQ+JbymSUHTbl4bmHjEaDOxifo1nQA1s9q6kZJ3BwjG7tyMJ3K5Fa0Kwtp1TDx1sJJUAmobYePcFglokHRD3kx/F7enHZBVbBY3LobHZ5587j6wOTHv9UgaNsZv5mzqJoTvhShFqhrDk3Y1yEVuTDITDT3hb52y4PqfNtbcfpu9z47c1GlYNwRt5Knn23Dr/j2xJoqBTlsyuo3puuI7DhTtTPufHgADJFtr/YZ6IuALQvvBA/7EhHDasAtkTeLejxQ7ctOrlO1Yi4H+thITq9pbAZCsBWXrp8ENTwV/MkcQ6GEmayo8e4XnAz0nHjNPfWglqIuLKSyRjcbWiXC1DwtS7BDYdw9gfyzRKB8qQmn/hfjqKLXKadirkILhPpib38rSXqp0JNxLqVZyIEfZ2ZsnZZC+kBk4 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>树状数组</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190919-pm]]></title>
    <url>%2F2019%2F09%2F19%2Ftest20190919-pm%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>test</tag>
        <tag>李超线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190919-am]]></title>
    <url>%2F2019%2F09%2F19%2Ftest20190919-am%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX1/HP4RnXjrXnhDas0BUvQ5AKqNZVLacjuq9UqIrs08yzDmac1EpaPOddjc6Gt3JdJbgTflKzsRh3L6L+SfXlmq1gvGqhJvM9roYyqg855Inw88BpUF61MIo1aThklx/EjsemO7+ES0hz69HJm6eLIzuXBjy+DrfhHduwWzhsv9Hrwg2erwepeIkDunYQAlzxxnYVFnkHtWZIVeJVZSKj3fjGaiChHTNsghVLbSZK/5PAqX4IhJlqj9dtDnUeSteGy+fvNUwmGSYEaAGcIfS8LjC4rJhpjAmVbhetYV6FMFVRc+22086wSHw3IYyAxgiYl5IPHcJ7THg89QuI1UnOeikLxT/mclUGvBXnyrDvoi2lwQhicSo39mZILaPUCb6r+lbQZLL2oi6WV33TndMohGSD6vnzwjPm27+Wi0EsvS3U1IDfDgCgU0fCcdcF3sZfgTI3Lvh0IaPuxYCfTE9aMf5/bDk0qBbnXgM+b99L4xsbS8h20/XrwEg1RIeGF1SfTu87cwRx779LOkMVHmVdyhkr6hGD4G+V5+RDSTi208Il3hbpID57zz4L04q8bEpYfnx3jFE0SQEaP59I8b7bbngG/LGs4Gl1/IrNxOGnqnbVL7r1ugd/ioifMf/D/TePDCWa7lzLhHRWGRm5It4sMopO/yj4zIL2Jh5ty+/usyX2QWPYFUqtr5JNFPyfBfohyTJVzywU8QTXRwRplAIYe4kEVg/6mZ/xD1Sef7lzUb3G+by/BLR+vkDWybk98oaA72XKIJgK7zzRR9YomWPchU5U1i+UOiwWaY+GEJr1xTNh/diT1gCeox99JuMHAK1KhMXO49hqZZtyHH3QUNMS8hfDuQxp59iro03u/B5Iha0t2Y9Qu0fYm7pnTI8RooMJlfZxT2W/y2JgpfcZL1NkR2k7uxQ9ar/RLG0AuOlzpCgZGpaXV+Yr27UvJu04G69SmfDJeqjOnvQaebb+tJ6+Bp91LWF/seKQLDHcgZgBf7i3pvHCFU61HdZrY5lWMQnhOi8vozXybDQjsnhompAlFQNR4kC8xGVk8zQYjv4i2Qxm9vsgta9qyW5vFJ+cdWT9z/yYb6qHe38qiWVrFabZrB54N+O8Sn3Gmvd0iHK3Kogkgfs8ULO8+cU9/+HMzYbZzbs+ijoY7PP4hS2i0FWUHJi+JUDDoMWt99af2yG4NxdiOKOCCw8YJQ6uvNfaLm9GInrDgxXWMgrXw7k/r9PMgCrxn6Qao+m4BlZNAIxYtFpyS4IgO81lymrF88k+uZ+OVmf2Z5wOGmo4gOfyL7j8D1lhgARwcJLYx73iBiwZj3NOBuePd7GagMf1tokrOBE/MJ8gv1e1cfTMVVyERESlOwuNolxwuysDfiw6ybPjhhQqXn0QviWXGCPkIryBm5974JgFBQJeb8tTh858uH41/BNlDMh9zsMTrZ3XRfNFKXJNwohSqko3hLHLhM3s8iuHKbD4Av01daamZJiMi4ryI7KrEtCVXzp8Oq4yR8R1ckAg8EkoMFY9cyPZpHffVTcuBFGn/5jqxS6DhzgEWEA8bIC4tzs1AYllm8HNXm2kORZKRlaMu6I6QCDK+dPau9k9qq09gZn9lWt5Q4H0p5sXByWbvHc7h/XtuJ0E9Ae6wQvanKatMuxk3IWWaZiyrDjbMvIIebuEaCk+CUZg5AeXsiUPSRgMNNEomfz+DaIaURrN95VGMQaX2mD4Q1CPd9S9Dnk3Yyuy8k/Ro8+d8LXxo784RBwlPFJvm3uWEk6JB2SRBLnRbZfEP1k95HtLWwBFQLoY+xtGdZjNtagNJXrzme6jIFPsg5EZCw8JkRkTOpzVXE5RWqEAAnjjC5IrLkRiFv/6TPo6LfrENqcwGiEDXuXFDPWF11rcQ0= var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>贪心</tag>
        <tag>树状数组</tag>
        <tag>博弈论</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4897 成绩单]]></title>
    <url>%2F2019%2F09%2F18%2Fbzoj-4897-%E6%88%90%E7%BB%A9%E5%8D%95%2F</url>
    <content type="text"><![CDATA[巧妙的区间 $dp$ . 设 $f(i,j,l,r)$ 表示最后一次操作将 $j$ 删掉,且最后一次操作的最小值为 $l$ ,最大值为 $r$ ,删掉区间 $[l,r]$ 的最小代价. 设 $g(i,j)$ 表示以任意顺序删掉区间 $[i,j]$ 的最小代价. $g$ 的转移是枚举最后一次操作.$$f(i,k,l,r)+g(j+1,k)+A+B\cdot(r-l)^2 \to g(i,k)$$$f​$ 的转移是枚举用来更新最值的数.$$f(i,j,l,r)+g(j+1,k-1)\to f(i,k,\min(l,w_k),\max(r,w_k))$$需要注意两个 $dp$ 数组的初始化以及权值的离散化. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859//%std#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;void upd(int &amp;x,int y)&#123; x=min(x,y);&#125;int sqr(int x)&#123; return x*x;&#125;const int MAXN=51;int tot,val[MAXN];int n,w[MAXN],A,B,inf;int f[MAXN][MAXN][MAXN][MAXN],g[MAXN][MAXN];int main()&#123; n=read(); A=read(),B=read(); for(int i=1;i&lt;=n;++i) val[i]=w[i]=read(); sort(val+1,val+1+n); tot=unique(val+1,val+1+n)-val-1; for(int i=1;i&lt;=n;++i) w[i]=lower_bound(val+1,val+1+tot,w[i])-val; memset(f,0x7f,sizeof f); memset(g,0x7f,sizeof g); inf=f[0][0][0][0]; for(int i=1;i&lt;=n;++i) &#123; f[i][i][w[i]][w[i]]=0; g[i+1][i]=0; &#125; g[1][0]=0; for(int i=n;i&gt;=1;--i)for(int j=i;j&lt;=n;++j) for(int l=1;l&lt;=tot;++l)for(int r=l;r&lt;=tot;++r) if(f[i][j][l][r]&lt;inf) &#123; for(int k=j+1;k&lt;=n;++k) upd(f[i][k][min(l,w[k])][max(r,w[k])],f[i][j][l][r]+g[j+1][k-1]); for(int k=j;k&lt;=n;++k) upd(g[i][k],f[i][j][l][r]+g[j+1][k]+A+B*sqr(val[r]-val[l])); &#125; cout&lt;&lt;g[1][n]&lt;&lt;endl; return 0;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[test20190918-pm]]></title>
    <url>%2F2019%2F09%2F18%2Ftest20190918-pm%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX19PxXNukbpb3r870+alOtLa0KpEWTWME+Qoiagc2UTewUGBI52xZay23e06tmvDSHTcjzs4o0jcXH+hzvxs6hFlLxEqE7zpix+3Rxh3fZBl2KrA50GJfP8LqE8XsqOrTBK/rdwKcvIAJWgffoo88VCTnNNj2U9bI5Ikam0eXW9w53AnLJSKHu7y/Yl17WQaMlTyGnyCa+vnBcDKA9vEnfqOP5lugKF/1LXJLr+dUKJNH3yd8as6KMbyX8mZy9hKxIBcv/Vbzr+780IZYJXspyyQ2ma+IkyCTfj9PUjiZ/jHozSoRweGHzreCou1ohCKDqJZO7RHVjSWZODw0Y2yeev3CdIlQww05aYZ8D4gTIyL7tUuuMpgZpWYQ60CAm4oSNTybtQ+QUwVxegvDRBFav8x5CBDew64bvneN1PK/ylsUg1SyXgfAT1Z4GOCMr70LLCzHu4hrp9EtcWWLU7zdPSJFPvup83hDHTKQCt+qIzvGC9vT2W+Vj+fbmF5i4PqyFF6t1y6+HW1ECY/P0B9WpVJ7bgADq6sQ3e3luqLTB06t4MzR+igHHb4D06c0M3MBDI/VccWvgloUgebEN5fpYzC6sWkJizYhdXlJJqRAXfWr6dw7bW7nEg5i/l2itdrDV/9cPQV94Gl+mM+5OwKfDKh4NpqXZwvo14+pZGvTA4aeKBkEFjbDeomvW/zZm9ZqsI4BaCGU/sZI6FKXn4oear3rczK/T0Rpm4CPsBAlCKSu3iuGAu0EsBmQoI8YPP8feMb1wJzCIPIAInlRN6npljW/Q9qg3ncm8wiw6auPmJHhSHi97LAxsT8XdtzvURJVF5JcFE1cp+2HsZfxglwfRCzc5cK2vlXjSoK6FKSSRxNUkKRI019LcFi5SyF4P0T0KRp9slA11ZyCXDhn19Qd2mbis04umIuOXTmb40xgX4JxPnnOE4+Xd5UXGn+jTQ9Lvqf7DI6BfVrwOtHPZwrDdRJmZBW62Dr7msiPnewIrh+6aRYNYZAkR7GhBmsHEcBzTGyDsLgmIqsN8gvlAj5QAgKNsWXNJPb/IAMyQaFp8B10P83kEhGvHNfZ0TjaTIMoeYC2rglJ0JGhOrras7TDNON5rzpzw3lSRFUK5bHqi3/PcQFnqXDFzJwmHNEl7zKsmVM4vPemhoEJf4iAHOQ99oLye3hTY3aWUhoqjNlOJ0ZjYEwcCGt7vbGYHcSuU/R/UZU1GLrkixBvMrFAnpVmaCQaFeItcsE0Odv7KW3w324CeNYuKJw+bwGGsRPaR/fx+WYbuebZkSWLEqoJpFJ1nCWFNcC4iPXsR1siT+xFHjpDJu3TSHtpLZ7vFmDxP6PI6u7XYWbX/Z/QsShxVX6+ns86j6QlntDC3pixpd+7Xd0u5pkQTZLXDVxON6JKwsPDEEa0ix8txujdXyi/VywP1BZ64cNtCoGzJz8ZKUWO/pQAbcH4PFGC1YnLN1hQpVGKiSx3m88NPBIFmSIkkrVV9+aOZXjOz/MrZ1i2Ny5CDv55Zlmm6hqqf+EN6Y85DR8W4aWBP8Dj60aVT2hXmvGpK4QldTpRdxdI6VVuWohM4hv9B+B55h1guYJui4yZ1OLSERFkQ8S59b9RinPH8DjJMva9DX2qWBX2lgr5k33PTTqusRee9PAF4e3AuxR7ksRsLIqCgZW8+QyXoi+zPSTwrSg+XGtG3JejA1ecRZEd8yOVzDxg8Nxd2i9e1wTt1wsEsSc3FvSTAit4IDlFJmnz93zT5vdeSb4S7g51zFMfkqAAj4hT3g4v0a6QLBoXQWajvs31kK68JMfvbJghx9DkLnZfPe9Qs59sEK/q0pRKJv7ROoamxBPsNCWEqBrht9lqKsJyLCJXgO4ayfWjO5nxQEFXqt+8ayXuWJotHVait2YH+p+juY8zqJsgveSOt64174AUmkUYMigsg== var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>数学</tag>
        <tag>位运算</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190918-am]]></title>
    <url>%2F2019%2F09%2F18%2Ftest20190918-am%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>线段树</tag>
        <tag>树状数组</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190917-pm]]></title>
    <url>%2F2019%2F09%2F17%2Ftest20190917-pm%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>拓扑排序</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190917-am]]></title>
    <url>%2F2019%2F09%2F17%2Ftest20190917-am%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX18+AHymuqXalfkiL6CoaTnnNgDtHib8D9ldvdnNuekn92QUtXiP5uBHVPwP1lsQlFK4+YQnMbXXobGH9TKV7vAsl5R5fYKEaFpBF7h00nK8b+5o8uOB9/jEMHzzuquqpTI0NM6aeVIJl6IRFrpq3Uohq50dlJW7S1ZGLwTIveIkRzVBkOv4jSIhlMRSb1Yi8x13TDgJBCll3rw1J9l4W1KKMcdhC+bqTE3Zu+Jq0EmFBUl05j+7EzRA6SRTxxs43qmTwaODTKahB4LVLBUkA3Rxj3AfZPyfTEr8Q0q/yV+IqRSpYLP+gc9fhTHsc5smfCBteY6wXsFV2vUrw+4iSmIqv7sl7Iy5I22YeXfl6jvRiadN4n1BNf+eyV8jx6eiL1cERxrtXwW1ciyNzu5ZOZgWlhLpx2VHgV5WDqs0jFMRvP/GHVX9GwkuHsc22fSBzDUBNooc/dTS49HCerecUMhyWlqye/D+LEzZc5JwxiZO6UPFCl2SKVewF99CLSTtOZhDWhIC7z1nOFMD/ftpSoNYvkZK8nF6lHw+R57Fu928EpB1rM5y8jWYQC7bCkRzLXY7nqf1pm+xhcvXbEvZRIeloMdsW6I2EBIQUA8rw4rLRoZvV3wgKW6sYFhVvmsKElKv5MRrrSzgKcnZRLGIlFPBuR838rdkVW9mm+P7bg0Cn0Isny6vq3t5k+dJxSXnkWYOvkuyWHvBfPc61p4TezCI66Flf9eeJyqPssMzyVd5Ta8v+aHQMul0aK/8owUu/Hn/PKsFJfe0NaF48gP58ejaYeC8aJzkCjSd6Hbv9L8M0dQIW0Lt7l2jLix37dfX/gALKF8sgIy9ypRJ9jRM6FtfBPekAsLGgoqaJAFFfWzZIk750dcBJ0WWi1MUd1AHgmcoFFW8JvOx/FlsZkLH1bfHtGyIg/79kkajoGKdPxSFrGtVNf20XAXGpHuEBnJPr1hu+ZAoRSGkGED2Zr8/eQg4vBv0joNFOorQCM9Ka/gIuvuTt3LCLIXCUDCn8qeCuligYo/uR39X1K+VoG//a5mwe8K4gU1hQtKgpqqK7yfi4E/SPEEqeEdrvgt1jV6PYLvjyt1bfCrMK5FQFH0uXGZE6xC1A4ZUvxSW0b8uT6fvgp7nT34S6FLPRM2Oj0iWlRAOFe0YAjUsrds3S4RfKKzqJntI38wABOpHn5o/MZcKC1gdz0O+iHU+q5uW7ttqJvesmJfshw1Z3O94p3IsDGxmL1fS1zN9YQ+QePqtFIYkm0Hti3bguujxtG4r2WnzUCHopB/qTc/vtmEACGdQomrAXky+GF3+dyrrG8pNrEDwBtj3dorYbqzTnpJ6UXSsw7q4XU1+Rlqi3Ush0scOOn7uaxVSzXjv6zaoOukdEDHwSY/QrC03jQnRtpEr7AtvS8sG+v4DDT6Ieuy63eEuxY7lt6P9xV8WfkkdAsoepTElvh4yVD+6ANBEg+7QSfz/yBO/bK6MEa6+95bR4tVAwkzJTgKcqRBi/OnqzNdJlRZTHytqw00BDF71vQzPxxlhzkkHdvLsprwlQ7eDXJV3sKl4NtKXSz8mp2OSUn9SldcRAifUeBpZsdjczA+zuzo6sGmapolsHgs/kUt90IFIFplkfs5if5x3t3JzFADhiWGomcVutU9ULh4AbP3AJuRVrhsXW3/MGryLjFM693AEPcSN8+c3K8/YF11zTNZZ/oBMhzucsO98EthlMhXz4Ek0mYBwRBFhOsxPCzbDjQD4LFBjBrmA9uPIr10VfmNCayqgx2tjDckDGu81kKqVhIsldZJ4aqtrtX3L82JvOo4OcWaQ/9dSmHlZ7Izp6UDsquQ1tefHVJhprRK/Lb+pNuPSmHutxoQKr21AJ6fK9zB7ksXitkHidtJaNyzX91QqmBvazbl/Y1T7ia4pZ+ddPWpCe+9SrFoKJJ/iqedsg23NGIxnZZHZPclev3CoGPDIaRyFr4jmBdHg8g3C var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>树状数组</tag>
        <tag>数位dp</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190916-pm]]></title>
    <url>%2F2019%2F09%2F16%2Ftest20190916-pm%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX19F4TKmm4oCsAm3FJaIncZQhpqNHvwE5MQlNslvDyITfN9aa18gzUxetvwvlYEjKv7iM/QQwYJPkXYOLMgq4rjlT6+Hq0velWokysloqIzdS8UQ5rbiHzRmydcDbBQw64Ou0wzYPWNGGNhSS4yasTTRuL/rPJBHht8Wff0v+zuoR/TXo1HNdqFAR1yCbaV/0pKrAepDQYu3jslgoK+uK1M/CFvHsJxl7ec2unws+CGM1AjNtCvILEJCh9WkeoHROqO0W1BEKb+52ndNQOZ6czcsh+dUORVa8svii5HU8thkaLyS1C7fQecgMLNxc+5veTMv7iOcjxdLxyIgTEvukc2PXKx5KJqaAcCqbKtOuysDzoWw8alpYm7clsipq7oJoFr4f0WiDs92ABWEIo11LpnmNF7NyPI5ZIOoDH51eZkz+c2ct23ZWdtk8N8N603NcbR3vNhLo/OvO9MKOAvrzQ6iA1SkMAGqnsgzLeKQcobBLVz+C1C2KAcXbkz5xUk5SNF/BEyrDT/wYQxc/SjtgfSm+fX6Q4xEdhFlowzZ0xT6lxOpCGOyvAjx7Y0yE5Q/Wa5iCdsVN0on3sRZFV/a1oB86pgjm3JiZzj5H6ekbaKdjHJAvWMsXgXpIEgvXKgS1684yGEGDSn19LtJZB54jow824VnAF7IeCOHbNTMrFY8tDM2BRoUhQ2r0i7HwDEqOY6IKqlOAZCyaCUYVwg6toKcWpHv0JDcsb61lQzajUX/AnDsDA1Rq9MfywhjnM46THGU8VFHKhKjwf+8nUdHSSNV0v6ijem6BzOHv+1Ua5pibQaIFj7fIWXoPOp5HfvfbYhJdWJGYAPMQZiQLdz27SnWCt+x8yPShOKAd+yiIQSQ+8BNU91lhZ7jKct0uNR0Tjky523aQsz9IKZnZx13eWfzLBpDn56gIWfwFu8TCdLSerL991J/1+1vqFpDMGetHhF0Y3Mrw7+bZpQL0P3fV98UY5YSx00Ur6CRpAaQfq7bTuHCsZFELvdhYLWqd4dHF667rLmSzyYGnA== var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>二分</tag>
        <tag>并查集</tag>
        <tag>test</tag>
        <tag>dsu on tree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190916-am]]></title>
    <url>%2F2019%2F09%2F16%2Ftest20190916-am%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX1/U62BHsUZXCoURio7nivUmKMa+XAdl04z9JQ9bo2fdXSMUrpjvDQM0kuJ/059vpdqxmbkm6eAzzV4hCjhisiIfZ92REzC9EYNltMUSSssU96j6pHSv5UyMkq8p0M7d4Z/bYOfwSpp4WKJrTpFz549Z8uZzcAbAjhpp55smik7L15T50p/sYGI/ME9SdD17BnZ1LddQ0J1pSGTOBXMpFILwK6k/FfR7XfydlrsMh+svpA47QWZnfmlPk/ClfcGhB0/zWtsf7hnVpLmmAGjNHoVfFIR8enVRwSmPldrhu0PFH1MIn/Emh2TJg9uMrWkoYTz5i91zbrLS/AnUisPNjfPz7osi+f3AwbReO2zHCgIA9YiJBDZ/huZRXXsMLVe7jbb30UWlWndptCrwg18zO+XiuENV0hrdBpMrds20JmhaRj1BauP9C66LUFgBfvp1lZLR26erv1loEQ9oRzNbXt+/59q9aqumZ8GgW9s2xksS0AKAut3fgIw5jhpK5s/plFTcqnwQYB4lSUtmFoVfpeCjnQU1UMK69IRK1jfkMG9MUGuM7cjN0PvLM220bFyrZ/YkBNNvJqvbdkM9dxXCEbtApOC/GmmeW5SqRN3wbaJu2gRBWD3MN9nCQj4CyahGy1tU/W3QWyqnmZOIOUntwuQ7b4ZqIsB8rvymSd5DyA+0cC9OjnGpVB9Jm8Fb7G4udp0hHL/KY9+AqxrSuo9Ful1iqZU/TbxtVFTS1EJxvNiGENc3ZhmQO9ttOJfAXCOFL5rI1AkLMmWAPnigw4PpVmBoXubIDBwoIV7zCK4gm5EIK/S0GgvNr2YwY60evqVUZfRbGArt+rx+BHtPQSH05Q8oxQ/aEvf+ZsUHee1XAXnfXSeNfQ8qLnS1qSHJeQbsC05zGl89+lcVke1ggYK0jI2yfDPYDNY+rWRooMv34vv5bJt3V77pq+zzW7tummNEMdDgBXye5bj5nWbMRpqNWcNz2fWOFjAvZKM= var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>多项式</tag>
        <tag>two pointer</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1215]]></title>
    <url>%2F2019%2F09%2F15%2FCF1215%2F</url>
    <content type="text"><![CDATA[$Div.2$ A Yellow Cards贪心,分类讨论一下牌是否够用. B The Number of Products维护一下两种符号出现次数的前缀和即可. C Swap Letters若同一个位置, $s,t$ 串相同,就不用考虑. 若分别是 $a,b$ ,就把这个位置权值当做 $1$ ,若分别是 $b,a$ ,就把这个位置权值当成 $0$ . 若有两个 $1$ ,就可以操作一次将它们都消去,两个 $0$ 同理. 也可以通过一次操作将一个 $1$ 变成 $0$ ,或者将一个 $0$ 变成 $1$ ,于是讨论一下即可. D Ticket Game判一个巴什博弈的模型. E Marbles其实就是给这 $20$ 个数自定义一个大小关系,求可能的最小逆序对数目. 考虑两个数 $i,j$ ,若规定 $i$ 比 $j$ 小,可以算出它们对逆序对的贡献 $t_1$ . 若规定 $j$ 比 $i$ 小,可以算出另一个贡献 $t_2$ . 若 $t_1\not= t_2$ ,则 $i$ 与 $j$ 的大小关系是确定的,可以用一条有向边表示. 做一次拓扑排序把自定义的大小顺序求出,再求一遍逆序对就是答案了.]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>拓扑排序</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190915]]></title>
    <url>%2F2019%2F09%2F15%2Ftest20190915%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX19ufsbBWMyAQOmCA6rTYWqMv3Ng3DNSQxrFXO1NeaDZ5uo06sHbR+1F0K+HUaInSY7nc+LvagJT3IENleeKqcSqUANMRkr8wL9UnHsgkIRy7Wve4h6vtL2JMXebkMgCt8Zvc1pP3t54o0fu7Uz2oe/TWnPnFVghTJ9HJgc+ylPgFMZ+JVu9yhzxeH0K9Kt2Jq/23v9YIU0cDm7ZG7FrE6NAiWPe4lBJp6M1jhASjllKJBan6YatPIEa+Hbh0k2W+oKE1Cl4yGLzXy+RJJsIhSngUlji/kaSzm66YA3lV3AZFSt+5b/bxEY1YdTumLctP0omty+o5N1WHyZ5qJwkYvL3bVloXIwDYFWtsqlgpENMAvqj6AEoVt8H8xP/AI/Ccc7l9nYp2v1kbt0o5arhTQCBOGZZWeCeqLPxn3qBv3kxaDorq6jS9E9TNJKj2hoLMaMxNY6Is6xR3qVsM+EzY20ipn2WX53MlC/AdBCSqopfa8a3OnWgFZl/GMV8YKCs6MxruaCAxm5U2xkvcLSPYTyqRGPQWuPD+DGwT5NmZJ13mYeg87yK3E96+EoW0gpyW/TSsGOG2RQggHKOz6Rbw0xYF4iisa+fF26s06xUTD6RAq7Jp3bWg39HOq2sEFOItXx0okgb4oL7tljw49uWwVAbXJizxyhrwJScOJCH2mAa883kcCp3npJOy5pYNzE+/Rqlo1MQXoyNJuAUhf2a2ja+6z4RhbX/Nb/SZmdwpRVqvLbVTZniJBe5kYdaP4aMdvn2ra1tHK4AzGSfJ4h5ak2YXpsi+CWVMrYISEgUj6rxgms7atnipnH2+2e7NmIPGfDfsdBNatWMdIQmrsSptNjaoJf3UcHrU+zKre7ZRQObWfTKEskFHWgUbBHYu6Ge2YfzSJVtNZylkL4qZMRYE481mycDSrkS91BaXqYqkBYz7/Um5Ho8FTgpwRraPsK1wcc7BCOjPyhpfBOaefZuEaEQyvEWQJH9bED2BgJ6h5Ux4n65JqQ3L1YcdiQwY4AiA8UOoQKqrCpGANwU0VQH+1BfJIpkpAwgfJchxE43TpWY4FWLK4MkkAxwI/0FAJGKbx887JnZhzgSHN326614KXVsNxZaDAaL2D6q1qkiEkZYa9nIMfS6d8c1GRaFXD3oW35oNWJe+9mw3MA+fm4n1q/zJHZa+drV1AKmV0LTvuszFOLmnfeUJGfQz5nPJK5gtM6BWhI6Tkm/LeXHri7Sb6l5s27Pao1eyx12oW6EmGPLAWgGIL+tEVPD8sNriaozbxJ67QG4OTFktf19oQJ/vpvyv0tnQdrI5oVk4m7Gn0P4JL+ZW++DpGX0GUSXgTMd+fU9r4nJOvl96UnTxByMttT04/PcY0nmmwP5rG9KLs17WeiEe8hNsqaV7/fb1f0RlFkoGH3p0bmRwPbP0TwYodFmey7S3N+t2L2UfkEzGbtWkR6wQxelTYCkZTcrgoJ8fpKPa1rApx7ng6lk6RsO4O9AD3IKlXDe+Q4= var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>Trie</tag>
        <tag>打表</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1209]]></title>
    <url>%2F2019%2F09%2F15%2FCF1209%2F</url>
    <content type="text"><![CDATA[$Div.1+Div.2$ A Paint the Numbers将所有元素排序,从小到大贪心处理,如果之前有它的因数,就不用新建一块. B Koala and Lights每盏灯的周期是 $2t$ ,所以整个系统的周期不会超过 $\mbox{LCM}(2,4,6,8,10)+5=125$ ,在这个范围内枚举时间即可. C Paint the Dights考虑从 $0$ 到 $9$ 枚举两个序列的分界值 $x$ . 若 $a_i&gt;x$ ,或 $a_i=x$ ,但之前没有比 $x$ 大的元素出现,就染成 $2$ ,否则染成 $1$ . D Cow and Snacks贪心,每次拿了一个 $(x,y)$ 后,就让含有 $x$ 或 $y$ 的人先来拿,这样最多挤掉一个人,所以是对的. E Rotate Columns把每一列按照该列的最大值从大到小排序,只把前 $n$ 列拿出来做状压 $dp$ .]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>codeforces</tag>
        <tag>状压dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190914]]></title>
    <url>%2F2019%2F09%2F14%2Ftest20190914%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>树上差分</tag>
        <tag>单调栈</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190912]]></title>
    <url>%2F2019%2F09%2F12%2Ftest20190912%2F</url>
    <content type="text"><![CDATA[分块被卡成暴力. $road$预处理出 $S$ 到每个点的距离, $T$ 到每个点的距离. 加入一条边 $(u,v)$ 后,可能产生的路径是 $S\to u\to v\to T$ 和 $S\to v\to u\to T$ ,判断一下长度是否减小即可. $multiset$考虑对于所有 $x$ 相同的情况,相当于每次修改一段区间,若为 $0$ ,则 $+1$ ,否则 $\times 2$ . 用两棵线段树,一棵维护答案,另一颗维护每个位置是否为 $0$ . 修改时对状态相同的连续段一起操作,每次操作最多增加 $2$ 个连续段,操作次数仍为 $O(n)$ . 如果有很多种 $x$ ,就给每个 $x$ 开两棵线段树,利用动态开点进行处理. $tree$考虑链的部分,可以设 $f(i,j)$ 表示根节点的标号被继承到 $i$ , $i$ 的子树还有 $j$ 条边时,最后留下根节点标号的概率. 转移时分类讨论一下删掉哪条边以及被留下的标号. 从链上拓展到树上,只需要考虑如何合并两个子树的 $dp$ 值. 其实只要再乘上两个组合数表示删边的顺序就可以了.]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>概率/期望</tag>
        <tag>最短路</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190911-night]]></title>
    <url>%2F2019%2F09%2F11%2Ftest20190911-night%2F</url>
    <content type="text"><![CDATA[$T_3$ 打了 $\mbox{5kb}$ ,前前后后打了 $7$ 个错误版本,还都过了大样例. $string$显然,答案与操作顺序无关,直接把所有 $a$ 移到最前面,这样 $b$ 的个数会翻倍,记录一下 $b$ 的数目即可. $number$直接数位 $dp$ ,注意特判 $k=0,1$ 的情况. $city$先跑一次 $dfs$ ,把环上所有点依次存下来. 考虑用环上的点把所有点分成若干块,每个点属于离它最近的环上的点. 答案分为两种情况,一种情况是两个端点在同一块,这部分贡献就是若干棵子树的直径最大值,仍然用 $dfs$ 求出. 另一种情况是两个端点在不同块,显然要经过环上点. 对环上的第 $i$ 个点,记录 $d(i)$ 表示这个点到它的那一块中的点距离最大值. 枚举断掉环上的哪一条边,环变成一条链,可以钦定一个起点,记 $H(i)$ 表示此时起点到环上第 $i$ 个点的路径长度. 如果此时选择了环上的第 $x,y$ 个点来更新答案,贡献就是 $d(y)+H(y)+d(x)-H(x)$ ,且必须 $x\not= y$ . 用线段树维护一下 $d+H,d-H$ 的最大值,最大值取到的位置 ,次大值,就可以计算出断掉某一条边的贡献. 当断边切换时,所有 $H$ 都会同时减少一个值,原端点的 $H$ 又加上所有环上边的长度,利用线段树可以维护. 时间复杂度 $O(n\log n)$ .]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190911-am]]></title>
    <url>%2F2019%2F09%2F11%2Ftest20190911-am%2F</url>
    <content type="text"><![CDATA[$\mbox{difficulty gap}$ 稍微有点大. $tree$树形 $dp$ 入门. 设 $f(u)$ 表示仅操作子树 $u$ 内的点,能获得的最大收益,转移时讨论删不删 $u$ 即可,时间复杂度 $O(n)$ . $xor$$x\mbox{ xor }2x=3x$ ,将 $\mbox{xor}$ 理解为二进制下不进位的加法. 注意到 $x+2x=3x$ ,可以得出, $x$ 与 $2x$ 在二进制下没有某一位都为 $1$ . 而 $2x$ 在二进制下可以视作 $x$ 所有数位左移了一位,于是限制等价于 $x$ 没有两位连续的 $1$ . 做一做数位 $dp$ 求出答案,注意减掉 $x=0$ 的情况. $equ$标准型线性规划,约束数目很少,但变量个数很多. 转成它的对偶线性规划,就变成了 $2$ 个变量和很多约束的线性规划. 写一个半平面交来处理.]]></content>
      <tags>
        <tag>树形dp</tag>
        <tag>数位dp</tag>
        <tag>test</tag>
        <tag>线性规划</tag>
        <tag>半平面交</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4896 补退选]]></title>
    <url>%2F2019%2F09%2F10%2Fbzoj-4896-%E8%A1%A5%E9%80%80%E9%80%89%2F</url>
    <content type="text"><![CDATA[$Trie$ 树 + $vector$ 暴力维护答案. 把串全部扔进 $Trie$ 树里面,对于 $Trie$ 树上的每个节点,开一个 $vector$ 维护出现过的值的答案. 即,若某个前缀出现次数最大为 $mx$ ,就只维护 $1\sim mx$ 的答案. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+1,L=60,S=10;char buf[L+10];int tid=0,len;struct Trie&#123; int idx; Trie()&#123;idx=0;&#125; struct node &#123; int mx,cur,ch[S]; vector&lt;int&gt; v; node()&#123;mx=cur=0;v.push_back(0);&#125; &#125;Tree[MAXN*L];#define root Tree[o] void ins(int val) &#123; int o=0; for(int i=0;i&lt;len;++i) &#123; int c=buf[i]-'a'; if(!root.ch[c]) root.ch[c]=++idx; o=root.ch[c]; root.cur+=val; if(root.cur&gt;root.mx) &#123; root.mx=root.cur; (root.v).push_back(tid); &#125; &#125; &#125; int query(int x) &#123; int o=0; for(int i=0;i&lt;len;++i) &#123; int c=buf[i]-'a'; if(!root.ch[c]) return -1; o=root.ch[c]; &#125; if(x&gt;root.mx) return -1; return root.v[x]; &#125;&#125;T;int lastans=0;int main()&#123; int m=read(); while(m--) &#123; ++tid; int op=read(); scanf("%s",buf); len=strlen(buf); if(op==1) T.ins(1); else if(op==2) T.ins(-1); else &#123; int a=read(),b=read(),c=read(); int x=(1LL*a*abs(lastans)%c+b)%c+1; lastans=T.query(x); printf("%d\n",lastans); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>STL</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190910]]></title>
    <url>%2F2019%2F09%2F10%2Ftest20190910%2F</url>
    <content type="text"><![CDATA[给题面点赞. $move$直接二分 + $hash$ . $cook$把反图建出来,跑一个最大字典序的拓扑序,再把这个序列反过来就是答案. $block$ 摘自原题的解题报告. 暴力来做的话,接口有 $12$ 个位置,状态数为$2^{12} = 4096$ . 这个状态维数显然不能矩阵乘法. 然后消掉所有等价的状态,即旋转,镜像,上下翻转. 比如 $100000000000$ 和 $000000000001$ 这两个的状态的 $dp$ 值,在每一轮都相等,不需要都存下来. 同样的,旋转,镜像,上下翻转都可以消除掉一些. 然后我们发现一些状态值一定是 $0$,比如接口有奇数个块的. 比如将所有块黑白染色,接口处黑色个数不等于白色个数的. 经过这些删除后,只剩下 $95$个状态. 然后直接矩阵乘法就可以了.]]></content>
      <tags>
        <tag>拓扑排序</tag>
        <tag>矩阵优化</tag>
        <tag>状压dp</tag>
        <tag>hash</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 5368 真实排名]]></title>
    <url>%2F2019%2F09%2F10%2Fbzoj-5368-%E7%9C%9F%E5%AE%9E%E6%8E%92%E5%90%8D%2F</url>
    <content type="text"><![CDATA[分类讨论 + 简单组合计数. 题目描述可以等价为变化之后,分数严格小于 $A_i$ 的人数不变. 分两种情况讨论. 情况一, $A_i$ 没有翻倍. 若其它的某个翻倍的分数原来是 $x$ ,为了使排名不变,必须满足 $2x&lt;A_i$ 或 $x\ge A_i$ . 排序后二分,找出这样的 $x$ 有 $p$ 个,那么这种情况的方案数就是 $p \choose k$ . 情况二, $A_i$ 翻倍. 为了使排名不变,其余 $A_i\le x&lt;2A_i​$ 的数也必须翻倍,另外的数可以随意选择. 排序后二分,找出这样的 $x$ 一共有 $q$ 个,若 $q&lt;k-1$ ,则方案数为 $0$ ,否则为 $n-q-1\choose k-q-1$ . 根据加法原理,把两种情况的方案数加在一起就是答案. 时间复杂度 $O(n\log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=1e5+10;int n,k,fac[MAXN],invfac[MAXN];void init_fac()&#123; fac[0]=1; for(int i=1;i&lt;=n;++i) fac[i]=mul(fac[i-1],i); invfac[n]=fpow(fac[n],P-2); for(int i=n-1;i&gt;=0;--i) invfac[i]=mul(invfac[i+1],i+1);&#125;int C(int M,int N)&#123; if(M&lt;0 || N&lt;0 || M&lt;N) return 0; return mul(fac[M],mul(invfac[M-N],invfac[N]));&#125;int A[MAXN],a[MAXN],ans[MAXN];int Binary_Search(int val)&#123; int L=1,R=n,res=0; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(A[mid]&lt;=val) res=mid,L=mid+1; else R=mid-1; &#125; return res;&#125;int calc(int L,int R)//L&lt;=x&lt;=R&#123; if(L&gt;R) return 0; return Binary_Search(R)-Binary_Search(L-1);&#125;void solve()&#123; for(int i=1;i&lt;=n;++i) &#123; int val=A[i]; int p=calc(A[1],(val+1)/2-1)+calc(val,A[n])-1; int q; if(val&lt;=2*val-1) q=calc(val,2*val-1)-1; else q=0; ans[i]=add(C(p,k),C(n-q-1,k-q-1)); &#125;&#125;int main()&#123; n=read(),k=read(); init_fac(); for(int i=1;i&lt;=n;++i) A[i]=a[i]=read(); sort(A+1,A+1+n); solve(); for(int i=1;i&lt;=n;++i) &#123; int pos=lower_bound(A+1,A+1+n,a[i])-A; printf("%d\n",ans[pos]); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4029 定价]]></title>
    <url>%2F2019%2F09%2F08%2Fbzoj-4029-%E5%AE%9A%E4%BB%B7%2F</url>
    <content type="text"><![CDATA[贪心. 乍一看像是数位 $dp$ ,仔细想一下其实只需要枚举每个数就可以了. 暴力枚举定价为 $x$ ,每次用 $x$ 更新答案后,把 $x$ 最低的不为 $0$ 的那一位 $+1$ ,继续枚举,中间的显然都没有 $x$ 优. 每一位最多被加 $10$ 次,时间复杂度 $O(T\cdot 10\log^2 R)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int inf=1e9;int calc(int x)&#123; while(x%10==0) x/=10; int p=(x%10==5); int a=0; while(x) x/=10,++a; return 2*a-p;&#125;int nxt(int x)&#123; int cnt=0; while(x%10==0) x/=10,++cnt; ++x; while(cnt--) x*=10; return x;&#125;int main()&#123; int T=read(); while(T--) &#123; int L=read(),R=read(); int mi=inf,ans,x=L; while(x&lt;=R) &#123; int val=calc(x); if(val&lt;mi) mi=val,ans=x; x=nxt(x); &#125; printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4035 数组游戏]]></title>
    <url>%2F2019%2F09%2F08%2Fbzoj-4035-%E6%95%B0%E7%BB%84%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[$SG$ 函数 + 整除分块. 假定可以选择黑点进行操作,可以发现,若选择黑点,不能直接胜利,而对方下一步可以选同样的位置翻转回来. 所以最优策略下仍不会选择黑点进行操作. 把每个白点看成一个子游戏,最后将它们的 $SG$ 函数值全部异或起来就是整个游戏的 $SG$ 异或值. 根据 $SG$ 函数的定义,转移有,$$SG(i)=\mbox{mex}_{j=2}^{\lfloor \frac n i \rfloor}\ SG(i\cdot j)$$简单归纳一下不难得出,若 $\lfloor \frac n x\rfloor=\lfloor \frac n y\rfloor$ ,则 $SG(x)=SG(y)$ . 于是只有 $O(\sqrt n)$ 个有用的值,整除分块进行计算. 时间复杂度 $O(n)$ ,但实际上是跑不满的,可以通过. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,m,SG[2][MAXN],stk[MAXN],tp;bool vis[MAXN];int nxt(int x,int y)&#123; return x==y?y+1:y/(y/(x+1));&#125;void init()&#123; for(int i=1;i&lt;=n;i=nxt(i,n)) &#123; tp=0; int tmp=0; for(int j=2;j&lt;=i;j=nxt(j,i)) &#123; int x=i/j; int val=(x&gt;m)?SG[1][n/x]:SG[0][x]; stk[++tp]=tmp^val; vis[stk[tp]]=1; if((i/x-i/(x+1))&amp;1) tmp^=val; &#125; tmp=1; while(vis[tmp]) ++tmp; if(i&gt;m) SG[1][n/i]=tmp; else SG[0][i]=tmp; for(int j=1;j&lt;=tp;++j) vis[stk[j]]=0; &#125;&#125;int main()&#123; n=read(); m=sqrt(n); init(); int T=read(); while(T--) &#123; int tot=read(),ans=0; while(tot--) &#123; int x=n/read(); ans^=(x&gt;m)?SG[1][n/x]:SG[0][x]; &#125; if(ans) puts("Yes"); else puts("No"); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>博弈论</tag>
        <tag>整除分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4028 公约数数列]]></title>
    <url>%2F2019%2F09%2F08%2Fbzoj-4028-%E5%85%AC%E7%BA%A6%E6%95%B0%E6%95%B0%E5%88%97%2F</url>
    <content type="text"><![CDATA[分块. $\mbox{xor}$ 显然就只是一个系数,用不上什么特殊性质. 考虑对序列分块,每个元素维护 $f(i)$ 表示从该块的 $l$ 到 $i$ 的前缀 $\gcd$ , $g(i)$ 表示从该块的 $l$ 到 $i$ 的前缀 $\mbox{xor}$ . 查询时依次处理每个块,记前面所有块的前缀 $\gcd$ 为 $pregcd$ ,前缀 $\mbox{xor}$ 为 $prexor$ . 前缀 $\gcd$ 是单调不升的,若加上这一块后, $pregcd$ 不变,则说明这一块的所有前缀 $gcd$ 都是 $pregcd$ . 此时只需要找一下这块内的第一个 $g(i) = \frac x {pregcd}\mbox{ xor } prexor$ ,这可以用 $map$ 预处理出来. 如果加上这一块后, $pregcd$ 会改变,就暴力枚举这个块内的每个位置,判断是否有解. 每次 $pregcd$ 减小时,都会至少减小到原来的一半,所以暴力枚举的位置最多 $O(\log a)$ 个. 修改时直接暴力重构所在的那一块即可. 时间复杂度 $O(m\cdot \sqrt n\cdot \log a)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include&lt;bits/stdc++.h&gt;#define rg registerusing namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int gcd(int a,int b)&#123; return b?gcd(b,a%b):a;&#125;const int MAXN=1e5+10,S=320;int n,m,blocksiz,tot=0,L[S],R[S],bel[MAXN];int a[MAXN],f[MAXN],g[MAXN];map&lt;ll,int&gt; mp[S];void init_block()&#123; blocksiz=sqrt(n); for(int i=1;i&lt;=n;++i) bel[i]=(i-1)/blocksiz+1; tot=bel[n]; for(int i=n;i&gt;=1;--i) L[bel[i]]=i; for(int i=1;i&lt;=n;++i) R[bel[i]]=i;&#125;void calc_block(int x)&#123; mp[x].clear(); f[L[x]]=g[L[x]]=a[L[x]]; for(int i=L[x]+1;i&lt;=R[x];++i) &#123; f[i]=gcd(f[i-1],a[i]); g[i]=g[i-1]^a[i]; &#125; for(int i=R[x];i&gt;=L[x];--i) mp[x][1LL*g[i]]=i;&#125;int query(ll x)&#123; int pregcd=0,prexor=0; for(rg int i=1;i&lt;=tot;++i) &#123; if(gcd(pregcd,f[R[i]])==pregcd) &#123; if(x%pregcd==0) &#123; ll val=(x/pregcd)^prexor; if(mp[i].find(val)!=mp[i].end()) return mp[i][val]-1; &#125; &#125; else &#123; for(rg int j=L[i];j&lt;=R[i];++j) if(1LL*(prexor^g[j])*gcd(pregcd,f[j])==x) return j-1; &#125; pregcd=gcd(pregcd,f[R[i]]); prexor=prexor^g[R[i]]; &#125; return -1;&#125;char op[10];int main()&#123; n=read(); init_block(); for(rg int i=1;i&lt;=n;++i) a[i]=read(); for(rg int i=1;i&lt;=tot;++i) calc_block(i); m=read(); for(rg int i=1;i&lt;=m;++i) &#123; scanf("%s",op); if(op[0]=='M')//Modify &#123; int id=read()+1,x=read(); a[id]=x; calc_block(bel[id]); &#125; else//Query &#123; ll x; scanf("%lld",&amp;x); int ans=query(x); if(ans!=-1) printf("%d\n",ans); else puts("no"); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>STL</tag>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190908]]></title>
    <url>%2F2019%2F09%2F08%2Ftest20190908%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } U2FsdGVkX181TCxatD9yqn3cWQv83zI+lxPQrIEb5u1m9HM7OWZUmFRwr43wbBxxARRu7AgNaDiqvUfUJ9/0Hn+iXfcrGn7rJfYLq/E9+RpZ8iyZeIx1fitJ9fKqoTPLbrJ5+ZBnfCDiH28UgdaOmZidDdvBjJ/21MLEXdJ2Og3LaztkM6ZF/TLGoxOAvTeVJq3GYuLVfzbSKRF/bk6aW26PsshKm/HhCkQHsRw3TV3lx72nPqmVa5312LAcEtgx6tgmNPu2Rd7BhZpW7rkr6hNS1N97hkzypIl0lYo9Ga22fwZjzgumesCfk++e3HUiiUGJE0TXyU+G5xpVeuVoPnhmkKRcUj6Xnn/6bVyRaWr9bBN44m7VIpXhmYgAx2P6G9IqYBDv8WF1B8JnhQmrT+a+GDLdcVTnTanx/o0EcrdxM5tzgnPgcDzI03J/j1MZ3TUjXHCCs0WKYuQNgL8S2jZeyRJg2s6mAtL7tZBfXG8/bEE+v2QIjgHC/gGJWkEfcnlzQD5gJJC3pkILYQkFWCc7OZpg7HEQ/Th8BJa7XiZjADP719//NObhzldP5u6ufAZOpgFHQdVFwBztXZcIJpGD8tJWDurFt8oghj+iONoIwIp9RMDX21mzjORXDoumKQTlKdOtIMT4cqFuJ+Kc0NolSDoPyIBjeOnHSlfGLmGu+xOLjB5qD2m5rCVKDrko/pcnW0DaxgE4ohObKLCyJ17CQGwXkLy8Ld8UU4bI45SjZHSTDi2iVLCqA6XJMHqRAcPxvw7R/qUx02h2DX8uzUGEko6V8NoCStPZB2zFsVivur4Ly/MGvzA0bg0xT5YlzWifJcuUPh3jv8pj0Tc8SBC5pgw/tMkfqlq5myCT1z9tak0qcJ37dXzI7GLg094w2jNFJ1UbUJYMVDAi3Qq3VNVeDJDXma8ts9Em1Us7puFv+PXzI24u5uFbKyFFHK0EJCCAYTuBj5AUzu1C6ZwNPN6uwsBJqPHyvH2I5wwGl5GgNpbPH3gj/Ivxi+HzNWbWgc52DXUjq4Kc1AOY+nHM5dKb3cDu09By8SEuO1Z1r/FTvnkOmE3aKD3nu1scUP+KmDDy2mw/4CbjvPO7cnfwghVyjmApfA70B3VlkS/zwswn4L4WU7hiM8wzgqws/ecpOnyAbEfUoh2L4tBITa5YUUZ09i3dhwC7Q6N+9GOZhJiTrES/dUy4F312sy558dikvlejaLKDE0yeFG9lvYI+phie5LXiPmjbZnQllNE/hFycE0zOqVXrYtC8KKtwvjWGY0lj4KL9Qo9ht7QcJyYsx2Psfv1710hcE9Q6NyjWdIoAYDWg5seFAB/uuZ6W7zdqu5FOa0pdy1yvnGFzMnxssn+5d/ekDzUkhFuflg78P4FW73DReuXXupa8cQIyuhv8qFYvwc60NwWR5qgWWGanHwpn5Xx6PdmJAfPFqPNwLBBjNj5zw3VJQaSznmTkjWr8ndXITNoffLf+OidTOlT1HDFz6wDSQcBi2yNqXAbviDUveVBcCOwcW8+K4T4h9xjsF8m8WE/aOz6mjn1txVodg7vgW1tLLXKyIymPfd0F5fjjFZLWh2Ky57H8+IrHph4Dhz32xxl0L74VcXyuW80KYSFRt3Q4g7Yls69LZDmqxZl4aYecQdD7jTlzN80ldS4S/p1l579h4fcDrDvrIWP06AGgCTUwkSui+HoQifhQOu5fHNW86IZbr+uORIGu9n1m2gEmZQa+UTFGL+8GlpeRLlBd1CucVXo3EGvAAK7o6udPbeMbccCQsrajJFbQGQRwzyyDP4qHgHkcJsYkh4jZeDngonx2Vv6jhnSTx7ycdEgxGXaRGc1c01BH3qGhuE26fwA0fFU3Eym/6hXQCzq6im0HsqJaYdg1UOxPU6p8aaxyK4SCQYzSBgUartZTu0PVF74KS5MwjRgxSA5Ctig/gp9SoOItCK7TkH0SzZtO9+HknvFyjGJacrX72NWTJSY4gwcJSFUHo1Bgega4dsvbNiaD5cl5ml0c/zMq0W9/YRVzOZzGe224e0uzYOK4zlB8/t1phlRNShLvuUHMtCS6/kjLZtxRjJ1yc5MudRSwMGCgzTSdU/uihrpqtZ6ztsk762V7d5AlHmirEHzPXAzMkbLmUkynrmS6YZS/221FmNvgl2xKzNa1lAOJWZ1xsTTfCqYu9w7svZQpwdJmzoJBNgqAWI1hkV1yFXK/z94mUcfYvLc/CSdK3BJiGtGr3GFnJIgXd0cFEOG5cSpRkmy/gY5CZJRJ4RMDXb+RNpbQSFq0BztrQH10usZ0gCfuesQ1KyCqgxSPBm1ENFctqCszZCPWezsyNYet9Jb3i1drCZWP3Mw5V7pUIHmSOgaDOot9 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>构造</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Atcoder Beginner Contest 140]]></title>
    <url>%2F2019%2F09%2F07%2FAtcoder-Beginner-Contest-140%2F</url>
    <content type="text"><![CDATA[心态炸裂. A Password直接输出 $n^3$ . B Buffet按照题意模拟. C Maximal Value贪心一下. D Face Produces Unhappiness对一个区间 $[a,b]$ 进行操作,只用考虑 $a$ 与 $b+1$ 处贡献是否改变. 只有 $”LR”$ 与 $”RL”$ 这两种串匹配时贡献才会增多,暴力匹配一下. E Second Sum二分 + 线段树找出每个元素左边第一个,第二个比它大的,右边第一个,第二个比它大的. 算一下哪些区间的次大值是这个元素,加入贡献即可. F Many Slimes贪心模拟,每次尝试用当前拥有的最大的去生成次大的,依次判断. 比赛时由于一些代码中的弱智问题没有过掉这道题.]]></content>
      <tags>
        <tag>atcoder</tag>
        <tag>贪心</tag>
        <tag>二分</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190907]]></title>
    <url>%2F2019%2F09%2F07%2Ftest20190907%2F</url>
    <content type="text"><![CDATA[function doDecrypt (pwd, onError) { console.log('in doDecrypt'); const txt = document.getElementById('enc_content').innerHTML; let plantext; try { const bytes = CryptoJS.AES.decrypt(txt, pwd); var plaintext = bytes.toString(CryptoJS.enc.Utf8); } catch(err) { if(onError) { onError(err); } return; } document.getElementById('enc_content').innerHTML = plaintext; document.getElementById('enc_content').style.display = 'block'; document.getElementById('enc_passwd').style.display = 'none'; if(typeof MathJax !== 'undefined') { MathJax.Hub.Queue( ['resetEquationNumbers', MathJax.InputJax.TeX], ['PreProcess', MathJax.Hub], ['Reprocess', MathJax.Hub] ); } } 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 var onError = function(error) { document.getElementById("enc_error").innerHTML = "password error!" }; function decrypt() { var passwd = document.getElementById("enc_pwd_input").value; console.log(passwd); doDecrypt(passwd, onError); }]]></content>
      <tags>
        <tag>构造</tag>
        <tag>树状数组</tag>
        <tag>差分</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190906]]></title>
    <url>%2F2019%2F09%2F07%2Ftest20190906%2F</url>
    <content type="text"><![CDATA[卡空间是真的毒瘤. $kanade$设那两个数为 $x,y$ .将所有数都异或起来,记得到的结果是 $z=x\mbox{ xor } y$ . $z\not= 0$ ,所以可以找出 $z$ 二进制上为 $1$ 的某一位. 将所有数分成两组,这一位上为 $0$ 的分在一组,这一位上为 $1$ 的分在另一组,那么 $x,y$ 就被分到了不同的组. 将某一组内的数全部异或起来,就得到了 $x,y$ 其中的一个,继而可以求出另一个. $sakura$设 $f(i)$ 表示将节点 $i$ 放上樱花所需要的樱花数目. 在 $dfs$ 时,显然将子节点按照 $f(i)-a(i)$ 从大到小排序,依次放就可以了. $chtolly$设 $f_i$ 表示当前在位置 $i$ ,走到终点的期望时间,则答案为 $f_0$ . 有 $f_0=f_1+1,f_1=f_1$ ,而方程都是线性的,所以可以将所有 $f_i$ 都表示成 $f_i=kf_1+b$ 的形式. 前两项的表达形式已知,一直往后递推,可以得到 $f_{n+1}=1$ 的表示形式,解出 $f_1$ ,也就得到了 $f_0$ .]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>概率/期望</tag>
        <tag>位运算</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4027 兔子与樱花]]></title>
    <url>%2F2019%2F09%2F06%2Fbzoj-4027-%E5%85%94%E5%AD%90%E4%B8%8E%E6%A8%B1%E8%8A%B1%2F</url>
    <content type="text"><![CDATA[贪心. 在合法的前提下,一定是在每棵子树中也删掉尽可能多的点,这样这个子树的根对它的父亲的贡献最小. 于是对树 $dfs$ ,处理完 $u$ 的所有子节点 $v$ 后,需要考虑删掉哪些 $v$ . 将每个 $v$ 被删掉后对 $u$ 的贡献从小到大排序,能删就删即可. 时间复杂度 $O(n\log n)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e6+10;int ecnt=0,nx[MAXN],to[MAXN],head[MAXN];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int n,m,c[MAXN],ans=0,tmp[MAXN],tot;int sonsiz[MAXN];bool cmp(int x,int y)&#123; return c[x]+sonsiz[x]&lt;c[y]+sonsiz[y];&#125;void dfs(int u)&#123; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; dfs(v); &#125; tot=0; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; tmp[++tot]=v; &#125; sort(tmp+1,tmp+1+tot,cmp); for(int i=1;i&lt;=tot;++i) &#123; int v=tmp[i]; if(c[u]+sonsiz[u]+c[v]+sonsiz[v]-1&lt;=m) &#123; c[u]+=c[v]; sonsiz[u]+=sonsiz[v]-1; ++ans; &#125; &#125;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) c[i]=read(); for(int i=1;i&lt;=n;++i) &#123; sonsiz[i]=read(); for(int k=1;k&lt;=sonsiz[i];++k) &#123; int j=read()+1; addedge(i,j); &#125; &#125; dfs(1); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4026 dC Loves Number Theory]]></title>
    <url>%2F2019%2F09%2F05%2Fbzoj-4026-dC-Loves-Number-Theory%2F</url>
    <content type="text"><![CDATA[主席树. 区间 $[L,R]$ 的答案可以表示成 $\prod_{i=L}^R A_i\cdot \prod \frac {p_i-1}{p_i}$ . 前者容易维护,后者就是所有在 $[L,R]$ 区间内出现过的质数的贡献,做法比较经典. 从前往后依次加入元素,加入 $A_i$ 时,枚举 $A_i$ 的所有质因子 $p$ ,在第 $i$ 棵线段树中给位置 $i$ 乘上 $\frac {i-1} i$ . 若 $p$ 在之前出现过,且最后一个出现的位置是 $lst$ ,则还要在第 $i$ 棵线段树中给位置 $lst$ 乘上 $\frac i {i-1}$ ,即消除贡献. 询问时,后面那个 $\prod \frac {p_i-1}{p_i}$ 就是在第 $R$ 棵线段树中询问区间 $[L,R]$ 的连乘积. 用主席树来维护,时间复杂度 $O(P+n\log n\log P)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e6+777;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int inv[P+10],pcnt=0,prime[P+10],ism[P+10],minp[P+10];void init_pr()&#123; inv[1]=1; for(int i=2;i&lt;P;++i) inv[i]=mul(P-P/i,inv[P%i]); ism[1]=1; for(int i=2;i&lt;P;++i) &#123; if(!ism[i]) &#123; prime[++pcnt]=i; minp[i]=i; &#125; for(int j=1;j&lt;=pcnt &amp;&amp; i*prime[j]&lt;P;++j) &#123; int num=i*prime[j]; ism[num]=1; minp[num]=prime[j]; if(i%prime[j]==0) break; &#125; &#125;&#125;const int MAXN=5e4+10;int lastans=0;int n,m,preprod[MAXN],a[MAXN],rt[MAXN];struct PreSegtree&#123; int idx; PreSegtree()&#123;idx=0;&#125; struct node &#123; int ls,rs; int prod; node()&#123;ls=rs=0;prod=1;&#125; &#125;Tree[MAXN*100];#define root Tree[o] void upd(int &amp;o,int lst,int l,int r,int pos,int c) &#123; o=++idx; root=Tree[lst]; root.prod=mul(root.prod,c); if(l==r) return; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) upd(root.ls,Tree[lst].ls,l,mid,pos,c); else upd(root.rs,Tree[lst].rs,mid+1,r,pos,c); &#125; void query(int o,int l,int r,int L,int R,int &amp;res) &#123; if(L&lt;=l &amp;&amp; r&lt;=R) return (void)(res=mul(res,root.prod)); int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) query(root.ls,l,mid,L,R,res); if(R&gt;mid) query(root.rs,mid+1,r,L,R,res); &#125;&#125;T;int lst[P+10];void init_seg()&#123; for(int i=1;i&lt;=n;++i) &#123; int x=a[i]; int lsp=rt[i-1],cur; while(x!=1) &#123; int p=minp[x],cnt=0; if(lst[p]) &#123; T.upd(cur,lsp,1,n,lst[p],mul(p,inv[p-1])); lsp=cur; &#125; T.upd(cur,lsp,1,n,i,mul(p-1,inv[p])); lsp=cur; lst[p]=i; while(x%p==0) x/=p; &#125; rt[i]=cur; &#125;&#125;int solve(int L,int R)&#123; lastans=mul(preprod[R],inv[preprod[L-1]]); T.query(rt[R],1,n,L,R,lastans);&#125;int main()&#123; init_pr(); n=read(),m=read(); preprod[0]=1; for(int i=1;i&lt;=n;++i) &#123; a[i]=read(); preprod[i]=mul(preprod[i-1],a[i]); &#125; init_seg(); for(int i=1;i&lt;=m;++i) &#123; int L=read()^lastans,R=read()^lastans; solve(L,R); printf("%d\n",lastans); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190905]]></title>
    <url>%2F2019%2F09%2F05%2Ftest20190905%2F</url>
    <content type="text"><![CDATA[由 $ChitongZ$ 亲自出题. $game$考试时候的乱搞:求解最大权重独立子集, $bitset$ 暴力维护线性基. 最坏情况下复杂度为 $O(n^2\log n+\frac {n^3} {64})$ ,但在随机数据下,稍微优化下常数就过了. 正解:记前缀异或和为 $sum$ ,则每次询问区间 $(i,j)$ 相当于是获得了 $sum_{i-1}$ 与 $sum_j$ 的关系. 从 $sum_0$ 到 $sum_n$ 一共有 $n+1$ 个点,而 $sum_0$ 是已知的,所以做出一棵最小生成树就是答案. $matrix$模拟退火,先随机出一个状态,每次退火尝试交换两个数,并以一定概率接受较劣的解. $tree$考虑暴力 $dp$ ,设 $f(u,i)$ 表示在子树 $u$ 内选出若干点,乘积在模 $m$ 意义下为 $i$ 的方案数. 转移时,枚举 $u​$ 的子节点 $v​$ ,有 $f’(u,i)=\sum_{j\times k=i} f(u,j)\cdot f(v,k)​$ ,然后把 $f’​$ 复制到 $f​$ 里面. 这样做的时间复杂度是 $O(n\cdot m^2)$ . 转移形式很像卷积,求出 $m$ 的原根 $g​$ . 转移就变成了 $f’(u,i)=\sum_{j+ k=i} f(u,j)\cdot f(v,k)$ . 此时 $f(u,i)$ 表示在子树 $u$ 内选出若干点,乘积在模 $m$ 意义下为 $g^i​$ 的方案数. 这样就是卷积的形式了,利用 $NTT$ 进行优化,时间复杂度 $O(n\cdot m\log m)​$ .]]></content>
      <tags>
        <tag>多项式</tag>
        <tag>最小生成树</tag>
        <tag>模拟退火</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4018 小Q的幻想之乡]]></title>
    <url>%2F2019%2F09%2F04%2Fbzoj-4018-%E5%B0%8FQ%E7%9A%84%E5%B9%BB%E6%83%B3%E4%B9%8B%E4%B9%A1%2F</url>
    <content type="text"><![CDATA[莫比乌斯反演 + 线性筛. 由于每次只能走一种路径,并且边是双向的,所以从 $i$ 到 $j$ 的边数就是 $\frac {|i-j|} {\gcd(i,j)}$ . 于是每次询问要求 $ans=\sum_{i=1}^n \sum_{j=1}^m \frac {|i-j|} {\gcd(i,j)}$ . 与 $\gcd$ 有关的式子,考虑用莫比乌斯反演那一套操作,假定 $n\le m$ ,开始推式子, 记 $A=\min(\lfloor \frac n d\rfloor,\lfloor \frac m d\rfloor),B=\max(\lfloor \frac n d\rfloor,\lfloor \frac m d\rfloor)$ . 则后面那个 $\sum_{i=1}^A \sum_{j=1}^B |i-j|=\frac {(A-1)A(A+1)} 3+\frac {AB(B-A)} 2$ ,大佬的推导过程 . 前面那一块,需要预处理 $f(d)=\sum_{k|d} k\cdot \mu(k)$ 的前缀和,这是个积性函数,直接线性筛处理. 然后整除分块计算答案,时间复杂度 $O(n+T\cdot \sqrt m)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P1=1e9+7,P2=1e9+9;struct Z&#123; int v1,v2; Z(int v1=0,int v2=0):v1(v1),v2(v2) &#123;&#125; Z operator + (const Z &amp;rhs) const &#123; return Z(v1+rhs.v1&gt;=P1?v1+rhs.v1-P1:v1+rhs.v1,v2+rhs.v2&gt;=P2?v2+rhs.v2-P2:v2+rhs.v2); &#125; Z operator - (const Z &amp;rhs) const &#123; return Z(v1-rhs.v1&lt;0?v1-rhs.v1+P1:v1-rhs.v1,v2-rhs.v2&lt;0?v2-rhs.v2+P2:v2-rhs.v2); &#125; Z operator * (const Z &amp;rhs) const &#123; return Z(1LL*v1*rhs.v1%P1,1LL*v2*rhs.v2%P2); &#125; void pr() &#123; printf("%d %d\n",v1,v2); &#125;&#125;;Z fpow(Z a,int b)&#123; Z res=Z(1,1); while(b) &#123; if(b&amp;1) res=res*a; a=a*a; b&gt;&gt;=1; &#125; return res;&#125;const int N=2e6;int prime[N+10],ism[N+10],pcnt=0;Z f[N+10],inv2,inv3;void init()&#123; inv2=fpow(Z(2,2),P1-2)*Z(1,2)*Z(1,2); inv3=fpow(Z(3,3),P1-2)*Z(1,3)*Z(1,3); f[1]=Z(1,1); ism[1]=1; for(int i=2;i&lt;=N;++i) &#123; if(!ism[i]) &#123; prime[++pcnt]=i; f[i]=Z(1,1)-Z(i,i); &#125; for(int j=1;j&lt;=pcnt &amp;&amp; 1LL*i*prime[j]&lt;=N;++j) &#123; int num=i*prime[j]; ism[num]=1; if(i%prime[j]==0) &#123; f[num]=f[i]; break; &#125; f[num]=f[i]*f[prime[j]]; &#125; &#125; for(int i=1;i&lt;=N;++i) f[i]=f[i-1]+f[i];&#125;Z calc(int a,int b)&#123; if(a&gt;b) swap(a,b); Z A=Z(a,a),B=Z(b,b); Z I=Z(1,1); return (A-I)*A*(A+I)*inv3+A*B*(B-A)*inv2;&#125;void solve()&#123; int n=read(),m=read(); if(n&gt;m) swap(n,m); Z ans=Z(0,0); for(int l=1,r;l&lt;=n;l=r+1) &#123; r=min(n/(n/l),m/(m/l)); ans=ans+(f[r]-f[l-1])*calc(n/l,m/l); &#125; ans.pr();&#125;int main()&#123; init(); int T=read(); while(T--) solve(); return 0;&#125;]]></content>
      <tags>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1214]]></title>
    <url>%2F2019%2F09%2F04%2FCF1214%2F</url>
    <content type="text"><![CDATA[$Div.1+Div.2$ A Optimal Currency Exchange第一种货币只有面值 $1$ 有用,第二种货币只有面值 $5$ 有用. 枚举换了多少个第二种货币,时间复杂度 $O(\frac n {5e})$ . B Badges读懂题后就是两个不等式,手动解一下. C Bad Sequence第一次遇到不合法的 $-1$ 时,将它忽略,最后再放回去,看能否合法. D Treasure Island显然答案 $\le 2$ ,因为我们可以去掉与出发点相邻的两个点. 于是只需要判断 $0$ 与 $1$ 是否合法. $0$ 就是判断起点能否到终点. $1$ 就是判断是否存在一个点 $x$ ,使得每条从起点到终点的路径都经过 $x$ . 设 $f(x),g(x)$ 分别表示起点到 $x$ 的路径数, $x$ 到终点的路径数,判断是否有 $f(x)\cdot g(x)$ 等于 起点到终点的路径数. E Petya and Construction Set可以假定 $d_i$ 是从大到小排好序的,否则可以先排序. 建出一条链,链上节点依次为 $1,3,5,\dots,2i-1$ . 然后再将偶数编号的节点 $2i$ 依次挂上去,找到链上的第 $i+d_i-1$ 个节点,将 $2i$ 挂在它的旁边即可. 因为 $d_i$ 是从大到小排好序的,且 $d_i\le n$ ,所以这样做总能构造出合法解. F Employment待更. G Feeling Good待更. H Tiles Placement待更.]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>构造</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4017 小Q的无敌异或]]></title>
    <url>%2F2019%2F09%2F04%2Fbzoj-4017-%E5%B0%8FQ%E7%9A%84%E6%97%A0%E6%95%8C%E5%BC%82%E6%88%96%2F</url>
    <content type="text"><![CDATA[树状数组. 对于第一问,将每个二进制位分开计算贡献,变为 $0/1$ 数列,询问有几个区间的异或和为 $1$ ,随便做做. 对于第二问,仍然将每个二进制位分开算,只需要考虑所有的区间和的第 $i$ 位有奇数个 $1$ 还是偶数个 $1$ . 记前缀和 $sum(x)=\sum_{i=1}^x a_i​$ ,那么每个区间和都是 $sum(r)-sum(l-1)​$ 的形式. 从前往后枚举 $r$ ,若 $sum(r)-sum(l-1)$ 第 $i$ 位上为 $1$ ,则只有两种可能. 一种是 $sum(r)$ 与 $sum(l-1)$ 第 $i$ 位不同,且 $sum(r)\bmod 2^i\ge sum(l-1)\bmod 2^i$ ,即没有向第 $i$ 位借位. 另一种是 $sum(r)$ 与 $sum(l-1)$ 第 $i$ 位相同,且 $sum(r)\bmod 2^i&lt; sum(l-1)\bmod 2^i$ ,即有向第 $i$ 位借位. 将所有前缀和离散化,开两个树状数组进行维护,时间复杂度 $O(37\cdot n\log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=1e5+10;int n,a[MAXN];struct FenwickTree&#123; int bit[MAXN];#define lowbit(x) x&amp;(-x) void add(int x) &#123; for(;x&lt;=n+1;x+=lowbit(x)) bit[x]^=1; &#125; int sum(int x) &#123; int s=0; for(;x;x-=lowbit(x)) s^=bit[x]; return s; &#125; int query(int l,int r) &#123; return sum(r)^sum(l-1); &#125; void reset() &#123; memset(bit,0,sizeof bit); &#125;&#125;T[2];int mx;void solve1()&#123; int tot[2]; int ans=0; for(int k=0;(1&lt;&lt;k)&lt;=mx;++k) &#123; tot[0]=1,tot[1]=0; int sum=0; for(int i=1;i&lt;=n;++i) &#123; sum^=(a[i]&gt;&gt;k)&amp;1; ans=add(ans,mul(1&lt;&lt;k,tot[sum^1])); ++tot[sum]; &#125; &#125; printf("%d ",ans);&#125;ll s[MAXN],S;int tot;void solve2()&#123; ll t,sum,ans=0; for(int k=0;(1LL&lt;&lt;k)&lt;=S;++k) &#123; T[0].reset(); T[1].reset(); sum=tot=0; s[++tot]=sum&amp;((1LL&lt;&lt;k)-1); for(int i=1;i&lt;=n;++i) &#123; sum+=a[i]; s[++tot]=sum&amp;((1LL&lt;&lt;k)-1); &#125; sort(s+1,s+1+tot); tot=unique(s+1,s+1+tot)-s-1; sum=t=0; T[(sum&gt;&gt;k)&amp;1].add(lower_bound(s+1,s+1+tot,sum&amp;((1LL&lt;&lt;k)-1))-s); for(int i=1;i&lt;=n;++i) &#123; sum+=a[i]; int id=(sum&gt;&gt;k)&amp;1,p=lower_bound(s+1,s+1+tot,sum&amp;((1LL&lt;&lt;k)-1))-s; t^=T[id].query(p+1,tot); t^=T[id^1].query(1,p); T[id].add(p); &#125; ans+=t&lt;&lt;k; &#125; printf("%lld\n",ans);&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) &#123; a[i]=read(); mx=max(mx,a[i]); S+=a[i]; &#125; solve1(); solve2(); return 0;&#125;]]></content>
      <tags>
        <tag>树状数组</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4180 字符串计数]]></title>
    <url>%2F2019%2F09%2F04%2Fbzoj-4180-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%AE%A1%E6%95%B0%2F</url>
    <content type="text"><![CDATA[$SAM$ + 二分 + $\text{distance product}​$ . 先考虑如果给出了一个串 $S$ ,如何求构造出 $S$ 的最少操作次数. 做法是将串 $S$ 在 $SAM$ 上贪心地向后匹配,出现空转移时,转移到根节点对应的儿子继续匹配,且操作数 $+1$ . 这样能让后面接上的子串尽可能短,就有更多的机会继续向后匹配. 现在要求解原问题,我们令出现空匹配时转移到根节点对应儿子的这条边代价为 $1$ ,其余边代价为 $0$ . 那么就是求从根节点出发走 $n$ 步的最大代价. 注意到这个图中很多边的权值都是 $0$ ,可以发现真正有用的就只有根节点的 $A,B,C,D$ 四个儿子节点. 预处理一下 $A\to B$ 在原图上要走 $x$ 步,那么 $A\to B$ 的权值就是 $x$ ,其他的边同理. 由于从 $A\to B$ 操作数一定 $+1$ ,就等价于在这个 $K_4$ 上询问走边权和不超过 $n$ 的边,最多走过的边数. 可以二分答案 $mid$ ,尝试检验. 用 $\text{distance product}$ 来定义矩阵乘法,那么邻接矩阵的 $mid$ 次方就表示最多走 ​$mid$ 条边时两点的最短路径长度. 时间复杂度 $O(|T|+4^3\cdot\log^2 N)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10,S=4;const ll inf=1e18;char buf[MAXN];ll n;struct Matrix&#123; ll v[S][S]; Matrix() &#123; memset(v,0x7f,sizeof v); &#125; Matrix operator * (const Matrix &amp;rhs) const &#123; Matrix res; for(int i=0; i&lt;S; ++i) for(int k=0; k&lt;S; ++k) for(int j=0; j&lt;S; ++j) res.v[i][j]=min(res.v[i][j],v[i][k]+rhs.v[k][j]); return res; &#125;&#125; A;Matrix fpow(Matrix a,ll b)&#123; Matrix res=a; --b; while(b) &#123; if(b&amp;1) res=res*a; a=a*a; b&gt;&gt;=1; &#125; return res;&#125;int vis[MAXN],dep[MAXN];queue&lt;int&gt; q;struct Suffix_Automaton&#123; int idx,lst; int ch[MAXN][S],fa[MAXN],len[MAXN]; Suffix_Automaton() &#123; idx=lst=1; &#125; void Extend(int c) &#123; int p=lst,np=++idx; lst=np; len[np]=len[p]+1; while(p &amp;&amp; ch[p][c]==0) ch[p][c]=np,p=fa[p]; if(p==0) fa[np]=1; else &#123; int q=ch[p][c]; if(len[q]==len[p]+1) fa[np]=q; else &#123; int nq=++idx; len[nq]=len[p]+1; fa[nq]=fa[q]; fa[q]=fa[np]=nq; memcpy(ch[nq],ch[q],sizeof ch[nq]); while(p &amp;&amp; ch[p][c]==q) ch[p][c]=nq,p=fa[p]; &#125; &#125; &#125; void bfs(int k) &#123; int st=ch[1][k]; q.push(st); dep[st]=1; vis[st]=1; while(!q.empty()) &#123; int u=q.front(); q.pop(); for(int i=0; i&lt;S; ++i) if(ch[u][i] &amp;&amp; !vis[ch[u][i]]) &#123; int v=ch[u][i]; q.push(v); dep[v]=dep[u]+1; vis[v]=1; &#125; else A.v[k][i]=min(A.v[k][i],(ll)(dep[u])); &#125; &#125; bool check(ll mid) &#123; --mid; Matrix tmp=fpow(A,mid); ll dist=inf; for(int i=0;i&lt;S;++i) for(int j=0;j&lt;S;++j) dist=min(dist,tmp.v[i][j]); ++dist; return dist&lt;=n; &#125; ll solve() &#123; for(int i=0; i&lt;S; ++i) &#123; memset(vis,0,sizeof vis); bfs(i); &#125; ll L=1,R=n,ans; while(L&lt;=R) &#123; ll mid=(L+R)&gt;&gt;1; if(check(mid)) ans=mid,L=mid+1; else R=mid-1; &#125; return ans; &#125;&#125; SAM;int main()&#123; n=read(); scanf("%s",buf+1); int L=strlen(buf+1); for(int i=1; i&lt;=L; ++i) SAM.Extend(buf[i]-'A'); cout&lt;&lt;SAM.solve()&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>二分</tag>
        <tag>矩阵优化</tag>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4154 Generating Synergy]]></title>
    <url>%2F2019%2F09%2F03%2Fbzoj-4154-Generating-Synergy%2F</url>
    <content type="text"><![CDATA[$kd$ 树. 将每个点的 $dfn,dep$ 视作 $x,y$ 坐标,那么每次修改就是给平面上一个矩形内的点染色. 用 $kd$ 树写一写,时间复杂度 $O(n\log n+q\sqrt n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;inline int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=1e5+10;const int inf=1e9;int ecnt=0,head[MAXN],to[MAXN],nx[MAXN];inline void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int dfn[MAXN],idx=0,siz[MAXN],dep[MAXN];void dfs(int u)&#123; dfn[u]=++idx; siz[u]=1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; dep[v]=dep[u]+1; dfs(v); siz[u]+=siz[v]; &#125;&#125;int n,C,Q,Tp;struct node&#123; int v[2],mx[2],mi[2],fa,id; int col,tag,ls,rs; node()&#123;mx[0]=mx[1]=-inf,mi[0]=mi[1]=inf;&#125; bool operator &lt; (const node &amp;rhs) const &#123; return v[Tp]&lt;rhs.v[Tp]; &#125;&#125;Tree[MAXN];#define root Tree[o]#define lson Tree[root.ls]#define rson Tree[root.rs]inline void pushup(int o)&#123; for(int i=0;i&lt;2;++i) &#123; root.mx[i]=max(lson.mx[i],rson.mx[i]); root.mx[i]=max(root.mx[i],root.v[i]); root.mi[i]=min(lson.mi[i],rson.mi[i]); root.mi[i]=min(root.mi[i],root.v[i]); &#125;&#125;int pos[MAXN];int BuildTree(int l,int r,int tp)&#123; Tp=tp; int mid=(l+r)&gt;&gt;1; int o=mid; nth_element(Tree+l,Tree+mid,Tree+r+1); pos[root.id]=o; if(l&lt;=mid-1) &#123; root.ls=BuildTree(l,mid-1,tp^1); lson.fa=o; &#125; if(mid+1&lt;=r) &#123; root.rs=BuildTree(mid+1,r,tp^1); rson.fa=o; &#125; pushup(o); return o;&#125;inline void pushdown(int o)&#123; if(root.tag) &#123; if(root.ls) lson.col=lson.tag=root.tag; if(root.rs) rson.col=rson.tag=root.tag; root.tag=0; &#125;&#125;int Mx[2],Mi[2];void upd(int o,int c)&#123; if(root.mi[0]&gt;Mx[0] || root.mx[0]&lt;Mi[0] || root.mi[1]&gt;Mx[1] || root.mx[1]&lt;Mi[1]) return; if(Mi[0]&lt;=root.mi[0] &amp;&amp; root.mx[0]&lt;=Mx[0] &amp;&amp; Mi[1]&lt;=root.mi[1] &amp;&amp; root.mx[1]&lt;=Mx[1]) return (void)(root.col=root.tag=c); if(Mi[0]&lt;=root.v[0] &amp;&amp; root.v[0]&lt;=Mx[0] &amp;&amp; Mi[1]&lt;=root.v[1] &amp;&amp; root.v[1]&lt;=Mx[1]) root.col=c; pushdown(o); if(root.ls) upd(root.ls,c); if(root.rs) upd(root.rs,c);&#125;int stk[MAXN],tp;inline int query(int x)&#123; tp=0; int y=x; while(Tree[y].fa) &#123; stk[++tp]=Tree[y].fa; y=Tree[y].fa; &#125; while(tp) pushdown(stk[tp--]); return Tree[x].col;&#125;void solve()&#123; n=read(),C=read(),Q=read(); ecnt=0; idx=0; for(int i=1;i&lt;=n;++i) head[i]=0; for(int i=2;i&lt;=n;++i) addedge(read(),i); dfs(1); for(int i=1;i&lt;=n;++i) &#123; Tree[i].v[0]=dfn[i]; Tree[i].v[1]=dep[i]; Tree[i].ls=Tree[i].rs=0; Tree[i].col=1; Tree[i].tag=0; Tree[i].fa=0; Tree[i].id=i; &#125; int rt=BuildTree(1,n,0); int ans=0; for(int i=1;i&lt;=Q;++i) &#123; int x=read(),y=read(),c=read(); if(!c) //query ans=add(ans,mul(i,query(pos[x]))); else //update &#123; Mi[0]=dfn[x]; Mx[0]=dfn[x]+siz[x]-1; Mi[1]=dep[x]; Mx[1]=dep[x]+y; upd(rt,c); &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl;&#125;int main()&#123; int T=read(); while(T--) solve(); return 0;&#125;]]></content>
      <tags>
        <tag>kdtree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4162 shlw loves matrix II]]></title>
    <url>%2F2019%2F09%2F03%2Fbzoj-4162-shlw-loves-matrix-II%2F</url>
    <content type="text"><![CDATA[拉格朗日插值求特征多项式 + 多项式取模. $k\times k$ 的方阵 $M$ 的特征多项式 $f(x)=|xI-M|$ ,它是个 $k$ 次多项式,首项系数为 $1$ . 可以随便选 $k+1$ 个 $x$ ,代到多项式里,用高斯消元算出对应的 $f(x)​$ . 然后利用拉格朗日插值得到特征多项式 $f(x)$ 的系数. 根据 $Cayley-Hamilton$ 定理, $f(M)=0$ , 那么我们给 $M^n$ 加上任意多个 $f(M)$ 都不会影响答案,即 $M^n=M^n\bmod f(M)$ . 只需计算 $M^n\bmod f(M)$ ,两者都是关于 $M$ 的多项式,模数不是 $NTT$ 模数,多项式快速幂 + 暴力取模. 最终得到的 $M^n\bmod f(M)$ 次数显然小于 $k$ ,将 $M$ 代进去暴力算即可. 时间复杂度 $O(k^4+k^2\log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=51,L=1e4+10;char buf[L];int n,m,len,tmp[MAXN&lt;&lt;1],p[MAXN];void Mul(int *a,int *b,int *f)&#123; memset(tmp,0,sizeof tmp); for(int i=0;i&lt;=n;++i) for(int j=0;j&lt;=n;++j) tmp[i+j]=add(tmp[i+j],mul(a[i],b[j])); for(int i=m;i&gt;=n;--i) &#123; int inv=mul(tmp[i],fpow(p[n],P-2)); for(int j=0;j&lt;=n;++j) tmp[i-j]=add(tmp[i-j],P-mul(p[n-j],inv)); &#125; for(int i=0;i&lt;=n;++i) f[i]=tmp[i];&#125;int a[MAXN][MAXN],b[MAXN][MAXN];int Det()&#123; int res=1,sgn=1; for(int i=1;i&lt;=n;++i) &#123; for(int j=i;j&lt;=n;++j) if(b[j][i]) &#123; if(i!=j) swap(b[i],b[j]),sgn*=-1; break; &#125; int inv=fpow(b[i][i],P-2); for(int j=i+1;j&lt;=n;++j) &#123; if(!b[j][i]) continue; int t=mul(b[j][i],inv); for(int k=i;k&lt;=n;++k) b[j][k]=add(b[j][k],P-mul(b[i][k],t)); &#125; res=mul(res,b[i][i]); &#125; if(sgn==1) return res; else return add(P-res,0);&#125;int y[MAXN],c[MAXN],d[MAXN],mat[MAXN][MAXN],rmat[MAXN][MAXN];int main()&#123; scanf("%s%d",buf+1,&amp;n); len=strlen(buf+1); m=n&lt;&lt;1; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=n;++j) a[i][j]=read(); for(int i=0;i&lt;=n;++i) &#123; memset(b,0,sizeof b); for(int j=1;j&lt;=n;++j) for(int k=1;k&lt;=n;++k) b[j][k]=(j==k)?(add(i,P-a[j][k])):(add(0,P-a[j][k])); y[i]=Det(); &#125; for(int i=0;i&lt;=n;++i) &#123; memset(tmp,0,sizeof tmp); tmp[0]=y[i]; for(int j=0;j&lt;=n;++j) if(i!=j) &#123; for(int k=n;k;--k) tmp[k]=add(tmp[k-1],P-mul(tmp[k],j)); tmp[0]=add(0,P-mul(tmp[0],j)); int inv=fpow(add(i,P-j),P-2); for(int k=0;k&lt;=n;++k) tmp[k]=mul(tmp[k],inv); &#125; for(int j=0;j&lt;=n;++j) p[j]=add(p[j],tmp[j]); &#125; c[0]=d[1]=1; for(int i=len;i;--i) &#123; if(buf[i]=='1') Mul(c,d,c); Mul(d,d,d); &#125; memset(b,0,sizeof b); for(int i=1;i&lt;=n;++i) mat[i][i]=1; for(int l=0;l&lt;=n;++l) &#123; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=n;++j) b[i][j]=add(b[i][j],mul(c[l],mat[i][j])); memset(rmat,0,sizeof rmat); for(int i=1;i&lt;=n;++i) for(int k=1;k&lt;=n;++k) for(int j=1;j&lt;=n;++j) rmat[i][j]=add(rmat[i][j],mul(mat[i][k],a[k][j])); memcpy(mat,rmat,sizeof mat); &#125; for(int i=1;i&lt;=n;++i) &#123; for(int j=1;j&lt;=n;++j) printf("%d ",b[i][j]); puts(""); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>线性代数</tag>
        <tag>拉格朗日插值</tag>
        <tag>多项式</tag>
        <tag>高斯消元</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4128 Matrix]]></title>
    <url>%2F2019%2F09%2F03%2Fbzoj-4128-Matrix%2F</url>
    <content type="text"><![CDATA[$BSGS$ . 因为保证了矩阵 $A$ 在模 $p$ 意义下有逆,并且在 $p$ 以内有解,所以就直接像普通的 $BSGS$ 那样做就可以了. 可以手写一个 $hash$ 函数,来判断两个矩阵是否完全相等. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=70;typedef unsigned long long ull;const ull Base=137;int n,P;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;struct Matrix&#123; int v[MAXN][MAXN]; Matrix()&#123;memset(v,0,sizeof v);&#125; Matrix operator * (const Matrix &amp;rhs) const &#123; Matrix res; for(int i=0;i&lt;n;++i) for(int k=0;k&lt;n;++k)if(v[i][k]) for(int j=0;j&lt;n;++j) res.v[i][j]=add(res.v[i][j],mul(v[i][k],rhs.v[k][j])); return res; &#125; ull Hash() &#123; ull res=0; for(int i=0;i&lt;n;++i) for(int j=0;j&lt;n;++j) res=res*Base+(ull)(v[i][j]); return res; &#125;&#125;A,B,I;Matrix fpow(Matrix a,int b)&#123; Matrix res=I; while(b) &#123; if(b&amp;1) res=res*a; a=a*a; b&gt;&gt;=1; &#125; return res;&#125;map&lt;ull,int&gt; mp;int BSGS()&#123; int m=sqrt(P); Matrix prod=B,tmp=A; for(int j=0;j&lt;m;++j) &#123; mp[prod.Hash()]=j; prod=prod*tmp; &#125; prod=tmp=fpow(A,m); for(int i=1;i&lt;=m;++i) &#123; ull t=prod.Hash(); if(mp.find(t)!=mp.end()) return i*m-mp[t]; prod=prod*tmp; &#125; return -1;&#125;int main()&#123; n=read(),P=read(); for(int i=0;i&lt;n;++i) I.v[i][i]=1; for(int i=0;i&lt;n;++i) for(int j=0;j&lt;n;++j) A.v[i][j]=read(); for(int i=0;i&lt;n;++i) for(int j=0;j&lt;n;++j) B.v[i][j]=read(); cout&lt;&lt;BSGS()&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>hash</tag>
        <tag>BSGS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4247 挂饰]]></title>
    <url>%2F2019%2F09%2F03%2Fbzoj-4247-%E6%8C%82%E9%A5%B0%2F</url>
    <content type="text"><![CDATA[贪心 + 记忆化搜索. 贪心,先考虑挂钩多的选不选,再考虑挂钩少的选不选,将物品按照挂钩数目从大到小排序. 设 $f(i,j)$ 表示可以选择 $i\sim n$ 的物品,有 $j$ 个挂钩,能获得的最大收益,枚举第 $i$ 个选还是不选来转移. 因为物品是按照挂钩数目从大到小考虑的,就没有后效性了. 挂钩数目可能很多,但有用的最多 $n$ 个,所以状态数是 $O(n^2)$ 的. 时间复杂度 $O(n\log n+n^2)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e3+10,inf=0x7fffffff;int n,f[MAXN][MAXN];pair&lt;int,int&gt; p[MAXN];int dfs(int i,int j)&#123; j=min(j,n); if(i&gt;n) return 0; if(f[i][j]!=-inf) return f[i][j]; f[i][j]=dfs(i+1,j); if(j&gt;0) f[i][j]=max(f[i][j],dfs(i+1,j-1+p[i].first)+p[i].second); return f[i][j];&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) &#123; p[i].first=read(); p[i].second=read(); &#125; sort(p+1,p+1+n); reverse(p+1,p+1+n); for(int i=0;i&lt;=n;++i) for(int j=0;j&lt;=n;++j) f[i][j]=-inf; cout&lt;&lt;dfs(1,1)&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 2124 等差子序列]]></title>
    <url>%2F2019%2F09%2F03%2Fbzoj-2124-%E7%AD%89%E5%B7%AE%E5%AD%90%E5%BA%8F%E5%88%97%2F</url>
    <content type="text"><![CDATA[树状数组动态维护 $hash$ 值. 只需要判断是否存在长度为 $3$ 的等差子序列,即满足 $1\le i&lt;k&lt;j\le n,2a_k=a_i+a_j$ 的三元组 $(i,j,k)$ . 考虑从前往后枚举 $k$ ,记录一个 $vis$ 数组表示各个数当前是否出现过. 只需要检查 $a_k$ 两侧的字符串是否对称 (一侧超出的长度不计) ,若对称,说明不存在合法的 $(i,j,k)$ ,否则存在. 因为给出的序列是从 $1$ 到 $n$ 的一个排列,如果一个数 $x$ 当前没有出现,则一定会在之后出现,正确性就显然了. 用树状数组动态维护 $vis$ 正串与反串的 $hash$ 值,时间复杂度 $O(T\cdot n\log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e4+10;typedef unsigned long long ull;const ull Base=137;ull pw[MAXN];int n;struct FenwickTree&#123; ull bit[MAXN]; void reset() &#123; memset(bit,0,sizeof bit); &#125;#define lowbit(x) x&amp;(-x) void add(int x,int c) &#123; int p=x; for(;x&lt;=n;x+=lowbit(x)) bit[x]+=pw[x-p]*c; &#125; ull sum(int x) &#123; int p=x; ull s=0; for(;x;x-=lowbit(x)) s+=bit[x]*pw[p-x]; return s; &#125; ull query(int l,int r) &#123; return sum(r)-sum(l-1)*pw[r-l+1]; &#125;&#125;T1,T2;bool solve()&#123; n=read(); T1.reset(); T2.reset(); bool flag=false; for(int i=1;i&lt;=n;++i) &#123; int x=read(); if(flag) continue; int len=min(x-1,n-x); if(len &amp;&amp; T1.query(x-len,x-1)!=T2.query(n-(x+len)+1,n-(x+1)+1)) flag=true; T1.add(x,1); T2.add(n-x+1,1); &#125; return flag;&#125;int main()&#123; pw[0]=1; for(int i=1;i&lt;=10000;++i) pw[i]=pw[i-1]*Base; int T=read(); while(T--) &#123; if(solve()) puts("Y"); else puts("N"); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>树状数组</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3531 旅行]]></title>
    <url>%2F2019%2F09%2F02%2Fbzoj-3531-%E6%97%85%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[动态开点线段树. 先上个树链剖分,转化成序列上的问题. 只有 $10^5$ 种宗教,可以给每种宗教开一棵动态开点线段树维护信息. 修改宗教只有单点修改,比较容易处理,随便写一写就可以了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;ll ans;int cnt=0;struct Segtree&#123; struct node &#123; int ls,rs; int mx; ll sum; node()&#123;mx=sum=0;&#125; &#125;Tree[MAXN*20];#define root Tree[o]#define lson Tree[root.ls]#define rson Tree[root.rs] void pushup(int o) &#123; root.mx=max(lson.mx,rson.mx); root.sum=lson.sum+rson.sum; &#125; void upd(int &amp;o,int l,int r,int pos,int c) &#123; if(!o) o=++cnt; if(l==r) return (void)(root.sum=root.mx=c); int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) upd(root.ls,l,mid,pos,c); else upd(root.rs,mid+1,r,pos,c); pushup(o); &#125; void query(int o,int l,int r,int L,int R,int op) &#123; if(!o) return; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; if(!op) ans=max(ans,1LL*root.mx); else ans+=root.sum; return; &#125; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) query(root.ls,l,mid,L,R,op); if(R&gt;mid) query(root.rs,mid+1,r,L,R,op); &#125;&#125;T;int rt[MAXN];int ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int n,m,k;int idx=0,siz[MAXN],mxson[MAXN],dep[MAXN],top[MAXN],fa[MAXN],dfn[MAXN];int w[MAXN],c[MAXN];void dfs1(int u,int f)&#123; fa[u]=f; siz[u]=1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==f) continue; dep[v]=dep[u]+1; dfs1(v,u); siz[u]+=siz[v]; if(siz[v]&gt;siz[mxson[u]]) mxson[u]=v; &#125;&#125;void dfs2(int u,int tp)&#123; top[u]=tp; dfn[u]=++idx; T.upd(rt[c[u]],1,n,dfn[u],w[u]); if(mxson[u]) dfs2(mxson[u],tp); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v!=fa[u] &amp;&amp; v!=mxson[u]) dfs2(v,v); &#125;&#125;void solve(int x,int y,int op)&#123; int C=c[x]; while(top[x]!=top[y]) &#123; if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); T.query(rt[C],1,n,dfn[top[x]],dfn[x],op); x=fa[top[x]]; &#125; if(dep[x]&lt;dep[y]) swap(x,y); T.query(rt[C],1,n,dfn[y],dfn[x],op);&#125;char op[10];int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) w[i]=read(),c[i]=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; dfs1(1,0); dfs2(1,1); for(int i=1;i&lt;=m;++i) &#123; scanf("%s",op); if(op[0]=='C') &#123; if(op[1]=='C') &#123; int x=read(),y=read(); T.upd(rt[c[x]],1,n,dfn[x],0); T.upd(rt[y],1,n,dfn[x],w[x]); c[x]=y; &#125; else &#123; int x=read(),y=read(); T.upd(rt[c[x]],1,n,dfn[x],y); w[x]=y; &#125; &#125; else &#123; ans=0; int x=read(),y=read(); if(op[1]=='S') solve(x,y,1); else solve(x,y,0); printf("%lld\n",ans); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>树链剖分</tag>
        <tag>动态开点线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 6690 灵梦的计算器]]></title>
    <url>%2F2019%2F09%2F02%2FLoj-6690-%E7%81%B5%E6%A2%A6%E7%9A%84%E8%AE%A1%E7%AE%97%E5%99%A8%2F</url>
    <content type="text"><![CDATA[牛顿迭代求解方程. 令 $k=\lfloor n^a+n^b\rfloor,f(x)=x^a+x^b$ ,那么就是要求解 $f(n_0)=k$ 与 $f(n_1)=k+1$ 两个方程. 直接二分精度不够,利用牛顿迭代,这两个根都在 $n$ 附近,取 $x_0=n$ ,迭代一次精度即可达到要求. 发现常数比较大,跑不过去,其实并不需要把这两个根分别求出来,只需要求得两根之差,加入贡献即可.$$\begin{aligned}n_0&amp;=n-\frac{f(n)-k}{f’(n)} \\n_1&amp;=n-\frac{f(n)-k-1}{f’(n)} \\n_1-n_0&amp;=\frac {1} {f’(n)}=\frac {1} {an^{a-1}+bn^{b-1}}\end{aligned}$$发现这个贡献与 $k$ 无关,于是每次询问可以少调用 $4$ 次 $pow$ 函数. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;namespace Mker&#123;// Powered By Kawashiro_Nitori// Made In Gensokyo, Nihon #define uint unsigned int uint sd;int op; inline void init() &#123;scanf("%u %d", &amp;sd, &amp;op);&#125; inline uint uint_rand() &#123; sd ^= sd &lt;&lt; 13; sd ^= sd &gt;&gt; 7; sd ^= sd &lt;&lt; 11; return sd; &#125; inline double get_n() &#123; double x = (double) (uint_rand() % 100000) / 100000; return x + 4; &#125; inline double get_k() &#123; double x = (double) (uint_rand() % 100000) / 100000; return (x + 1) * 5; &#125; inline void read(double &amp;n,double &amp;a, double &amp;b) &#123; n = get_n(); a = get_k(); if (op) b = a; else b = get_k(); &#125;&#125;int main()&#123; int T=read(); Mker::init(); double n,a,b,k,ans=0; while(T--) &#123; Mker::read(n,a,b); ans+=1/(a*pow(n,a-1)+b*pow(n,b-1)); &#125; printf("%.3lf\n",ans); return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>牛顿迭代</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3881 Divljak]]></title>
    <url>%2F2019%2F09%2F02%2Fbzoj-3881-Divljak%2F</url>
    <content type="text"><![CDATA[$AC$ 自动机 + 树上小技巧. 对所有的 $s$ 串建出 $AC$ 自动机以及 $fail$ 树. $fail$ 树中的每个点都能表示一个串,并且在子树 $i$ 内的点,每个点表示的串都有节点 $i$ 对应的串作为后缀. 每次插入一个串 $p$ 时,就在 $AC$ 自动机上匹配它,匹配过程中经过的所有点都是 $p$ 的前缀,而子串可以看做是前缀的后缀,所以将经过的这些前缀都加上一种新颜色,询问时答案就是 $s_i$ 对应节点子树中所含颜色种类. 可以用 $dfs$ 序 + 树状数组进行维护,为了避免一种颜色贡献被算多次,每次染色时将所有需要染色的点按 $dfs$ 序排序,相邻的两个点权值 $+1$ ,它们的 $LCA$ 权值 $-1$ ,询问时直接询问子树内权值总和. 这样做是和构造虚树时的做法差不多的,正确性比较显然. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e6+10,S=26;int id[MAXN],ecnt=0,head[MAXN],to[MAXN],nx[MAXN];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int dfn[MAXN],dfnidx=0,top[MAXN],siz[MAXN],mxson[MAXN],dep[MAXN],fa[MAXN];void dfs1(int u,int f)&#123; fa[u]=f; siz[u]=1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==f) continue; dep[v]=dep[u]+1; dfs1(v,u); siz[u]+=siz[v]; if(siz[v]&gt;siz[mxson[u]]) mxson[u]=v; &#125;&#125;void dfs2(int u,int tp)&#123; dfn[u]=++dfnidx; top[u]=tp; if(mxson[u]) dfs2(mxson[u],tp); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa[u] || v==mxson[u]) continue; dfs2(v,v); &#125;&#125;int LCA(int x,int y)&#123; while(top[x]!=top[y]) &#123; if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); x=fa[top[x]]; &#125; return dep[x]&lt;=dep[y]?x:y;&#125;struct FenwickTree&#123; int bit[MAXN];#define lowbit(x) x&amp;(-x) void add(int x,int c) &#123; for(;x&lt;=dfnidx;x+=lowbit(x)) bit[x]+=c; &#125; int sum(int x) &#123; int s=0; for(;x;x-=lowbit(x)) s+=bit[x]; return s; &#125;&#125;T;char s[MAXN];int len,tmp[MAXN],tot=0;bool cmp(int x,int y)&#123; return dfn[x]&lt;dfn[y];&#125;struct AhoCorasick_Automaton&#123; int ch[MAXN][S],fail[MAXN],vis[MAXN],idx; AhoCorasick_Automaton()&#123;idx=1;&#125; void ins(int x) &#123; int u=1; for(int i=1;i&lt;=len;++i) &#123; int c=s[i]-'a'; if(!ch[u][c]) ch[u][c]=++idx; u=ch[u][c]; &#125; id[x]=u; &#125; void getfail() &#123; queue&lt;int&gt; q; q.push(1); while(!q.empty()) &#123; int u=q.front(); q.pop(); for(int i=0;i&lt;S;++i) if(ch[u][i]) &#123; int v=ch[u][i]; q.push(v); int f=fail[u]; while(f &amp;&amp; ch[f][i]==0) f=fail[f]; if(f) fail[v]=ch[f][i]; else fail[v]=1; addedge(fail[v],v); &#125; &#125; &#125; void match() &#123; int u=1; tot=0; for(int i=1;i&lt;=len;++i) &#123; int c=s[i]-'a'; if(ch[u][c]) u=ch[u][c]; else &#123; while(u &amp;&amp; ch[u][c]==0) u=fail[u]; if(ch[u][c]) u=ch[u][c]; else u=1; &#125; tmp[++tot]=u; T.add(dfn[u],1); &#125; sort(tmp+1,tmp+1+tot,cmp); for(int i=1;i&lt;tot;++i) T.add(dfn[LCA(tmp[i],tmp[i+1])],-1); &#125; int query(int x) &#123; return T.sum(dfn[x]+siz[x]-1)-T.sum(dfn[x]-1); &#125;&#125;AC;int main()&#123; int n=read(); for(int i=1;i&lt;=n;++i) &#123; scanf("%s",s+1); len=strlen(s+1); AC.ins(i); &#125; AC.getfail(); dfs1(1,0); dfs2(1,1); int m=read(); for(int i=1;i&lt;=m;++i) &#123; int op=read(); if(op==1) &#123; scanf("%s",s+1); len=strlen(s+1); AC.match(); &#125; else &#123; int x=read(); printf("%d\n",AC.query(id[x])); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>树状数组</tag>
        <tag>AC自动机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1204]]></title>
    <url>%2F2019%2F09%2F02%2FCF1204%2F</url>
    <content type="text"><![CDATA[$Div.2$ A BowWow and the Timetable判断一下读入的数是不是 $0$ 或者 $4$ 的幂次. B Mislove Has Lost an Array若首先放入 $1,2,4,\dots 2^{l-1}$ ,剩下的位置都放入 $1$ ,得到的和最小. 若首先放入 $1,2,4,\dots,2^{r-1}$ ,剩下的位置都放入 $2^{r-1}$ ,得到的和最大. C Anna, Svyatoslav and Maps如果上个点到下个点的所有最短路都不经过当前点,那么当前点必须选. $floyd$ 预处理两点间最短路长度后进行判断. D Kirk and a Binary String将原串中的 $10$ 子串全部删去,再把剩余的 $1$ 改成 $0$ ,将删掉的 $10$ 放回原位即得答案. 因为这样的子串对 $LIS$ 的贡献只可能是 $1$ ,所以删掉不会造成影响. E Natasha, Sasha and the Prefix Sums记 $sum$ 表示 $a$ 的前缀和. 考虑枚举 $x=f(a)$ ,并且枚举第一次得到这个前缀和时,用了 $y$ 个 $1$ . 即,若 $k$ 是第一个使得 $sum(k)=x$ 的位置,从 $1$ 到 $k$ 一共有 $y$ 个 $1$ ,那么从 $1$ 到 $k$ 一共有 $y-x$ 个 $-1$ . 求出这种数列的方案数 $t$ ,那么这些数列对答案的贡献就是 $t\cdot x$ . 由于位置 $k$ 一定是 $1$ ,所以只需要分别求出 $1\sim k-1$ 与 $k+1\sim n+m$ 这两段的方案数,相乘即为 $t$ . $1\sim k-1$ 的 $1,-1$ 的个数都是确定的,只要求每个位置从 $1$ 开始的前缀和都 $&lt;x$ . $k+1\sim n+m$ 的 $1,-1$ 个数也是确定的,只要求每个位置从 $k+1$ 开始前缀和都 $\le 0$ . 这两个问题都可以归纳为在二维平面上,从 $(0,0)$ 走到 $(X,Y)$ ,每次只能往右或上走一格,并且不能触碰到直线 $y=x+b$ 的方案数,注意不能跨越也可以转化为不能触碰,将直线向上平移一个位置即可. 设原点关于该直线的对称点为 $P$ ,答案就是从原点走到终点的方案数减去从 $P$ 走到终点的方案数,都不考虑限制. 因为从 $P$ 走到终点的每种方案都恰好对应了一种从原点走到终点,但触碰到了直线的方案. 时间复杂度 $O(n^2)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=4e3+10;const int P=998244853;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int inv(int x)&#123; return fpow(x,P-2);&#125;int fac[MAXN],invfac[MAXN];void Init(int N)&#123; fac[0]=invfac[0]=1; for(int i=1;i&lt;=N;++i) fac[i]=mul(fac[i-1],i); invfac[N]=inv(fac[N]); for(int i=N-1;i&gt;=1;--i) invfac[i]=mul(invfac[i+1],i+1);&#125;int C(int M,int N)&#123; if(N&gt;M || N&lt;0 || M&lt;0) return 0; return mul(fac[M],mul(invfac[N],invfac[M-N]));&#125;int ans=0,n,m;int calc(int x,int y,int b)//(0,0)-&gt;(x,y),without touching y=x+b&#123; return add(C(x+y,y),P-C(x+y,y-b));&#125;int main()&#123; Init(4000); n=read(),m=read(); for(int x=1;x&lt;=n;++x) for(int y=x;y&lt;=n &amp;&amp; y-x&lt;=m;++y) &#123; int t=calc(y-x,y-1,x); t=mul(tmp,calc(m+x-y,n-y,1)); ans=add(ans,mul(tmp,x)); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>数学</tag>
        <tag>codeforces</tag>
        <tag>floyd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3670 动物园]]></title>
    <url>%2F2019%2F09%2F02%2Fbzoj-3670-%E5%8A%A8%E7%89%A9%E5%9B%AD%2F</url>
    <content type="text"><![CDATA[$kmp$ . 对于每个位置 $i$ ,需要找出 $2|Border|\le i$ 的非空 $Border$ 数目. 用 $kmp$ 求一次 $next$ 数组,根据 $next$ 数组,可以建出 $kmp$ 自动机的树. 这棵树以 $0$ 为根, $next(i)$ 向 $i$ 连边, $i$ 号点表示了长度为 $i$ 的前缀,从根到 $i$ 路径上的点都为前缀 $i$ 的 $Border$ . 那么只需要知道根节点到 $i$ 的路径上有多少个编号 $\le \lfloor \frac i 2\rfloor$ 的节点. 编号从上到下是单调递增的,所以可以维护一个栈,存储根节点到当前节点路径上的点,在栈中二分求出答案. 时间复杂度 $O(T\cdot n\log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=1e6+10;char s[MAXN];int n,nxt[MAXN];int ecnt=0,head[MAXN],nx[MAXN],to[MAXN];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int stk[MAXN],tp,ans;void dfs(int u)&#123; if(u) stk[++tp]=u; int L=1,R=tp,res=0; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(stk[mid]*2&lt;=u) res=mid,L=mid+1; else R=mid-1; &#125; ans=mul(ans,res+1); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; dfs(v); &#125; if(u) --tp;&#125;void solve()&#123; ecnt=0; memset(head,0,sizeof head); scanf("%s",s+1); n=strlen(s+1); nxt[1]=0; addedge(0,1); for(int i=2;i&lt;=n;++i) &#123; int j=nxt[i-1]; while(j &amp;&amp; s[i]!=s[j+1]) j=nxt[j]; if(s[i]==s[j+1]) ++j; nxt[i]=j; addedge(nxt[i],i); &#125; ans=1; tp=0; dfs(0); printf("%d\n",ans);&#125;int main()&#123; int T=read(); while(T--) solve(); return 0;&#125;]]></content>
      <tags>
        <tag>kmp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Atcoder Beginner Contest 139]]></title>
    <url>%2F2019%2F09%2F01%2FAtcoder-Beginner-Contest-139%2F</url>
    <content type="text"><![CDATA[莫名奇妙被罚了 $6$ 次. A Tenki签到题,注意两个字符串虽然长度都为 $3$ ,但直接这样开会错掉. 1char a[3],b[3]; 要开大一些,可能是因为终止符/空格的问题? 一开始没注意,交上去被罚了一次. B Power Socket签到题,但题意有点难理解. 应该是一开始有 $1$ 个物品,每次可以把 $1$ 个换成 $A$ 个,问至少有 $B$ 个,需要操作多少次,然后就简单了. C Lower签到题,读入后反过来递推即可. D ModSum考试的时候根据样例猜了个结论,令 $P_i=i+1(1\le i&lt;n),P_n=1$ . 这样答案是 $\frac {n(n-1)} 2$ ,然后就过了. E League把每场比赛看做一个点,若 $A$ 必须在 $B$ 之前比赛,就连边 $A\to B$ . 若有环,则无解,否则答案为 $DAG$ 上的最长链. F Engines 其实应该算 POI 原题? 最终的向量一定是由那些在它的方向上投影为正的向量相加得到. 极角排序后扫一圈更新答案即可.]]></content>
      <tags>
        <tag>atcoder</tag>
        <tag>贪心</tag>
        <tag>DAG</tag>
        <tag>拓扑排序</tag>
        <tag>计算几何</tag>
        <tag>极角排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3012 First!]]></title>
    <url>%2F2019%2F09%2F01%2Fbzoj-3012-First%2F</url>
    <content type="text"><![CDATA[$Trie$ 树 + 拓扑排序判环. 将所有串插入到一棵 $Trie$ 树中. 若一个字符串 $s_i$ 成为了字典序最小的串,因为这些串互不相同,所以必须要求其他串都不能是 $s_i$ 的前缀. 即在 $Trie$ 树上,根节点到这个串的终止节点路径上不能有其它的串的终止节点. 另一个条件是根到这个节点路径上每条边字符的字典序比它父亲向所有兄弟的边字符的字典序小. 这可以用若干条有向边表示字符间的大小关系,建出图后拓扑排序,若有环,则不合法,否则合法. 时间复杂度 $O(|S|^2\cdot n+|S|\cdot \sum |s|)$ ,其中 $S$ 代表字符集, $s$ 代表读入的串. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=3e5+10,N=3e4+10,S=26;char buf[N],s[MAXN];int n,len;int G[S][S],deg[N],ans[N],ans_cnt=0;int d[N],cnt,vis[N];void del(int u)&#123; ++cnt; vis[u]=1; for(int v=0;v&lt;S;++v) if(G[u][v]) &#123; d[v]-=G[u][v]; if(!d[v]) del(v); &#125;&#125;bool topsort()&#123; memset(vis,0,sizeof vis); memcpy(d,deg,sizeof d); cnt=0; for(int i=0;i&lt;S;++i) if(!d[i] &amp;&amp; !vis[i]) del(i); return cnt==S;&#125;struct Trie&#123; int ch[MAXN][S],idx; int val[MAXN]; Trie()&#123;idx=0;&#125; void ins(int id) &#123; int u=0; for(int i=1;i&lt;=len;++i) &#123; int c=buf[i]-'a'; if(!ch[u][c]) ch[u][c]=++idx; u=ch[u][c]; &#125; val[u]=id; &#125; void dfs(int u) &#123; if(val[u]) &#123; if(topsort()) &#123; ans[val[u]]=1; ++ans_cnt; &#125; return; &#125; int q[S],t=0; for(int c=0;c&lt;S;++c) &#123; int v=ch[u][c]; if(!v) continue; q[++t]=c; &#125; for(int c=0;c&lt;S;++c) &#123; int v=ch[u][c]; if(!v) continue; for(int i=1;i&lt;=t;++i) if(q[i]!=c) &#123; ++G[c][q[i]]; ++deg[q[i]]; &#125; dfs(v); for(int i=1;i&lt;=t;++i) if(q[i]!=c) &#123; --G[c][q[i]]; --deg[q[i]]; &#125; &#125; &#125;&#125;T;int lp[N],rp[N];int main()&#123; n=read(); int tot=0; for(int i=1;i&lt;=n;++i) &#123; scanf("%s",buf+1); len=strlen(buf+1); lp[i]=tot+1; for(int j=1;j&lt;=len;++j) s[++tot]=buf[j]; rp[i]=tot; T.ins(i); &#125; T.dfs(0); printf("%d\n",ans_cnt); for(int i=1;i&lt;=n;++i) if(ans[i]) &#123; for(int j=lp[i];j&lt;=rp[i];++j) putchar(s[j]); puts(""); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>拓扑排序</tag>
        <tag>Trie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190901]]></title>
    <url>%2F2019%2F09%2F01%2Ftest20190901%2F</url>
    <content type="text"><![CDATA[自闭场. $masodik$维护 $r$ 和 $c$ 的下凸壳,当前哪个斜率大走哪个. $count$$60​$ 分的做法可以直接枚举 $a,b​$ ,此时可以唯一确定 $c,d​$ ,用 $hash​$ 检验,时间复杂度 $O(n^2)​$ ,但跑不满. 另外一个 $O(n^2)$ 的做法是枚举 $len=b-a+1$ . 当 $len$ 固定时,将串右移 $len+F$ 位,合法的 $(a,b,c,d)$ 中, $(a,b)$ 段和 $(c,d)$ 段就会匹配上. 于是扫一遍,计算匹配数,就可以得出 $len$ 确定时的解,时间复杂度 $O(n^2)$ . 考虑进行优化,仍然枚举 $len$ ,将原串按 $len$ 分段,发现下面这样的红色匹配是没有意义的: 因为红色匹配的长度不会超过 $len$ ,而有效的匹配一定是像绿色匹配那样跨越边界的. 段边界的匹配可以转化为段两端的 $LCP$ 和 $LCS$ ,二分 + $hash$ 来求. 用这一段的 $LCP$ 和前一段的 $LCS$ 组合,若 $LCS\ge len$ ,则这段的解全都合法. 否则这段的解有 $LCP+LCS-len+1$ 个. 时间复杂度 $O(n\log^2 n)$ . 这里的 $LCS$ 指最长公共后缀. $theory$先考虑 $m=0$ 的情况,此时相当于求解 $n^{2n}\equiv x$ . 保证有解,所以 $x$ 一定是二次剩余,等价于求解 $n^n\equiv \sqrt x \pmod p$ . 令 $n\equiv \sqrt x \pmod p,n\equiv 1 \pmod { p-1}$ . 因为 $\gcd(p,p-1)=1​$ ,所以可以 $crt​$ 合并得出一个合法解. 对于 $m&gt;0​$ 的情况,尝试枚举 $n\equiv t\pmod p​$ ,只要 $x-t^m​$ 在模 $p​$ 意义下是二次剩余,就可以沿用上面的做法. 由于一个数是二次剩余的概率为 $\frac 1 2​$ ,所以期望步数很小,可以视作常数. 时间复杂度 $O(\sqrt p)​$ .]]></content>
      <tags>
        <tag>test</tag>
        <tag>crt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 2342 双倍回文]]></title>
    <url>%2F2019%2F09%2F01%2Fbzoj-2342-%E5%8F%8C%E5%80%8D%E5%9B%9E%E6%96%87%2F</url>
    <content type="text"><![CDATA[$Manacher$ . 考虑用 $Manacher$ 预处理出每个位置的回文半径. 枚举双倍回文子串的中心 $i$ ,为了得到以 $i$ 为中心的最长双倍回文子串,需要找到左边第一个 $j+R(j)-1\ge i$ ,且 $R(i)\ge 2i-2j $ 的位置 $j$ ,这里的 $i,j​$ 在新串上的字符都必须为 ‘#’​ . 通过第二个条件可知 $j\ge \frac {2i-R(i)} {2}​$ ,即 $j\ge i-\lfloor \frac {R(i)} 2\rfloor​$ . 将所有 $j$ 按照 $j+R(j)-1$ 排序,从大到小枚举 $i$ ,将所有 $j+R(j)-1\ge i$ 的 $j$ 放入一个 $set$ 中. 此时在 $set$ 中查询 $i-\lfloor \frac {R(i)} 2\rfloor$ 的后继,就是要求的 $j$ ,注意特判不存在的情况以及检验 $j&lt;i$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e6+10;char buf[MAXN],s[MAXN];int n,R[MAXN];int ans=0;void Manacher()&#123; s[0]='$'; for(int i=1;i&lt;=n;++i) &#123; s[2*i-1]='#'; s[2*i]=buf[i]; &#125; s[2*n+1]='#'; s[2*n+2]='@'; n=2*n+2; int p=0,mx=0; for(int i=1;i&lt;n;++i) &#123; if(i&gt;mx) R[i]=1; else R[i]=min(mx-i+1,R[2*p-i]); while(s[i-R[i]]==s[i+R[i]]) ++R[i]; if(i+R[i]-1&gt;mx) mx=i+R[i]-1,p=i; &#125;&#125;typedef pair&lt;int,int&gt; pii;#define mp make_pairset&lt;int&gt; S;set&lt;int&gt;::iterator it;pii tmp[MAXN];int tot=0;int main()&#123; n=read(); scanf("%s",buf+1); Manacher(); for(int j=1;j&lt;n;++j) if(j&amp;1) tmp[++tot]=mp(j+R[j]-1,j); sort(tmp+1,tmp+tot+1); int nx=tot; for(int i=n-1;i&gt;=1;--i) &#123; if(!(i&amp;1)) continue; while(nx&gt;0 &amp;&amp; tmp[nx].first&gt;=i) S.insert(tmp[nx--].second); it=S.lower_bound(i-R[i]/2); if(it!=S.end() &amp;&amp; *it&lt;i) ans=max(ans,2*(i-*it)); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>Manacher</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190831]]></title>
    <url>%2F2019%2F08%2F31%2Ftest20190831%2F</url>
    <content type="text"><![CDATA[神仙题目. $crypto$讲道理,这应该是个愚人节题目. 枚举密钥的长度,假设密钥的长度为 $l$ .我们考虑恢复出密钥的每一位. 例如要恢复第一位,就将密文的第$1,l+1,2l+1,\dots$个字符取出来. 然后这些字符的字母频率应该符合英文字母的分布,可以根据样例输出统计. 可以枚举加密时候的位移是多少,根据英文字母的分布选出最小二乘解. 对于每种密钥长度解密后,选出 $THE$ 最多的长度作为正确答案. $string$貌似只有这道题比较可做. 可以把所有加入的串建一个广义后缀自动机. 或者将相邻的两个串中间加入一个标识符,当成一个串,插入后缀自动机中. 然后每次询问在上面暴力匹配就好了. $eigen$做法是用 幂法 迭代出绝对值最大的解,再不断构造变换,得出其他的解. 我不会做.]]></content>
      <tags>
        <tag>SAM</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 2565 最长双回文串]]></title>
    <url>%2F2019%2F08%2F30%2Fbzoj-2565-%E6%9C%80%E9%95%BF%E5%8F%8C%E5%9B%9E%E6%96%87%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[$Manacher$ . 考虑枚举 $X,Y$ 两个回文串的分界位置,不能以首尾的 ‘#’ 作为分界位置,否则 $X,Y$ 长度可以为 $0$ . 利用 $Manacher$ ,位置 $i$ 作为分界位置的贡献就是左边能覆盖到 $i$ 的最大长度加上右边能覆盖到 $i$ 的最大长度. 以找左侧最优位置为例,从左往右扫描,同时维护一个当前处理到的右边界 $k$ . 扫描到第 $i$ 位时,就把 $k+1\sim i+R(i)-1$ 这一段的最优位置全部更新为 $i$ ,然后将右边界更新为 $i+R(i)-1$ . 右边界只会向右移动,所以时间复杂度为 $O(n)$ . 右侧最优位置的处理方法同理. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;char buf[MAXN],s[MAXN];int n,R[MAXN],sum[MAXN];void Manacher()&#123; s[0]='$'; for(int i=1;i&lt;=n;++i) &#123; s[2*i-1]='#'; s[2*i]=buf[i]; &#125; s[2*n+1]='#'; s[2*n+2]='@'; n=2*n+2; int p=0,mx=0; for(int i=1;i&lt;n;++i) &#123; if(mx&lt;i) R[i]=1; else R[i]=min(mx-i+1,R[2*p-i]); while(s[i-R[i]]==s[i+R[i]]) ++R[i]; if(i+R[i]-1&gt;mx) mx=i+R[i]-1,p=i; &#125; for(int i=1;i&lt;=n;++i) sum[i]=sum[i-1]+('a'&lt;=s[i] &amp;&amp; s[i]&lt;='z');&#125;int lp[MAXN],rp[MAXN];int main()&#123; scanf("%s",buf+1); n=strlen(buf+1); Manacher(); int k=0; for(int i=1;i&lt;n;++i) &#123; for(int j=k+1;j&lt;=i+R[i]-1;++j) lp[j]=i; k=max(k,i+R[i]-1); &#125; k=n; for(int i=n-1;i&gt;=1;--i) &#123; for(int j=k-1;j&gt;=i-R[i]+1;--j) rp[j]=i; k=min(k,i-R[i]+1); &#125; int ans=0; for(int i=3;i&lt;n-2;++i) if(i&amp;1) &#123; int t=2*(sum[i]-sum[lp[i]-1])-sum[lp[i]]+sum[lp[i]-1]; t+=2*(sum[rp[i]]-sum[i-1])-sum[rp[i]]+sum[rp[i]-1]; ans=max(ans,t); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>Manacher</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190830]]></title>
    <url>%2F2019%2F08%2F30%2Ftest20190830%2F</url>
    <content type="text"><![CDATA[开始还以为是原题大战,后来发现题号是连着的,应该是考完后传上去的. $common$典故 考虑分块,将编号 $1\sim n$ 分成 $\sqrt n$ 个块. 做一遍 $dfs$ ,预处理出每个点的 $dfs$ 序,以及它对每一块的贡献次数. 询问时,整块的部分直接调用答案,边角部分利用 $dfs$ 序逐个查询. 时间复杂度 $O(n\sqrt n \log n)$ . $\text{long long}$ 会被卡,要用 $\text{unsigned long long}$ . $art$典故 考虑矩阵树定理,将那 $n$ 个点标号为 $1\sim n$ ,另外 $m$ 个点标号为 $n+1\sim n+m$ . 由于图是一张完全二分图,所以可以直接写出它的基尔霍夫矩阵去掉最后一行一列得到的余子式.$$\begin{vmatrix}m &amp; 0 &amp;\cdots &amp; 0 &amp; -1 &amp; -1 &amp;\cdots &amp; -1 \\0 &amp; m &amp;\cdots &amp; 0 &amp; -1 &amp; -1 &amp;\cdots &amp; -1 \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots&amp; \vdots&amp; \vdots&amp; \vdots&amp; \vdots\\0 &amp; 0 &amp;\cdots &amp; m &amp; -1 &amp; -1 &amp;\cdots &amp; -1 \\-1 &amp; -1 &amp;\dots &amp; -1 &amp; n &amp; 0 &amp; \dots &amp; 0 \\-1 &amp; -1 &amp;\dots &amp; -1 &amp; 0 &amp; n &amp;\dots &amp; 0 \\\vdots &amp; \vdots &amp; \vdots &amp; \vdots&amp; \vdots&amp; \vdots&amp; \ddots&amp; \vdots\\-1 &amp; -1 &amp;\dots &amp; -1 &amp; 0 &amp; 0 &amp;\dots &amp; n\end{vmatrix}$$ 这个矩阵的行列式就是答案,比较明显的,可以将它分成 $4$ 个区域,左下角和右上角全都是 $-1$ . 左上角是一个 $n\times n$ 的对角矩阵,对角线上元素都是 $m$ . 右下角是一个 $(m-1)\times (m-1)$ 的对角矩阵,对角线上元素都是 $n$ . 由于这个矩阵十分特殊,我们直接尝试手算它的行列式. 由于前 $n$ 行已经完成了上三角化,只需要对后 $m-1$ 行上三角化. 将前 $n​$ 行每一行都乘一个 $\frac 1 m ​$ ,加到后 $m-1​$ 行的每一行中,行列式不变,矩阵被消成了这样:$$\begin{vmatrix}m &amp; 0 &amp;\cdots &amp; 0 &amp; -1 &amp; -1 &amp;\cdots &amp; -1 \\0 &amp; m &amp;\cdots &amp; 0 &amp; -1 &amp; -1 &amp;\cdots &amp; -1 \\\vdots &amp; \vdots &amp; \ddots &amp; \vdots&amp; \vdots&amp; \vdots&amp; \vdots&amp; \vdots\\0 &amp; 0 &amp;\cdots &amp; m &amp; -1 &amp; -1 &amp;\cdots &amp; -1 \\0 &amp; 0 &amp;\dots &amp; 0 &amp; \frac{n(m-1)}m &amp; \frac{-n}m &amp; \dots &amp; \frac{-n}m \\0 &amp; 0 &amp;\dots &amp; 0 &amp; \frac{-n}m &amp; \frac{n(m-1)}m &amp;\dots &amp; \frac{-n}m \\\vdots &amp; \vdots &amp; \vdots &amp; \vdots&amp; \vdots&amp; \vdots&amp; \ddots&amp; \vdots\\0 &amp; 0 &amp;\dots &amp; 0 &amp; \frac{-n}m &amp; \frac{-n}m &amp;\dots &amp; \frac{n(m-1)}m\end{vmatrix}$$此时,因为下面 $m-1$ 行的前 $n$ 列都是 $0$ ,无论怎样进行行变换都不会变,所以这个矩阵的行列式其实就等于左上角的 $n\times n$ 的矩阵的行列式与右下角 $(m-1)\times (m-1)$ 的矩阵行列式之积. 左上角的那个对角线矩阵行列式显然是 $m^n​$ . 对于右下角那个矩阵,我们将每个元素都乘上 $\frac m n​$ ,行列式会变为原来的 $(\frac m n)^{m-1}​$ 倍,最后答案要乘上系数 $(\frac n m)^{m-1}​$ . 右下角的元素乘上 $\frac m n$ 后,得到的新的 $(m-1) \times (m-1)$ 的矩阵是这样的:$$\begin{vmatrix}m-1 &amp; -1 &amp;\cdots &amp;-1 \\-1 &amp; m-1 &amp;\cdots &amp;-1\\\vdots &amp; \vdots &amp;\ddots &amp;\vdots\\-1 &amp; -1 &amp; -1 &amp; m-1\end{vmatrix}$$即主对角线上的元素都是 $m-1$ ,其余元素都是 $-1$ . 如果我们再给他在外面补上一行一列,补成一个 $m\times m$ 的矩阵,$$\begin{vmatrix}m-1 &amp; -1 &amp;-1 &amp;\cdots &amp;-1 &amp;-1 \\-1 &amp; m-1 &amp;-1 &amp;\cdots &amp;-1 &amp;-1\\-1 &amp; -1 &amp;m-1 &amp;\cdots &amp;-1 &amp;-1\\\vdots&amp;\vdots &amp; \vdots &amp;\vdots &amp;\ddots&amp;\vdots\\-1 &amp;-1 &amp; -1 &amp; \cdots &amp; -1&amp; m-1\end{vmatrix}$$这个 $m\times m$ 的矩阵其实就是一张完全图 $K_m$ 的基尔霍夫矩阵,每个点度数为 $m-1$ ,每两个点之间都有边. 根据矩阵树定理,那个 $(m-1)\times (m-1)$ 的矩阵的行列式就等于完全图 $K_m$ 的生成树个数. 根据 $Cayley$ 定理,或利用 $prufer$ 序列,这个数目应该是 $m^{m-2}$ . 将两个行列式与那个系数 $(\frac n m)^{m-1}​$ 乘在一起,就得到了答案.$$\begin{aligned}ans&amp;=m^n\cdot n^{m-1} \cdot m^{1-m} \cdot m^{m-2} \\&amp;=m^{n-1}\cdot n^{m-1}\end{aligned}$$ $hands$典故 把两种移动方式看做两个向量 $\vec a,\vec b$ .因为题目保证它们不共线,所以每个点都可以被写成 $x\cdot \vec a+y\cdot \vec b$ . 以解出来的 $(x,y)$ 代替原来的坐标,就变成了每次可以向右或向上走一步,可以直接舍去坐标转换后不是整点的点. 要求不能经过障碍点,求起点到终点的方案数. 如果没有障碍,答案显然是 $C_{x+y}^x$ .但现在有障碍.直接递推显然不行,因为新坐标的大小可以达到 $2\times 500^2$ . 将障碍点,目标点视为关键点,记原点为第 $0​$ 个关键点. 坐标转换后,按照 $x$ 为第一关键字, $y$ 为第二关键字排序,就做出了一个拓扑序,再进行 $dp$ . 设 $f(i)$ 表示从原点到达第 $i$ 个关键点而不经过其他关键点的方案数. $g(i,j)​$ 表示从第 $i​$ 个关键点到第 $j​$ 个关键点的所有方案数. 转移有 $f(i)=g(0,i)-\sum_{j=1}^{i-1} g(j,i)\cdot f(j)$ .而 $g$ 不需要考虑障碍,若能够到达,就是组合数,否则是 $0$ . 时间复杂度 $O(n^2)​$ .]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>数学</tag>
        <tag>线性代数</tag>
        <tag>分块</tag>
        <tag>test</tag>
        <tag>矩阵树定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF17E Palisection]]></title>
    <url>%2F2019%2F08%2F29%2FCF17E-Palisection%2F</url>
    <content type="text"><![CDATA[$Manacher$ + 差分. 利用补集转化思想,求出回文子串的总对数 $-$ 不相交的回文子串对数就是答案. 先跑一遍 $Manacher$ ,得出每个位置的回文半径以及回文子串的总对数. 于是接下来只需要计算不相交的回文子串对数. 记 $f(i)$ 表示以位置 $i$ 开始的回文子串数目, $g(i)$ 表示以位置 $i$ 结尾的回文子串数目. 这可以在跑 $Manacher$ 时打差分标记计算出来. 每个实际位置 $i$ ,即是字母的位置 $i$ ,贡献为 $f(i)\cdot \sum_{j&lt;i} g(j)$ ,枚举的时候记录一下 $g$ 的实际位置上的前缀和. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=51123987;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=4e6+10;char buf[MAXN],s[MAXN];int n,R[MAXN],ans=0;int f[MAXN],g[MAXN];void Manacher()&#123; s[0]='$'; for(int i=1;i&lt;=n;++i) &#123; s[2*i-1]='#'; s[2*i]=buf[i]; &#125; s[2*n+1]='#'; s[2*n+2]='@'; n=2*n+2; int mx=0,p=0; for(int i=1;i&lt;n;++i) &#123; int fl=1,j=2*p-i; if(mx&lt;i) R[i]=1; else if(mx-i&gt;R[j]) R[i]=R[j],fl=0; else R[i]=mx-i+1; if(fl) while(s[i-R[i]]==s[i+R[i]]) ++R[i]; if(i+R[i]-1&gt;mx) mx=i+R[i]-1,p=i; ++f[i-R[i]+1],--f[i+1]; ++g[i],--g[i+R[i]]; ans=add(ans,R[i]/2); &#125;&#125;int main()&#123; n=read(); scanf("%s",buf+1); Manacher(); ans=(1LL*ans*(ans-1)/2)%P; int tmp=0; for(int i=1;i&lt;=n;++i) &#123; f[i]+=f[i-1]; g[i]+=g[i-1]; if(!(i&amp;1)) &#123; ans=add(ans,P-mul(f[i],tmp)); tmp=add(tmp,g[i]); &#125; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>Manacher</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 2160 拉拉队排练]]></title>
    <url>%2F2019%2F08%2F29%2Fbzoj-2160-%E6%8B%89%E6%8B%89%E9%98%9F%E6%8E%92%E7%BB%83%2F</url>
    <content type="text"><![CDATA[$Manacher$ + 差分维护数列. 首先将字符串添加特殊字符,利用 $Manacher$ 算法求出每个位置的回文半径 $R(i)$ . 维护一个 $cnt(i)$ 表示原串中长度为 $i$ 的回文串数目. 由于只考虑奇回文串,所以枚举时只处理字母作为回文中心的贡献. 若第 $i$ 个位置是字母,则它在原串中对应的奇回文串的长度分别是 $1,3,5,\dots,R(i)-1$ . 给 $1\sim R(i)-1$ 的所有 $cnt$ 都 $+1$ ,可以用差分来维护. 最后统计答案时,从大到小枚举长度,只将奇数长度计入贡献. 时间复杂度 $O(n\log n)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=19930726;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=2e6+10;char s[MAXN],buf[MAXN];int n,R[MAXN],cnt[MAXN];void Manacher()&#123; buf[0]='$'; for(int i=1;i&lt;=n;++i) &#123; buf[2*i-1]='#'; buf[2*i]=s[i]; &#125; buf[2*n+1]='#'; buf[2*n+2]='@'; //1~2n+1 int mx=1,p=1; R[1]=1; for(int i=2;i&lt;=2*n+1;++i) &#123; int f=1; int j=2*p-i; if(mx&lt;i) R[i]=1; else if(mx-i&gt;R[j]) R[i]=R[j],f=0; else R[i]=mx-i+1; if(f) while(buf[i+R[i]]==buf[i-R[i]]) ++R[i]; if(i+R[i]-1&gt;mx) mx=i+R[i]-1,p=i; if('a'&lt;=buf[i] &amp;&amp; buf[i]&lt;='z') ++cnt[1],--cnt[R[i]]; &#125;&#125;ll k;int main()&#123; n=read(),k=read(); scanf("%s",s+1); Manacher(); int ans=1; for(int i=1;i&lt;=n;++i) cnt[i]+=cnt[i-1]; for(int i=n;i&gt;=1;--i) if(cnt[i] &amp;&amp; (i&amp;1)) &#123; if(k&gt;cnt[i]) &#123; ans=mul(ans,fpow(i,cnt[i])); k-=cnt[i]; &#125; else &#123; ans=mul(ans,fpow(i,k)); printf("%d\n",ans); return 0; &#125; &#125; puts("-1"); return 0;&#125;]]></content>
      <tags>
        <tag>Manacher</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Manacher算法学习笔记]]></title>
    <url>%2F2019%2F08%2F29%2FManacher%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[感觉自己之前学的时候没学清楚,于是重新整理了一遍. 本文主要整理自 2014年集训队论文 《浅谈回文子串问题 徐毅》. 回文半径以字符串第 $i$ 个位置为中心的回文子串长度的一半,称为该字符串第 $i$ 位的回文半径,记作 $R(i)​$ . 预处理处理回文子串问题时,为了方便,经常将原字符串加入特殊字符,避免奇偶讨论与边界问题. 如: &quot;abbabcba&quot; -&gt; &quot;$#a#b#b#a#b#c#b#a#@&quot; 对新字符串求出每个位置的回文半径,就对应了原串中以字符为中心的奇回文串和以空隙为中心的偶回文串. $Manacher$ 算法又称马拉车算法. 可以以 $O(n)$ 的时间复杂度求解长度为 $n$ 的字符串每个位置的回文半径. 首先执行上文的预处理,再依次计算位置 $1\sim n$ 的回文半径. 记 $mx$ 表示已经计算出的回文半径覆盖到的最右边界,即 $\max k+R(k)-1$ . 记 $p$ 为对应中心的位置,即使得 $k+R(k)-1$ 取得最大值的 $k$ . 枚举 $i$ ,计算 $R(i)$ 时,考虑暴力匹配的过程,就是从 $i$ 不断向外拓展,也就是从 $1$ 开始枚举 $R(i)​$ ,直到不能拓展. $Manacher$ 算法就是通过记录的 $mx,p$ ,来给 $R(i)$ 确定一个下界,这样枚举 $R(i)$ 时只用从下界开始枚举. 记 $j=2p-i$ ,即 $i$ 关于 $p$ 的对称位置.分以下 $3$ 种情况进行讨论: 情况一: $mx&lt;i$ ,只能确定 $R(i)\ge 1$. 情况二: $mx-i&gt;R(j)$ ,即以第 $j$ 位为中心的回文子串包含于以第 $p$ 位为中心的回文子串. 由于 $i$ 和 $j$ 关于 $p$ 对称,以第 $i$ 位为中心的回文子串必然也包含于以第 $p$ 位为中心的回文子串,故有 $R(i)=R(j)$ . 情况三: $mx-i\le R(j)$ ,此时以第 $j$ 位为中心的回文子串不一定包含于以第 $p$ 位为中心的回文子串. 但因为 $i$ 与 $j$ 关于 $p$ 对称,所以以 $i$ 为中心向右至少能拓展到 $mx$ 的位置,即 $R(i)\ge mx-i+1$ . 在情况一与三中,确定下界后,再从下界开始枚举 $R(i)$ ,继续拓展,即暴力向外匹配. 不难验证,每次暴力向外匹配都会使得 $mx$ 增大,而 $mx$ 最多增大 $n$ 次,所以算法时间复杂度为 $O(n)$ . 从跳 $mx$ 的过程中也可以得到关于回文子串的两条比较重要的性质: 性质一: 一个长度为 $n$ 的字符串含有的本质不同的回文子串只有 $O(n)$ 个. 这是因为只有 $mx$ 增大时,才会产生本质不同的回文子串,否则一定存在对称的回文子串,而 $mx$ 增大不会超过 $n$ 次. 于是可以在算法执行过程中将所有本质不同的回文子串的位置给处理出来,在 $mx$ 增大时进行记录即可. 性质二: 一个长度为 $n$ 的字符串的回文性质可以用 $O(n)​$ 个相等与不等关系表示. 定义一个字符串的回文性质为所有回文子串出现位置的集合. 即,若串 $S$ 与串 $T$ 具有相同的回文性质,则 $S(i,\dots j)$ 为回文串,当且仅当 $T(i,\dots,j)$ 为回文串. 而一个串 $S​$ 的回文性质可以用一些相等和不等关系表示.对于以第 $i​$ 位为中心的回文子串,显然有 $0\le k&lt;R(i),S[i-k]=S[i+k]​$ ,以及 $S[i-R(i)]\not=S[i+R(i)]​$ ,这就是一些相等与不等关系. 只有当 $mx$ 增大时,才会产生新的相等关系,否则一定存在对称的相等关系,相等关系数量是 $O(n)$ 的. 而每个位置作为回文中心只会产生一个不等关系,不等关系数量也是 $O(n)$ 的. 所以可以只用 $O(n)$ 个相等和不等关系表示回文性质.]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>Manacher</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190829]]></title>
    <url>%2F2019%2F08%2F29%2Ftest20190829%2F</url>
    <content type="text"><![CDATA[我上当了. $path$典故 枚举出发点 $S$ ,建出以 $S$ 为起点的最短路图,即只保留 $dis(u)+val(i)=dis(v)$ 的边 $i$ . 在最短路图上 $dp$ ,拓扑排序后求出 $f(i)$ 表示 $S\to i$ 的路径条数, $g(i)$ 表示以 $i$ 为起点的路径条数. 那么对于在最短路图上的一条边 $u\to v$ ,以 $S$ 为起点时的所有贡献为 $f(u)\cdot g(v)$ . 时间复杂度 $O(nm\log n)$ . $seq$典故 ,来自电子神大的 $OJ$. 由于题面没说清楚,就强行规定 $j&gt;i$ ,把数据修了. 就是要找到右边第一个严格大于 $a_x$ 的位置 $y$ ,那么 $[x+1,y-1]$ 这一段都可以作为答案,可以在线段树上二分. 然后加上从 $y$ 开始,最长单调不下降子序列的长度,这可以分块. 分成 $\sqrt n$ 个块后,维护每一块内部的不下降子序列和块边界处的不下降子序列. 询问时对整块二分,边角暴力. 然而直接 $O(n^2)$ 暴力可以过 $80\sim 100$ 分? 我上当了,写了个线段树 + 定期重构,比暴力的分还少一些,而且我发现去掉重构之后还是差不多慢. $area$求圆环的面积并, $n\le 1000$ . 留坑. 我上当了,写了个撒点,精度太垃圾了,甚至要开 $0$ 位小数才能过前两个点.]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>计算几何</tag>
        <tag>最短路</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190828]]></title>
    <url>%2F2019%2F08%2F28%2Ftest20190828%2F</url>
    <content type="text"><![CDATA[原题大战. $dna$典故 学了回文自动机再来更. $color$其实应该算是原题的弱化版. 典故 记 $dist(x)$ 表示根节点到 $x$ 的距离, $dis(x,y)$ 表示 $x,y​$ 之间的距离.$$\begin{aligned}ans&amp;=\sum_{y=1}^{k} dis(x,y) \\&amp;=\sum_{y=1}^k dist(x)+dist(y)-2\cdot dist(LCA_{x,y}) \\&amp;=dist(x)\cdot k+\sum_{y=1}^{k} dist(y)-2\cdot\sum_{y=1}^k dist(LCA_{x,y})\end{aligned}$$前面两项都容易维护,考虑如何计算最后一项的贡献. $dist(LCA_{x,y})$ 其实就是 $x$ 到根的路径与 $y$ 到根的路径交集部分的长度. 每新染黑一个 $y$ ,就将 $y$ 到根节点上的每条边标记 $+1$ . 询问时,最后那一项就是 $x$ 到根节点路径上每条边的 标记次数 $\times​$ 边长. 可以用树链剖分 + 线段树来维护,时间复杂度 $O(n\log^2 n)$ . $land$典故 题目中已经告诉我们怎么判断一个格子是否在多边形内部,这个判断条件只跟穿过次数奇偶性有关. 可以利用它进行状压 $dp$. 给每个格子选一条射线,在转移的过程中更新有宝藏和陷阱的格子那条射线穿过边的奇偶性状态. $f(i,j,S)$ 表示当前在格子 $(i,j)$ ,宝藏和陷阱的射线奇偶性状态为 $S$ 时,多边形最小周长. 转移时直接 $bfs$ ,最后枚举哪些宝藏被圈了起来,统计答案.]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>树链剖分</tag>
        <tag>状压dp</tag>
        <tag>test</tag>
        <tag>PAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190827]]></title>
    <url>%2F2019%2F08%2F27%2Ftest20190827%2F</url>
    <content type="text"><![CDATA[roll 制出题人. 大样例没有,小样例极水,权值范围也没有,题意还没说清楚. $guard$每个武器只能打死一个人.我以为能将小于等于它的的全部打死,就保龄了. 将所有武器按 $a$ 从小到大排序. 第一次枚举确定哪些武器用精灵,如果用精灵能打死的怪的 $b&gt; a_i​$ ,就用精灵打. 然后剩下的武器都不用精灵,直接贪心匹配. 时间复杂度 $O(T\cdot n\log n)$ $phase$直接用树剖 + 线段树维护区间内所有点权值的异或和,时间复杂度是 $O(n\log^2 n)$ . 但用一下异或的性质,就能做到 $O(n\log n)$ . 记 $dist(i)​$ 表示从 $i​$ 到根节点的路径上经过的所有点权值异或和. 每次询问 $(x,y)$ ,先求出它们的 $lca$ ,答案就是 $dist(x)\text{ xor }dist(y)\text{ xor }dist(lca)\text{ xor }dist(fa(lca))$ . 树剖后用线段树来维护每个点的 $dist$ ,每次修改时,子树 $x$ 内深度奇偶性与 $x$ 不同的点 $dist$ 会被异或上 $y$ . 线段树中维护两个标记,分别表示深度为奇/偶的点需要异或上的值,时间复杂度 $O(n\log n)$ . $refuse$$50$ 分的做法是状压 $dp$ ,设 $f(r,c)$ 表示行覆盖情况为 $r$ ,列覆盖情况为 $c$ 时的期望,时间复杂度 $O(2^{n+m}\cdot nm)$ . 但不知道怎么回事写挂了,就保龄了. 下面是正解. 设 $f(i)$ 为恰好经过 $i$ 次操作后成功的概率,根据期望定义,答案 $ans=\sum_{i=0}^{+\infty} f(i)\cdot i$ . 再设 $P(i)$ 表示经过了 $i$ 次操作后还没有成功的概率.那么就等价于在之后成功的概率之和, $P(i)=\sum_{j=i+1}^{+\infty} f(i)$ . 可以发现 $ans=\sum_{i=0}^{+\infty} P(i)$ ,因为这样计算,每个 $f(i)$ 都恰好被计算了 $i$ 次. 于是需要考虑如何求出 $P(i)$ . 枚举哪些行和列在前 $i$ 次操作都没有被标记,记它们形成的集合为 $s$ . 设 $p(s)$ 表示选中集合 $s$ 中的行列中的格子 $1$ 的概率,那么 $i$ 次都没选中就是 $(1-p(s))^i$ ,利用容斥原理计算,$$P(i)=\sum_s (-1)^{|s|+1} \cdot (1-p(s))^i$$代入答案 $ans$ ,$$\begin{aligned}ans&amp;=\sum_{i=0}^{+\infty} P(i) \\&amp;=\sum_{i=0}^{+\infty} \sum_s (-1)^{|s|+1} \cdot (1-p(s))^i \\&amp;=\sum_s (-1)^{|s|+1}\cdot \frac 1 {p(s)}\end{aligned}$$设 $tot$ 为格子 $1$ 的总数目, $sum(s)$ 表示集合 $s$ 的行列含有的 $1$ 的数目,那么答案为$$ans=\sum_{s}(-1)^{|s|+1}\cdot \frac {tot} {sum(s)}$$于是只需要计算 $sum(s)$ .因为 $sum(s)$ 相同的状态有很多,可以设 $num(x)=\sum_s [sum(s)=x]\cdot (-1)^{|s|+1}$ . 则答案为$$ans=\sum_{x=1}^{tot} num(x)\cdot \frac {tot} {x}$$考虑如何计算 $num(x)$ ,由于 $n\cdot m\le 200$ ,所以 $\min(n,m)\le 14$ . 假设 $n\le m$ ,否则只需交换行与列. 暴力 $2^n$ 枚举选了哪些行,对列做 $dp$ ,设 $dp(i,j,k)$ 表示考虑了前 $i$ 列, $|s|$ 的奇偶性为 $j$ , $sum(s)=k$ 的方案数. 最后根据奇偶性计算出每个 $num(x)​$ ,统计答案即可. 时间复杂度为 $O(2^n\cdot m^2\cdot n )​$ .]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>线段树</tag>
        <tag>树链剖分</tag>
        <tag>概率/期望</tag>
        <tag>容斥原理</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190826]]></title>
    <url>%2F2019%2F08%2F26%2Ftest20190826%2F</url>
    <content type="text"><![CDATA[两个简单题 + 一个比较难的原题. $Gene$有一个十分简单的 $O(n\log n)$ 的做法,字符串 $hash$ + 二分,用自然溢出常数比较小,是可以过的. $O(n)$ 的一个做法是 $SAM$ ,对反串建后缀自动机,答案就是每个点的 $siz$ 之和,但空间很容易炸. 另一个做法是利用 $kmp$ 的 $fail$ 数组,每个位置不断往前跳,每跳一次就说明有一个合法的匹配. 暴力跳会超时,记忆化一下,用 $f(i)$ 表示从 $i$ 开始能往前跳几次,则 $f(i)=f(fail_i)+1$ . $Shield$因为给出的两个向量线性无关,可以它们为一组基底,解出每个点在这组基底下的坐标. 于是一个点可以转移到 $x,y$ 都不小于它的点. 将点按 $x$ 为第一关键字, $y$ 为第二关键字排序,将 $y$ 离散化后用树状数组做一个类似于 $LIS$ 的 $dp$ 即可. 时间复杂度 $O(n\log n)$ . 坐标太大,精度爆掉了一个点.其实可以在比较元素时再转换坐标,避免小数运算. $Chronosphere$典故 首先可以建出源汇点 $S,T​$ ,源点向所有点连边,所有点向汇点连边. 问题转化为最小化删去一个点后 $S\to T$ 的最长路长度. 拓扑排序 + $dp$ 处理出 $f(i),g(i)$ 分别表示 $S\to i$ 的最长链与 $i\to T$ 的最长链经过的点数. 那么对于一条边 $u\to v$ ,它的的贡献就是 $f(u)+g(v)-1$ . 若有一个 $S\to T$ 的割,那么所有 $S\to T$ 路径一定会经过至少一条割集中的边,只需要考虑割集中的边贡献. 一开始让 $s$ 集只有 $S$ , $T$ 集包含剩余的所有点,这是一个合法的割. 按照拓扑序枚举删掉 $x$ 后的答案,依次进行如下操作,以将点 $x$ 从 $T$ 集合中取出,放入 $S$ 集中. $1.$ 将 $x$ 的所有入边从割集中删掉. $2.$ 所有割集的边的最大贡献就是删掉点 $x$ 的答案. $3.$ 将 $x$ 的所有出边加入割集. 正确性可以利用数学归纳法证明. 执行第 $1$ 步之前,割是整张图的一个割,假设它不含从 $x$ 出发能到的任何边. 所以删掉 $x$ 的入边后,割就是去掉 $x$ 的图的一个合法割,此时可以更新答案. 若将 $x$ 放回图中, $S\to T$ 的路径就一定经过 $x$ ,所以割掉 $x$ 的所有出边,又成了一个合法割. 因为是按照拓扑序依次处理的,所以加入的 $x$ 的入边在之后一定不能被到达,满足了先前的假设. 而初始状态也是满足假设的,所以可以归纳证得以上算法的正确性. 割集只需要记录边的贡献,不记录边的编号,所以可以用一棵权值线段树进行维护,时间复杂度 $O(m\log m)$ .]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>kmp</tag>
        <tag>树状数组</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190825]]></title>
    <url>%2F2019%2F08%2F25%2Ftest20190825%2F</url>
    <content type="text"><![CDATA[我的线段树自带 $10$ 倍常数. $Count$对于每一种 $\prod a_i\not=n^m​$ 的选法,都恰好存在另一种对应的选法 $\prod \frac n {a_i}​$ . 随便选的方案数为 $(\sigma(n))^{2m}$ ,再加上 $\prod a_i=n^m$ 的方案数,除以 $2$ 就是答案. 于是只需要算 $\prod a_i=n^m$ 的方案数. 将 $n$ 分解质因数,显然每个质因子可以分开算方案,答案是每个质因子的贡献乘积. 每个质因子的贡献就是一个整数划分问题, $dp$ 一下,因为方案数只与质因子质数有关,所以可以最后一起加入贡献. $Delete$每次删掉最长的一个单调序列,直到删完. 假设当前的序列长度为 $n$ ,最长上升子序列长度为 $a$ ,最长下降子序列长度为 $b$ . 根据 $Dilworth$ 定理,用最长上升子序列覆盖这个序列至少需要的子序列数目也是 $b$ . 所以就有 $a\cdot b\ge n$ ,得到 $\max(a,b)\ge \sqrt n$ . 于是每次操作至少会使得一个长度为 $n$ 的序列长度减少 $\sqrt n$ ,当 $n=64000$ 时,一定可以在 $500$ 次内删完. $Floor\ it$考虑斐波那契数列的两个特征根 $\phi_1=\frac {1+\sqrt 5} 2,\phi_2=\frac {1-\sqrt 5} 2$ ,其中 $\phi_1$ 就是题目中给出的 $x$ . 构造数列 $a_i=\phi_1^i+\phi_2^i$ ,则 $a$ 有递推式 $a_i=a_{i-1}+a_{i-2},a_1=1,a_2=3$ ,可知 $\forall i\in \mathbb N+,a_i\in \mathbb N+ $. 当 $n$ 为偶数时, $0&lt;\phi_2^n&lt;1,\lfloor x^n\rfloor=a_n-1$ . 当 $n$ 为奇数时, $-1&lt;\phi_2^n&lt;0,\lfloor x^n \rfloor=a_n$ . 用矩阵快速幂 $O(\log n)​$ 求 $a_n​$ 即可.]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>数学</tag>
        <tag>构造</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Japanese Student Championship 2019 Qualification]]></title>
    <url>%2F2019%2F08%2F25%2FJapanese-Student-Championship-2019-Qualification%2F</url>
    <content type="text"><![CDATA[$\text{+9 rating}$ 可还行. A Takahashi Calendar签到题,按题意暴力枚举一下. B Kleene Inversion贡献可以分成两部分,两个数在同一块中的贡献与两个数在不同块中的贡献,分开算一下. C Cell Inversion操作顺序对答案没有影响,将操作视作一个二元组 $(l,r)$ ,我们可以规定按 $l$ 从小到大的顺序操作,最后答案乘上 $n!$ . 将黑色看为 $1$ ,白色看为 $0$ ,显然只需要将偶数位置上的状态取反,然后答案就是前面的 $1$ 与后面的 $0$ 配对的方案数. 开始没判 $1$ 和 $0$ 个数不等的情况,卡了挺久的. D Classified题意读错了.意思是走回来时,走过的长度为偶数,不是每条边经过的次数都为偶数. 于是就要求同一种边权的边形成的图是二分图. 如果用到最大的边权为 $k$ ,那么最多只能构造出 $n=2^k$ 的情况. 首先证最大边权为 $k​$ 时, $n=2^k+1​$ 不可行. 考虑使用数学归纳法,当 $k=1,n=2^1+1=3$ 时,显然不可行.否则,假定 $k=x-1,n=2^{x-1}+1$ 时不可行. 那么当 $k=x,n=2^x+1$ 时,二分图中黑色的节点至少有 $2^{x-1}+1$ 个,否则白色的节点至少有 $2^{x-1}+1$ 个. 假设黑色节点至少有 $2^{x-1}+1$ 个,对于黑色节点内部,因为用前 $x-1$ 种边权无合法解,所以一定会有权值为 $x$ 的边. 这与二分图的定义相矛盾了,所以结论成立,即最大边权为 $k$ 时, $n=2^k+1$ 不可行. 再来证 $n\le2^k$ 时一定存在最大边权不超过 $k$ 的合法解,尝试直接构造方案. 对于节点 $i,j$ ,若它们的二进制位从低到高第 $x$ 位不同,就将它们之间的边权设为 $x$ . 这样对于任意一个 $0\le x&lt;k$ ,边权为 $k$ 的边一定只存在于第 $x$ 位为 $0$ 与第 $x$ 位为 $1$ 的点之间,形成了二分图. E Card Collector考虑像网络流那样,每一行每一列都建出一个点,读入的每个点向所在行列连边,权值都是 $A_i$ . 于是需要选出一些边使得它们的权值最大,并且任意两条边不能有公共点. 分析性质后,发现就是在求解加权拟阵的最大权值独立子集,贪心求解即可. 即将所有边按权值从大到小排序后,依次遍历,若当前的边能加入,就加入. F Candy Retribution留坑.]]></content>
      <tags>
        <tag>Atcoder</tag>
        <tag>数学</tag>
        <tag>构造</tag>
        <tag>二分图</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4245 OR-XOR]]></title>
    <url>%2F2019%2F08%2F24%2Fbzoj-4245-OR-XOR%2F</url>
    <content type="text"><![CDATA[贪心. 因为答案的形式是每一段的权值 $\text {or}$ 起来,从高位到低位考虑,贪心地让高位尽可能为 $0$ . 尝试让答案的第 $i$ 位为 $0$ ,就要求选出的 $m$ 个权值的第 $i$ 位都为 $0$ . 因为这 $m$ 段是连续的,所以就等价于选出 $m$ 个右端点,且最后一个必须选 $n$ . 求出原数列的前缀异或和,容易发现这 $m$ 个右端点处的前缀异或和第 $i$ 位都必须为 $0$ . 于是从高位往低位做,若当前位有至少 $m$ 个可选的位置(必须包含 $n$ ),则这一位对答案的贡献为 $0$, 否则为 $1$ . 每次贡献为 $0$ 时,将前缀异或和这一位为 $1$ 的位置标记出来,表示以后都不能再选了,否则会使得这一位为 $1$ . 注意要用 $\text{1LL}$ 参与位运算. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=5e5+10;int n,m;ll sum[MAXN];bool vis[MAXN];bool check(int k)&#123; if((sum[n]&gt;&gt;k)&amp;1LL) return false; int cnt=0; for(int i=1;i&lt;=n;++i) if(!((sum[i]&gt;&gt;k)&amp;1LL) &amp;&amp; !vis[i]) ++cnt; return cnt&gt;=m;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) sum[i]=sum[i-1]^read(); ll ans=0; for(int k=62;k&gt;=0;--k) &#123; if(check(k)) &#123; for(int i=1;i&lt;=n;++i) if((sum[i]&gt;&gt;k)&amp;1LL) vis[i]=true; &#125; else ans|=(1LL&lt;&lt;k); &#125; printf("%lld\n",ans); return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4299 FRBSUM]]></title>
    <url>%2F2019%2F08%2F24%2Fbzoj-4299-FRBSUM%2F</url>
    <content type="text"><![CDATA[主席树. 考虑如何计算一个集合的 $\text{Forbidden Sum}​$ . 将集合内的数从小到大排序,依次加入.若当前可以表示出 $[0,s]$ 内的所有数,再加入一个数 $x$ . 若 $x\le s+1$ ,则可以表示出 $[0,s+x]$ 内的所有数.若 $x&gt; s+1$ ,则 $s+1$ 无法被表示出,答案为 $s+1$ . 实际做的时候可以换一种思路,将枚举 $x$ 变为不断更新 $s$ . 初始令 $s=1​$ ,每次在区间 $[l,r]​$ 内询问所有 $\le s​$ 的数之和,即上面分析的前缀和.若询问到的 $x&lt;s​$ ,则答案为 $s​$ . 否则令 $s=x+1$ ,继续询问. 询问一段区间内 $\le s​$ 的所有数之和可以用主席树实现. 考虑时间复杂度,若每次都 $x\ge s$ ,每次询问 $s$ 至少翻一倍,所以在主席树上查询了 $O(\log \sum a_i)$ 次. 总时间复杂度为 $O(m\cdot \log \max a_i\cdot \log \sum a_i)$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;struct PreSegtree&#123; int idx; struct node &#123; int ls,rs; int sum; node()&#123;ls=rs=sum=0;&#125; &#125;Tree[MAXN*30]; PreSegtree()&#123;idx=0;&#125;#define root Tree[o] void ins(int &amp;o,int pre,int l,int r,int pos,int c) &#123; o=++idx; root=Tree[pre]; root.sum+=c; if(l==r) return; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) ins(root.ls,Tree[pre].ls,l,mid,pos,c); else ins(root.rs,Tree[pre].rs,mid+1,r,pos,c); &#125; int query(int o,int l,int r,int val)// \le val &#123; if(l&gt;val) return 0; if(r&lt;=val) return root.sum; int mid=(l+r)&gt;&gt;1; return query(root.ls,l,mid,val)+query(root.rs,mid+1,r,val); &#125;&#125;T;int n,m,a[MAXN],mx=0,rt[MAXN];int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) mx=max(mx,a[i]=read()); for(int i=1;i&lt;=n;++i) T.ins(rt[i],rt[i-1],1,mx,a[i],a[i]); m=read(); for(int i=1;i&lt;=m;++i) &#123; int L=read(),R=read(); for(int s=1,x;;s=x+1) &#123; x=T.query(rt[R],1,mx,s)-T.query(rt[L-1],1,mx,s); if(x&lt;s) &#123; printf("%d\n",s); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4289 Tax]]></title>
    <url>%2F2019%2F08%2F23%2Fbzoj-4289-Tax%2F</url>
    <content type="text"><![CDATA[构造建图 + 最短路. 先将无向边拆成两条有向边,于是可以将原图中的每条有向边看成一个点,建一个新图. 枚举中继点 $x$ ,则对 $a\to x,x\to b$ 这两条边在新图中连上对应有向边,权值为两者最大值. 在新图中建立源汇点 $S,T$ ,从 $S$ 向所有在原图中以 $1$ 为起点的边连边,从所有在原图中以 $n$ 为终点的边向 $T$ 连边,权值均为原来的权值,那么答案就是新图中 $S\to T$ 的最短路. 但这样边数可以被菊花图这样的东西卡到 $O(m^2)$ 去,需要利用差分的思想优化连边. 对于每个点 $u$ ,将所有以它为起点的边按照权值从小到大排序,对于相邻的两条边 $x,y$ ,假设 $val_x&lt;val_y$ ,就在新图中从 $x$ 向 $y$ 连权值为 $val_y-val_x$ 的边,从 $y$ 向 $x$ 连权值为 $0$ 的边, $S,T$ 相关的边连法不变. 这样连边边数就是 $O(m)$ 了,在新图上跑 $Dijkstra$ 求出最短路. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int N=1e5+10,M=4e5+10;const int MAXM=2e6+10;int n,m;typedef pair&lt;ll,int&gt; pli;priority_queue&lt;pli&gt; q;const ll inf=1e18;struct Graph&#123; int ecnt,head[MAXM],to[MAXM],nx[MAXM],vis[MAXM]; ll val[MAXM],dis[MAXM]; void addedge(int u,int v,ll w) &#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; val[ecnt]=w; head[u]=ecnt; &#125; Graph()&#123;ecnt=0;memset(head,0,sizeof head);&#125; ll Dijkstra(int S,int T,int tot) &#123; for(int i=1;i&lt;=tot;++i) vis[i]=0,dis[i]=inf; dis[S]=0; q.push(make_pair(-dis[S],S)); while(!q.empty()) &#123; int u=(q.top()).second; q.pop(); if(vis[u]) continue; vis[u]=1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(dis[v]-val[i]&gt;dis[u]) &#123; dis[v]=dis[u]+val[i]; q.push(make_pair(-dis[v],v)); &#125; &#125; &#125; return dis[T]; &#125;&#125;G;int ecnt,head[N],to[M],nx[M];ll val[M];void addedge(int u,int v,ll w)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; val[ecnt]=w; head[u]=ecnt;&#125;bool cmp(int x,int y)&#123; return val[x]&lt;val[y];&#125;int S,T,tmp[MAXM],cnt;void BuildGraph()&#123; S=ecnt+1,T=ecnt+2; for(int i=1;i&lt;=ecnt;i+=2) &#123; G.addedge(i,i+1,val[i]); G.addedge(i+1,i,val[i]); &#125; for(int u=1;u&lt;=n;++u) &#123; cnt=0; for(int i=head[u];i;i=nx[i]) tmp[++cnt]=i; sort(tmp+1,tmp+1+cnt,cmp); for(int i=1;i&lt;cnt;++i) &#123; int x=tmp[i],y=tmp[i+1]; G.addedge(x,y,val[v]-val[u]); G.addedge(y,x,0); &#125; &#125; for(int i=head[1];i;i=nx[i]) G.addedge(S,i,val[i]); for(int i=head[n];i;i=nx[i]) G.addedge((i&amp;1)?i+1:i-1,T,val[i]);&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=m;++i) &#123; int u=read(),v=read(); ll w=read(); addedge(u,v,w); addedge(v,u,w); &#125; BuildGraph(); printf("%lld\n",G.Dijkstra(S,T,T)); return 0;&#125;]]></content>
      <tags>
        <tag>构造</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3516 国王奇遇记加强版]]></title>
    <url>%2F2019%2F08%2F23%2Fbzoj-3516-%E5%9B%BD%E7%8E%8B%E5%A5%87%E9%81%87%E8%AE%B0%E5%8A%A0%E5%BC%BA%E7%89%88%2F</url>
    <content type="text"><![CDATA[推式子题目. 设 $s_x=\displaystyle \sum_{i=1}^n i^x\cdot m^i$ ,则答案 $ans=s_m$ . 考虑构造出 $s_x$ 的递推式. $$\begin{aligned}s_x+(n+1)^x\cdot m^{n+1}&amp;=m\cdot\sum_{i=1}^n (i+1)^x \cdot m^i+m \\&amp;=m\cdot \sum_{i=1}^n \sum_{j=0}^x {x\choose j} i^j \cdot m^i+m\\&amp;=m\cdot \sum_{i=0}^x s_i\cdot {x\choose i} + m\\(1-m)s_x&amp;=m\cdot \sum_{i=0}^{x-1}s_i\cdot {x\choose i}+m-(n+1)^x\cdot m^{n+1}\end{aligned}$$ 特判 $m=1$ 的情况,其余情况利用等比数列求和公式算出 $s_0$ ,再 $O(m^2)$ 递推求得 $s_m$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e3+10;const int P=1e9+7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void upd(int &amp;x,int y)&#123; x=add(x,y);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; a=(a%P+P)%P; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int inv(int x)&#123; return fpow(x,P-2);&#125;int n,m,C[MAXN][MAXN];int s[MAXN];int main()&#123; n=read(),m=read(); if(m==1) return printf("%d\n",mul(mul(n,n+1),inv(2)))&amp;0; for(int i=0;i&lt;=m;++i) C[i][0]=1; for(int i=1;i&lt;=m;++i) for(int j=1;j&lt;=i;++j) C[i][j]=add(C[i-1][j-1],C[i-1][j]); s[0]=fpow(m,n)-1; s[0]=mul(s[0],inv(m-1)); s[0]=mul(s[0],m); for(int x=1;x&lt;=m;++x) &#123; int &amp;tmp=s[x]; for(int i=0;i&lt;x;++i) upd(tmp,mul(s[i],C[x][i])); tmp=mul(tmp,m); upd(tmp,m); upd(tmp,P-mul(fpow(n+1,x),fpow(m,n+1))); tmp=mul(tmp,inv(1-m)); &#125; cout&lt;&lt;s[m]&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 5343 混合果汁]]></title>
    <url>%2F2019%2F08%2F20%2Fbzoj-5343-%E6%B7%B7%E5%90%88%E6%9E%9C%E6%B1%81%2F</url>
    <content type="text"><![CDATA[二分答案 + 主席树. 将美味度离散化,并将所有果汁按照美味度从小到大排序. 可以用主席树维护单价区间能购买到的最大体积之和与总金额之和,对美味度可持久化. 对于每个询问,二分答案 $ans$ ,只考虑美味度 $\ge ans$ 的果汁. 显然应该贪心地选,尽可能选便宜的凑够体积. 于是查询时在主席树上将美味度 $\ge ans$ 的部分抠出来,进行二分. 若左儿子内的体积够,就返回左儿子的答案. 否则将需要的体积减去左儿子内的体积,返回右儿子的答案加上左儿子的所有价格. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;const ll inf=1e18;int n,m,td,tp;ll D[MAXN],P[MAXN];struct Juice&#123; int d,p,lim; bool operator &lt; (const Juice &amp;rhs) const &#123; return d&lt;rhs.d; &#125;&#125;a[MAXN];int rt[MAXN];struct PreSegtree&#123; int idx; struct node &#123; int ls,rs; ll sumv,sumc; node()&#123;ls=rs=sumv=sumc=0;&#125; &#125;Tree[MAXN*30]; PreSegtree()&#123;idx=0;&#125; void upd(int &amp;cur,int pre,int l,int r,int cost,ll v,ll c) &#123; cur=++idx; Tree[cur]=Tree[pre]; Tree[cur].sumv+=v; Tree[cur].sumc+=c; if(l==r) return; int mid=(l+r)&gt;&gt;1; if(cost&lt;=mid) upd(Tree[cur].ls,Tree[pre].ls,l,mid,cost,v,c); else upd(Tree[cur].rs,Tree[pre].rs,mid+1,r,cost,v,c); &#125;#define root1 Tree[Lrt]#define root2 Tree[Rrt] ll query(int Lrt,int Rrt,int l,int r,ll tmpv) &#123; if(root2.sumv-root1.sumv&lt;tmpv) return inf; if(root2.sumv-root1.sumv==tmpv) return root2.sumc-root1.sumc; if(l==r) return tmpv*P[l]; int mid=(l+r)&gt;&gt;1; ll totl=Tree[root2.ls].sumv-Tree[root1.ls].sumv; if(totl&gt;=tmpv) return query(root1.ls,root2.ls,l,mid,tmpv); return Tree[root2.ls].sumc-Tree[root1.ls].sumc+query(root1.rs,root2.rs,mid+1,r,tmpv-totl); &#125;&#125;T;int pos[MAXN];bool check(int k,ll budget,ll tmpv)&#123; int rt1=rt[pos[k]-1],rt2=rt[n]; ll cost=T.query(rt1,rt2,1,tp,tmpv); return cost&lt;=budget;&#125;void init()&#123; sort(a+1,a+1+n); for(int i=1;i&lt;=n;++i) &#123; int x=a[i].d; if(!pos[x]) pos[x]=i; T.upd(rt[i],rt[i-1],1,tp,a[i].p,a[i].lim,1LL*a[i].lim*P[a[i].p]); &#125;&#125;void solve()&#123; for(int i=1;i&lt;=m;++i) &#123; ll budget=read(),tmpv=read(); int L=1,R=td,res=-1; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(check(mid,budget,tmpv)) res=mid,L=mid+1; else R=mid-1; &#125; if(res==-1) puts("-1"); else printf("%lld\n",D[res]); &#125;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) &#123; D[i]=a[i].d=read(); P[i]=a[i].p=read(); a[i].lim=read(); &#125; sort(D+1,D+1+n); td=unique(D+1,D+1+n)-D-1; for(int i=1;i&lt;=n;++i) a[i].d=lower_bound(D+1,D+1+td,a[i].d)-D; sort(P+1,P+1+n); tp=unique(P+1,P+1+n)-P-1; for(int i=1;i&lt;=n;++i) a[i].p=lower_bound(P+1,P+1+tp,a[i].p)-P; init(); solve(); return 0;&#125;]]></content>
      <tags>
        <tag>二分</tag>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于我复习 noip 数据结构这件小事]]></title>
    <url>%2F2019%2F08%2F20%2F%E5%85%B3%E4%BA%8E%E6%88%91%E5%A4%8D%E4%B9%A0-noip-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%BF%99%E4%BB%B6%E5%B0%8F%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[平衡树与 $LCT$ 待更. $STL$关键是会用.比较常用的有 $set,mutiset,priority\ queue,map$ 这几个. 简单说一下 $bitset$ . 1bitset&lt;MAXN&gt; s; 这样就定义了一个 $bitset$ .默认所有位置都是 $0$ . 可以把它看成是一个长度为 $MAXN$ 的布尔数组,也可以看成是有 $MAXN$ 位的二进制数. 它支持直接调用/修改某一位上的值, 12s[0]=1;s[1]=1; 也可以用它直接进行位运算, 1s=s|(s&lt;&lt;10); 一次位运算耗时是长度/系统位数,一般是 $32$ 或者 $64$ . 这个东西就可以把一些只有 $0/1$ 运算的做法给优化 $32/64$ 倍. 原理也很好理解,就是把每 $32/64$ 位压成一个整数参与运算,所以也可以手写它,不过会比较麻烦. 贪心只能过样例 sol 并查集一定记得要初始化. 优化的方式主要有两种,路径压缩和按秩合并.按秩合并就是把小的合并进大的里面. 如果需要支持退回上一步操作,那么就只能选用按秩合并. 单独使用路径压缩或者按秩合并,查询一次的时间复杂度是 $O(\log n)$ ,同时使用是 $O(\alpha(n))$ . 但大多数情况我们都只写路径压缩,因为很难将它卡到 $\log$ 的级别去. 有些并查集会顺带维护这个块内的其他信息,合并的时候一起合并就可以了. 树状数组一维的树状数组比起线段树的优势就是代码容易编写与常数较小,而功能远不如线段树全面. 它的优点是可以比较简单的拓展到高维,而二维线段树就已经比较难写了. 如二维平面上的数点/求和,但坐标可能需要离散化. 上帝造题的七分钟 线段树经典数据结构,使用的方法也很多. 经典应用线段树的经典应用,维护区间内的信息,并支持单点/区间修改.如维护区间和,支持区间加,区间乘. 本质上只有这三个点是会根据不同的题而产生差别的. 如何将两个小区间内的信息合并起来得到大区间. 一个修改操作执行后,区间内的各个信息分别会怎样变化. 如何合并两个懒标记(如果有区间修改). 如果你发现这三点都能在很短的时间内做到,那么这个信息就可以用线段树来维护. 算术天才⑨与等差数列 sol 排序 sol 序列 sol 动态开点线段树就是新到一个点的时候,如果没有,你再新建一个节点作为这个节点. 回转寿司 sol 可持久化线段树 又称主席树,因为发明者的姓名拼音缩写为 hjt ,与中华人民共和国前国家主席的缩写一样… 可以存储 $m$ 个版本的线段树信息,要求每次修改都只是单点修改,每颗线段树的管辖范围都是 $[1,n]$ . 考虑线段树的一次单点修改操作,影响到的节点只有对应叶子节点到根节点路径上的所有节点. 这些节点数目是 $O(\log n)$ 的,所以在维护新版本的线段树时,只用新建出这些节点,其它节点沿用上个版本的. 并不用每次都把上个版本的所有节点拷贝出来,因为每个节点只需要知道儿子节点,直接将儿子节点指过去. 显然需要使用动态开点. 经典的使用方法是利用主席树对 $[1,1],[1,2],[1,3]\dots,[1,n]$ 这 $n$ 个前缀建出 $m$ 颗线段树. 这样在查询可减的信息时(如某数的个数),就可以直接用 $[1,R]$ 的线段树答案减去 $[1,L-1]$ 的线段树答案了. Kth number sol 混合果汁 sol 李超线段树解决的经典问题是每次可以在平面内添加一条 $y=kx+b​$ 的线段,或者询问当 $x=x_0​$ 时,各个线段中最大的 $y​$ . 如果是先添加完所有线段,再进行若干次询问,可以求出上凸壳, $O(n\log n)$ 解决. 李超线段树维护的是各段区间内 优势线段 的编号. 优势线段 是指,这段区间内能成为最优线段的长度最大的那条线段. 往区间 $(l,r)$ 插入一条线段 $c$ 时,就与当前区间 $(l,r)$ 内维护的优势线段 $s$ 比较. 若这两条线段在 $(l,r)$ 内满足一条完全覆盖了另一条,就直接更新优势线段并返回. 否则,就递归下去,用 $c$ 去更新两个子区间. 因为至少在 $[l,mid]$ 与 $[mid+1,r]$ 这两个区间中的一者, $c$ 完全覆盖了 $s$ ,或 $s$ 完全覆盖了 $c$ . 所以更新一个线段树上的区间的时间复杂度是 $O(\log n)$ ,插入一条线段的总时间复杂度是 $O(\log^2 n)$ . 查询时就在线段上向下走,经过一个区间时,就用这个区间的优势线段来更新答案,每次的时间复杂度是 $O(\log n)$ . 适者 sol 游戏 sol) 吉司机线段树区间取最值问题维护一个长度为 $n$ 的整数序列 $a$ ,支持以下 $m$ 次操作: 区间 $[L,R]$ 内的所有数 $a_i$ 与 $x$ 取 $\min$ . 区间 $[L,R]$ 内所有数加上 $x$ . 询问区间 $[L,R]$ 中 $a_i$ 的最大值. 询问区间 $[L,R]$ 中 $a_i​$ 的和. 对线段树每个区间维护最大值 $mx$ ,最大值的个数 $cnt$ ,次大值 $se$ ,区间和 $sum$ . 询问操作可以定位后直接做. 对于修改操作,若将一个线段树区间对 $x$ 取 $\min$ ,可以分情况讨论: $mx\le x$ ,无效果,直接返回. $se&lt;x&lt;mx$ .效果就是将所有 $mx$ 改为 $x$ ,其它不变.新的区间和 $sum’=sum-(mx-x)\cdot cnt​$ 可以直接算出,再打上修改标记,返回. $x\le se​$ .递归下去,分别修改左右儿子. 复杂度为 $O(n\log^2 n)$ ,但实现效果接近 $O(n\log n)$ .如果没有操作 $2$ ,复杂度就是 $O(n\log n)$ . 最假女选手 历史最值问题维护一个长度为 $n$ 的数列 $a$ ,支持以下 $m$ 次操作: 区间 $[L,R]$ 内所有数加上 $x$ . 区间 $[L,R]$ 内所有数变为 $x$ . 询问 $[L,R]$ 内数的最大值. 询问 $[L,R]$ 内数的历史最大值. 修改操作的 $x$ 可能 $&lt;0$ . 尝试将两种修改操作归纳为一种修改操作 $(a,b)$ ,表示先加上 $a$ ,再与 $b$ 取 $\max$ . 那么修改 $1$ 对应的操作就是 $(x,-\inf)$ ,修改 $2$ 对应的操作就是 $(-\inf,x)$ . 考虑两个标记如何合并,假设当前权值为 $v$ ,依次经过 $(a,b),(c,d)$ 两次修改的效果:$$\begin{aligned}v&amp;\to \max{\max{v+a,b}+c,d} \\&amp;=\max{v+a+c,b+c,d} \\&amp;=\max{v+a+c,\max{b+c,d}}\end{aligned}$$可以看出就等价于一次修改操作 $(a+c,\max{b+c,d})$ ,于是两个标记就合并为了一个. 为了能查询历史信息,维护一个意义一样的标记 $(a,b)$ ,表示区间内历史的最大增加量 $a$ ,历史最大与 $b$ 取 $\max$ . 将两个标记的 $+$ 定义为两个标记的合并,两个标记取 $\max$ 定义为两个元素分别取 $\max$ . 每次更新标记后,若当前标记为 $x$ ,历史标记为 $y$ ,则让 $y=\max(x,y)$ . 每个结点需要维护当前标记,历史标记,当前最大值,历史最大值 $4$ 个信息. CPU监控 线段树分治题目也是让你维护一些信息,每次可以询问,可以执行一种操作,也可以将之前的某个操作撤回. 操作容易维护,但撤回操作不容易维护. 需要将操作,询问都离线下来.将时间轴画出来,那么每个操作只在时间轴上的一个区间内生效. 用线段树给这个区间打上这个操作的标记,维护信息. 数学计算 sol 洞穴勘测 sol 线段树合并其实就是两颗权值线段树的合并,都使用动态开点. 如果合并到一个位置时,其中一者没有这个位置上的节点,就直接返回另一者. 否则将这个位置的信息合并后,还要递归合并它们的儿子. 树的难题 sol $kd-tree$处理二维/高维上点的信息.其实就是一棵二叉树. 注意它是二叉树,所以信息的存储与线段树不同. $kd-tree$ 每个结点存储的是整个子树的信息和自己的信息. 每个点有若干个维度,可以表示为 $(p_1,p_2,p_3,\dots,p_k)$ . 建树时,选择按照当前维度排序后的中点作为根,递归建左右子树,每次进入下一层是更换当前维度. 每个节点需要维护自己的坐标,以及每个维度的管辖范围. 查找平面上最近点是爆搜 + 剪枝,复杂度为玄学. 如果提出一个范围内所有点进行修改/询问,复杂度为 $O(n^{1-\frac 1 k})$ ,其中 $k$ 为维度. 这里的范围是指每一维的坐标都在某个特定的区间中,如二维平面中的矩形. 巧克力王国 弹跳 莫队经典莫队需要离线,且无修改操作. 问题是给出 $m$ 个询问,每次询问序列上一个区间 $[l,r]$ 内的信息. 特点是如果维护了 $[l,r]$ 内的所有信息与答案,则可以 $O(1)$ 得出 $[l,r+1],[l,r-1],[l-1,r],[l+1,r]$ 这些区间的信息与答案. 做法是将长度为 $n$ 的序列分块,每 $B$ 个数分为一块. 再将询问排序,排序时以 $l$ 所属块的编号为第一关键字,以 $r$ 为第二关键字. 然后维护当前区间 $[L,R]$ 中的信息,遍历每个询问,不断移动当前区间端点并更新信息,当前区间与询问区间重合时,就得到了答案. 考虑这样做的时间复杂度. 对于同一块内的询问, $L$ 移动 $O(B)$ 次, $R$ 只会往右侧移动,移动 $O(n)$ 次. 对于不同块内的询问, 在每次块改变时, $L$ 移动 $O(B)$ 次, $R$ 移动 $O(n)$ 次. 所以总移动次数为 $O(mB+\frac {n^2} B)$ 取 $B=\frac n {\sqrt m}$ 时最优. 再加上给询问排序,整个算法时间复杂度为 $O(n\sqrt m+m\log m)$ . mex sol permu sol 带修莫队就是支持修改的莫队. 做法是将每次询问的时间也考虑进去,形成一个三元组 $(l,r,t)$ 排序时加入 $t$ 作为第三关键字. 若移动端点的同时时间跨越了某个修改操作,那么就执行/撤回修改. 为了便于分析,视 $n,m$ 同阶,时间复杂度 $O(n^{\frac 5 3})$ . 树上莫队分块方式 定义这里的取反是指,若当前节点的信息在贡献中,则除去,否则加入. 若从$(pu,pv)$ 移动到 $(u,v)$ ,则只需对路径 $(pu,u),(pv,v)$ 的点是否包含情况取反, $LCA​$ 不处理. 保存答案前对 $(u,v)$ 的 $LCA$ 取反,答案保存后再将它取反回去. 若有修改操作,则还需记录每个询问的时间. 时间复杂度与序列上的莫队完全一致. 糖果公园 扫描线最经典的是求矩形面积并.将每个矩形按照 $x$ 坐标排序,从左往右扫过来,看成两个事件,加入和删除. 每次发生了加入事件就去更新答案. 需要注意边界的处理问题,加入和删除操作需要分出前后顺序,根据题目而定. 花火 sol $cdq$ 分治一段区间 $[l,r]$ 内的元素两两之间可能产生贡献,要计算出所有贡献. 取区间中点 $mid$ 将区间分为左右两段. 贡献可以分为左边对左边的贡献,右边对右边的贡献,左边对右边的贡献. 前两者可以递归下去处理,所以只需要考虑左边对右边的贡献. 注意每次处理左边对右边的贡献时,时间复杂度必须是与 $[L,R]$ 的长度相关,而不是与整个序列长度 $n$ 相关. 陌上花开 sol 稻草人 sol]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 2956 模积和]]></title>
    <url>%2F2019%2F08%2F19%2Fbzoj-2956-%E6%A8%A1%E7%A7%AF%E5%92%8C%2F</url>
    <content type="text"><![CDATA[整除分块. 可以把 $i=j$ 的贡献算上,后面再减掉. 假设 $n\le m$ . $$\begin{aligned}ans&amp;=\sum_{i=1}^n \sum_{j=1}^m (n\bmod i)(m\bmod j)-\sum_{i=1}^n (n\bmod i)(m\bmod i) \\&amp;=\sum_{i=1}^n \sum_{j=1}^m (n-\lfloor\frac n i \rfloor\cdot i)(m-\lfloor\frac m j \rfloor\cdot j)-\sum_{i=1}^n (n-\lfloor\frac n i \rfloor\cdot i)(m-\lfloor\frac m i \rfloor\cdot i) \\&amp;=\sum_{i=1}^n (n-\lfloor\frac n i \rfloor\cdot i)\sum_{i=1}^m (m-\lfloor\frac m i \rfloor\cdot i) -\sum_{i=1}^n nm+i^2\cdot \lfloor\frac n i \rfloor\lfloor\frac m i \rfloor-n\cdot \lfloor\frac m i \rfloor\cdot i-m\cdot \lfloor\frac n i \rfloor \cdot i\end{aligned}$$整除分块计算即可. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=19940417;const int inv2=(P+1)&gt;&gt;1,inv6=3323403;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void upd(int &amp;x,int y)&#123; x=add(x,y);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int S1(int l,int r)&#123; return mul(mul(l+r,r-l+1),inv2);&#125;int s2(int x)&#123; return mul(mul(x,mul(x+1,2*x+1)),inv6);&#125;int S2(int l,int r)&#123; return add(s2(r),P-s2(l-1));&#125;int calc(int n)&#123; int ans=0; for(int l=1,r;l&lt;=n;l=r+1) &#123; r=n/(n/l); upd(ans,mul(n,r-l+1)); upd(ans,P-mul(S1(l,r),n/l)); &#125; return ans;&#125;int main()&#123; int n=read(),m=read(); if(n&gt;m) swap(n,m); int ans=0; upd(ans,mul(calc(n),calc(m))); for(int l=1,r;l&lt;=n;l=r+1) &#123; r=min(n/(n/l),m/(m/l)); upd(ans,P-mul(mul(n,m),r-l+1)); upd(ans,P-mul(mul(n/l,m/l),S2(l,r))); upd(ans,mul(mul(n,m/l),S1(l,r))); upd(ans,mul(mul(m,n/l),S1(l,r))); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>整除分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3105 新Nim游戏]]></title>
    <url>%2F2019%2F08%2F19%2Fbzoj-3105-%E6%96%B0Nim%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[贪心求解最大权值线性无关组. $A$ 先拿走一堆石子, $B$ 再拿走一堆石子,然后做 $Nim$ 游戏. 如果 $A$ 拿了之后给 $B$ 留下的石子中存在一个子集,它们的异或和为 $0$ , $B$ 就可以把其它的石子拿走, $A$ 就败了. 所以 $A$ 要拿走最少的石子,使剩下的石子在异或意义下线性无关. 那么就是要求解最大权值线性无关组,用拟阵的那一套理论,贪心处理. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=100+10;int n,a[MAXN],c[32];ll ans=0;void ins(int x,int val)&#123; for(int i=31;i&gt;=0;--i) if((x&gt;&gt;i)&amp;1) &#123; if(!c[i]) &#123; c[i]=x; break; &#125; else x^=c[i]; &#125; if(!x) ans+=val;&#125;int main()&#123; n=read(); if(!n) return puts("-1")&amp;0; for(int i=1;i&lt;=n;++i) a[i]=read(); sort(a+1,a+1+n); reverse(a+1,a+1+n); for(int i=1;i&lt;=n;++i) ins(a[i],a[i]); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>博弈论</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190818]]></title>
    <url>%2F2019%2F08%2F19%2Ftest20190818%2F</url>
    <content type="text"><![CDATA[沙茶出题人数据造出锅了,还要大家来帮他修. 甚至连个题解都没有. $A$考虑换根,若当前根节点从 $u$ 换到 $v$ ,显然只有 $u$ 和 $v$ 的贡献会改变. 预处理一大堆东西,从 $u$ 换到 $v$ 时更新贡献,回溯时撤回. 时间复杂度 $O(n)$ . $B$将每次变换看做一个矩阵,转化为矩阵的 $BSGS$ . 由于矩阵可能没有逆,所以最后再判一下解是否合法. 时间复杂度 $O(T\cdot \sqrt P\cdot \log \sqrt P )$ . $C$将每个数看做 $0/1$ 串,正着建一棵字典树,反着建一棵字典树. 那么每个前缀武器就能在前缀的字典树树上割下一颗子树,每个后缀武器能的后缀的字典树上割下一颗子树. 每个给出的点在两棵树上至少被割掉一次,可以将两颗树拼在一起,建立一个最小割模型.]]></content>
      <tags>
        <tag>数学</tag>
        <tag>Trie</tag>
        <tag>网络流</tag>
        <tag>test</tag>
        <tag>BSGS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[拟阵学习笔记]]></title>
    <url>%2F2019%2F08%2F18%2F%E6%8B%9F%E9%98%B5%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[可用于解决一些最大权重独立子集的问题. 拟阵的定义一个有限 拟阵 是满足以下条件的二元组 $M=(S,I)$ : $S$ 是有限集. $I$ 是由 $S$ 的一些子集组成的有限非空集合(非空族) ,这些子集称为 $S$ 的 独立子集 . $I​$ 有 遗传性 ,即,若 $B\in I,A\subset B​$ ,则 $A\in I​$ .又因为 $I​$ 非空,所以一定有 $\emptyset \in I​$ . $M$ 有 交换性 ,即,若 $A,B\in I,|B|&gt;|A|$ ,则 $\exists x\in B-A$ ,使得 $A\cup \lbrace x \rbrace \in I$ . 举个例子, $M=(S,I)​$ 是一个拟阵,其中 $S=\lbrace 1,2,3 \rbrace ,I=\lbrace A\subset S:|A|\le 2 \rbrace​$ . 容易验证 $M$ 满足以上的 $4$ 个条件. 拓展有拟阵 $M=(S,I)$ ,若 $A\in I,x\not \in A,A\cup { x } \in I$ ,则称 $x$ 是独立子集 $A$ 的一个 拓展 . 最大独立子集若一个独立子集 $A$ 不存在拓展,则称它为 最大独立子集 . 由这个定义与拟阵的交换性质可以得出一条重要性质:拟阵中所有 最大独立子集 都具有相同的大小. 线性无关与拟阵设 $S$ 是一个行向量组, $I$ 是由所有 $S$ 的线性无关子集组成的集合,有定理: 二元组 $M=(S,I)$ 是一个拟阵. 证明该定理只需要证明 $M=(S,I)$ 满足拟阵的 $4$ 个条件.前 $2$ 个条件显然满足,只需证遗传性和交换性. 遗传性的证明一个线性无关组的子集,显然也线性无关.即,若 $A\in I,B\subset I$ ,则 $B\in I$ ,满足遗传性. 交换性的证明令 $X,Y\in I,|X|&gt;|Y|$ . 考虑反证法,假设 $\forall x\in X-Y​$ ,都有 $Y\cup {x} \not \in I​$ 成立. 则说明将任意一个在 $X$ 集合中,而不在 $Y$ 集合中的向量 $x$ 添加到 $Y$ 集合中,都会使得 $Y$ 变为线性相关. 说明任意一个这样的 $x$ 都可以被 $Y$ 中向量线性组合表示. 而 $X$ 中其它向量也被 $Y$ 包含,也可以被 $Y$ 中向量线性组合表示. 于是 $X$ 中的所有向量都可以被 $Y$ 中向量线性组合表示.但 $X$ 线性无关,不可能被更小的集合完全表示,矛盾. 交换性得证. 加权拟阵若一个拟阵 $M=(S,I)$ 关联了一个权重函数 $w$ ,它为 $S$ 中的每一个元素 $x$ 赋予了一个 严格大于0 的权重 $w(x)$. 则称拟阵 $M$ 是加权的,即 加权拟阵 . $S$ 的子集 $A$ 的权值就是$$w(A)=\sum_{x\in A}w(x)$$ 最大权重独立子集定义在加权拟阵 $M=(S,I)$ 中,权值最大的 独立子集 . 即所有 $A\in I$ 中, $w(A)$ 最大的 $A$ . 贪心求解 将 $S$ 中所有元素按照 $w(x)$ 降序排列. 初始有一个集合 $A=\emptyset​$ ,按照第 $1​$ 步排好的顺序依次遍历 $S​$ 中的每个元素 $x​$ ,若 $A\cup {x}\in I​$ ,则令 $A=A\cup {x}​$ . 遍历结束后,此时的 $A$ 就是要求的最大权重独立子集的一个解. 贪心正确性证明若 $I= { \emptyset }$ ,正确性显然,考虑 $I\not= { \emptyset }$ 的情况. 只需要考虑加权拟阵 $M=(S,I)$ 的 $3$ 条优美性质. 贪心选择性若 $S$ 中的元素已按 $w(x)$ 降序排列,令 $x$ 为 $S$ 中第一个 ${x}\in I$ 的元素. 那么存在一个最大权重独立子集 $A$ ,使得 $x\in A$ . 元素只考虑一次如果一个元素 $x$ 被遍历到时, $A\cup {x}\not \in I$ ,那么之后 $A$ 增大时,也总是有 $A\cup {x}\not \in I$ . 反证,由拟阵的遗传性即可得出矛盾. 最优子结构性质若 $x$ 是求解过程中第一个被选出的元素,那么选出剩下的元素就归结为一个子问题. 即求解加权拟阵 $M’=(S’,I’)$ 的最大权重独立子集,其中,$$S’={y\in S:{x,y}\in I}\I’={B\subset S-{x}:B\cup {x}\in I}$$ 应用根据线性无关与拟阵的关系,一个常见的应用是求解向量组的 最大权值线性无关组 . 直接套用贪心求解的过程即可. 对于其它的问题,如果能构造出对应的拟阵,也可以套用上述贪心求解的过程.]]></content>
      <tags>
        <tag>数学</tag>
        <tag>学习笔记</tag>
        <tag>线性代数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4237 稻草人]]></title>
    <url>%2F2019%2F08%2F17%2Fbzoj-4237-%E7%A8%BB%E8%8D%89%E4%BA%BA%2F</url>
    <content type="text"><![CDATA[$cdq$ 分治 + 单调栈. 将所有点先按照 $y$ 排序,然后 $cdq$ 分治,每次只考虑上面的一部分点作为右上角,下面的一部分点作为左下角的贡献. 将上下两部分的点分别按照 $x$ 排序,从左往右枚举上面的点. 发现上面的一个点在只会受到 $y$ 比自己小的点中, $x$ 最大的点的制约,维护一个 $y$ 递增的单调栈来找出这个点. 然后在下面的点中统计有哪些点是合法的,对下面的点维护一个 $y$ 不增的单调栈. 每次在上面加入点后,就将下面 $x$ 小于等于它的点加入下面的栈. 在下面的单调栈中使用二分,找出合法点的区间,时间复杂度 $O(n\log^2 n)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;struct node&#123; int x,y;&#125;a[MAXN],up[MAXN],down[MAXN];bool cmpy(node a,node b)&#123; return a.y==b.y?a.x&lt;b.x:a.y&gt;b.y; &#125;bool cmpx(node a,node b)&#123; return a.x==b.x?a.y&lt;b.y:a.x&lt;b.x;&#125;int n,stk1[MAXN],stk2[MAXN],tp1,tp2;ll ans=0;void cdq(int l,int r)&#123; if(l==r) return; int mid=(l+r)&gt;&gt;1; cdq(l,mid); tp1=tp2=0; int ls=mid-l+1,rs=r-mid; for(int i=l;i&lt;=mid;++i) up[i-l+1]=a[i]; for(int i=mid+1;i&lt;=r;++i) down[i-mid]=a[i]; sort(up+1,up+1+ls,cmpx); sort(down+1,down+1+rs,cmpx); int p=1; for(int i=1;i&lt;=ls;++i) &#123; while(tp1&gt;0 &amp;&amp; up[stk1[tp1]].y&gt;=up[i].y) --tp1; stk1[++tp1]=i; while(p&lt;=rs &amp;&amp; down[p].x&lt;=up[i].x) &#123; while(tp2&gt;0 &amp;&amp; down[stk2[tp2]].y&lt;down[p].y) --tp2; stk2[++tp2]=p; ++p; &#125; if(!tp2) continue; if(tp1==1) &#123; ans+=tp2; continue; &#125; int L=1,R=tp2,lim=up[stk1[tp1-1]].x,res=-1; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(down[stk2[mid]].x&gt;=lim) res=mid,R=mid-1; else L=mid+1; &#125; if(res!=-1) ans+=tp2-res+1; &#125; cdq(mid+1,r);&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) &#123; a[i].x=read(); a[i].y=read(); &#125; sort(a+1,a+1+n,cmpy); cdq(1,n); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>单调栈</tag>
        <tag>cdq分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190816]]></title>
    <url>%2F2019%2F08%2F16%2Ftest20190816%2F</url>
    <content type="text"><![CDATA[点分治爆栈祭. $phantasm$将每次选择的位置看成一个数列,第一个位置必定是 $1$ ,所以只需要求出它的差分序列方案数. 差分序列中共 $m-1$ 个元素,每个元素必须 $\le k$ ,总和为 $n-1$ . 调整一下后用隔板法处理,答案是组合数,在模 $2$ 意义下,根据 $Lucas$ 定理,只需判断二进制位即可. $skylines$直接大力点分治预处理所有点的答案. 枚举子树时正反顺序都做一次,再考虑上分治中心. 时间复杂度 $O(n\log n+T)$ . $kiseki$题面写得太垃圾了. 每次从已有的数中选一个,得到它的权值,并获得它的后继,存档可以重复获得. 考虑 $dp$ ,状态只与当前有的存档集合有关,与顺序无关. 而从小到大排序后,相邻两项的差分值只可能是 $0/1$ ,所以可以用一个二进制数 $S$ 来记录. 设 $f(i,S)$ 表示有 $i$ 个存档,差分值的状态是 $S$ 的方案数,转移时枚举增加的存档. 总方案数是 $m!$ ,预处理差分状态 $S$ 对应的序列权值是 $val(S)$ ,答案就为 $$\sum_{S} \frac {f(m,S)} {m!} \cdot val(S)$$ 时间复杂度 $O(m\cdot 2^m)$ .]]></content>
      <tags>
        <tag>数学</tag>
        <tag>概率/期望</tag>
        <tag>状压dp</tag>
        <tag>test</tag>
        <tag>Lucas定理</tag>
        <tag>点分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4236 JOIOJI]]></title>
    <url>%2F2019%2F08%2F16%2Fbzoj-4236-JOIOJI%2F</url>
    <content type="text"><![CDATA[$map$ . 用 $sum(i,0/1/2)$ 分别表示三种字母出现次数的前缀和. 一段区间 $[L+1,R]$ 合法的充要条件是 $sum(r,0)-sum(l,0)=sum(r,1)-sum(l,1),sum(r,1)-sum(l,1)=sum(r,2)-sum(l,2)$ . 将两种差看成两个权值,加入每个元素后询问两个权值都与它相等的元素出现的第一个位置,可以用 $map$ 维护. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;typedef pair&lt;int,int&gt; pii;map&lt;pii,int&gt; mp;int n,sum[MAXN][3];char buf[MAXN];int trans(char c)&#123; if(c=='J') return 2; return c&lt;'J';&#125;int main()&#123; n=read(); scanf("%s",buf+1); int ans=0; mp[make_pair(0,0)]=0; for(int i=1;i&lt;=n;++i) &#123; int x=trans(buf[i]); for(int j=0;j&lt;3;++j) sum[i][j]=sum[i-1][j]; ++sum[i][x]; int u=sum[i][0]-sum[i][1],v=sum[i][1]-sum[i][2]; pii tmp=make_pair(u,v); if(mp.find(tmp)!=mp.end()) ans=max(ans,i-mp[tmp]); else mp[tmp]=i; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 1143 祭祀]]></title>
    <url>%2F2019%2F08%2F16%2Fbzoj-1143-%E7%A5%AD%E7%A5%80%2F</url>
    <content type="text"><![CDATA[$floyd$ 传递闭包 + 二分图的相关理论. 先用 $floyd$ 做传递闭包,预处理每两点间的连通性. 每个点拆成入点和出点,再枚举点 $a,b$ ,若 $a$ 能到 $b$ ,就从 $a$ 的入点向 $b$ 的出点连边. 然后就是要求新建出来的二分图的最大独立集,就等于原来的点数减去它的最大匹配数. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=128;int n,m;bool f[MAXN][MAXN];void floyd()&#123; for(int k=1;k&lt;=n;++k) for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=n;++j) f[i][j]|=(f[i][k]&amp;f[k][j]);&#125;int par[MAXN],vis[MAXN];int dfs(int u)&#123; for(int v=1;v&lt;=n;++v) &#123; if(v!=u &amp;&amp; !vis[v] &amp;&amp; f[u][v]) &#123; vis[v]=1; if(!par[v] || dfs(par[v])) &#123; par[v]=u; return 1; &#125; &#125; &#125; return 0;&#125;int Hungarian()&#123; int ans=0; for(int i=1;i&lt;=n;++i) &#123; memset(vis,0,sizeof vis); ans+=dfs(i); &#125; return ans;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) f[i][i]=true; for(int i=1;i&lt;=m;++i) &#123; int u=read(),v=read(); f[u][v]=true; &#125; floyd(); int ans=Hungarian(); printf("%d\n",n-ans); return 0;&#125;]]></content>
      <tags>
        <tag>floyd</tag>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4358 permu]]></title>
    <url>%2F2019%2F08%2F16%2Fbzoj-4358-permu%2F</url>
    <content type="text"><![CDATA[莫队. 使用莫队,考虑加入一个数 $x$ 造成的影响,发现需要用到 $x-1,x+1$ 的信息. 需要对每个数维护当前它所在的最大连续区间长度,但修改时可能会修改很多数的答案. 简单粗暴的办法是用线段树维护最大子段和,但多一个 $\log$ ,而且常数比较大,跑不过去. 用 $pre_i,nxt_i$ 分别表示 $i$ 在值域上往左/右走最多有几个数, $pre_i+nxt_i-1$ 可以更新答案. 插入数 $i$ 的时候,用 $i-1$ 的 $pre$ 更新 $i$ 的 $pre$ ,用 $i+1$ 的 $nxt$ 更新 $i$ 的 $nxt$ . 然后再更新 $i$ 所在最长连续区间左端点的 $nxt$ 和右端点的 $pre$ . 中间不用管,因为不可能再在中间插入数,也就不可能再用到它们的 $pre,nxt$ 了. 发现删除操作不好维护,我们可以保证右端点不删除,只可能撤销左端点的插入操作,就可以维护了. 对于 $l$ 在同一块内的询问,若 $r​$ 也在这一块内,可以暴力做. 对于 $r$ 在这一块外的,将它们按照 $r$ 从小到大排序. 先将 $L$ 设置为当前块的末尾,右移 $R$ 到询问的 $r$ ,再将 $L$ 左移到询问的 $l$ ,更新答案,再将 $L$ 移回当前块的末尾. 因为插入一个数最多只会影响 $3$ 个数的信息,所以把它们记录下来,移回时撤销,时间复杂度 $O(n\sqrt n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=5e4+10;int n,m,res,Ans[MAXN];int BlockSize,tot=0,bel[MAXN],a[MAXN];int lpos[MAXN],rpos[MAXN];struct Query&#123; int l,r,id,block; bool operator &lt; (const Query &amp;rhs) const &#123; return block==rhs.block?r&lt;rhs.r:block&lt;rhs.block; &#125;&#125;q[MAXN];int bf_pre[MAXN],bf_nxt[MAXN];int bf_stk[MAXN],bf_tp;int bf(int i)&#123; bf_tp=0; int ans=0; for(int j=q[i].l;j&lt;=q[i].r;++j) &#123; int x=a[j]; bf_stk[++bf_tp]=x; bf_pre[x]=bf_pre[x-1]+1; bf_nxt[x]=bf_nxt[x+1]+1; int len=bf_pre[x]+bf_nxt[x]-1; ans=max(ans,len); bf_nxt[x-bf_pre[x]+1]=len; bf_pre[x+bf_nxt[x]-1]=len; &#125; Ans[q[i].id]=ans; for(int j=1;j&lt;=bf_tp;++j) bf_pre[bf_stk[j]]=bf_nxt[bf_stk[j]]=0;&#125;int nxt[MAXN],pre[MAXN],tp;struct opt&#123; int x; int p1,n1; // pre[x]:p1-&gt;p2 nxt[x]:n1-&gt;n2 void undo() &#123; pre[x]=p1; nxt[x]=n1; &#125;&#125;;opt stk[MAXN];void solve()&#123; int lstblock=-1,L,R; for(int i=1;i&lt;=m;++i) &#123; if(q[i].block!=lstblock) &#123; L=rpos[q[i].block]; R=L-1; res=0; memset(pre,0,sizeof pre); memset(nxt,0,sizeof nxt); tp=0; lstblock=q[i].block; &#125; if(bel[q[i].l]==bel[q[i].r]) &#123; bf(i); continue; &#125; while(R&lt;q[i].r) &#123; int x=a[++R]; pre[x]=pre[x-1]+1; nxt[x]=nxt[x+1]+1; int len=pre[x]+nxt[x]-1; res=max(res,len); nxt[x-pre[x]+1]=len; pre[x+nxt[x]-1]=len; &#125; int tmp=res; while(L&gt;q[i].l) &#123; int x=a[--L]; pre[x]=pre[x-1]+1; nxt[x]=nxt[x+1]+1; stk[++tp]=(opt)&#123;x,0,0&#125;; int len=pre[x]+nxt[x]-1; stk[++tp]=(opt)&#123;x-pre[x]+1,pre[x-pre[x]+1],nxt[x-pre[x]+1]&#125;; stk[++tp]=(opt)&#123;x+nxt[x]-1,pre[x+nxt[x]-1],nxt[x+nxt[x]-1]&#125;; nxt[x-pre[x]+1]=len; pre[x+nxt[x]-1]=len; res=max(res,len); &#125; Ans[q[i].id]=res; while(tp) &#123; stk[tp].undo(); --tp; &#125; L=rpos[q[i].block]; res=tmp; &#125;&#125;void init_Block()&#123; BlockSize=sqrt(n); for(int i=1;i&lt;=n;++i) bel[i]=(i-1)/BlockSize+1; tot=bel[n]; for(int i=1;i&lt;=n;++i) rpos[bel[i]]=i; for(int i=n;i&gt;=1;--i) lpos[bel[i]]=i;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); init_Block(); for(int i=1;i&lt;=m;++i) &#123; q[i].l=read(); q[i].r=read(); q[i].block=bel[q[i].l]; q[i].id=i; &#125; sort(q+1,q+1+m); solve(); for(int i=1;i&lt;=m;++i) printf("%d\n",Ans[i]); return 0;&#125;]]></content>
      <tags>
        <tag>离线</tag>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190815]]></title>
    <url>%2F2019%2F08%2F15%2Ftest20190815%2F</url>
    <content type="text"><![CDATA[发现自己的码力还是太弱,可能需要多做毒瘤题(?) $cubicp$$P=a^3-b^3=(a-b)(a^2+ab+b^2)$ ,因为 $P$ 是质数,所以 $a-b=1$ . 于是 $P=3b^2+3b+1$ ,先预处理所有合法的答案,然后快速回答即可. $dp$考虑朴素的 $dp$ ,设 $f(i,j)$ 表示将前 $i$ 个数分成 $j$ 段的最小花费. 先枚举 $j$ ,可以发现 $i$ 的转移决策是具有单调性的,于是可以优化. 不能用二分决策栈的方法,因为转移额外代价 $cost(k,i)$ 不方便快速在线算. 对求解区间和决策区间分治,这样可以像莫队那样暴力移动端点来算 $cost$ ,时间复杂度 $O(n\log n)$ . $number$可以先二分答案 $mid$ ,于是要考虑 $1\sim mid$ 的全部区间.将它们按照 $x$ 从大到小排序,依次加入. 如果同一种 $x$ 的区间的交集被之前加入的所有区间的并集完全覆盖,显然就不合法,否则一定可以构造出合法的方案. 可以直接用线段树来维护区间覆盖,但会多一个 $\log$ . 优秀的做法是用并查集维护当前每个节点在并集中向右能跳到的最远点,就可以判断合法性了.]]></content>
      <tags>
        <tag>二分</tag>
        <tag>并查集</tag>
        <tag>test</tag>
        <tag>决策单调性</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4345 Korale]]></title>
    <url>%2F2019%2F08%2F15%2Fbzoj-4345-Korale%2F</url>
    <content type="text"><![CDATA[$dfs$ + 堆,求第 $k$ 优解. 首先去求第 $k$ 小的子集权值 $val$ ,先将元素权值从小到大排序. 每个子集可以用一个二元组 $(i,j)$ 表示权值为 $i$ ,最大的元素编号为 $j$ . 将它加入优先队列,一个二元组 $(i,j)$ 可以得到 $(i-a_j+a_{j+1},j+1)$ 与 $(i+a_{j+1},j+1)$ . 前者表示不选 $j$ 了,后者表示保留 $j$ .第 $k$ 次取出二元组时对应的权值就是第 $k$ 小的子集权值. 然后要求第 $k$ 小的具体方案,直接 $dfs$ 爆搜,但要保证权值不超过 $val$ . 每次找后面第一个数,使得加入后权值仍不超过 $val$ ,用线段树来找这个数,第 $k$ 次时集合中的数就是答案. 注意除掉空集的贡献. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e6+10;int n,k,a[MAXN],b[MAXN],cnt=0;ll ans[MAXN];typedef pair&lt;ll,int&gt; pli;#define mp make_pairpriority_queue&lt;pli&gt; q;void Find_kth()&#123; sort(b+1,b+1+n); q.push(mp(-b[1],1)); for(int t=1;t&lt;=k;++t) &#123; pli tmp=q.top(); ll i=-tmp.first; int j=tmp.second; q.pop(); ans[t]=i; if(t&lt;k &amp;&amp; j&lt;n) &#123; q.push(mp(-i+b[j]-b[j+1],j+1)); q.push(mp(-i-b[j+1],j+1)); &#125; &#125; for(int i=k;i &amp;&amp; ans[i]==ans[k];--i) ++cnt; printf("%lld\n",ans[k]);&#125;struct SegTree&#123; int Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1] void pushup(int o) &#123; root=min(lson,rson); &#125; void BuildTree(int o,int l,int r) &#123; if(l==r) return (void)(root=a[l]); int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); pushup(o); &#125; int query(int o,int l,int r,int p,ll v)//位置p之后第一个小于等于v的 &#123; if(p&lt;=l) &#123; if(root&gt;v) return 0; if(l==r) return l; &#125; int mid=(l+r)&gt;&gt;1; if(p&lt;=mid) &#123; int res=query(o&lt;&lt;1,l,mid,p,v); if(res) return res; &#125; return query(o&lt;&lt;1|1,mid+1,r,p,v); &#125;&#125;T;int stk[MAXN],tp=0;void dfs(int p,ll tmp)&#123; if(!cnt) return; if(!tmp) &#123; --cnt; if(!cnt) for(int i=1;i&lt;=tp;++i) printf("%d" ,stk[i]); return; &#125; for(int i=p+1;i&lt;=n;++i) &#123; i=T.query(1,1,n,i,tmp); if(i) &#123; stk[++tp]=i; dfs(i,tmp-a[i]); --tp; &#125; else break; &#125;&#125;void Construct_kth()&#123; T.BuildTree(1,1,n); dfs(0,ans[k]);&#125;int main()&#123; n=read(),k=read()-1; if(!k) return puts("0")&amp;0; for(int i=1;i&lt;=n;++i) a[i]=b[i]=read(); Find_kth(); Construct_kth(); return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>STL</tag>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 515 贪心只能过样例]]></title>
    <url>%2F2019%2F08%2F14%2FLoj-515-%E8%B4%AA%E5%BF%83%E5%8F%AA%E8%83%BD%E8%BF%87%E6%A0%B7%E4%BE%8B%2F</url>
    <content type="text"><![CDATA[$bitset$ 优化 $dp$ . 考虑最朴素的 $dp$ , $f(i,j)$ 表示考虑前 $i$ 个数,能否使得 $S=j$ . 转移时枚举当前这一位选哪一个数,这样直接做的时间复杂度是 $O(n^5)$ . 因为只有 $0/1$ 运算,第二维的最大值为 $10^6$ ,用 $bitset$ 优化,复杂度变成 $O(\frac {n^5} {64})$ ,就可以过了. 123456789101112131415161718192021222324252627282930313233#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=101;int n;bitset&lt;MAXN*MAXN*MAXN&gt; f,lst;int main()&#123; n=read(); lst[0]=1; for(int i=1;i&lt;=n;++i) &#123; int L=read(),R=read(); f.reset(); for(int x=L;x&lt;=R;++x) f|=lst&lt;&lt;(x*x); lst=f; &#125; cout&lt;&lt;f.count()&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 514 模拟只会猜题意]]></title>
    <url>%2F2019%2F08%2F14%2FLoj-514-%E6%A8%A1%E6%8B%9F%E5%8F%AA%E4%BC%9A%E7%8C%9C%E9%A2%98%E6%84%8F%2F</url>
    <content type="text"><![CDATA[原以为此题必有高论,结果直接 $O(n^2)$ 暴力预处理答案就可以了. 1234567891011121314151617181920212223242526272829303132333435#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int inf=1e9;const int MAXN=1e4+10;int n,m,ans[MAXN],a[MAXN];int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) &#123; a[i]=read()+a[i-1]; ans[i]=-inf; &#125; for(int i=1;i&lt;=n;++i) for(int j=i;j&lt;=n;++j) ans[j-i+1]=max(ans[j-i+1],a[j]-a[i-1]); for(int i=n-1;i&gt;=1;--i) ans[i]=max(ans[i+1],ans[i]); for(int i=1;i&lt;=m;++i) printf("%d\n",ans[read()]); return 0;&#125;]]></content>
      <tags>
        <tag>暴力</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190814]]></title>
    <url>%2F2019%2F08%2F14%2Ftest20190814%2F</url>
    <content type="text"><![CDATA[$T2$ 被常数卡到暴力分了. $tree$原题.直接树形 $dp$ . $dance$从前往后枚举右端点,依次加入每个点,用单调栈维护后缀最大/最小值,线段树维护答案. $seq$打表或者分析,把递推式子搞出来, $f_i=f_{i-1}+(i-1)\cdot (i-2)$ . 然后用特征方程那一套理论把通项找出来, $f_n=2^{n+1}-n^2-n-2$ ,就可以直接算了.]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>数学</tag>
        <tag>树形dp</tag>
        <tag>单调栈</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 2049 洞穴勘测]]></title>
    <url>%2F2019%2F08%2F14%2Fbzoj-2049-%E6%B4%9E%E7%A9%B4%E5%8B%98%E6%B5%8B%2F</url>
    <content type="text"><![CDATA[线段树分治 + 并查集. 这本来是个 $LCT$ 的模板题,但离线下来也可以用线段树分治 + 并查集来做. 每条边可以看做在一个时间区间内生效,每个线段树节点维护一个 $vector$ ,存储在该区间内都有效的边. 一条边只会被加入 $O(\log m)$ 个线段树节点,空间复杂度为 $O(m\log m)$ . 最后 $dfs$ 整个线段树,进入一个节点时,就让它的 $vector$ 中的边都生效,退出时撤销这些边. 因为有撤销,所以不能路径压缩,可以用按秩合并的并查集来维护. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;typedef pair&lt;int,int&gt; pii;#define mp make_pairconst int MAXM=2e5+10;map&lt;pii,int&gt; Eid;struct Edge&#123; int u,v; int l,r; Edge()&#123;r=-1;&#125;&#125; E[MAXM];struct query&#123; int u,v,id;&#125;;int n,m,ans[MAXM],qcnt=0,ecnt=0;vector&lt;query&gt; qry[MAXM];vector&lt;pii&gt; opt[MAXM&lt;&lt;2];int fa[MAXM],siz[MAXM];void init()&#123; for(int i=1; i&lt;=n; ++i) fa[i]=i,siz[i]=1;&#125;int Find(int x)&#123; if(x==fa[x]) return x; return Find(fa[x]);&#125;void Union(int &amp;x,int &amp;y)&#123; if(siz[x]&lt;siz[y]) swap(x,y); siz[x]+=siz[y]; fa[y]=x;&#125;struct SegTree&#123; vector&lt;int&gt; s[MAXM&lt;&lt;2];#define root s[o] void upd(int o,int l,int r,int L,int R,int c) &#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; root.push_back(c); return; &#125; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) upd(o&lt;&lt;1|1,mid+1,r,L,R,c); &#125; void add(int o) &#123; int tot=root.size(); for(int i=0;i&lt;tot;++i) &#123; int x=root[i]; int u=Find(E[x].u),v=Find(E[x].v); if(u==v) continue; Union(u,v); opt[o].push_back(mp(u,v)); &#125; &#125; void del(int o) &#123; int tot=opt[o].size(); for(int i=0;i&lt;tot;++i) &#123; pii t=opt[o][i]; int u=t.first,v=t.second; fa[v]=v; siz[u]-=siz[v]; &#125; &#125; void solve(int o,int p) &#123; int tot=qry[p].size(); for(int i=0;i&lt;tot;++i) &#123; query q=qry[p][i]; int u=Find(q.u),v=Find(q.v); if(u==v) ans[q.id]=1; else ans[q.id]=0; &#125; &#125; void dfs(int o,int l,int r) &#123; add(o); if(l==r) &#123; solve(o,l); del(o); return; &#125; int mid=(l+r)&gt;&gt;1; dfs(o&lt;&lt;1,l,mid); dfs(o&lt;&lt;1|1,mid+1,r); del(o); &#125;&#125; T;int main()&#123; n=read(),m=read(); init(); for(int i=1; i&lt;=m; ++i) &#123; char op[10]; scanf("%s",op); int u=read(),v=read(); if(op[0]=='C') &#123; Eid[mp(u,v)]=Eid[mp(v,u)]=++ecnt; E[ecnt].u=u,E[ecnt].v=v; E[ecnt].l=i; &#125; else if(op[0]=='D') E[Eid[mp(u,v)]].r=i; else qry[i].push_back((query)&#123;u,v,++qcnt&#125;); &#125; for(int i=1; i&lt;=ecnt; ++i) &#123; if(E[i].r==-1) E[i].r=m; T.upd(1,1,m,E[i].l,E[i].r,i); &#125; T.dfs(1,1,m); for(int i=1; i&lt;=qcnt; ++i) puts(ans[i]?"Yes":"No"); return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>并查集</tag>
        <tag>线段树分治</tag>
        <tag>离线</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190813]]></title>
    <url>%2F2019%2F08%2F13%2Ftest20190813%2F</url>
    <content type="text"><![CDATA[考了一套简单题. $prime$贪心. 有一个比较明显的贪心策略,即先做若干次除法,再只做加法或只做减法. 做完除法后算答案直接暴力枚举加/减了几步就可以了. 因为 $10^9$ 内的两个相邻质数相差不会超过 $220$ ,所以答案也不会超过 $220$ . 据说质数密度是 $O(\log n)$ 级别的. $path$树状数组. 可以发现这个图就是由若干个不相交的链或者环组成的. 因为只有合并操作,所以可以用并查集来维护每条链和每个环,以及它们的大小. 查询 $(l,r)$ 时,可以用长度不超过 $r$ 的答案减去长度不超过 $l-1$ 的答案,只需要考虑如何计算长度不超过 $k$ 的路径数. 考虑一条大小为 $s$ 的链的贡献.若 $s\le k$ ,贡献为 $\frac {s(s+1)} 2$ ,否则,贡献为 $k\cdot s-\frac {k(k-1)} 2$ . 考虑一个大小为 $s$ 的环的贡献.若 $s\le k$ ,贡献为 $s^2$ ,否则, 贡献为 $s\cdot k$ . 用 $5$ 个树状数组分别维护贡献 (还有一个是链的条数) ,每个链/环的贡献加入它的大小的对应位置. 有个地方没开 $\mbox{long long}$ ,爆成 $95$ 了. 时间复杂度 $O(n\log n)$ . $book$期望 $dp$ . 设 $f(i,j)$ 表示第 $i$ 个人拿到的从新到旧的第 $j$ 本书的期望排名. 转移时枚举每个人拿了哪本书,时间复杂度 $O(n^3)$ .]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>概率/期望</tag>
        <tag>树状数组</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3569 DZY Loves Chinese II]]></title>
    <url>%2F2019%2F08%2F13%2Fbzoj-3569-DZY-Loves-Chinese-II%2F</url>
    <content type="text"><![CDATA[神仙题. 先做出原图的一棵 $dfs$ 树.对于每条非树边,随机分配一个权值 $x$ ,将它在树上覆盖到的树边的权值全部异或上 $x$ . 每次询问给定了一个边的集合 $S$ ,若存在 $S$ 的一个非空子集,该子集内所有的边权异或和为 $0$ ,则不连通,否则连通. 边权覆盖可以用树上差分,查询可以利用线性基,看给出的边权在 $\mbox{xor}$ 意义下是否线性无关. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;typedef unsigned long long ull;int read()&#123; int out=0,sgn=1; char jp=getchar(); while(jp!='-' &amp;&amp; (jp&lt;'0' || jp&gt;'9')) jp=getchar(); if(jp=='-') sgn=-1,jp=getchar(); while(jp&gt;='0' &amp;&amp; jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*sgn;&#125;const int MAXN=1e5+10,MAXM=1e6+10;int ecnt=0,head[MAXN],nx[MAXM],to[MAXM],id[MAXM];int st[MAXM],ed[MAXM],ontree[MAXM];void addedge(int u,int v,int k)&#123; ++ecnt; id[ecnt]=k; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int n,m,tot=0;int dfn[MAXN],idx=0;ull dif[MAXN],val[MAXM];void dfs(int u)&#123; dfn[u]=++idx; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(dfn[v]) continue; ontree[id[i]]=1; dfs(v); &#125;&#125;void calc(int u,int t)&#123; dfn[u]+=n; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(dfn[v]&gt;n) continue; calc(v,i); dif[u]^=dif[v]; &#125; val[id[t]]=dif[u];&#125;void init()&#123; for(int i=1;i&lt;=m;++i) if(!ontree[i]) &#123; ull x=rand()*rand()*rand()*rand(); val[i]=x; int u=st[i],v=ed[i]; dif[u]^=x,dif[v]^=x; &#125; calc(1,0);&#125;struct Base&#123; ull a[64]; int siz; void init() &#123; siz=0; memset(a,0,sizeof a); &#125; void ins(ull x) &#123; for(int i=63;i&gt;=0;--i) if(x&amp;(1ULL&lt;&lt;i)) &#123; if(a[i]) x^=a[i]; else &#123; a[i]=x; ++siz; break; &#125; &#125; &#125;&#125;LB;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=m;++i) &#123; int u=read(),v=read(); addedge(u,v,i); addedge(v,u,i); st[i]=u,ed[i]=v; &#125; dfs(1); int Q=read(); if(idx!=n) &#123; while(Q--) puts("Disconnected"); return 0; &#125; srand(time(NULL)); init(); while(Q--) &#123; int k=read(); LB.init(); for(int i=1;i&lt;=k;++i) &#123; int c=read()^tot; LB.ins(val[c]); &#125; if(k==LB.siz) ++tot,puts("Connected"); else puts("Disconnected"); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>构造</tag>
        <tag>树上差分</tag>
        <tag>随机化</tag>
        <tag>线性基</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4326 运输计划]]></title>
    <url>%2F2019%2F08%2F13%2Fbzoj-4326-%E8%BF%90%E8%BE%93%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[二分答案 + 树上差分. 首先可以考虑二分答案,变为判定是否存在合法方案使得改造后给出的路径长度都不超过 $mid$ . 预处理每条路径的长度 $len$ ,若 $len\le mid$ ,则不用考虑.否则,被改造的边长度至少为 $mid-len$ . 将每条路径按上述过程处理,可以得出被改造的边长度至少为 $\max (mid-len_i)$ ,并且在所有需要考虑的路径上. 用树上差分给路径上的边打上标记,然后枚举每条边进行验证. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int read()&#123; int out=0,sgn=1; char jp=getchar(); while(jp!='-' &amp;&amp; (jp&lt;'0' || jp&gt;'9')) jp=getchar(); if(jp=='-') sgn=-1,jp=getchar(); while(jp&gt;='0' &amp;&amp; jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*sgn;&#125;const int MAXN=3e5+10;int ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1],val[MAXN&lt;&lt;1];void addedge(int u,int v,int w)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; val[ecnt]=w; head[u]=ecnt;&#125;int n,m,x[MAXN],y[MAXN],z[MAXN],len[MAXN];int tofa[MAXN],dis[MAXN],mx=0;int dep[MAXN],Log[MAXN],fa[MAXN][20];int LCA(int x,int y)&#123; if(dep[x]&lt;dep[y]) swap(x,y); for(int i=Log[dep[x]-dep[y]];i&gt;=0;--i) if(dep[x]-dep[y]&gt;=(1&lt;&lt;i)) x=fa[x][i]; if(x==y) return x; for(int i=Log[dep[x]];i&gt;=0;--i) if(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i]; return fa[x][0];&#125;void dfs_pre(int u,int F)&#123; fa[u][0]=F; for(int i=1;(1&lt;&lt;i)&lt;=dep[u];++i) fa[u][i]=fa[fa[u][i-1]][i-1]; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==F) continue; dep[v]=dep[u]+1; dis[v]=dis[u]+val[i]; tofa[v]=val[i]; dfs_pre(v,u); &#125;&#125;int dif[MAXN],tot,lim;bool dfs_calc(int u,int F)&#123; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==F) continue; if(dfs_calc(v,u)) return true; dif[u]+=dif[v]; &#125; if(u!=1 &amp;&amp; dif[u]==tot &amp;&amp; tofa[u]&gt;=lim) return true; return false;&#125;bool check(int mid)&#123; tot=0,lim=0; for(int i=1;i&lt;=n;++i) dif[i]=0; for(int i=1;i&lt;=m;++i) &#123; if(len[i]&lt;=mid) continue; lim=max(lim,len[i]-mid); ++tot; ++dif[x[i]],++dif[y[i]]; dif[z[i]]-=2; &#125; if(!tot) return true; return dfs_calc(1,0);&#125;int main()&#123; n=read(),m=read(); Log[0]=-1,Log[1]=0; for(int i=2;i&lt;=n;++i) Log[i]=Log[i&gt;&gt;1]+1; for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(),w=read(); addedge(u,v,w); addedge(v,u,w); &#125; for(int i=1;i&lt;=m;++i) &#123; x[i]=read(); y[i]=read(); &#125; dfs_pre(1,0); for(int i=1;i&lt;=m;++i) &#123; z[i]=LCA(x[i],y[i]); len[i]=dis[x[i]]+dis[y[i]]-2*dis[z[i]]; mx=max(mx,len[i]); &#125; int L=0,R=mx,ans; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(check(mid)) ans=mid,R=mid-1; else L=mid+1; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>二分</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 535 花火]]></title>
    <url>%2F2019%2F08%2F13%2FLoj-535-%E8%8A%B1%E7%81%AB%2F</url>
    <content type="text"><![CDATA[扫描线 + 线段树. 特判序列已经有序的情况,此时不需要进行任何交换. 首先,我们可以首先进行特殊的交换,再进行一般的交换,这样显然不会使答案变劣. 特殊交换之后,还需要的次数就是当前逆序对的数目.所以特殊交换要减少尽可能多的逆序对. 考虑交换两个数 $h_x,h_y,x&lt;y$ ,显然当 $h_x&gt;h_y$ 时,逆序对会减少,否则会增加,于是只考虑 $h_x&gt;h_y$ 的情况. 容易发现交换后减少的逆序对数目就是 $1+2|S|,S=\lbrace k|x&lt;k&lt;y,h_y&lt;h_k&lt;h_x \rbrace$ . 考虑左端点 $x$ 的选择,若 $h_{x_1}&gt;h_{x_2},x_1&lt;x_2$ , $x_2$ 就没用了.于是可以维护出有用的 $x$ . 考虑右端点 $pos_y$ 的选择,若 $h_{y_1}&lt;h_{y_2},y_1&gt;y_2$ , $y_2$ 就没用了.于是可以维护出有用的 $y$ . 考虑一个位置 $k$ 会存在哪些点对 $(x,y)$ 满足 $x&lt;k&lt;y,h_y&lt;h_k&lt;h_x$ .在第一个单调栈中二分找出最小的 $l$ ,使得 $h_l&gt;h_k$ ,在第二个单调栈中二分找出最小的 $r$ ,使得 $h_r&lt;h_x$ . 那么点对 $(x,y)$ 满足 $x&lt;k&lt;y,h_y&lt;h_k&lt;h_x$ ,即 $k$ 对 $(x,y)$ 有贡献的条件是 $x\in [l,k-1],y\in[k+1,r]$ . 这相当于是一个矩形覆盖,问题转化为给了若干个矩形,求一个点最多被覆盖了几次. 扫描线 + 线段树解决,时间复杂度 $O(n\log n)​$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int read()&#123; int out=0,sgn=1; char jp=getchar(); while(jp!='-' &amp;&amp; (jp&lt;'0' || jp&gt;'9')) jp=getchar(); if(jp=='-') sgn=-1,jp=getchar(); while(jp&gt;='0' &amp;&amp; jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*sgn;&#125;const int MAXN=3e5+10;int n,h[MAXN],H[MAXN];struct FenwickTree&#123; int bit[MAXN]; FenwickTree()&#123;memset(bit,0,sizeof bit);&#125;#define lowbit(x) x&amp;(-x) void add(int x,int c) &#123; for(;x&lt;=n;x+=lowbit(x)) bit[x]+=c; &#125; int sum(int x) &#123; int s=0; for(;x;x-=lowbit(x)) s+=bit[x]; return s; &#125;&#125;FT;ll ans=0;int vis[MAXN],sx[MAXN],tx=0,sy[MAXN],ty=0;int bsx(int x)&#123; int L=1,R=tx,res=0; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(h[sx[mid]]&gt;x) res=mid,R=mid-1; else L=mid+1; &#125; return sx[res];&#125;int bsy(int y)&#123; int L=1,R=ty,res=0; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(h[sy[mid]]&lt;y) res=mid,R=mid-1; else L=mid+1; &#125; return sy[res];&#125;struct node&#123; int x,ly,ry,tp;//1 + -1 - bool operator &lt; (const node &amp;rhs) const &#123; return x==rhs.x?tp&gt;rhs.tp:x&lt;rhs.x; &#125;&#125;p[MAXN&lt;&lt;2];struct SegTree&#123; struct node &#123; int mx,tag; &#125;Tree[MAXN&lt;&lt;4];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1] void pushup(int o) &#123; root.mx=max(lson.mx,rson.mx); &#125; void BuildTree(int o,int l,int r) &#123; root.mx=0; root.tag=0; if(l==r) return; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); &#125; void modify(int o,int c) &#123; root.mx+=c; root.tag+=c; &#125; void pushdown(int o) &#123; if(root.tag) &#123; modify(o&lt;&lt;1,root.tag); modify(o&lt;&lt;1|1,root.tag); root.tag=0; &#125; &#125; void upd(int o,int l,int r,int L,int R,int c) &#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; modify(o,c); return; &#125; pushdown(o); int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) upd(o&lt;&lt;1|1,mid+1,r,L,R,c); pushup(o); &#125; int query() &#123; return Tree[1].mx; &#125;&#125;ST;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) h[i]=H[i]=read(); sort(H+1,H+1+n); for(int i=1;i&lt;=n;++i) &#123; h[i]=lower_bound(H+1,H+1+n,h[i])-H; ans+=FT.sum(n)-FT.sum(h[i]); FT.add(h[i],1); &#125; if(!ans) return puts("0")&amp;0; ++ans; for(int i=1;i&lt;=n;++i) &#123; if(tx&gt;0 &amp;&amp; h[i]&lt;h[sx[tx]]) continue; sx[++tx]=i; vis[i]=1; &#125; for(int i=n;i&gt;=1;--i) &#123; if(ty&gt;0 &amp;&amp; h[i]&gt;h[sy[ty]]) continue; sy[++ty]=i; vis[i]=1; &#125; int cnt=0; for(int i=1;i&lt;=n;++i) &#123; if(vis[i]) continue; int l=bsx(h[i]),r=bsy(h[i]); if(l&lt;i &amp;&amp; i&lt;r) &#123; p[++cnt]=(node)&#123;l,i+1,r,1&#125;; p[++cnt]=(node)&#123;i-1,i+1,r,-1&#125;; &#125; &#125; sort(p+1,p+1+cnt); int s=0; for(int i=1;i&lt;=cnt;++i) &#123; ST.upd(1,1,n,p[i].ly,p[i].ry,p[i].tp); if(p[i].tp&gt;0) s=max(s,ST.query()); &#125; ans-=(1+2LL*s); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>扫描线</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[五边形数定理学习笔记]]></title>
    <url>%2F2019%2F08%2F13%2F%E4%BA%94%E8%BE%B9%E5%BD%A2%E6%95%B0%E5%AE%9A%E7%90%86-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[去 大佬的博客 学习了一下相关知识. 整数划分问题将一个正整数 $n$ 拆分成若干正整数之和,求方案数. 令 $f(i,j)$ 表示将 $j$ 拆成 $i$ 个数的方案数,转移有 $f(i,j)=f(i,j-i)+f(i-1,j-1)$ ,边界为 $f(0,0)=1$ . 意义是所有数都 $+1​$ 或者新加入一个 $1​$ ,时间复杂度 $O(n^2)​$ . 几个拓展 要求拆成的正整数两两不同.这样,新加入一个 $1$ 之前的操作必须是每个数都 $+1$ . $f(i,j)=f(i,j-i)+f(i-1,j-i)$ .显然不超过 $\sqrt n$ 个数,时间复杂度 $O(n\sqrt n)$ . 要求拆成的数全部为奇数.方案数等同于拆成两两不同的方案数.可以构造出一一对应的映射( $Ferrers$ 图转置). 要求拆成若干个大小 $\le k$ 的正整数.方案数等同于拆成 $\le k$ 个任意大小的正整数. 五边形数定理五边形数 $f_1=1,f_n=f_{n-1}+3n-2​$ .对差分求前缀和,得到 $f_n=\frac{n(3n-1)} 2​$ . $1,5,12,22,35,51,70,92,117,145,176,210,247,287\dots​$ 广义五边形数在公式 $f_n=\frac{n(3n-1)} 2$ 中, $n$ 取 $0,1,-1,2,-2\dots$ $0,1,2,5,7,12,15,22,26,35,40,51,57,70,77,92,100,117,126\dots$ 欧拉函数$$\phi(x)=\prod_{i=1}^{+\infty} (1-x^i)$$ 它仅在 $|x|&lt; 1​$ 时收敛,但这里作为形式幂级数,我们不考虑它的敛散性. 五边形数定理$$\begin{aligned}\phi(x)&amp;=1-x-x^2+x^5+x^7-x^{12}-x^{15}\dots \\&amp;=1+\sum_{i=1}^{+\infty}(-1)^i(x^{i(3i-1)/2}+x^{-i(-3i-1)/2})\end{aligned}$$ $x^{i(3i-1)/2}​$ , $x^{-i(-3i-1)/2}​$ 的次数分别是相邻的两个广义五边形数. 五边形数定理与整数划分写出整数划分问题的生成函数 $G(x)​$ ,显然,$$\begin{aligned}G(x)&amp;=\prod_{i=1}^{+\infty}(1+x^i+x^{2i}+x^{3i}+\dots) \\&amp;=\prod_{i=1}^{+\infty}\frac 1 {1-x^i}\end{aligned}$$发现 $G\times \phi=1​$ .把多项式乘法暴力展开,观察系数,可以得到递推式$$G(1)=1,G(n)=G(n-1)+G(n-2)-G(n-5)-G(n-7)+\dots$$因为广义五边形数的级别是 $n^2​$ 的,所以直接递推的时间复杂度为 $O(n\sqrt n)​$ . 也可以直接在模 $x^{n+1}​$ 意义下对 $\phi​$ 求逆得到 $G​$ ,时间复杂度 $O(n\log n)​$. Loj 6268 分拆数模板题,对 $\phi$ 求逆得到 $G$ . code]]></content>
      <tags>
        <tag>数学</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 6261 一个人的高三楼]]></title>
    <url>%2F2019%2F08%2F13%2FLoj-6261-%E4%B8%80%E4%B8%AA%E4%BA%BA%E7%9A%84%E9%AB%98%E4%B8%89%E6%A5%BC%2F</url>
    <content type="text"><![CDATA[生成函数 + $NTT$ . 设这个数列做了 $i$ 次前缀和后的生成函数为 $F_i(x)$ . $F_0(x)$ 是已知的,将下标置为从 $0$ 开始. 考虑如何递推,令 $G(x)=\sum_{i=0}^{n-1}x^i$ ,则$$F_{i+1}(x)\equiv F_i(x)\cdot G(x)\ (\mbox{mod}\ x^n)$$那么就有$$F_k(x)\equiv F_0(x)\cdot G^k(x)\ (\mbox{mod}\ x^n)$$直接用多项式快速幂,时间复杂度 $O(n\log n)$ .但这种做法常数比较大,而且写起来麻烦. 考虑 $G(x)^k$ 的组合意义.有 $k$ 个盒子,每个盒子可以拿出 $0\sim n-1$ 个球, $[x^i]G^k(x)$ 表示拿出了 $i$ 个球的方案数. 盒子是不同的,而球是相同的,相当于把这 $i$ 个球分到 $k$ 个盒子里去.隔板法可知 $[x^i]G^k(x)={i+k-1\choose k-1}$ . 用 $NTT$ 将 $F_0(x)$ 和 $G^k(x)$ 乘起来就是答案了.时间复杂度 $O(n\log n)$ ,是与 $k$ 无关的. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;ll read()&#123; ll out=0,sgn=1; char jp=getchar(); while(jp!='-' &amp;&amp; (jp&lt;'0' || jp&gt;'9')) jp=getchar(); if(jp=='-') sgn=-1,jp=getchar(); while(jp&gt;='0' &amp;&amp; jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*sgn;&#125;const int P=998244353,G=3;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=1e5+10;int omega[MAXN&lt;&lt;2],inv[MAXN&lt;&lt;2],rev[MAXN&lt;&lt;2],curn=0;void init(int n)&#123; if(curn==n) return; for(int i=0; i&lt;n; ++i) rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((n&gt;&gt;1)*(i&amp;1)); for(int l=2; l&lt;=n; l&lt;&lt;=1) &#123; omega[l]=fpow(G,(P-1)/l); inv[l]=fpow(omega[l],P-2); &#125; curn=n;&#125;void DFT(int *a,int n,bool invflag)&#123; init(n); for(int i=0; i&lt;n; ++i) if(i&lt;rev[i]) swap(a[i],a[rev[i]]); for(int l=2; l&lt;=n; l&lt;&lt;=1) &#123; int m=(l&gt;&gt;1); int gi=omega[l]; if(invflag) gi=inv[l]; for(int *p=a; p!=a+n; p+=l) &#123; int g=1; for(int i=0; i&lt;m; ++i) &#123; int t=mul(g,p[i+m]); p[i+m]=add(p[i],P-t); p[i]=add(p[i],t); g=mul(g,gi); &#125; &#125; &#125; if(invflag) &#123; int invn=fpow(n,P-2); for(int i=0; i&lt;n; ++i) a[i]=mul(a[i],invn); &#125;&#125;int NTT_A[MAXN&lt;&lt;2],NTT_B[MAXN&lt;&lt;2];void NTT(int *A,int *B,int *C,int lenA,int lenB)&#123; int lenC=lenA+lenB-1,n=1; while(n&lt;lenC) n&lt;&lt;=1; for(int i=0; i&lt;lenA; ++i) NTT_A[i]=A[i]; for(int i=lenA; i&lt;n; ++i) NTT_A[i]=0; for(int i=0; i&lt;lenB; ++i) NTT_B[i]=B[i]; for(int i=lenB; i&lt;n; ++i) NTT_B[i]=0; DFT(NTT_A,n,false); DFT(NTT_B,n,false); for(int i=0; i&lt;n; ++i) C[i]=mul(NTT_A[i],NTT_B[i]); DFT(C,n,true);&#125;int n;ll k;int A[MAXN],B[MAXN],C[MAXN&lt;&lt;2];int main()&#123; n=read(),k=read(); int t=(k-1)%P; for(int i=0; i&lt;n; ++i) A[i]=read(); B[0]=1; for(int i=1; i&lt;n; ++i) &#123; B[i]=mul(B[i-1],add(i,t)); B[i]=mul(B[i],fpow(i,P-2)); &#125; NTT(A,B,C,n,n); for(int i=0; i&lt;n; ++i) printf("%d\n",C[i]); return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>多项式</tag>
        <tag>生成函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多项式的几个板子]]></title>
    <url>%2F2019%2F08%2F13%2F%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E5%87%A0%E4%B8%AA%E6%9D%BF%E5%AD%90%2F</url>
    <content type="text"><![CDATA[多项式的几个板子,代码也放在一起了. Luogu P4238 多项式求逆给定一个 $n$ 项的多项式 $A$ ,求多项式 $B$ ,使得 $A\cdot B\equiv 1 (\mbox{mod}\ x^n)$ . 首先还是用 $0$ 将 $n$ 补成 $2$ 的幂次,然后递归求解. 若 $n=1$ ,那么只需要让 $B=A_0^{-1}$ . 若 $n&gt;1$ ,则先求解 $B’$ ,使得 $A\cdot B’\equiv 1(\mbox{mod}\ x^{\frac n 2})$ . 因为 $A\cdot B\equiv 1(\mbox{mod}\ x^n)$ ,所以有 $B-B’\equiv 0(\mbox{mod}\ x^{\frac n 2})$ . 即 $B-B’=C\cdot x^{\frac n 2}$ ,所以 $B^2-2\cdot B\cdot B’+B’^2\equiv 0(\mbox{mod}\ x^n)$ . 两边同乘 $A$ ,得到 $B-2B’+A\cdot B’^2\equiv 0(\mbox{mod}\ x^n)$ . 于是可以得到 $B\equiv 2B’-A\cdot B’^2(\mbox{mod}\ x^n)$ . 可以看出,多项式 $A$ 有逆元的充要条件是常数项 $A_0$ 有逆元. 时间复杂度为 $\Theta(n\log n)$ . 实现时可以把递归改成迭代,常数会优秀许多. Luogu 4721 分治FFT可以考虑 cdq 分治,每次处理 $[l,mid)$ 对 $[mid,r)$ 的贡献,时间复杂度 $O(n\log^2 n)$ . 另一个做法是记 $F,G$ 分别表示数列 $f,g$ 的生成函数,将它们卷起来,可以发现 $F(x)G(x)=F(x)-F(0)$ . 则 $F(x)=\frac{F(0)}{1-G(x)}$ ,写个多项式求逆,时间复杂度 $O(n\log n)$ . Luogu P4512 多项式除法/多项式取模给定一个 $n$ 次多项式 $A$ ,一个 $m$ 次多项式 $B$ ,满足 $m\le n$ ,求多项式 $D,R$ ,使得,$$A(x)=D(x)B(x)+R(x)$$并且 $\deg (D)\le n-m,\deg (R)&lt;m$ . 尝试先消去余式 $R(x)$ 的影响,考虑多项式的 系数反转 ,即对于一个 $n$ 次多项式 $A$ ,$$A^R(x)=x^n\cdot A(\frac 1 x)$$如 $A(x)=x^3+2x^2+3x+4$ ,则 $A^R(x)=x^3\cdot A(\frac 1 x)=4x^3+3x^2+2x+1$ . 我们要求满足 $A(x)=D(x)B(x)+R(x)$ 的 $D,R$ ,如果将 $x$ 全部用 $\frac 1 x$ 替换,等式仍然成立. 替换后同时乘上 $x^n$ ,由于 $\deg(D)\le n-m,\deg(R)&lt;m$ ,将 $D,R$ 次数分别看做 $n-m,m-1$ ,用 $0$ 补够. 于是可以得到,$$A^R(x)=D^R(x)B^R(x)+x^{n-m+1}\cdot R^R(x)$$我们将上面的等式两边都对 $x^{n-m+1}$ 取模, $x^{n-m+1}\cdot R^R(x)$ 就被消去了,于是得到,$$A^R(x)\equiv D^R(x)B^R(x) (\mbox{mod}\ x^{n-m+1})$$对 $B^R(x)$ 用一次多项式求逆,再用一次多项式乘法求得模 $x^{n-m+1}$ 意义下的 $D^R(x)$ . 由于 $\deg (D)\le n-m$ ,反转后 $\deg (D^R)\le n-m$ .所以模意义下求得的 $D^R(x)$ 就是真实的 $D^R(x)$ . 再系数反转求得 $D(x)$ ,回代 $A(x)=D(x)B(x)+R(x)$ 得到 $R(x)$ . 从上述过程可以看出,多项式除法/多项式取模的时间复杂度与多项式求逆相同,为 $\Theta(n\log n)$ . Luogu P4728 多项式 $\ln$首先需要了解多项式的求导和不定积分.对于一个 $n-1$ 次多项式 $A$ , $$A(x)=\sum_{i=0}^{n-1} a_i\cdot x_i\\A’(x)=\sum_{i=0}^{n-2} a_{i+1}\cdot(i+1)\cdot x^i \\\int A(x) \mbox d x=\sum_{i=1}^{n}\frac {a_{i-1}} i \cdot x^i+C$$ 现在给出 $n-1$ 次多项式 $A(x)$ ,要在模 $x^n$ 意义下求 $B(x)$ ,使得 $B(x)\equiv \ln (A(x))\ (\mbox{mod}\ x^n)$ . 两边同时求导,得到 $B’(x)\equiv \frac {A’(x)} {A(x)}\ (\mbox{mod}\ x^n)$ . 多项式求逆得到 $\frac 1 {A(x)}$ ,再算出 $B’(x)$ ,再对 $B’(x)$ 不定积分得到 $B(x)$ . 这里 $B(x)$ 的常数项是 $0$ ,因为 $a_0=1$ ,若将 $\ln$ 函数大力展开,就可以发现 $B$ 的常数项就是 $\ln a_0$ . 时间复杂度 $\Theta(n\log n)$ . 多项式牛顿迭代已知一个函数 $G(x)$ ,在模 $x^n$ 意义下求一个多项式 $F(x)\ \mbox{mod}\ x^n$ ,使得 $G(F(x))\equiv 0(\mbox{mod}\ x^n)$ . 仍然将项数用 $0$ 补到 $2$ 的幂次.当 $n=1$ 时,需要单独求解 $G(F(x))\equiv 0(\mbox{mod}\ x)$ . 否则,先求解 $F_0(x)$ ,使得 $G(F_0(x))\equiv 0 (\mbox{mod}\ x^{\frac n 2})$ . 考虑如何拓展到模 $x^n$ 下,把 $G(F(x))$ 在 $F_0(x)$ 处进行泰勒展开, $$G(F(x))=G(F_0(x))+\frac{G’(F_0(x))}{1!}\cdot (F(x)-F_0(x))+\frac{G’’(F_0(x))}{2!}\cdot (F(x)-F_0(x))^2 + \dots$$ 因为 $G(F(x))\equiv 0(\mbox{mod}\ x^n)$ ,所以 $G(F(x))\equiv 0(\mbox{mod}\ x^{\frac n 2})$ 也成立. 而 $G(F_0(x))\equiv 0 (\mbox{mod}\ x^{\frac n 2})$ 所以 $F(x)$ 与 $F_0(x)$ 次数低于 $x^{\frac n 2}$ 的部分是相同的. 所以展开式中从第三项 $\frac{G’’(F_0(x))}{2!}\cdot (F(x)-F_0(x))^2$ 起,在模 $x^n$ 意义下都为 $0$ .于是只保留前两项,得到 $$G(F(x))\equiv G(F_0(x))+{G’(F_0(x))}\cdot (F(x)-F_0(x))\ (\mbox{mod}\ x^n)$$ 而 $G(F(x))\equiv 0(\mbox{mod}\ x^n)$ ,所以就有 $$F(x)\equiv F_0(x)-\frac {G(F_0(x))} {G’(F_0(x))}\ (\mbox{mod}\ x^n)$$ 需要注意,这里的 $G’(F_0(x))$ 是以 $F_0(x)$ 作为自变量求导,而不是以 $x$ 作为自变量求导. 如,若 $G(x)=\ln x,F_0(x)=x$ ,则 $G’(F_0(x))=\frac 1 {F_0(x)}=\frac 1 x$ ,而不是 $\ln(1)=0$ . 时间复杂度为 $O(n\log n)$ ,由于可以实现类似解方程的操作,所以用途比较广泛. 如实现多项式开根,就可以直接设 $G(x)=x^2-A$ . Luogu P4726 多项式 $\exp$给定项数为 $n$ 的多项式 $A(x)$ ,在 $\mbox{mod} \ x^n$ 意义下求多项式 $B(x)$ ,使得 $B(x)\equiv \exp(A(x))\ (\mbox{mod} \ x^n)$ . 取对数,得到 $\ln B\equiv A \ (\mbox{mod} \ x^n)$ ,令 $G(x)=\ln x-A$ . 则问题等价于求解 $F(x)$ ,使得 $G(F(x))\equiv 0(\mbox{mod}\ x^n)$ . 直接套用牛顿迭代的那一套理论,得到$$F\equiv (1-{\ln (F_0)+A})\cdot F_0\ (\mbox{mod}\ x^n)$$递归求解,当 $n=1$ 时,令 $F_0(x)=\exp a_0$ 即可.一般会保证多项式 $A$ 的常数项 $a_0=0$ . Luogu P5245 多项式快速幂给定项数为 $n$ 的多项式 $A(x)$ ,正整数 $k$ . 在 $\mbox{mod}\ x^n$ 下求多项式 $B(x)$ ,使得 $B(x)\equiv A^k(x)\ (\mbox{mod} \ x^n)$ . 两边同时取对数,得到 $\ln B(x)\equiv k\ln A(x) \pmod {x^n}$ ,可以看出 $k$ 可以直接对 $P$ 取模. 再对两边同时做一次 $\exp$ ,得到 $B(x)\equiv \exp(k\ln A(x)) \pmod {x^n}$ . Loj 150 挑战多项式给出次数为 $n$ 的多项式 $F(x)$ ,求$$\displaystyle G(x) \equiv \left({\left({1+\ln\left({2+F(x)-F(0)-{\exp\left({\int_0^x\frac{1}{\sqrt{F(t)}}\textrm{d}t}\right)}}\right)}\right)^k}\right)^\prime \pmod {x^n}$$ 在代码里面把多项式除法/取模也加上了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269//%std#include&lt;bits/stdc++.h&gt;#define endl '\n'using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353,G=3;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;void inc(int &amp;a,int b)&#123; a=add(a,b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int sqr;struct Complex&#123; int r,i; Complex(int r=0,int i=0):r(r),i(i) &#123;&#125; Complex operator * (const Complex &amp;rhs) const &#123; int x=add(mul(r,rhs.r),mul(mul(i,rhs.i),sqr)); int y=add(mul(r,rhs.i),mul(rhs.r,i)); return Complex(x,y); &#125;&#125;;Complex Complex_Fpow(Complex a,int b)&#123; Complex res=Complex(1,0); while(b) &#123; if(b&amp;1) res=res*a; a=a*a; b&gt;&gt;=1; &#125; return res;&#125;int Cipolla(int x)&#123; if(fpow(x,(P-1)&gt;&gt;1)==P-1) return -1; srand(time(0)); int a; while(1) &#123; a=rand()%P; if(fpow(add(mul(a,a),P-x),(P-1)&gt;&gt;1)==P-1) &#123; sqr=add(mul(a,a),P-x); break; &#125; &#125; Complex tmp=Complex_Fpow(Complex(a,1),(P+1)&gt;&gt;1); int res=tmp.r; return min(res,add(P,-res));&#125;const int MAXN=4e5+10;int rev[MAXN],omega[MAXN],inv[MAXN],curn=0;void init(int n)&#123; if(curn==n) return; for(int i=0;i&lt;n;++i) rev[i]=(rev[i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)*(n&gt;&gt;1)); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; omega[l]=fpow(G,(P-1)/l); inv[l]=fpow(omega[l],P-2); &#125; curn=n;&#125;void DFT(int *a,int n,bool invflag)&#123; init(n); for(int i=0;i&lt;n;++i) if(i&lt;rev[i]) swap(a[i],a[rev[i]]); for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; int m=l&gt;&gt;1; int gi=omega[l]; if(invflag) gi=inv[l]; for(int *p=a;p!=a+n;p+=l) &#123; int g=1; for(int i=0;i&lt;m;++i) &#123; int t=mul(g,p[i+m]); p[i+m]=add(p[i],P-t); p[i]=add(p[i],t); g=mul(g,gi); &#125; &#125; &#125; if(invflag) &#123; int invn=fpow(n,P-2); for(int i=0;i&lt;n;++i) a[i]=mul(a[i],invn); &#125;&#125;void NTT(int *A,int *B,int *C,int lenA,int lenB)&#123; int lenC=lenA+lenB-1,n=1; while(n&lt;lenC) n&lt;&lt;=1; static int a[MAXN],b[MAXN]; copy(A,A+lenA,a); fill(a+lenA,a+n,0); copy(B,B+lenB,b); fill(b+lenB,b+n,0); DFT(a,n,false); DFT(b,n,false); for(int i=0;i&lt;n;++i) C[i]=mul(a[i],b[i]); DFT(C,n,true);&#125;void PolyInverse(int *A,int *B,int N) // B=A^(-1)&#123; int n=1; while(n&lt;N) n&lt;&lt;=1; static int res[MAXN],tmp[MAXN]; res[0]=fpow(A[0],P-2); for(int i=2;i&lt;=n;i&lt;&lt;=1) &#123; NTT(A,res,tmp,i,i); NTT(tmp,res,tmp,i,i); for(int j=0;j&lt;i;++j) res[j]=add(mul(2,res[j]),P-tmp[j]); &#125; copy(res,res+N,B);&#125;void PolySqrt(int *A,int *B,int N) // B=sqrt(A)&#123; int n=1; while(n&lt;N) n&lt;&lt;=1; static int res[MAXN],tmp[MAXN]; res[0]=Cipolla(A[0]); for(int i=2;i&lt;=n;i&lt;&lt;=1) &#123; PolyInverse(res,tmp,i); NTT(tmp,A,tmp,i,i); for(int j=0;j&lt;i;++j) res[j]=mul((P+1)&gt;&gt;1,add(res[j],tmp[j])); &#125; copy(res,res+N,B);&#125;void PolyDiff(int *A,int n)&#123; for(int i=0;i&lt;n-1;++i) A[i]=mul(i+1,A[i+1]); A[n-1]=0;&#125;void PolyInt(int *A,int n)&#123; for(int i=n+1;i&gt;=1;--i) A[i]=mul(fpow(i,P-2),A[i-1]); A[0]=0;&#125;void PolyLn(int *A,int *B,int n) // B=ln(A)&#123; static int invA[MAXN],tmp[MAXN]; PolyInverse(A,invA,n); copy(A,A+n,tmp); PolyDiff(tmp,n); NTT(tmp,invA,tmp,n,n); PolyInt(tmp,n); copy(tmp,tmp+n,B);&#125;void PolyExp(int *A,int *B,int N) // B=exp(A)&#123; int n=1; while(n&lt;N) n&lt;&lt;=1; static int res[MAXN],tmp[MAXN]; res[0]=1; for(int i=2;i&lt;=n;i&lt;&lt;=1) &#123; PolyLn(res,tmp,i); for(int j=0;j&lt;i;++j) tmp[j]=add(A[j],P-tmp[j]); inc(tmp[0],1); NTT(tmp,res,res,i,i); &#125; copy(res,res+N,B);&#125;void PolyPow(int *A,int *B,int n,int k) // B=A^k&#123; static int tmp[MAXN]; PolyLn(A,tmp,n); for(int i=0;i&lt;n;++i) tmp[i]=mul(tmp[i],k); PolyExp(tmp,B,n);&#125;void PolyDivision(int *A,int *B,int *D,int *R,int n,int m) // A=B*D+R len(A)=n len(B)=m&#123; static int ModA[MAXN],ModB[MAXN],InvB[MAXN]; --n,--m; reverse(A,A+n+1); reverse(B,B+m+1); copy(A,A+n-m+1,ModA); copy(B,B+n-m+1,ModB); int N=1; while(N&lt;n-m+1) N&lt;&lt;=1; PolyInverse(ModB,InvB,N); fill(InvB+n-m+1,InvB+N,0); NTT(ModA,InvB,D,n-m+1,n-m+1); reverse(D,D+n-m+1); reverse(A,A+n+1); reverse(B,B+m+1); NTT(B,D,R,m,n-m+1); for(int i=0;i&lt;n;++i) R[i]=add(A[i],P-R[i]);&#125;int n,k,f[MAXN],g[MAXN];int main()&#123; n=read()+1,k=read(); for(int i=0;i&lt;n;++i) f[i]=g[i]=read(); PolySqrt(g,g,n); PolyInverse(g,g,n); PolyInt(g,n); PolyExp(g,g,n); for(int i=0;i&lt;n;++i) g[i]=add(f[i],P-g[i]); inc(g[0],add(2,P-f[0])); PolyLn(g,g,n); inc(g[0],1); PolyPow(g,g,n,k); PolyDiff(g,n); for(int i=0;i&lt;n-1;++i) printf("%d ",g[i]); puts(""); return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>学习笔记</tag>
        <tag>多项式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4373 算术天才⑨与等差数列]]></title>
    <url>%2F2019%2F08%2F13%2Fbzoj-4373-%E7%AE%97%E6%9C%AF%E5%A4%A9%E6%89%8D%E2%91%A8%E4%B8%8E%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%2F</url>
    <content type="text"><![CDATA[线段树 + $hash$ 乱搞. 可以考虑用线段树维护区间的最小值,最大值. 若是等差数列,根据最小/大值,公差可以算出长度,区间元素和,区间元素平方和,区间元素立方和,后两个自然溢出. 在线段树中把这些信息也维护进去,然后查询区间的这些要素,看一下是否符合预期结果即可. 立方和不判似乎也可以过.这东西应该挺难卡的. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;typedef unsigned long long ull;int read()&#123; int out=0,sgn=1; char jp=getchar(); while(jp!='-' &amp;&amp; (jp&lt;'0' || jp&gt;'9')) jp=getchar(); if(jp=='-') sgn=-1,jp=getchar(); while(jp&gt;='0' &amp;&amp; jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*sgn;&#125;const int MAXN=3e5+10;const int P=1e9+7;ull cube(ull x)&#123; return x*x*x;&#125;ull S1(ull x)&#123; return x*(x+1)/2;&#125;ull S2(ull x)&#123; return x*(x+1)*(2*x+1)/6;&#125;ull S3(ull x)&#123; return S1(x)*S1(x);&#125;const ull U=1;int n,m,tot=0,a[MAXN];struct SegTree&#123; struct node &#123; int minv,maxv; ll sum1; ull sum2,sum3; friend node operator + (node lson,node rson) &#123; node root; root.minv=min(lson.minv,rson.minv); root.maxv=max(lson.maxv,rson.maxv); root.sum1=lson.sum1+rson.sum1; root.sum2=lson.sum2+rson.sum2; root.sum3=lson.sum3+rson.sum3; return root; &#125; &#125;Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1] void pushup(int o) &#123; root=lson+rson; &#125; void BuildTree(int o,int l,int r) &#123; if(l==r) &#123; root=(node)&#123;a[l],a[l],a[l],U*a[l]*a[l],cube(a[l])&#125;; return; &#125; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); pushup(o); &#125; void upd(int o,int l,int r,int pos,int c) &#123; if(l==r) &#123; root=(node)&#123;c,c,c,U*c*c,cube(c)&#125;; return; &#125; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) upd(o&lt;&lt;1,l,mid,pos,c); else upd(o&lt;&lt;1|1,mid+1,r,pos,c); pushup(o); &#125; node query(int o,int l,int r,int L,int R) &#123; if(L&lt;=l &amp;&amp; r&lt;=R) return root; int mid=(l+r)&gt;&gt;1; if(R&lt;=mid) return query(o&lt;&lt;1,l,mid,L,R); if(L&gt;mid) return query(o&lt;&lt;1|1,mid+1,r,L,R); return query(o&lt;&lt;1,l,mid,L,R)+query(o&lt;&lt;1|1,mid+1,r,L,R); &#125; bool check(int L,int R,int k) &#123; node tmp=query(1,1,n,L,R); ull len=R-L+1; if((tmp.maxv-tmp.minv)!=(len-1)*k) return false; ll expsum1=len*(tmp.minv+tmp.maxv)/2; if(expsum1!=tmp.sum1) return false; ull b=tmp.minv-k; ull expsum2=len*b*b; expsum2+=k*b*(len+1)*len; expsum2+=k*k*S2(len); if(expsum2!=tmp.sum2) return false; ull expsum3=cube(k)*S3(len); expsum3+=U*3*k*k*b*S2(len); expsum3+=U*3*k*b*b*S1(len); expsum3+=len*cube(b); if(expsum3!=tmp.sum3) return false; return true; &#125;&#125;T;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); T.BuildTree(1,1,n); while(m--) &#123; int op=read(); if(op==1) &#123; int x=read()^tot,y=read()^tot; T.upd(1,1,n,x,y); &#125; else &#123; int L=read()^tot,R=read()^tot,k=read()^tot; if(T.check(L,R,k)) &#123; puts("Yes"); ++tot; &#125; else puts("No"); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Atcoder Beginner Contest 134]]></title>
    <url>%2F2019%2F07%2F20%2FAtcoder-Beginner-Contest-134%2F</url>
    <content type="text"><![CDATA[$F$ 题不错. A Dodecagon签到题. 123456789101112131415161718192021#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int main()&#123; int x=read(); cout&lt;&lt;3*x*x&lt;&lt;endl; return 0;&#125; B Golden Apple签到题. 123456789101112131415161718192021#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int main()&#123; int n=read(),D=read(); cout&lt;&lt;(n+2*D)/(2*D+1)&lt;&lt;endl; return 0;&#125; C Exception Handling$ST$ 表或者线段树写一写就好了.或许有不用数据结构的高论? 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;int a[MAXN];struct Segtree&#123; struct node &#123; int mx; &#125;Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1] void pushup(int o) &#123; root.mx=max(lson.mx,rson.mx); &#125; void bd(int o,int l,int r) &#123; if(l==r) &#123; root.mx=a[l]; return; &#125; int mid=(l+r)&gt;&gt;1; bd(o&lt;&lt;1,l,mid); bd(o&lt;&lt;1|1,mid+1,r); pushup(o); &#125; int query(int o,int l,int r,int L,int R) &#123; if(L&gt;R || L&gt;r || l&gt;R) return -1; if(L&lt;=l &amp;&amp; r&lt;=R) return root.mx; int res=0; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) res=max(res,query(o&lt;&lt;1,l,mid,L,R)); if(R&gt;mid) res=max(res,query(o&lt;&lt;1|1,mid+1,r,L,R)); return res; &#125;&#125;T;int main()&#123; int n=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); T.bd(1,1,n); for(int i=1;i&lt;=n;++i) printf("%d\n",max(T.query(1,1,n,1,i-1),T.query(1,1,n,i+1,n))); return 0;&#125; D Preparing Boxes倒着确定每个数,显然每个数是唯一确定的. 暴力统计就好了,由调和级数知,时间复杂度 $O(n\log n)$ . 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;int n,a[MAXN];int t[MAXN],m=0;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); for(int i=n;i&gt;=1;--i) &#123; int x=a[i]; for(int j=i*2;j&lt;=n;j+=i) x^=t[j]; t[i]=x; if(x) ++m; &#125; cout&lt;&lt;m&lt;&lt;endl; for(int i=1;i&lt;=n;++i) if(t[i]) printf("%d ",i); return 0;&#125; E Sequence Decomposing给一个序列,求最少分成几个单调上升子序列. 大概就是导弹拦截那道题.答案就是最长单调不降子序列的长度. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,A[MAXN],a[MAXN];#define lowbit(x) x&amp;(-x)int bit[MAXN];void add(int x,int c)&#123; for(;x&lt;=n;x+=lowbit(x)) bit[x]=max(bit[x],c);&#125;int sum(int x)&#123; int s=0; for(;x;x-=lowbit(x)) s=max(s,bit[x]); return s;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) A[i]=a[i]=read(); sort(A+1,A+1+n); int m=unique(A+1,A+1+n)-A-1; for(int i=1;i&lt;=n;++i) &#123; int x=lower_bound(A+1,A+1+m,a[i])-A; x=m+1-x; int y=sum(x)+1; add(x,y); &#125; cout&lt;&lt;sum(n)&lt;&lt;endl; return 0;&#125; F Permutation Oddness$dp$ 计数,设 $f(i,j,k,l)$ 表示考虑前 $i$ 个位置, $1,2,\dots i $ 中有 $j$ 个数还没有填,位置 $1,2,\dots,i$ 中有 $k$ 个位置还没有放,已经确定的权值为 $l$ 时的方案数. 后两维可以写在一起,状态数 $O(n^4)$ ,转移 $O(1)$ ,时间复杂度 $O(n^4)$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=51;const int P=1e9+7;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;void upd(int &amp;x,int y)&#123; x=add(x,y);&#125;int N,K;int f[MAXN][MAXN][MAXN*MAXN];int main()&#123; N=read(),K=read(); f[0][0][0]=1; for(int i=1;i&lt;=N;++i) for(int j=0;j&lt;=i;++j) for(int k=2*j;k&lt;=K;++k) &#123; upd(f[i][j][k],mul(2*j+1,f[i-1][j][k-2*j])); upd(f[i][j][k],mul(j*j+2*j+1,f[i-1][j+1][k-2*j])); if(j) upd(f[i][j][k],f[i-1][j-1][k-2*j]); &#125; cout&lt;&lt;f[N][0][K]&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>Atcoder</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190720]]></title>
    <url>%2F2019%2F07%2F20%2Ftest20190720%2F</url>
    <content type="text"><![CDATA[好题. $A\ Safe\ Bet$$25$ 分做法:枚举镜子摆放的位置,模拟光线,每次用 $set$ 找到下一面镜子,修改方向,最后检验是否从 $(R,C)$ 出来. 满分做法:不额外增加镜子,直接模拟光线,若最后从 $(R,C)$ 出来,答案为 $0$ . 否则,模拟反向光线,从 $(R,C+1)$ 反向射入,可以发现放镜子的可行位置为两条光线的所有交点. 用扫描线 + 线段树求交点数目以及字典序最小的交点即可. 考试情况:只写了 $25$ 分的做法. $std$ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118#include&lt;cstdio&gt;#include&lt;set&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;using namespace std;#define rep(i,n) for (int i=0;i&lt;n;++i)#define pb push_back#define mk make_pair#define X first#define Y second#define tree int t,int l,int r#define left t*2,l,mid#define right t*2+1,mid+1,r#define M int mid=l+r&gt;&gt;1const int N=1000005;typedef pair&lt;int,int&gt; pr;typedef vector&lt;pair&lt;int,pr&gt; &gt; seq;set&lt;pr&gt; a[N],b[N];seq f1,g1,f2,g2;int Case,n,m,R,C,x,y,ll,rr,c[N];long long ans;int get(int x)&#123; int res=0; for (; x; x-=x&amp;-x) res+=c[x]; return res;&#125;void add(int x,int v)&#123; for (; x&lt;=C; x+=x&amp;-x) c[x]+=v;&#125;void ins(int side)&#123; scanf("%d%d",&amp;x,&amp;y),a[x].insert(mk(y,side)),b[y].insert(mk(x,side));&#125;bool track(int x,int y,int d,seq &amp;f,seq &amp;g)&#123; f.clear(),g.clear(); set&lt;pr&gt; :: iterator it; for (;;) &#123; if (d&amp;1) &#123; if (d==1) &#123; it=b[y].upper_bound(mk(x,1)); f.pb(mk(x+1,mk(y,1))); if (it==b[y].end()) return f.pb(mk(R+1,mk(y,-1))),0; f.pb(mk(it-&gt;X,mk(y,-1))),x=it-&gt;X,d=it-&gt;Y?2:0; &#125; else &#123; it=b[y].lower_bound(mk(x,0)); f.pb(mk(x,mk(y,-1))); if (it==b[y].begin()) return f.pb(mk(1,mk(y,1))),0; --it; f.pb(mk(it-&gt;X+1,mk(y,1))),x=it-&gt;X,d=it-&gt;Y?0:2; &#125; &#125; else &#123; if (d==0) &#123; it=a[x].upper_bound(mk(y,1)); if (it==a[x].end()) return g.pb(mk(x,mk(y+1,C))),x==R; g.pb(mk(x,mk(y+1,it-&gt;X-1))),y=it-&gt;X,d=it-&gt;Y?3:1; &#125; else &#123; it=a[x].lower_bound(mk(y,0)); if (it==a[x].begin()) return g.pb(mk(x,mk(1,y-1))),0; --it; g.pb(mk(x,mk(it-&gt;X+1,y-1))),y=it-&gt;X,d=it-&gt;Y?1:3; &#125; &#125; &#125;&#125;void work(seq &amp;f,seq &amp;g)&#123; sort(f.begin(),f.end()),sort(g.begin(),g.end()); int m=f.size(),n=g.size(),j=0; rep(i,n) &#123; while (j&lt;m &amp;&amp; f[j].X&lt;=g[i].X) add(f[j].Y.X,f[j].Y.Y),++j; ll=g[i].Y.X,rr=g[i].Y.Y; int res=get(rr)-get(ll-1); ans+=res; if (g[i].X&lt;x &amp;&amp; res) &#123; x=g[i].X,y=ll; for (int j=20; j&gt;=0; --j) if (y+(1&lt;&lt;j)&lt;=rr &amp;&amp; !(get(y-1+(1&lt;&lt;j))-get(y-1))) y+=1&lt;&lt;j; &#125; &#125; while (j&lt;m) add(f[j].Y.X,f[j].Y.Y),++j;&#125;int main()&#123; freopen("safe.in","r",stdin); freopen("safe.out","w",stdout); while (scanf("%d%d%d%d",&amp;R,&amp;C,&amp;n,&amp;m)!=EOF) &#123; rep(i,R+1) a[i].clear(); rep(j,C+1) b[j].clear(); rep(i,n+m) ins(i&lt;n); printf("Case %d: ",++Case); if (track(1,0,0,f1,g1)) &#123; puts("0"); continue; &#125; track(R,C+1,2,f2,g2); ans=0,x=R+1,work(f1,g2),work(f2,g1); if (ans) printf("%I64d %d %d\n",ans,x,y); else puts("impossible"); &#125; return 0;&#125; $Room\ Service$$25$ 分做法:一堆特判.矩形的情况答案就是对角线长度 $\times 2$ . 我的 $60$ 分做法:其实就是乱搞,出题人是没有设计这一部分的,也没有卡我. 把每条边 $K$ 等分,拆成 $K+1$ 个点,设 $f(i,j,S)$ 表示从出发点到达第 $i$ 条边上的第 $j$ 个点,已经到达过的边集合为 $S$ 时走过的最短长度.大力转移,时间复杂度为 $O(n^2\cdot2^n\cdot K^2)$ .实际上有很多无用状态.参数 $K$ 取 $200$ 就可以了. 满分做法:若需要到的线段为直线,显然只需要将点 $P$ 关于 $n$ 条边都镜面反射一次,得到 $P’$ , $dis(P,P’)$ 即为答案. 但现在是线段,有可能交点在线段外,此时一定是某一个端点处最优.于是只有端点或交点处的状态有用, $flyod$ 预处理两点间最短路后,枚举第一个到的关键点和最后一个到的关键点,更新答案.时间复杂度 $O(n^3)$ . 考试情况:乱搞获得 $60$ 分. $std$ 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;using namespace std;#define rep(i,n) for (int i=1;i&lt;=n;++i)const double eps=1e-8;int Case,n;double ans,d[205][205];struct node&#123; double x,y; node() &#123;&#125; node(double _x,double _y):x(_x),y(_y) &#123;&#125; node operator +(const node &amp;A) &#123; return node(x+A.x,y+A.y); &#125; node operator -(const node &amp;A) &#123; return node(x-A.x,y-A.y); &#125; node operator *(const double &amp;A) &#123; return node(x*A,y*A); &#125; double operator *(const node &amp;A) &#123; return x*A.x+y*A.y; &#125; double operator %(const node &amp;A) &#123; return x*A.y-y*A.x; &#125; double norm() &#123; return x*x+y*y; &#125; double len() &#123; return sqrt(norm()); &#125; void read() &#123; scanf("%lf%lf",&amp;x,&amp;y); &#125;&#125; a[205];bool cross(node &amp;A,node &amp;B,node &amp;C,node &amp;D)&#123; return ((C-A)%(B-A))*((D-A)%(B-A))&lt;=0 &amp;&amp; ((C-A)%(B-A))*((D-A)%(B-A))&lt;=0;&#125;void rev(node A,node B,node &amp;C)&#123; node V=B-A; C=(A+V*(((C-A)*V)/V.norm()))*2-C;&#125;double work(node A,int l,node B,int r)&#123; for (int i=l; i&lt;r; ++i) rev(a[i],a[i+1],A); for (int i=r; i&gt;l; --i) &#123; if (!cross(A,B,a[i-1],a[i])) return 1e9; rev(a[i-1],a[i],A),rev(a[i-1],a[i],B); &#125; return (A-B).len();&#125;inline int chg(int x)&#123; return x&gt;n?x-n:x;&#125;inline void Min(double &amp;x,double y)&#123; if (y&lt;x) x=y;&#125;int main()&#123; freopen("room.in","r",stdin); freopen("room.out","w",stdout); while (scanf("%d",&amp;n)!=EOF) &#123; ans=1e9,a[0].read(); rep(i,n) a[i].read(),a[n+i]=a[i]; rep(i,n) rep(j,n-1) d[i][chg(i+j)]=work(a[i],i+1,a[i+j],i+j-1); rep(k,n) rep(i,n) rep(j,n) Min(d[i][j],d[i][k]+d[k][j]); rep(i,n) &#123; ans=min(ans,work(*a,i,*a,i+n)); for (int j=0; j&lt;n; ++j) d[0][chg(i+j)]=work(*a,i,a[i+j],i+j-1), d[chg(i+j)][0]=work(a[i+j],i+j+1,*a,i+n); rep(j,n) rep(k,n) Min(ans,d[0][j]+d[j][k]+d[k][0]); &#125; printf("%.2lf\n",ans); &#125; return 0;&#125; $Rain$满分做法:一个点的水面高度取决于它到边界必须经过的点中的最高海拔. 预处理出边界,从边界上的点出发跑 $Dijkstra$ ,求出每个点的水面高度,然后 $bfs$ 求联通块. 求边界可以先极角排序,从 $x$ 坐标最小的点出发,绕一圈就是边界. 时间复杂度 $O(m\cdot \log m)$ . 考试情况: puts(“0”); 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include&lt;cstdio&gt;#include&lt;vector&gt;#include&lt;cmath&gt;#include&lt;queue&gt;#include&lt;algorithm&gt;using namespace std;#define rep(i,n) for (int i=0,_=n;i&lt;_;++i)#define pb push_back#define mk make_pairconst int N=52*52;int Case,n,m,u,v,X,Y,now,o,x[N],y[N],h[N],d[N],id[N],ans[N];bool b[N];priority_queue&lt;pair&lt;int,int&gt; &gt; H;vector&lt;int&gt; e[N];char st[5];int C(char x)&#123; return x&lt;'a'?x-65:x-71;&#125;int get()&#123; scanf("%s",st); int v=C(st[0])*52+C(st[1]); if (id[v]&lt;0) id[v]=now++; return id[v];&#125;bool cmp(const int i,const int j)&#123; return atan2(y[i]-Y,x[i]-X)&lt;atan2(y[j]-Y,x[j]-X);&#125;void dfs(int i)&#123; if (!b[i] || d[i]&lt;=h[i]) return; b[i]=0; rep(k,e[i].size()) dfs(e[i][k]);&#125;int main()&#123; freopen("rain.in","r",stdin); freopen("rain.out","w",stdout); while (scanf("%d%d",&amp;n,&amp;m)!=EOF) &#123; rep(i,N) b[i]=1,id[i]=-1,e[i].clear(),d[i]=1&lt;&lt;20; now=0,o=0; rep(i,n) &#123; u=get(),scanf("%d%d%d",x+u,y+u,h+u); if (x[u]&lt;x[o]) o=u; &#125; rep(i,m) u=get(),v=get(),e[u].pb(v),e[v].pb(u); rep(i,n) X=x[i],Y=y[i],sort(e[i].begin(),e[i].end(),cmp); d[o]=h[o],H.push(mk(-d[o],o)); for (int j=o,i=e[o][0];; j=i,i=e[i][u]) &#123; rep(k,e[i].size()) if (e[i][k]==j) &#123; u=k; break; &#125; if (++u==e[i].size()) u=0; d[i]=h[i],H.push(mk(-d[i],i)); if (i==o &amp;&amp; !u) break; &#125; while (!H.empty()) &#123; pair&lt;int,int&gt; t=H.top(); H.pop(); int i=t.second; if (-t.first==d[i]) rep(k,e[i].size()) &#123; int j=e[i][k]; if (max(d[i],h[j])&lt;d[j]) d[j]=max(d[i],h[j]),H.push(mk(-d[j],j)); &#125; &#125; int L=0; rep(i,n) if (b[i] &amp;&amp; d[i]&gt;h[i]) ans[L++]=d[i],dfs(i); if (!L) puts("0"); sort(ans,ans+L); rep(i,L) printf("%d\n",ans[i]); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>计算几何</tag>
        <tag>最短路</tag>
        <tag>扫描线</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4446 小凸玩密室]]></title>
    <url>%2F2019%2F07%2F20%2Fbzoj-4446-%E5%B0%8F%E5%87%B8%E7%8E%A9%E5%AF%86%E5%AE%A4%2F</url>
    <content type="text"><![CDATA[树形 $dp$ . 设 $f(i,j)$ 表示将子树 $i$ 全部点亮,下一次点亮点 $j$ 的最小花费.这样的话,状态数是 $O(n^2)$ 的. 注意到点亮子树 $i$ 后,下一次要么点亮 $i$ 的某个祖先,要么点亮 $i$ 的某个祖先的另外一侧的儿子.树是完全二叉树,所以可以直接用深度表示,树深是 $O(\log n)$ 的,再通过位运算得到节点标号. 设 $f(i,j)$ 表示点亮子树 $i$ 后,下一次点亮 $i$ 的第 $j$ 级祖先的最小花费, $g(i,j)$ 表示点亮子树 $i$ 后,下一次点亮 $i$ 的第 $j$ 级祖先的另一个儿子的最小花费.这样状态数是 $O(n\log n)$ 的. 默认以 $1$ 为根, $dp$ 求出 $f,g$ 的值.然后枚举第一个点亮的点 $x$ ,先点亮子树 $x$ ,跳到 $fa_x$ ,再点亮 $fa_x$ 的另一侧子树,再跳到 $fa_{fa_x}$ ,点亮 $fa_{fa_x}$ 的另一颗子树…需要跳 $O(\log n)$ 次. 时间复杂度 $O(n\log n)$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int fa(int x)&#123; return x&gt;&gt;1;&#125;int lson(int x)&#123; return x&lt;&lt;1;&#125;int rson(int x)&#123; return x&lt;&lt;1|1;&#125;int Ancestor(int x,int i)&#123; return x&gt;&gt;i;&#125;int Brother(int x,int i)&#123; return (x&gt;&gt;(i-1))^1;&#125;const int MAXN=2e5+10;const int Log=20;const ll inf=1e18;int n,dep[MAXN];ll a[MAXN],dis[MAXN][Log],f[MAXN][Log],g[MAXN][Log];int main()&#123; n=read(); for(int i=1; i&lt;=n; ++i) a[i]=read(); dep[1]=1; for(int i=2; i&lt;=n; ++i) &#123; dep[i]=dep[fa(i)]+1; dis[i][1]=read(); for(int j=2; j&lt;=dep[i]; ++j) dis[i][j]=dis[fa(i)][j-1]+dis[i][1]; &#125; for(int i=n; i&gt;=1; --i) &#123; int l=lson(i),r=rson(i); for(int j=1; j&lt;=dep[i]; ++j) &#123; if(r&lt;=n) //lson and rson &#123; f[i][j]=min(a[l]*dis[l][1]+g[l][1]+f[r][j+1],a[r]*dis[r][1]+g[r][1]+f[l][j+1]); g[i][j]=min(a[l]*dis[l][1]+g[l][1]+g[r][j+1],a[r]*dis[r][1]+g[r][1]+g[l][j+1]); &#125; else if(l&lt;=n)// only lson &#123; f[i][j]=a[l]*dis[l][1]+f[l][j+1]; g[i][j]=a[l]*dis[l][1]+g[l][j+1]; &#125; else //leaf &#123; f[i][j]=dis[i][j]*a[Ancestor(i,j)]; g[i][j]=(dis[i][j]+dis[Brother(i,j)][1])*a[Brother(i,j)]; &#125; &#125; &#125; ll ans=inf; for(int i=1; i&lt;=n; ++i) &#123; ll tmp=f[i][1]; for(int x=fa(i),y=i; x; y=x,x=fa(x)) &#123; int z=y^1; if(z&lt;=n) tmp+=dis[z][1]*a[z]+f[z][2]; else tmp+=dis[x][1]*a[fa(x)]; &#125; ans=min(ans,tmp); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>树形dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4444 国旗计划]]></title>
    <url>%2F2019%2F07%2F19%2Fbzoj-4444-%E5%9B%BD%E6%97%97%E8%AE%A1%E5%88%92%2F</url>
    <content type="text"><![CDATA[$two\ pointer$ + 倍增. 首先破环成链,接一段长度为 $m$ 的在后面.因为区间不覆盖,对于一个区间 $(l,r)$ ,它后面应该接的区间可以贪心确定,就是左端点在 $[l,r]$ 范围内,而右端点最大的区间.这个可以通过 $two\ pointer$ 预处理. 然后用倍增的做法,处理 $f(i,j)$ 表示区间 $i$ 之后的第 $2^j$ 个区间标号. 查询时从 $i$ 开始跳,找到第一个区间使得区间总长 $\ge m$ 即可.时间复杂度 $O(n\cdot \log m)$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=4e5+10;struct node&#123; int l,r,id; node(int l=0,int r=0,int id=0):l(l),r(r),id(id) &#123;&#125; bool operator &lt; (const node &amp;rhs) const &#123; return r&lt;rhs.r; &#125;&#125;p[MAXN];int n,m,f[MAXN][20];int ans[MAXN];int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) &#123; int l=read(),r=read(); if(l&gt;r) p[2*i-1]=node(l,r+m,i),p[2*i]=node(l+m,r+2*m,i); else p[2*i-1]=node(l,r,i),p[2*i]=node(l+m,r+m,i); &#125; sort(p+1,p+1+2*n); for(int i=1,j=1;i&lt;=2*n;++i) &#123; while(j&lt;2*n &amp;&amp; p[j+1].l&lt;=p[i].r) ++j; f[i][0]=(i==j)?0:j; &#125; for(int j=1;(1&lt;&lt;j)&lt;=2*n;++j) for(int i=1;i&lt;=2*n;++i) f[i][j]=f[f[i][j-1]][j-1]; for(int i=1;i&lt;=2*n;++i) &#123; if(p[i].l&gt;m) continue; int x=i,tmp=0; for(int j=19;j&gt;=0;--j) if(f[x][j] &amp;&amp; p[f[x][j]].r&lt;p[i].l+m) x=f[x][j],tmp+=(1&lt;&lt;j); x=f[x][0]; ++tmp; ans[p[i].id]=tmp+(int)(p[i].id!=p[x].id); &#125; for(int i=1;i&lt;=n;++i) printf("%d ",ans[i]); puts(""); return 0;&#125;]]></content>
      <tags>
        <tag>倍增</tag>
        <tag>two pointer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4443 小凸玩矩阵]]></title>
    <url>%2F2019%2F07%2F19%2Fbzoj-4443-%E5%B0%8F%E5%87%B8%E7%8E%A9%E7%9F%A9%E9%98%B5%2F</url>
    <content type="text"><![CDATA[二分答案 + 二分图最大匹配. 二分答案 $mid$ ,权值 $\le mid$ 的边才有用,第 $k$ 大就是第 $n-k+1$ 小,判断一下最大匹配数是否达到 $n-k+1$ ,达到则合法,否则不合法. 时间复杂度 $O(n^3\cdot \log (\max v))$ . 匈牙利算法每次 $dfs$ 前都需要清空 $vis$ 数组. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int inf=1e9;const int MAXN=256;int a[MAXN][MAXN];vector&lt;int&gt; E[MAXN&lt;&lt;1];int pr[MAXN&lt;&lt;1],vis[MAXN&lt;&lt;1];int n,m,k;bool dfs(int u)&#123; int t=E[u].size(); for(int i=0;i&lt;t;++i) &#123; int v=E[u][i]; if(!vis[v]) &#123; vis[v]=1; if(!pr[v] || dfs(pr[v])) &#123; pr[v]=u; pr[u]=v; return true; &#125; &#125; &#125; return false;&#125;bool check(int mid)&#123; for(int i=1;i&lt;=n+m;++i) E[i].clear(); memset(pr,0,sizeof pr); for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) if(a[i][j]&lt;=mid) &#123; E[i].push_back(j+n); E[j+n].push_back(j); &#125; int ans=0; for(int i=1;i&lt;=n;++i) if(!pr[i]) &#123; memset(vis,0,sizeof vis); ans+=(int)(dfs(i)); &#125; return ans&gt;=(n+1-k);&#125;int main()&#123; n=read(),m=read(),k=read(); for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) a[i][j]=read(); int L=1,R=inf,ans=inf; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(check(mid)) ans=mid,R=mid-1; else L=mid+1; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>二分</tag>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF19E Fairy]]></title>
    <url>%2F2019%2F07%2F19%2FCF19E-Fairy%2F</url>
    <content type="text"><![CDATA[树上差分. 二分图定义是能用黑白两种颜色给图染色,使得没有两个有边相连的节点颜色相同.其实也就是说图中不存在奇环. 那么一张二分图,删去任意一条边后一定仍是二分图.于是我们先做出原图的一棵生成树,再将剩下的边加入. 预处理 $LCA,dep$ ,然后加入非树边 $(u,v)$ .那么树上 $u\to v$ 路径上所有边都被这条非树边”覆盖”了. 若 $dis(u,v)$ 为奇,加入 $(u,v)$ 后会形成偶环,称这样的边为合法的边. 若 $dis(u,v)$ 为偶,则加入 $(u,v)$ 后会形成奇环,称这样的边为不合法的边. 记不合法的边总数为 $tot$ ,若 $tot=0$ ,可以删的边就是所有的边. 若 $tot=1$ ,可以删的边就是唯一的那条不合法边,以及树上被它覆盖,但未被合法边覆盖的边. 若 $tot&gt;1$ ,可以删的边就是树上被所有不合法边覆盖,但未被任意一条合法边覆盖的边. 删去树边时要求未被合法边覆盖,是因为 $(u,v)$ 若被合法边覆盖,删去后 $u$ 可以走奇数步走到 $v$ ,图中仍存在奇环. 判断使用树上差分,被不合法边覆盖 $+1$ ,被合法边覆盖 $-1$ . 图可能有重边,自环,判起来比较麻烦.还可能不连通,需要每个联通块分别做上述步骤. 没有判重边/自环的代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e6+10;int n,m,vis[MAXN];vector&lt;int&gt; G[MAXN];int color[MAXN];struct Edge&#123; int u,v,id,tp; bool operator &lt; (const Edge &amp;rhs) const &#123; return color[u]&lt;color[rhs.u]; &#125;&#125;E[MAXN];struct DSU&#123; int Fa[MAXN]; void init() &#123; for(int i=1;i&lt;=n;++i) Fa[i]=i; &#125; int Find(int x) &#123; if(x==Fa[x]) return x; return Fa[x]=Find(Fa[x]); &#125; bool Union(int x,int y) &#123; x=Find(x),y=Find(y); if(x==y) return false; Fa[x]=y; return true; &#125;&#125;dsu;void dfs_dye(int u,int col)&#123; color[u]=col; int t=G[u].size(); for(int i=0;i&lt;t;++i) &#123; int v=G[u][i]; if(color[v]) continue; dfs_dye(v,col); &#125;&#125;typedef pair&lt;int,int&gt; pii;map&lt;pii,int&gt; mp;int fa[MAXN],dep[MAXN],siz[MAXN],mxson[MAXN],top[MAXN];void dfs1(int u,int F)&#123; fa[u]=F; siz[u]=1; int t=G[u].size(); for(int i=0;i&lt;t;++i) &#123; int v=G[u][i]; if(v==F) continue; dep[v]=dep[u]+1; dfs1(v,u); siz[u]+=siz[v]; if(siz[v]&gt;siz[mxson[u]]) mxson[u]=v; &#125;&#125;void dfs2(int u,int tp)&#123; top[u]=tp; if(mxson[u]) dfs2(mxson[u],tp); int t=G[u].size(); for(int i=0;i&lt;t;++i) &#123; int v=G[u][i]; if(v==fa[u] || v==mxson[u]) continue; dfs2(v,v); &#125;&#125;int LCA(int x,int y)&#123; while(top[x]!=top[y]) &#123; if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); x=fa[top[x]]; &#125; return dep[x]&lt;dep[y]?x:y;&#125;int rt[MAXN],L[MAXN],R[MAXN],delta[MAXN];vector&lt;int&gt; ans;void ins(int k)&#123; ans.push_back(E[k].id);&#125;void dfs_sum(int u)&#123; int t=G[u].size(); for(int i=0;i&lt;t;++i) &#123; int v=G[u][i]; if(v==fa[u]) continue; dfs_sum(v); delta[u]+=delta[v]; &#125;&#125;int main()&#123; n=read(),m=read(); dsu.init(); int cnt=0; for(int i=1;i&lt;=m;++i) &#123; int u=read(),v=read(); ++cnt; E[cnt].u=u,E[cnt].v=v; E[cnt].id=i; G[u].push_back(v); G[v].push_back(u); &#125; m=cnt; int col=0; for(int i=1;i&lt;=n;++i) if(!color[i]) &#123; rt[++col]=i; dfs_dye(i,col); &#125; sort(E+1,E+1+m); for(int i=1;i&lt;=n;++i) G[i].clear(); int curcol=1; L[1]=1; for(int i=1;i&lt;=m;++i) &#123; int u=E[i].u,v=E[i].v; if(color[u]!=curcol) &#123; R[curcol]=i-1; ++curcol; L[curcol]=i; &#125; if(dsu.Union(u,v))//ontree &#123; E[i].tp=1; G[u].push_back(v); G[v].push_back(u); &#125; else E[i].tp=0; &#125; R[curcol]=m; for(int i=1;i&lt;=n;++i) if(!siz[i]) dfs1(i,0); for(int i=1;i&lt;=n;++i) if(!top[i]) dfs2(i,i); for(int c=1;c&lt;=curcol;++c) &#123; int tot=0,tmp; for(int i=L[c];i&lt;=R[c];++i) &#123; if(E[i].tp) continue; int u=E[i].u,v=E[i].v,lca=LCA(u,v); int dis=dep[u]+dep[v]-2*dep[lca],val; if(dis&amp;1) val=-1; else &#123; ++tot; val=1; tmp=i; &#125; delta[u]+=val,delta[v]+=val; delta[lca]-=2*val; &#125; if(!tot) &#123; for(int i=L[c];i&lt;=R[c];++i) ins(i); &#125; else &#123; dfs_sum(rt[c]); if(tot==1) ins(tmp); for(int i=L[c];i&lt;=R[c];++i) &#123; if(!E[i].tp) continue; int u=E[i].u,v=E[i].v; if(fa[u]==v) swap(u,v); if(delta[v]==tot) ins(i); &#125; &#125; &#125; sort(ans.begin(),ans.end()); int t=ans.size(); printf("%d\n",t); for(int i=0;i&lt;t;++i) printf("%d ",ans[i]); return 0;&#125;]]></content>
      <tags>
        <tag>二分图</tag>
        <tag>树上差分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4417 超级跳马]]></title>
    <url>%2F2019%2F07%2F19%2Fbzoj-4417-%E8%B6%85%E7%BA%A7%E8%B7%B3%E9%A9%AC%2F</url>
    <content type="text"><![CDATA[矩阵快速幂. 最朴素的 $dp$ 是设 $f(i,j)$ 表示从出发点走到 $(i,j)$ 的方案数.有一个比较精妙的状态设计, 直接令 $f(2,1)=f(2,2)=1,f(i,j)=f(i-2,j)+f(i-1,j-1)+f(i-1,j)+f(i-1,j+1)$ . 后面三项表示从前一列转移过来的贡献,而 $f(i-2,j)$ 表示从第 $i-3,i-5\dots$ 列转移过来的贡献前缀和. 构造一个 $2n\times 2n$ 的矩阵加速转移,时间复杂度 $O(n^3\cdot \log m)$ . 需要特判 $n=1$ 以及 $m=1$ 的情况. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=30011;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=101;int n,m,N;struct Matrix&#123; int v[MAXN][MAXN]; Matrix()&#123;memset(v,0,sizeof v);&#125; Matrix operator * (const Matrix &amp;rhs) const &#123; Matrix res; for(int k=0;k&lt;N;++k) for(int i=0;i&lt;N;++i) for(int j=0;j&lt;N;++j) res.v[i][j]=add(res.v[i][j],mul(v[i][k],rhs.v[k][j])); return res; &#125;&#125;;Matrix fpow(Matrix a,int b)&#123; Matrix res; for(int i=0;i&lt;2*n;++i) res.v[i][i]=1; while(b) &#123; if(b&amp;1) res=res*a; a=a*a; b&gt;&gt;=1; &#125; return res;&#125;int main()&#123; n=read(),m=read(); if(m==1) &#123; if(n==1) puts("1"); else puts("0"); return 0; &#125; Matrix trans,st; if(n==1) &#123; st.v[0][0]=1; st.v[1][0]=1; trans.v[0][1]=1; trans.v[1][1]=trans.v[1][2]=1; trans.v[2][1]=1; N=3; st=fpow(trans,m-1)*st; cout&lt;&lt;st.v[0][0]&lt;&lt;endl; return 0; &#125; st.v[0][0]=st.v[1][0]=1; for(int i=0;i&lt;n;++i) &#123; trans.v[i][i]=1; if(i&gt;0) trans.v[i][i-1]=1; if(i&lt;n-1) trans.v[i][i+1]=1; trans.v[i][i+n]=1; &#125; for(int i=n;i&lt;2*n;++i) trans.v[i][i-n]=1; N=2*n; st=fpow(trans,m-2)*st; cout&lt;&lt;st.v[n-1][0]&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>构造</tag>
        <tag>矩阵优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4416 阶乘字符串]]></title>
    <url>%2F2019%2F07%2F18%2Fbzoj-4416-%E9%98%B6%E4%B9%98%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[状压 $dp$ . 设 $f(S)$ 表示从 $1$ 开始,使得集合 $S$ 中元素所有排列均出现的最小长度. 预处理从位置 $i$ 开始,字母 $j$ 首次出现的位置 $nxt(i,j)$ ,可以状压 $dp$ .转移时枚举排列的最后一个元素的位置, $O(2^n\cdot n+len\cdot n)$ . $n\le 26$ ,似乎过不去?然而字符串长度 $\le 450$ ,最小的合法串是 $O(n^2)$ 级别, $n\ge 22$ 时一定无解. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=451,MAXS=(1&lt;&lt;21)+10;int n,nxt[MAXN][26],f[MAXS];char buf[MAXN];void solve()&#123; n=read(); scanf("%s",buf+1); if(n&gt;=22) &#123; puts("NO"); return; &#125; int m=strlen(buf+1); buf[0]=buf[m+1]='#'; for(int j=0;j&lt;n;++j) nxt[m+1][j]=m+1; for(int i=m;i&gt;=0;--i) for(int j=0;j&lt;n;++j) nxt[i][j]=(buf[i+1]-'a'==j)?i+1:nxt[i+1][j]; memset(f,0,sizeof f); int mx=(1&lt;&lt;n)-1; for(int i=1;i&lt;=mx;++i) &#123; for(int j=0;j&lt;n;++j) if((1&lt;&lt;j)&amp;i) f[i]=max(f[i],nxt[f[i^(1&lt;&lt;j)]][j]); &#125; if(f[mx]&lt;=m) puts("YES"); else puts("NO");&#125;int main()&#123; int T=read(); while(T--) solve(); return 0;&#125;]]></content>
      <tags>
        <tag>状压dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190717]]></title>
    <url>%2F2019%2F07%2F17%2Ftest20190717%2F</url>
    <content type="text"><![CDATA[$noip$ 套题. 看了下题,感觉可能 $T1$ 比较麻烦,后面两个大概都是 $noip$ 难度. 于是打算把后面两个写了再做 $T1$ .( $flag$ ) $b$这个题上次 $nicodafagood$ 讲过,当时就直接口胡出来了,做法比较套路. 对第 $4$ 个条件 $\gcd_{i=1}^k a_i=1$ 容斥一下,设 $f(i)$ 表示所有数均为 $i$ 的倍数,不考虑第 $4$ 个条件的答案. 那么原问题答案就是 $f(1)-f(2)-f(3)-f(5)+f(6)\dots$ 有奇数个质因子就减去,偶数个质因子就加上,若它的某个质因子次数 $\ge 2$ ,那么它的贡献一定在算那个质因子的 $f$ 的时候被算入,就不用算了. 所以这个系数就是 $\mu$ ,记不考虑第 $4$ 个条件, $a_i$ 取值范围为 $[1,x]$ 时答案为 $F(x)$ ,即 $f(\lfloor \frac n x \rfloor)$. 原问题答案为 $\sum_{i=1}^n F(\lfloor \frac n i\rfloor)\cdot \mu(i)$ . 显然可以整除分块, $\mu$ 的前缀和用杜教筛计算. 计算 $F(x)$ 也是经典问题,位置 $i$ 的元素加上 $i-1$ ,就变成了求单调递增序列个数,而取值范围变成 $[1,x+k-1]$ . 随便取 $k$ 个数,从小到大排序后恰好对应了一种方案.于是 $F(x)={x+k-1\choose k}$ . $x$ 可能很大,但 $k\le 10^3$ ,所以每次求组合数的时候暴力 $O(k)$ 求,大概就能过了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int inv(int x)&#123; return fpow(x,P-2);&#125;const int N=870963;int prime[N+10],cnt=0,ism[N+10],mu[N+10],summu[N+10];void init()&#123; ism[1]=1; mu[1]=1; for(int i=2;i&lt;=N;++i) &#123; if(!ism[i]) &#123; prime[++cnt]=i; mu[i]=P-1; &#125; for(int j=1;j&lt;=cnt &amp;&amp; 1LL*prime[j]*i&lt;=N;++j) &#123; int num=prime[j]*i; ism[num]=1; if(i%prime[j]==0) break; mu[num]=add(P,-mu[i]); &#125; &#125; for(int i=1;i&lt;=N;++i) summu[i]=add(summu[i-1],mu[i]);&#125;map&lt;int,int&gt; mp;int sum(int x)&#123; if(x&lt;=N) return summu[x]; if(mp.find(x)!=mp.end()) return mp[x]; int res=1; for(int l=2,r;l&lt;=x;l=r+1) &#123; r=x/(x/l); res=add(res,mul(P-sum(x/l),r-l+1)); &#125; return mp[x]=res;&#125;int n,k,invfack;int F(int x)&#123; int res=invfack; for(int i=x;i&lt;=x+k-1;++i) res=mul(res,i); return res;&#125;void solve()&#123; n=read(),k=read(); invfack=1; for(int i=2;i&lt;=k;++i) invfack=mul(invfack,i); invfack=inv(invfack); int ans=0; for(int l=1,r;l&lt;=n;l=r+1) &#123; r=n/(n/l); int tmp=add(sum(r),P-sum(l-1)); tmp=mul(tmp,F(n/l)); ans=add(ans,tmp); &#125; printf("%d\n",ans);&#125;int main()&#123; freopen("b.in","r",stdin); freopen("b.out","w",stdout); init(); int T=read(); while(T--) solve(); return 0;&#125; $c$显然是点分治. 但点的贡献写起来比边的贡献麻烦,因为根节点的贡献只能贡献一次.所以记录时带上根节点的贡献,查询时不带. 分两种情况讨论一下,一种是最大值在当前点到根节点路径上,另一种是在根节点到另外一个点的路径上. 式子列一列,发现就相当于二维平面内有若干点,要统计 $x=x_0$ ,$y\le y_0$ 或 $y&gt;y_0$ 的点的数目. 按 $x$ 为第一关键字, $y$ 为第二关键字排序. 这个东西还要离散化,我的做法写起来特别麻烦,细节特别多. 一直写,一直改,终于改对的时候就没时间了. 于是 $T1$ 爆零. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int inf=1e9;int P,n;inline int add(int a,int b)&#123; return (a + b) % P;&#125;const int MAXN=1e5+10;struct SegTree&#123; int idx,Rt; struct node &#123; int ls,rs; int sum; node()&#123;ls=rs=sum=0;&#125; &#125;Tree[MAXN*30];#define root Tree[o] SegTree()&#123;idx=Rt=0;&#125; int query(int o,ll l,ll r,ll L,ll R) &#123; if(!o || L&gt;R || R&lt;=0) return 0; if(L&lt;=l &amp;&amp; r&lt;=R) return root.sum; ll mid=(l+r)&gt;&gt;1; int res=0; if(L&lt;=mid) res+=query(root.ls,l,mid,L,R); if(R&gt;mid) res+=query(root.rs,mid+1,r,L,R); return res; &#125; void ins(int &amp;o,ll l,ll r,ll pos,int c) &#123; if(pos&gt;r || pos&lt;l) return; if(!o) o=++idx; root.sum+=c; if(l==r) return; ll mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) ins(root.ls,l,mid,pos,c); else ins(root.rs,mid+1,r,pos,c); &#125;&#125;T1,T2,T3,T4;typedef pair&lt;int,int&gt; pii;#define mp make_pairint head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1],ecnt=0;int val[MAXN];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;ll ans=0;int rt,mi,totsiz,siz[MAXN],vis[MAXN];void Findrt(int u,int fa)&#123; siz[u]=1; int mxsiz=0; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa || vis[v]) continue; Findrt(v,u); siz[u]+=siz[v]; mxsiz=max(mxsiz,siz[v]); &#125; mxsiz=max(mxsiz,totsiz-siz[u]); if(mxsiz&lt;mi) mi=mxsiz,rt=u;&#125;pii stk1[MAXN],stk2[MAXN];int tp1=0,tp2=0;pii q1[MAXN],q2[MAXN];pii q3[MAXN],q4[MAXN];int t=0,t1,t2;inline int id1l(int sum,int mx)&#123; return lower_bound(q1+1,q1+t1+1,mp(sum,mx))-q1;&#125;inline int id1r(int sum,int mx)&#123; return upper_bound(q1+1,q1+t1+1,mp(sum,mx))-q1-1;&#125;inline int id2l(int sum,int mx)&#123; return lower_bound(q2+1,q2+t2+1,mp(sum,mx))-q2;&#125;inline int id2r(int sum,int mx)&#123; return upper_bound(q2+1,q2+t2+1,mp(sum,mx))-q2-1;&#125;int calc1(int sum,int mx)&#123; ll L=id1l(add(P,mx-sum),0); ll R=id1r(add(P,mx-sum),mx); int k=T1.query(1,1,n,L,R); return k; &#125;int calc2(int sum,int mx)&#123; ll L=id2l(sum,mx-1); ll R=id2r(sum,1000000000); int k=T2.query(1,1,n,L,R); return k;&#125;void dfs_pre(int u,int fa,int sum,int mx)&#123; sum=add(sum,val[u]); mx=max(mx,val[u]); q1[++t]=mp(sum,mx); q2[t]=mp(add(P,mx-sum),mx); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa || vis[v]) continue; dfs_pre(v,u,sum,mx); &#125;&#125;void dfs(int u,int fa,int SS,int MM,int sum,int mx)&#123; sum=add(sum,val[u]); mx=max(mx,val[u]); SS=add(SS,val[u]); MM=max(MM,val[u]); ans+=calc1(sum,mx); ans+=calc2(sum,mx); stk2[++tp2]=mp(SS,MM); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa || vis[v]) continue; dfs(v,u,SS,MM,sum,mx); &#125;&#125;void solve(int u)&#123; t=0; q1[++t]=mp(val[u]%P,val[u]); q2[t]=mp(0,val[u]); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(vis[v]) continue; dfs_pre(v,0,val[u]%P,val[u]); &#125; sort(q1+1,q1+1+t); sort(q2+1,q2+1+t); t1=unique(q1+1,q1+1+t)-q1-1; t2=unique(q2+1,q2+1+t)-q2-1; stk1[tp1=1]=mp(val[u]%P,val[u]); T1.ins(T1.Rt,1,n,id1l(val[u]%P,val[u]),1); T2.ins(T2.Rt,1,n,id2l(0,val[u]),1); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(vis[v]) continue; tp2=0; dfs(v,0,val[u],val[u],0,0); for(int i=1;i&lt;=tp2;++i) &#123; T1.ins(T1.Rt,1,n,id1l(stk2[i].first,stk2[i].second),1); T2.ins(T2.Rt,1,n,id2l(add(P,stk2[i].second-stk2[i].first),stk2[i].second),1); stk1[++tp1]=stk2[i]; &#125; &#125; for(int i=1;i&lt;=tp1;++i) &#123; T1.ins(T1.Rt,1,n,id1l(stk1[i].first,stk1[i].second),-1); T2.ins(T2.Rt,1,n,id2l(add(P,stk1[i].second-stk1[i].first),stk1[i].second),-1); &#125;&#125;void Divide(int u)&#123; vis[u]=1; solve(u); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(vis[v]) continue; mi=inf; totsiz=siz[v]; Findrt(v,0); Divide(rt); &#125;&#125;int main()&#123; freopen("c.in","r",stdin); freopen("c.out","w",stdout); n=read(),P=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; for(int i=1;i&lt;=n;++i) val[i]=read(); mi=inf; totsiz=n; Findrt(1,0); Divide(rt); cout&lt;&lt;ans+n&lt;&lt;endl; return 0;&#125; $a$暴力 + 最优化剪枝 可过.]]></content>
      <tags>
        <tag>容斥原理</tag>
        <tag>test</tag>
        <tag>点分治</tag>
        <tag>杜教筛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4414 数量积]]></title>
    <url>%2F2019%2F07%2F17%2Fbzoj-4414-%E6%95%B0%E9%87%8F%E7%A7%AF%2F</url>
    <content type="text"><![CDATA[结论题. 结论:对于类似斐波那契数列的,满足 $a_i=a_{i-1}+a_{i-2}(i\ge 2),a_1=a_2$ 的数列 $a$ ,有以下等式成立: $$a_1\cdot a_{n+m+1}=a_n\cdot a_m + a_{n+1} \cdot a_{m+1}$$ 等式右边那坨就是我们要求的数量积.即 $v_i\cdot v_j=C\cdot a_{2i+2j+1}$ . 把可以作为数量积的 $O(n)$ 个数全部求出来即可. 证明过程 $sto\ xmk$ . 考虑矩阵乘法. 比较一下最左端的向量和最右端的运算结果即得结论中的等式. 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int P;inline int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=6e5+10;int n;int res[MAXN],tot=0;int main()&#123; int f1=read(); P=read(),n=read(); int a=0,b=f1%P; for(int i=2;i&lt;=4*n-1;++i) &#123; int c=add(a,b); if((i&amp;1) &amp;&amp; (i&gt;=7)) res[++tot]=mul(c,f1); a=b; b=c; &#125; sort(res+1,res+1+tot); tot=unique(res+1,res+1+tot)-res-1; cout&lt;&lt;tot%P&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu 4783 矩阵求逆]]></title>
    <url>%2F2019%2F07%2F17%2FLuogu-4783-%E7%9F%A9%E9%98%B5%E6%B1%82%E9%80%86%2F</url>
    <content type="text"><![CDATA[矩阵求逆板子. 对一个矩阵,定义它的三种初等行变换: 交换某两行. 将某一行的元素全部 $\times k (k\not= 0)$ . 将某一行的元素的 $k$ 倍加到另一行对应位置上去. 每个初等行变换都对应了一个初等矩阵,即,对矩阵 $A$ 做一次初等行变换,等价于用对应的初等矩阵 $P_0$ 左乘 $A$ ,即 $A=P_0A$ . 若矩阵 $A$ 有逆,一定可以通过高斯消元,做有限次初等行变换得到单位矩阵 $I$ .即, $P_kP_{k-1}\dots P_0 A=I$ .根据矩阵乘法的结合律,把前面所有 $P_i$ 看做一个矩阵 $P$ ,即 $PA=I$ ,根据定义, $P$ 就是我们要求的 $A^{-1}$ . 而 $PI=P$ ,所以我们再维护一个矩阵 $B$ ,初始为 $I$ ,高斯消元时同步与 $A$ 做相同的初等行变换,当 $A$ 变为 $I$ 时, 得到的 $B$ 就是我们要求的 $P$ ,即 $A^{-1}$ . 若在高斯消元时发现 $A$ 无法消成 $I$ ,则说明 $A$ 不可逆. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;int add(int a,int b)&#123; return (a + b) % P;&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=400+10;int n,A[MAXN][MAXN],B[MAXN][MAXN];void addrow(int a[],int b[],int t)&#123; for(int i=1;i&lt;=n;++i) a[i]=add(a[i],mul(b[i],t));&#125;bool inverse()&#123; for(int i=1;i&lt;=n;++i) B[i][i]=1; for(int i=1;i&lt;=n;++i) &#123; if(!A[i][i]) &#123; for(int j=i+1;j&lt;=n;++j) if(A[j][i]) &#123; swap(A[i],A[j]); swap(B[i],B[j]); break; &#125; &#125; if(!A[i][i]) return false; int inv=fpow(A[i][i],P-2); for(int j=i+1;j&lt;=n;++j) &#123; int x=A[j][i]; addrow(A[j],A[i],P-mul(x,inv)); addrow(B[j],B[i],P-mul(x,inv)); &#125; &#125; for(int i=n;i&gt;=1;--i) &#123; int inv=fpow(A[i][i],P-2); for(int j=1;j&lt;i;++j) &#123; int x=A[j][i]; addrow(A[j],A[i],P-mul(x,inv)); addrow(B[j],B[i],P-mul(x,inv)); &#125; &#125; for(int i=1;i&lt;=n;++i) &#123; if(!A[i][i]) return false; int inv=fpow(A[i][i],P-2); for(int j=1;j&lt;=n;++j) B[i][j]=mul(B[i][j],inv); &#125; return true;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=n;++j) A[i][j]=read(); if(inverse()) &#123; for(int i=1;i&lt;=n;++i) &#123; for(int j=1;j&lt;=n;++j) printf("%d ",B[i][j]); puts(""); &#125; &#125; else puts("No Solution"); return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NOI2019同步赛游记]]></title>
    <url>%2F2019%2F07%2F16%2FNOI2019%E5%90%8C%E6%AD%A5%E8%B5%9B%E6%B8%B8%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[流星延停 $Day -\infty$今年的 CTS 和 APIO 因为一些个人因素没有去. 这期间一边学 OI ,一边上文化课,月考凭借爆算苟了一个级 rk1 . 说起来这还是从初中开始的第一个 rk1 呢,算是完成了一个小心愿?虽然 rk2 拿了好几次… $Day\ 1$做题顺序 $1\to 2\to 3$ . $T1$ 感觉 $70$ 分很可做,大力 $O(\max q\cdot n)$ 来 $dp$ . 不是 $DAG​$ 也没有关系,时间那一维是没有后效性的,先枚举时间就好了. 然后又感觉后面的 $15$ 分也可以做,每个点按照所有的上/下车时间,将 $n$ 个点拆成 $O(m)$ 个点,这部分 $A=0$ ,贡献是线性的,所以对于原来一个点拆出来的所有点,连边时不需要两两连,按时间排序,相邻的才连边,然后跑 $Dijkstra​$ . 感觉这个玩意细节处理起来比较麻烦,只有 $15$ 分,就先放着,去看后面两个题. $T2$ 无想法,写了 $20$ 分暴力就放着了. $T3$ 无想法,写了个 $28$ 分的 $O(n^4)$ 大力 $dp$ 就放着了. 回过去看 $T1$ ,发现 $\max q$ 只有 $1000$ . 算了一下,发现答案不会爆 $int$ ,这样开一个 $\max q\cdot n$ 的二维数组需要 $400\ MB$ 左右?空间限制是 $512\ MB$ ? 那直接 $O(\max q\cdot n)$ 行不行啊,感觉还有很多无效状态的样子.写了一发,开上 $O2$ ,发现大样例要跑 $2s$ .感觉可以寻址优化,于是把二维数组的两个维度交换一下,就只用跑 $0.5s$ 了.这东西能过?虽然不太清楚但也只能先这样了… $T2$ 还是没有什么想法,但发现 $T3$ 费用流应该可以做 $n\le 150$ 的点,说不定 $n\le 2000$ 也可以过. 迅速建了个模,码码码…发现不对.肉眼调试了一会,发现没加反边.(蠢得离谱) 改过来,发现还是不对.调了一会,发现我求的是最小值.把费用改成负的,还是不对? 小数据调了一下,发现建模有问题,流量可以偷偷流走.调整了几波模型,发现流量还是偷偷流走. 可能就没什么时间了.费用流就破产了,把三道题的三个暴力检查了一下,卡了下常数,今天就结束了. 然后出去吃饭,黄学长还吃过敏了… 下午 $4$ 点左右有数据了.测了一下, $100+20+28=148$ ,没挂, 成功 获得暴力分. $Day\ 2$做题顺序 $1\to 2\to 3$ . $T1$ 感觉用 $kdt$ 建图就好了?然后发现空间 128 MB .跑了一波边数,发现开不下. 意识到出题人安排这个空间就是卡 $kdt$ 的?但是貌似想不出其他比较优秀的做法了… 只好头铁写了一波 $kdt$ . 看 $T2$ ,怎么又是 $landlords$ …先写了个 $10$ 分暴力,写 $dp$ 的部分分时候思路很乱,胡乱写了一发,过不了样例.调了一会,未果,只好放着了… $T3$ 是个交互?自己似乎是第一次做这种带端口的交互(之前只在 $CF/ATC$ 上遇到输出命令来交互的题). 有点被吓到,冷静下来分析一波,发现前面 $5$ 个点就是暴力分,每个点改一次,再询问所有点,变了的就是与它有边的. 度数 $=1$ 的部分也比较可做,图是 $N/2$ 个点对,询问次数是 $N\log N$ ,提示得比较明显,每个二进制位都做一次,将当前二进制位为 $1$ 的点 $modify$ 一次,再询问所有点,若它的状态改变,说明它连的点这一位上与它相同,否则不同. 于是就有 $36$ 分的暴力了. 回过去再卡了一下 $T1$ 的空间,就结束了… 下午测了一波, $76+10+36=122$ . 后记果然自己还是菜的真实,打 $\color{brown} {Cu}$ 了.希望明年能作为正式选手取得令自己满意的成绩吧. 结果官方测出来有 $286$ ?虽然还是打 $\color{brown} {Cu}$ 了.]]></content>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190715]]></title>
    <url>%2F2019%2F07%2F15%2Ftest20190715%2F</url>
    <content type="text"><![CDATA[神仙题,又被虐了. $graph$ $60$ 分做法:将所有方程列出来,因为保证有唯一解,所以不用管方程个数,直接高斯消元.时间复杂度 $O(m^3)$ . 满分做法:比较神仙,注意到条件 $2$ 的形式是电学中基尔霍夫方程组,将 $A$ 看做 $\epsilon$ , $B$ 看做 $R$ , $C$ 看做 $I$ . 为每个节点定义一个电压 $\phi(u)$ ,规定 $\phi (1)=0$ , $\phi(u)=\sum_{i=0}^{k-1} I(v_i,v_{i+1})\cdot R(v_i,v_{i+1})-\epsilon (v_i,v_{i+1})$ ,其中 $&lt;v_0=1,v_1,\dots,v_{k-1},v_k=u&gt;$ 是原图中一条路径,这样定义也满足了条件 $3$ . 容易验证无论选择怎样的路径,每个点的电压值都是不变的.利用条件 $1$ 列出 $n-1$ 个方程,高斯消元解出 $2\sim n$ 的电压,再根据 $I(u,v)=\frac {\phi(u)-\phi(v)+\epsilon(u,v)} {R(u,v)}$ 求出电流.时间复杂度 $O(n^3)$ . 考试情况:只写了 $60$ 分的做法. $std$ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174#include &lt;stdio.h&gt;#include &lt;iostream&gt;#include &lt;math.h&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;cstring&gt;#include &lt;string.h&gt;#include &lt;memory.h&gt;#include &lt;map&gt;#include &lt;vector&gt;#include &lt;set&gt;using namespace std;#define rep(i,a,b) for(int i=(a);i&lt;=(b);i++)#define repk(i,a,b) rep(i,a,(b)-1)#define rrep(i,a,b) for(int i=(b);i&gt;=(a);i--)#define rrepk(i,a,b) rrep(i,a,(b)-1)#define fe(e,x) for(edge *e = (x)-&gt;first;e;e = e-&gt;next)#define foreach(tank_type,iterator_name,set_name) \ for(tank_type::iterator iterator_name = (set_name).begin();iterator_name != (set_name).end();iterator_name++)#define comp_def(cmp_name,type) bool cmp_name(type l,type r)#define ifn(x) if(!(x))#define vind(p_point) (p_point-points)#define eind(p_edge) (p_edge-edges)#define eopp(p_edge) (edges+(eind(p_edge)^1))#define mp(x,y) make_pair((x),(y))typedef long long ll;const int inf = 0x3fffffff,upinf = 0x7fffffff,geps = 10;const double eps = 1e-12,dinf = 1e20;ll modnum;struct modll&#123; ll x; modll():x(0)&#123;&#125; modll(ll _x)&#123; _x &lt; 0 ? x = _x % modnum + modnum : (_x &gt;= modnum ? x = _x % modnum : x = _x); &#125; inline static ll pmod(ll _x)&#123; return _x &gt;= modnum ? _x - modnum : _x; &#125; inline static ll plus(ll x,ll y)&#123; return pmod(x + y); &#125; inline static ll minus(ll x,ll y)&#123; return pmod(x + modnum - y); &#125; inline static ll multi(ll x,ll y)&#123; ll s = 0; for(;y;y&gt;&gt;=1)&#123; if(y&amp;1) s = plus(s,x); x = plus(x,x); &#125;return s; &#125; inline static ll inv(ll a)&#123; ll b = modnum,c = a%b,q = a/b,k1 = 1,k2 = 0,k3 = pmod(minus(k1,multi(q,k2))); while(c^1) a = b,b = c,c = a%b,q = a/b,k1 = k2,k2 = k3,k3 = pmod(minus(k1,multi(q,k2))); return k3; &#125; inline static ll llpow(ll b,ll p)&#123; ll s = 1; for(;p;p&gt;&gt;=1)&#123; if(p&amp;1) s = multi(s,b); b = multi(b,b); &#125;return s; &#125;&#125;;bool operator==(modll l,modll r)&#123;return l.x == r.x;&#125;bool operator!=(modll l,modll r)&#123;return l.x != r.x;&#125;modll operator+(modll l,modll r)&#123;return modll(modll::plus(l.x,r.x));&#125;modll operator-(modll l,modll r)&#123;return modll(modll::minus(l.x,r.x));&#125;modll operator*(modll l,modll r)&#123;return modll(modll::multi(l.x,r.x));&#125;modll operator/(modll l,modll r)&#123;return modll(modll::multi(l.x,modll::inv(r.x)));&#125;modll operator^(modll l,ll r)&#123; return r &lt; 0 ? modll(modll::llpow(modll::inv(l.x),-r)) : modll(modll::llpow(l.x,r));&#125;modll operator-(modll l)&#123;return modll(-l.x);&#125;modll operator+=(modll&amp; l,modll r)&#123;return modll(l.x = modll::plus(l.x,r.x));&#125;modll operator-=(modll&amp; l,modll r)&#123;return modll(l.x = modll::minus(l.x,r.x));&#125;modll operator*=(modll&amp; l,modll r)&#123;return modll(l.x = modll::multi(l.x,r.x));&#125;modll operator/=(modll&amp; l,modll r)&#123;return modll(l.x = modll::multi(l.x,modll::inv(r.x)));&#125;modll operator^=(modll&amp; l,ll r)&#123; return modll( l.x = r &lt; 0 ? modll::llpow(modll::inv(l.x),-r) : modll::llpow(l.x,r) );&#125;const int maxn = 100,maxm = 2000;struct equation&#123; modll dat[maxn][maxn + geps]; int n; void clear(int _n)&#123; n = _n; repk(i,0,n) repk(j,0,n+1) dat[i][j].x = 0; &#125; modll&amp; operator()(int i,int j)&#123;return dat[i][j];&#125; void rowswap(int r1,int r2)&#123; repk(j,0,n+1) swap(dat[r1][j],dat[r2][j]); &#125; void elimination(int r1,int r2)&#123;//eliminate r2 from r1 modll g = dat[r2][r1]/dat[r1][r1]; repk(j,0,n+1) dat[r2][j] -= dat[r1][j] * g; &#125; vector&lt;modll&gt; getans()&#123; vector&lt;modll&gt; ans; repk(i,0,n)&#123; if(dat[i][i] == 0)&#123; repk(j,i+1,n) if(dat[i][j] != 0) &#123;rowswap(i,j);break;&#125; if(dat[i][i] == 0) return ans; &#125;repk(j,0,n) if(i != j) elimination(i,j); &#125;repk(i,0,n) ans.push_back(dat[i][n] / dat[i][i]); return ans; &#125;&#125;;struct Graph&#123; equation Eq;pair&lt;int,int&gt; edge[maxm]; modll As[maxm],Bs[maxm]; int V,E; void create(int _V)&#123;Eq.clear(V = _V);E = 0;&#125; void addedge(int u,int v,modll A,modll B)&#123; Eq(v,v) += 1/B; Eq(v,u) -= 1/B; Eq(v,V) -= A/B; Eq(u,v) -= 1/B; Eq(u,u) += 1/B; Eq(u,V) += A/B; As[E] = A,Bs[E] = B; edge[E++] = make_pair(u,v); &#125; vector&lt;ll&gt; solve_graph()&#123; repk(j,0,V+1) Eq(V-1,j) = 0; Eq(V-1,V-1) = 1; vector&lt;modll&gt; Por = Eq.getans(); vector&lt;ll&gt; ans; if(Por.size() == 0) return ans; repk(i,0,E)&#123; int u = edge[i].first,v = edge[i].second; ans.push_back(((Por[v] - Por[u] + As[i]) / Bs[i]).x); &#125;return ans; &#125;&#125;G;int n,m;void Init()&#123; scanf("%d%d%lld",&amp;n,&amp;m,&amp;modnum);G.create(n); int x,y;ll A,B; repk(i,0,m)&#123; scanf("%d%d%lld%lld",&amp;x,&amp;y,&amp;A,&amp;B); G.addedge(x-1,y-1,A,B); &#125;&#125;void solve()&#123; vector&lt;ll&gt; ans = G.solve_graph(); if(ans.size() == 0) printf("-1\n"); else foreach(vector&lt;ll&gt;,it,ans) printf("%lld\n",*it);&#125;int main()&#123; freopen("graph.in","r",stdin); freopen("graph.out","w",stdout); Init(); solve(); return 0;&#125; $grid$ $40$ 分做法:设 $f(s,i,j,d)$ 表示两人各自都走了 $s$ 步,以 $(1,1)$ 作为左下角,第一个人向右走了 $i$ 步,第二个人向右走了 $j$ 步,一共已经经过了 $d$ 个特殊点时的方案数.两人交换算一种方案,限制 $j\le i$ , $O(n^4)$ 大力 $dp$ . 满分做法:先考虑一条路径的方案数,将特殊点按照 $x+y$ 排序,那么一条路径上出现的特殊点的编号递增. 设 $f(i,j)$ 表示走到了第 $i$ 个特殊点,此前经过了 $j$ 个特殊点的方案数, $g(i,j)$ 表示从第 $i$ 个特殊点走到第 $j$ 个特殊点而不经过其他特殊点的方案数.枚举上一个走过的特殊点是 $k$ , $$f(i,j)=\sum_{k=1}^{i-1} f(k,j-1)\cdot g(k,i)$$ 把起点看做 $0$ 号点,终点看做 $C+1$ 号点,方案数为: $$ans=\sum_{i=0}^D f(C+1,i)$$ 考虑如何求 $g(i,j)$ .若不考虑特殊点,从 $(x_0,y_0)$ 走到 $(x_1,y_1)$ 的方案数显然是 $x_1-x_0+y_1-y_0\choose x_1-x_0$ . 记 $h(i,j)$ 表示从特殊点 $i$ 到特殊点 $j$ 的方案数(不考虑限制),枚举不合法路径上的第一个点 $k$ , $$g(i,j)=h(i,j)-\sum_{k=i+1}^{j-1} g(i,k)\cdot h(k,j)$$ 于是我们用 $O(C^3)$ 的时间复杂度解决了一条路径经过特殊点个数不超过 $D$ 的方案数. 到目前为止的部分和 这个题 做法是差不多的. 若要求两条不相交路径的方案数,将两条路径看做 $(1,2)\to (n-1,m)$ 与 $(2,1) \to (n,m-1)$ . 记它们为 $s_1\to t_1,s_2\to t_2$ .容斥一下,用总方案数减去路径相交的方案数. 若两条路径相交于点 $p$ ,可以将它们的后半段交换,得到 $s_1\to p\to t_2$ 与 $s_2\to p \to t_1$ 两条路径. 于是可以断言,所有的 $s_1\to t_2$ 与所有的 $s_2\to t_1$ 一定是一一对应的,且对应的两条路径一定相交. 那么最终答案为 $s_1\to t_1,s_2\to t_2$ 的方案数乘积减去 $s_1\to t_2$ 与 $s_2\to t_1$ 的方案数之和,不需要不相交,直接套用前部分算一条路径的方案数即可. 模数不为质数时,无法直接预处理阶乘逆元,需要分解质因子, $mod=\prod p_i^k$ ,处理每个质因子的时候,位置 $p_i^j$ 特判,其余位置直接求逆元,最后再用 $CRT$ 合并答案. 考试情况:只写了 $40$ 分的部分. $std$ 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;cstdlib&gt;#include &lt;iostream&gt;#include &lt;algorithm&gt;#define ll long long#define mkp make_pair#define fir first#define sec secondusing namespace std;const int MaxN = 200010, Log = 10;int fac[MaxN], facpow[MaxN][Log], facinv[MaxN];int factor[Log], ftot;int mod;void exgcd(int a, int b, int &amp;x, int &amp;y) &#123; if (b == 0) &#123; x = 1, y = 0; return; &#125; exgcd(b, a % b, y, x); y -= a / b * x;&#125;int get_inv(int a) &#123; int x, y; exgcd(a, mod, x, y); return ((x % mod) + mod) % mod;&#125;int power(ll x, int l) &#123; ll ret = 1; for (; l; l &gt;&gt;= 1, x = x * x % mod) if (l &amp; 1) ret = ret * x % mod; return ret;&#125;void init(int n) &#123; ftot = 0; int x = mod; for (int i = 2; i * i &lt;= mod; ++i) if (x % i == 0) &#123; factor[ftot++] = i; while (x % i == 0) x /= i; &#125; if (x != 1) factor[ftot++] = x; fac[0] = facinv[0] = 1; for (int i = 1; i &lt;= n; ++i) &#123; int x = i; memcpy(facpow[i], facpow[i - 1], sizeof facpow[i]); for (int j = 0; j &lt; ftot; ++j) while (x % factor[j] == 0) &#123; x /= factor[j]; ++facpow[i][j]; &#125; fac[i] = 1ll * fac[i - 1] * x % mod; facinv[i] = get_inv(fac[i]); &#125;&#125;int comb(int n, int m) &#123; int ret = 1ll * fac[n] * facinv[m] % mod * facinv[n - m] % mod; for (int j = 0; j &lt; ftot; ++j) ret = 1ll * ret * power(factor[j], facpow[n][j] - facpow[m][j] - facpow[n - m][j]) % mod; return ret;&#125;const int MaxC = 210;int n, m, c, d;int f[MaxC][MaxC], g[MaxC][MaxC], ways[MaxC][MaxC];bool mark[MaxC][MaxC];int a[2][2][MaxC], ans[MaxC];pair &lt;int, int&gt; car[MaxN];inline bool tless(pair &lt;int, int&gt; a, pair &lt;int, int&gt; b) &#123; return (a.fir &lt;= b.fir) &amp;&amp; (a.sec &lt;= b.sec);&#125;void init_car() &#123; memset(ways, 0, sizeof(ways)); memset(f, 0, sizeof(f)); memset(mark, 0, sizeof(mark)); for (int i = 1; i &lt;= c; ++i) for (int j = i; j &lt;= c; ++j) if (tless(car[i], car[j])) &#123; ways[i][j] = comb(car[j].fir - car[i].fir + car[j].sec - car[i].sec, car[j].fir - car[i].fir); mark[i][j] = 1; &#125; for (int i = 1; i &lt;= c; ++i) for (int j = 1; j &lt;= c; ++j) if (mark[i][j]) &#123; f[i][j] = ways[i][j]; for (int k = i + 1; k &lt; j; ++k) if (mark[i][k] &amp;&amp; mark[k][j] &amp;&amp; f[i][k]) &#123; f[i][j] = (f[i][j] - 1ll * f[i][k] * ways[k][j]) % mod; &#125; &#125;&#125;void calc(int a[], int sx, int sy, int tx, int ty) &#123; fill(a, a + c + 1, 0); car[0] = mkp(sx, sy); car[c + 1] = mkp(tx, ty); if (!tless(car[0], car[c + 1])) return; //init f[0][], f[][c + 1] for (int i = 0; i &lt;= c + 1; ++i) if (tless(car[0], car[i])) &#123; f[0][i] = ways[0][i] = comb(car[i].fir - sx + car[i].sec - sy, car[i].fir - sx); mark[0][i] = 1; for (int j = 1; j &lt; i; ++j) if (mark[0][j] &amp;&amp; mark[j][i] &amp;&amp; f[0][j]) f[0][i] = (f[0][i] - 1ll * f[0][j] * ways[j][i]) % mod; &#125; else &#123; f[0][i] = ways[0][i] = mark[0][i] = 0; &#125; for (int i = c + 1; i &gt;= 0; --i) if (tless(car[i], car[c + 1])) &#123; f[i][c + 1] = ways[i][c + 1] = comb(tx - car[i].fir + ty - car[i].sec, tx - car[i].fir); mark[i][c + 1] = 1; for (int j = i + 1; j &lt;= c; ++j) if (mark[i][j] &amp;&amp; mark[j][c + 1] &amp;&amp; f[i][j]) &#123; f[i][c + 1] = (f[i][c + 1] - 1ll * f[i][j] * ways[j][c + 1]) % mod; &#125; &#125; else &#123; f[i][c + 1] = ways[i][c + 1] = mark[i][c + 1] = 0; &#125; memset(g, 0, sizeof(g)); g[0][0] = 1; for (int i = 1; i &lt;= c + 1; ++i) for (int j = 1; j &lt;= d + 1; ++j) for (int k = 0; k &lt; i; ++k) &#123; g[i][j] = (g[i][j] + 1ll * g[k][j - 1] * f[k][i]) % mod; &#125; for (int i = 0; i &lt;= d + 1; ++i) a[i] = g[c + 1][i + 1];// for (int i = 0; i &lt;= d + 1; ++i) printf("%d ", a[i]); puts(";");&#125;void Main() &#123; scanf("%d%d%d%d%d", &amp;n, &amp;m, &amp;c, &amp;d, &amp;mod); init(n + m); for (int i = 1; i &lt;= c; ++i) scanf("%d%d", &amp;car[i].fir, &amp;car[i].sec); sort(car + 1, car + c + 1); init_car(); calc(a[0][0], 1, 2, n - 1, m); calc(a[0][1], 1, 2, n, m - 1); calc(a[1][0], 2, 1, n - 1, m); calc(a[1][1], 2, 1, n, m - 1); int ret = 0; memset(ans, 0, sizeof(ans)); for (int i = 0; i &lt;= d; ++i) &#123; for (int j = 0; j &lt;= i; ++j) ans[i] = (ans[i] + 1ll * a[0][0][j] * a[1][1][i - j] - 1ll * a[0][1][j] * a[1][0][i - j]) % mod; ret += (ans[i] &lt; 0 ? ans[i] += mod : ans[i]); ret &gt;= mod ? ret -= mod : ret; &#125; cout &lt;&lt; ret &lt;&lt; endl;&#125;int main()&#123; freopen("grid.in", "r", stdin); freopen("grid.out", "w", stdout); int T; scanf("%d", &amp;T); while (T--) Main(); return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>数学</tag>
        <tag>构造</tag>
        <tag>容斥原理</tag>
        <tag>高斯消元</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190714]]></title>
    <url>%2F2019%2F07%2F15%2Ftest20190714%2F</url>
    <content type="text"><![CDATA[又被虐了. $Fable$ 每做一次冒泡,对于一个数 $a_i$ ,若 $i$ 之前的位置有比它大的数,那么其中一个一定会跳到它的后面. 则它的位置向前移了一位,比它大的数少了一个. 初始时,若前面比它大的数的个数 $\ge k$ ,则说明每次都能往前移,最后的位置就是初始位置 $-k$ .对于剩下的数,它们最后一定会从小到大把剩余的位置补满. 离散化 + 树状数组处理. 考试情况:大部分时间都在想/写/调这个题.最后 $A$ 了. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;int n,k;typedef pair&lt;int,int&gt; pii;pii a[MAXN];int ans[MAXN],tot[MAXN],rk[MAXN];int bit[MAXN];#define lowbit(x) x&amp;(-x)void add(int x,int c)&#123; for(;x&lt;=n;x+=lowbit(x)) bit[x]+=c;&#125;int sum(int x)&#123; int s=0; for(;x;x-=lowbit(x)) s+=bit[x]; return s;&#125;int main()&#123; freopen("fable.in","r",stdin); freopen("fable.out","w",stdout); n=read(),k=read(); for(int i=1;i&lt;=n;++i) a[i].second=i,a[i].first=read(); sort(a+1,a+1+n); rk[a[1].second]=1; for(int i=2;i&lt;=n;++i) &#123; if(a[i].first==a[i-1].first) rk[a[i].second]=rk[a[i-1].second]; else rk[a[i].second]=i; &#125; for(int i=1;i&lt;=n;++i) &#123; add(rk[i],1); tot[i]=sum(n)-sum(rk[i]); if(tot[i]&gt;k) ans[i-k]=a[rk[i]].first; &#125; int pos=1; for(int i=1;i&lt;=n;++i) &#123; if(tot[a[i].second]&lt;=k) &#123; while(pos&lt;=n &amp;&amp; ans[pos]) ++pos; ans[pos]=a[i].first; &#125; &#125; for(int i=1;i&lt;=n;++i) printf("%d\n",ans[i]); return 0;&#125; $Fiend$ 看到 排列,逆序对 ,考虑构造矩阵,观察其行列式. 构造一个矩阵 $A_{i,j}=[L_i\le j\le R_i]$ ,考虑它的行列式定义: $$|A|=\sum_{p\in S_n} sgn(p) \prod_{i=1}^k A_{i,p_i}$$ 对于一种排列 $p$ ,若存在 $L_i\leq p_i\le R_i$ 不成立,则 $A_{i,p_i}=0$ ,对于求和的贡献就是 $0$ . 否则,若逆序对数为偶数,贡献为 $1$ ,逆序对数为奇数,贡献为 $-1$ ,于是只需要判断 $|A|$ 的符号. 直接高斯消元是 $O(n^3)$ 的,可以获得 $70$ 分.由于构造的这个矩阵比较特殊,尝试手动消元. 每一行的 $1$ 都是一段区间,尝试在消元时保持每一行的 $1$ 仍然是一段区间.从小到大枚举 $x$ ,找出所有 $L_i=x$ 的行,找出其中 $R_k$ 最小的那一行 $k$ ,用第 $k$ 行去消其他的 $L_i=x$ 的行. 这些行被消过之后,其中的 $1$ 仍是一段区间,只是左端点变为了 $R_{k+1}$ .维护 $n$ 个集合, $i$ 号集合内存储左端点 $=i$ 的元素,每个元素记录它的行号,右端点. 从小到大枚举 $x$ ,将 $x$ 号集合的元素,除了 $R_k$ ,都放入 $R_{k+1}$ 号集合.用线段树合并实现. 考试情况:构造矩阵的时候不知道怎么就错了,于是感觉不可做,此题爆零. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;typedef pair&lt;int,int&gt; pii;#define mp make_pairstruct node&#123; int val,pos,h; int ls,rs; node(int Val=0,int Pos=0) &#123; ls=rs=h=0; val=Val; pos=Pos; &#125;&#125;Tree[MAXN&lt;&lt;2];int merge(int a,int b)&#123; if(!a || !b) return a+b; if(Tree[a].val&gt;Tree[b].val) swap(a,b); Tree[a].rs=merge(Tree[a].rs,b); if(Tree[Tree[a].ls].h&lt;Tree[Tree[a].rs].h) swap(Tree[a].ls,Tree[a].rs); Tree[a].h=Tree[Tree[a].rs].h+1; return a;&#125;int n,rt[MAXN],id[MAXN],tmp[MAXN];int Calc_Det()&#123; int prod=1; for(int i=1;i&lt;=n;++i) &#123; if(!rt[i]) return 0; node cur=Tree[rt[i]]; rt[i]=merge(Tree[rt[i]].ls,Tree[rt[i]].rs); if(rt[i] &amp;&amp; Tree[rt[i]].val==cur.val) return 0; if(id[cur.pos]!=i) &#123; prod*=-1; int x=tmp[i]; swap(tmp[id[cur.pos]],tmp[i]); swap(id[cur.pos],id[x]); &#125; if(cur.val&lt;n) rt[cur.val+1]=merge(rt[cur.val+1],rt[i]); &#125; return prod;&#125;void solve()&#123; n=read(); for(int i=1;i&lt;=n;++i) rt[i]=0; for(int i=1;i&lt;=n;++i) &#123; int L=read(),R=read(); Tree[i]=node(R,i); id[i]=tmp[i]=i; rt[L]=merge(rt[L],i); &#125; int ans=Calc_Det(); if(ans&lt;0) puts("F"); else if(ans==0) puts("D"); else puts("Y");&#125;int main()&#123; freopen("fiend.in","r",stdin); freopen("fiend.out","w",stdout); int T=read(); while(T--) solve(); return 0;&#125; $Flair$ 分成两部分做,记恰好选 $i$ 道菜的概率为 $A_i$ ,浪费掉的钱为 $B_i$ ,答案为 $\sum_{i=0}^n A_i\cdot B_i$. 答案扩大 $100^n$ 倍,所以 $A_i=p^i\cdot (100-p)^{n-i}\cdot {n\choose i}$ .考虑如何计算 $B_i$ . 若将 $c_i$ 从小到大排序,在模 $c_1$ 意义下对金额跑最短路,显然长度不会超过 $c_1$ ,而每一步的权值不超过 $c_2$ ,所以浪费金额在 $c_1\cdot c_2$ 内, $B_i$ 就会以 $c_1$ 为周期循环. 记 $len=c_1\cdot c_2,per=c_1$ .需要计算出 $A_0,A_1,\dots,A_{len-1}$ 与 $D_j=\sum_{i\ge len,i\ mod\ per=j} A_i$ . 于是答案就为 $\sum_{i=0}^{len-1} A_i\cdot B_i+\sum_{j=0}^{per-1} \lceil \frac {n-len+1-j} {per} \rceil \cdot B_j\cdot D_j$ . $D$ 就是多项式 $(px+1-p)^n$ 长度为 $c_1$ 的循环卷积结果再减去 $&lt;len$ 的部分. 使用 $NTT$ 优化这个卷积.但 $P=10^9+7$ ,所以还要用 $MTT$ .(好毒啊) 考试情况:推出了 $B_i$ 的循环性质,但没有联想到循环卷积,于是只得了 $10$ 分暴力分.]]></content>
      <tags>
        <tag>数学</tag>
        <tag>构造</tag>
        <tag>树状数组</tag>
        <tag>多项式</tag>
        <tag>test</tag>
        <tag>线段树合并</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4407 于神之怒加强版]]></title>
    <url>%2F2019%2F07%2F14%2Fbzoj-4407-%E4%BA%8E%E7%A5%9E%E4%B9%8B%E6%80%92%E5%8A%A0%E5%BC%BA%E7%89%88%2F</url>
    <content type="text"><![CDATA[莫比乌斯反演. 假定 $n\leq m$ ,推式子. 把后面那个 $\sum_{d|x} \mu(\frac x d) \cdot d^k$ 看做关于 $x$ 的函数 $f(x)$ ,它显然是个积性函数,因为可以看成 $\mu(x)$ 与 $x^k$ 的卷积. 线性筛预处理出 $f(x)$ 的前缀和,然后整除分块计算即可. 时间复杂度 $O(n+T\cdot \sqrt n)$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;inline int add(int a,int b)&#123; return (a+b&gt;=P?a+b-P:a+b);&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=5e6+10;int ism[MAXN],prime[MAXN],cnt=0,mu[MAXN],pw[MAXN];int k,sum[MAXN],f[MAXN];void init(int n)&#123; f[1]=1; for(int i=2;i&lt;=n;++i) &#123; if(!ism[i]) &#123; prime[++cnt]=i; pw[i]=fpow(i,k); f[i]=add(pw[i],P-1); &#125; for(int j=1;j&lt;=cnt &amp;&amp; 1LL*i*prime[j]&lt;=n;++j) &#123; int x=i*prime[j]; ism[x]=1; pw[x]=mul(pw[i],pw[prime[j]]); if(i%prime[j]==0) &#123; f[x]=mul(f[i],pw[prime[j]]); break; &#125; f[x]=mul(f[i],f[prime[j]]); &#125; &#125; for(int i=1;i&lt;=n;++i) sum[i]=add(sum[i-1],f[i]);&#125;int n,m;int main()&#123; int T=read(); k=read(); init(5000000); while(T--) &#123; n=read(),m=read(); if(n&gt;m) swap(n,m); int ans=0; for(int l=1,r;l&lt;=n;l=r+1) &#123; r=min(n/(n/l),m/(m/l)); int tmp=mul(n/l,m/l); tmp=mul(tmp,add(sum[r],P-sum[l-1])); ans=add(ans,tmp); &#125; printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4403 序列统计]]></title>
    <url>%2F2019%2F07%2F14%2Fbzoj-4403-%E5%BA%8F%E5%88%97%E7%BB%9F%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[组合计数 + $Lucas$ 定理. 把位置 $i$ 上的数加上它的下标,就变成求单调上升序列的数目了. 即,对于长度为 $i$ 的序列,权值范围变为 $[l+1,r+i]$ .方案数显然为 $r-l+i \choose i$ ,即在权值范围内任选 $i$ 个不同的数,排序后就是一个单调上升序列. 答案为 $\sum_{i=1}^n {r-l+i\choose i}={r-l+1+n\choose n}-1$ . $-1$ 是减去长度为 $0$ 的情况. $P=10^6+3$ ,且是个质数,用 $Lucas$ 定理计算组合数即可.时间复杂度 $O(P+T\cdot \log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e6+3;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int fac[P+10],invfac[P+10];void init()&#123; fac[0]=invfac[0]=1; for(int i=1;i&lt;P;++i) fac[i]=mul(fac[i-1],i); invfac[P-1]=fpow(fac[P-1],P-2); for(int i=P-2;i&gt;=1;--i) invfac[i]=mul(invfac[i+1],i+1);&#125;int C(int n,int m)&#123; if(n&lt;0 || m&lt;0 || n&gt;m) return 0; if(n&lt;P &amp;&amp; m&lt;P) return mul(fac[m],mul(invfac[n],invfac[m-n])); return mul(C(n/P,m/P),C(n%P,m%P));&#125;int main()&#123; init(); int T=read(); while(T--) &#123; int n=read(),L=read(),R=read(); int m=R-L+1; printf("%d\n",add(C(n,m+n),P-1)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>Lucas定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4402 Claris的剑]]></title>
    <url>%2F2019%2F07%2F14%2Fbzoj-4402-Claris%E7%9A%84%E5%89%91%2F</url>
    <content type="text"><![CDATA[组合计数. 求本质不同的序列数目,考虑以最小字典序表示序列,进行计数. 设序列中出现的最大值为 $m$ ,那么序列用最小字典序表示后只有下面两种情况: $1,(2,1,2,1\dots),2,(3,2,3,2\dots),3,\dots m$ . 或者 $1,(2,1,2,1\dots),2,(3,2,3,2\dots),3,\dots m,m-1$ . 若序列长度为 $n$ ,第一种情况可以看做 $\lfloor \frac {n-m} 2 \rfloor$ 个相同的球放入 $m-1$ 个盒子的方案数.盒子可以为空. 第二种情况可以看做$\lfloor \frac {n-m-1} 2 \rfloor$ 个相同的球放入 $m-1$ 个盒子的方案数.盒子可以为空. 枚举 $m$ ,由于长度是 $\le N$ 的,所以相当于那些球也可以不放.预处理阶乘及其逆元后 $O(M)$ 计算即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=2e6+10;int fac[MAXN],invfac[MAXN];int C(int n,int m)&#123; return mul(fac[m],mul(invfac[n],invfac[m-n]));&#125;int calc(int n,int m)&#123; return C(n,m+n-1);&#125;void Init_Fac(int n)&#123; fac[0]=invfac[0]=1; for(int i=1;i&lt;=n;++i) fac[i]=mul(fac[i-1],i); invfac[n]=fpow(fac[n],P-2); for(int i=n-1;i&gt;=1;--i) invfac[i]=mul(invfac[i+1],i+1);&#125;int main()&#123; int N=read(),M=read(); Init_Fac((N+M)&gt;&gt;1); int ans=1;//m=1 for(int m=2;m&lt;=N &amp;&amp; m&lt;=M;++m) &#123; ans=add(ans,calc((N-m)&gt;&gt;1,m)); if(N&gt;=m+1) ans=add(ans,calc((N-m-1)&gt;&gt;1,m)); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4419 发微博]]></title>
    <url>%2F2019%2F07%2F14%2Fbzoj-4419-%E5%8F%91%E5%BE%AE%E5%8D%9A%2F</url>
    <content type="text"><![CDATA[乱搞. 对每个人 $i$ 维护一个标记 $val_i$ ,表示这个人发过了多少条微博. 如果新连上一个点 $j$ , $ans_j-=val_i$ ,若断开一个点 $j$ , $ans_j+=val_i$ . 最后再将所有边断掉即可. 注意自己发的微博不计入自己的贡献. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;int n,m,ans[MAXN],val[MAXN];set&lt;int&gt; s[MAXN];set&lt;int&gt;::iterator it;int main()&#123; n=read(),m=read(); while(m--) &#123; char buf[2]; scanf("%s",buf); if(buf[0]=='!') &#123; int x=read(); ++val[x]; &#125; else if(buf[0]=='+') &#123; int x=read(),y=read(); ans[x]-=val[y]; ans[y]-=val[x]; s[x].insert(y); s[y].insert(x); &#125; else &#123; int x=read(),y=read(); ans[x]+=val[y]; ans[y]+=val[x]; s[x].erase(y); s[y].erase(x); &#125; &#125; for(int i=1;i&lt;=n;++i) for(it=s[i].begin();it!=s[i].end();++it) &#123; int j=*it; s[i].erase(j); s[j].erase(i); ans[i]+=val[j]; ans[j]+=val[i]; &#125; printf("%d",ans[1]); for(int i=2;i&lt;=n;++i) printf(" %d",ans[i]); return 0;&#125;]]></content>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1191]]></title>
    <url>%2F2019%2F07%2F13%2FCF1191%2F</url>
    <content type="text"><![CDATA[$Div.2$ 怎么出了两个博弈的题啊… A Tokitsukaze and Enhancement 模拟即可. 1234567891011121314151617181920212223242526272829#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int main()&#123; int x=read(); x%=4; if(x==0) puts("1 A"); else if(x==1) puts("0 A"); else if(x==2) puts("1 B"); else puts("2 A"); return 0;&#125; B Tokitsukaze and Mahjong 模拟即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;char buf[3][3];int k1(int i)&#123; return buf[i][0];&#125;int k2(int i)&#123; return buf[i][1];&#125;bool equal(int i,int j)&#123; return k1(i)==k1(j) &amp;&amp; k2(i)==k2(j);&#125;bool nx(int i,int j)&#123; return abs(k1(i)-k1(j))&lt;=2 &amp;&amp; k2(i)==k2(j);&#125;int main()&#123; for(int i=1;i&lt;=3;++i) scanf("%s",buf[i]); if(k1(1)==k1(2) &amp;&amp; k1(1)==k1(3) &amp;&amp; k2(1)==k2(2) &amp;&amp; k2(2)==k2(3)) &#123; puts("0"); return 0; &#125; if(k2(1)==k2(2) &amp;&amp; k2(1)==k2(3)) &#123; int a[3]; a[0]=k1(1),a[1]=k1(2),a[2]=k1(3); sort(a,a+3); if(a[1]-a[0]==1 &amp;&amp; a[2]-a[1]==1) &#123; puts("0"); return 0; &#125; &#125; if(equal(1,2) || equal(1,3) || equal(2,3)) puts("1"); else if(nx(1,2) || nx(1,3) || nx(2,3)) puts("1"); else puts("2"); return 0;&#125; C Tokitsukaze and Discard Items 模拟删数的过程,二分找出此次删掉的最后一个数. 每次至少删掉一个数,时间复杂度 $O(m\cdot \log m)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;ll p[MAXN];int x=1,m;int bs(ll lim,int tot)&#123; int L=x,R=m; int ans=x; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(p[mid]-tot&lt;=lim) ans=mid,L=mid+1; else R=mid-1; &#125; return ans;&#125;int main()&#123; ll n=read(); m=read(); ll k=read(); for(int i=1;i&lt;=m;++i) p[i]=read()-1; int tot=0,ans=0; while(tot!=m) &#123; ll pos=(p[x]-tot)/k; ll y=bs(pos*k+k-1,tot); ans++; tot+=y-x+1; x=y+1; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; D Tokitsukaze, CSL and Stone Game 感觉思路已经非常接近正解了,但有个情况没判到. 除了先手第一次拿后就必败,最后一定是石子数形成 $0,1,2,\dots n-1$ 的排列. 记初始时石子数为 $x$ 的有 $cnt_x$ 堆,特判一下先手第一次拿后就必败的情况: 若第一次取后未败,则只需判断使局面形成 $0,1,2,\dots n-1$ 的排列需要取的石头的奇偶性. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,a[MAXN],p[MAXN];unordered_map&lt;int,int&gt; cnt;bool check()&#123; if(cnt[0]==n) return true; if(cnt[0]&gt;=2) return true; int k=0; sort(p+1,p+1+n); int m=unique(p+1,p+1+n)-p-1; for(int i=1;i&lt;=m;++i) &#123; int x=p[i]; if(cnt[x]&gt;=3) return true; if(cnt[x]==2 &amp;&amp; cnt[x-1]&gt;=1) return true; if(cnt[x]==2) ++k; &#125; if(k&gt;=2) return true; return false;&#125;int main()&#123; n=read(); int s=0; for(int i=1;i&lt;=n;++i) &#123; p[i]=a[i]=read(); ++cnt[p[i]]; &#125; if(check()) return puts("cslnb")&amp;0; sort(a+1,a+1+n); for(int i=1;i&lt;=n;++i) s^=(a[i]-i+1)&amp;1; if(s) puts("sjfnb"); else puts("cslnb"); return 0;&#125; E Tokitsukaze and Duel 给一段 $0/1$ 序列,双方轮流操作,每次操作将一段长度为 $k$ 的区间全部变成一个值,操作后使得整个序列全是 $0$ 或全是 $1$ 的人获胜.可能出现无限操作下去的情况,判为平局. 注意到一个人若第一次操作无法直接取胜,那么他永远也无法取胜,因为对方总是可以通过执行相反的操作. 于是先判断一下先手能否一次操作取胜,再判断一下是否先手第一次无论怎样操作,后手总能一次操作取胜. 若两者都不能取胜,则为平局. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,k,a[MAXN],sum[MAXN];int pre[MAXN][2],nxt[MAXN][2];char s[MAXN];bool first_win(int p)&#123; int l=p,r=p+k-1; if(sum[l-1]+sum[n]-sum[r]+k==n) return true; if(sum[l-1]+sum[n]-sum[r]==0) return true; return false;&#125;int find_first(int L,int R,int x)&#123; int s=nxt[L][x]; if(s==0 || s&gt;R) return 0; return s;&#125;int find_last(int L,int R,int x)&#123; int s=pre[R][x]; if(s==0 || s&lt;L) return 0; return s; &#125;bool second_win(int p,int x)&#123; int l=p,r=p+k-1; int L,R; L=find_first(1,l-1,x); if(!L) L=find_first(r+1,n,x); R=find_last(r+1,n,x); if(!R) R=find_last(1,l-1,x); assert(L &amp;&amp; R); return R-L+1&lt;=k;&#125;bool Second_win(int p)&#123; return second_win(p,0) &amp;&amp; second_win(p,1);&#125;int main()&#123; n=read(),k=read(); scanf("%s",s+1); for(int i=1;i&lt;=n;++i) &#123; a[i]=s[i]-'0'; sum[i]=sum[i-1]+a[i]; &#125; for(int i=1;i&lt;=n;++i) &#123; pre[i][0]=(a[i]==0)?i:pre[i-1][0]; pre[i][1]=(a[i]==1)?i:pre[i-1][1]; &#125; for(int i=n;i&gt;=1;--i) &#123; nxt[i][0]=(a[i]==0)?i:nxt[i+1][0]; nxt[i][1]=(a[i]==1)?i:nxt[i+1][1]; &#125; bool f=true; for(int i=1;i+k-1&lt;=n;++i) &#123; if(first_win(i)) &#123; puts("tokitsukaze"); return 0; &#125; if(f &amp;&amp; !Second_win(i)) f=false; &#125; if(f) puts("quailty"); else puts("once again"); return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>二分</tag>
        <tag>codeforces</tag>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4598 模式字符串]]></title>
    <url>%2F2019%2F07%2F12%2Fbzoj-4598-%E6%A8%A1%E5%BC%8F%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[点分治 + $hash$ . 考虑点分治.由于分治时路径起点不确定,无法直接匹配,所以需要 $hash$ 暂时存储状态. 若当前分治中心为 $rt$ ,维护 $pre(i),suf(i)$ 分别表示节点 $i$ 到 $rt$ 的路径, $rt$ 到 $i$ 的路径的 $hash$ 值. 到一个点,先算得它的 $pre$ ,在后面接上 $rt$ 的字符,判断这个串在循环意义下是否与模式串的某个前缀匹配. 可以反着推,假设它能与某个前缀循环匹配,那么根据这个串的长度,可以算出它应该是模式串重复了 $\lfloor len/m \rfloor$ 次,再接上一个长度为 $len\mod m$ 的前缀形成的.判一下 $pre$ 是否与理论上求得的 $hash$ 值相等即可. 若在循环意义下匹配上了长度为 $i$ 的前缀,它的贡献就是当前能与长度 $m-i$ 的后缀循环匹配的 $suf$ 数目. 再算这个点 $suf$ 的贡献,与上面的方法类似.维护一个反串的 $hash$ 会十分方便. 常数大的一批,写法是对的,但时限卡不进去. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int inf=1e9;const int MAXN=1e5+10;int n,m;char buf[MAXN];int ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;typedef unsigned long long ull;const ull Base=37;ull pw[MAXN],Hash[MAXN],revHash[MAXN];ull val[MAXN],pre[MAXN],suf[MAXN];ull Pattern_Power[MAXN],revPattern_Power[MAXN];ull Add_Char(ull hash,int c)&#123; return hash*Base+c;&#125;void Init_Hash()&#123; Hash[0]=0; for(int i=1;i&lt;=m;++i) Hash[i]=Hash[i-1]*Base+(buf[i]-'A'); revHash[0]=0; for(int i=1;i&lt;=m;++i) revHash[i]=revHash[i-1]*Base+(buf[m-i+1]-'A'); Pattern_Power[0]=0; for(int i=1;i*m&lt;=n;++i) Pattern_Power[i]=Pattern_Power[i-1]*pw[m]+Hash[m]; revPattern_Power[0]=0; for(int i=1;i*m&lt;=n;++i) revPattern_Power[i]=revPattern_Power[i-1]*pw[m]+revHash[m];&#125;int rt,totsize,mi,siz[MAXN],vis[MAXN];ll ans;void Findrt(int u,int fa)&#123; siz[u]=1; int mxsiz=0; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa || vis[v]) continue; Findrt(v,u); siz[u]+=siz[v]; if(siz[v]&gt;mxsiz) mxsiz=v; &#125; mxsiz=max(mxsiz,totsize-siz[u]); if(mxsiz&lt;mi) mi=mxsiz,rt=u;&#125;int sumpre[MAXN],sumsuf[MAXN];int stk1[MAXN],stk2[MAXN],tp=0;int lstpre[MAXN],lstsuf[MAXN],cnt=0;int Match_pre(ull hash,int len)&#123; int x=len/m,y=len%m; ull exphash=Pattern_Power[x]*pw[y]+Hash[y]; if(exphash==hash) return y; else return m;&#125;int Match_suf(ull hash,int len)&#123; int x=len/m,y=len%m; ull exphash=revPattern_Power[x]*pw[y]+revHash[y]; if(exphash==hash) return y; else return m;&#125;int prelen,suflen;ull preval,sufval;void dfs(int u,int fa,int len,int Rt)&#123; pre[u]=val[u]*pw[len-1]+pre[fa]; suf[u]=val[u]*pw[len-1]+suf[fa]; prelen=Match_pre(pre[u],len); suflen=Match_suf(suf[u],len); if(prelen!=m || suflen!=m) &#123; ++cnt; lstpre[cnt]=prelen; lstsuf[cnt]=suflen; &#125; preval=Add_Char(pre[u],val[Rt]); prelen=Match_pre(preval,len+1); sufval=Add_Char(suf[u],val[Rt]); suflen=Match_suf(sufval,len+1); if(prelen!=m) ans+=sumsuf[(m-prelen)%m]; if(suflen!=m) ans+=sumpre[(m-suflen)%m]; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(vis[v] || v==fa) continue; dfs(v,u,len+1,Rt); &#125;&#125;void solve(int u)&#123; vis[u]=1; if(siz[u]&lt;m) return; for(int i=1;i&lt;=tp;++i) &#123; sumpre[stk1[i]]=0; sumsuf[stk2[i]]=0; &#125; pre[u]=suf[u]=0; ++sumpre[0],++sumsuf[0]; tp=1; stk1[tp]=0; stk2[tp]=0; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(vis[v]) continue; dfs(v,u,1,u); while(cnt) &#123; ++tp; stk1[tp]=lstpre[cnt]; stk2[tp]=lstsuf[cnt]; ++sumpre[lstpre[cnt]]; ++sumsuf[lstsuf[cnt]]; --cnt; &#125; &#125;&#125;void Divide(int u)&#123; solve(u); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(vis[v]) continue; mi=inf,totsize=siz[v]; Findrt(v,0); Divide(rt); &#125;&#125;void Reset()&#123; memset(head,0,sizeof head); ecnt=0; memset(vis,0,sizeof vis); ans=0;&#125;int main()&#123; pw[0]=1; for(int i=1;i&lt;=100000;++i) pw[i]=pw[i-1]*Base; int T=read(); while(T--) &#123; Reset(); n=read(),m=read(); scanf("%s",buf+1); for(int i=1;i&lt;=n;++i) val[i]=buf[i]-'A'; for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; scanf("%s",buf+1); Init_Hash(); mi=inf,totsize=n; Findrt(1,0); Divide(rt); printf("%lld\n",ans); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>hash</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4893 聚变反应炉]]></title>
    <url>%2F2019%2F07%2F12%2Fbzoj-4893-%E8%81%9A%E5%8F%98%E5%8F%8D%E5%BA%94%E7%82%89%2F</url>
    <content type="text"><![CDATA[贪心 + 树形背包. 本以为此题必有高论,但发现只有 $n-1$ 条边,是个树.那很显然就是一个树形背包了. 前 $50$ 分 $n$ 比较大,但 $c_i\in \lbrace 0,1 \rbrace$ ,可以贪心.显然先将所有 $c=1$ 的点激发,再激发 $c=0$ 的点最优, 对于后面的 $50$ 分, $n\leq 2000$ ,树形背包解决. 设 $f(u,x)$ 表示将子树 $u$ 内的点全部激发,并且节点 $u$ 初始需要 $x$ 点能量激发. $dfs$ 到节点 $u$ 时,枚举它的所有儿子 $v$ ,递归下去计算出所有 $v$ 的 $f$ 值. 先选一些儿子出来(选 $0$ 个也可),将它们的子树激发,再激发 $u$ ,再激发剩余的子树.那么一个儿子 $v$ 被选,造成的贡献是 $f(v,d_v)$ ,没被选,造成的贡献是 $f(v,\max(d_v-c_u,0))$ , $u$ 的贡献是 $x$ 减去选了的 $c_v$ ,与 $0$ 取 $\max$ . 设 $g(i,j)$ 表示考虑了前 $i$ 个儿子,选了的儿子 $c_v$ 总和是 $j$ 时,前 $i$ 个儿子造成的最小贡献. 对于第 $i$ 个儿子 $v$ ,若选它,有转移 $g(i,j+c_v)\leftarrow g(i-1,j)+f(v,d_v)$ . 若不选它,有转移 $g(i,j)\leftarrow g(i-1,j)+f(v,\max(d_v-c_u,0))$ . 若 $u$ 有 $k$ 个儿子,那么 $f(u,x)=\min \lbrace g(k,j)+\max(x-j,0)\rbrace$ . 注意到 $f$ 的第二维 $x$ 对于确定的 $u$ ,其实只有 $2$ 种取值 $\lbrace d_u,\max(d_u-c_{fa},0)\rbrace$ ,分别用 $0,1$ 代替即可. 时间复杂度 $O(n\cdot \sum c_i)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;void upd(int &amp;x,int y)&#123; x=min(x,y);&#125;const int inf=1e9;const int MAXN=1e5+10,MAXS=1e4+10;int n,c[MAXN],d[MAXN],fa[MAXN];int ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1];int sumc[MAXN];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int f[2019][2],g[2019][MAXS];int calc(int u,int x)&#123; if(!x) return d[u]; if(x==1) return max(0,d[u]-c[fa[u]]);&#125;void solve(int u,int id,int k)&#123; int x=calc(u,id); if(!k) &#123; f[u][id]=x; return; &#125; int i=0; for(int I=head[u];I;I=nx[I]) &#123; int v=to[I]; if(v==fa[u]) continue; ++i; for(int j=0;j&lt;=sumc[u];++j) &#123; if(j+c[v]&lt;=sumc[u]) upd(g[i][j+c[v]],g[i-1][j]+f[v][0]); upd(g[i][j],g[i-1][j]+f[v][1]); &#125; &#125; f[u][id]=inf; for(int j=0;j&lt;=sumc[u];++j) f[u][id]=min(f[u][id],g[k][j]+max(x-j,0)); for(int i=1;i&lt;=k;++i) for(int j=0;j&lt;=sumc[u];++j) g[i][j]=inf;&#125;void dfs(int u,int Fa)&#123; fa[u]=Fa; int k=0; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==Fa) continue; sumc[u]+=c[v]; dfs(v,u); ++k; &#125; solve(u,0,k); solve(u,1,k);&#125;int solve_greedy()&#123; int greedy_ans=0; for(int u=1;u&lt;=n;++u) if(c[u]) &#123; greedy_ans+=max(d[u],0); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; d[v]-=c[u]; &#125; &#125; for(int u=1;u&lt;=n;++u) if(!c[u]) greedy_ans+=max(d[u],0); cout&lt;&lt;greedy_ans&lt;&lt;endl; return 0;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) d[i]=read(); for(int i=1;i&lt;=n;++i) c[i]=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; if(n&gt;2000) return solve_greedy(); for(int i=0;i&lt;=n;++i) for(int j=0;j&lt;=10000;++j) g[i][j]=inf; g[0][0]=0; dfs(1,0); cout&lt;&lt;f[1][0]&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>树形dp</tag>
        <tag>背包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4592 脑洞治疗仪]]></title>
    <url>%2F2019%2F07%2F12%2Fbzoj-4592-%E8%84%91%E6%B4%9E%E6%B2%BB%E7%96%97%E4%BB%AA%2F</url>
    <content type="text"><![CDATA[线段树. 需要维护一段区间的区间和,最长包含左端点的全 $0$ 区间长度,最长的包含右端点的全 $0$ 区间长度,最长全 $0$ 区间长度,以及支持区间赋值. 用线段树维护.操作 $1,3$ 都比较简单,操作 $2$ ,先查询 $[L_0,R_0]$ 中 $1$ 的数目,再将这段覆盖成 $0$ . 接下来用线段树把 $[L_1,R_1]$ 拆成 $\log$ 个线段树上的区间,遍历一次,找到能填补的最后一个区间. 再在那个区间内二分能填到的最后一个位置.方法类似于找第 $k$ 大.这样就只有一只 $\log$ 了. 时间复杂度 $O(n \cdot \log n)$ . 另外一个做法是使用珂朵莉树,但使用前提是数据随机,或者,区间赋值操作的数目与随机时的数目相近. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;int n,m;struct SegTree&#123; struct node &#123; int sum,tag,Len; int lenl,lenr,len; &#125;Tree[MAXN&lt;&lt;2]; friend node operator + (node lson,node rson) &#123; node root; root.Len=lson.Len+rson.Len; root.sum=lson.sum+rson.sum; if(lson.lenl==lson.Len) root.lenl=lson.lenl+rson.lenl; else root.lenl=lson.lenl; if(rson.lenr==rson.Len) root.lenr=rson.lenr+lson.lenr; else root.lenr=rson.lenr; root.len=max(lson.len,rson.len); root.len=max(root.len,lson.lenr+rson.lenl); root.len=max(root.len,root.lenl); root.len=max(root.len,root.lenr); return root; &#125;#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1] void pushup(int o) &#123; int t=root.tag; root=lson+rson; root.tag=t; &#125; void BuildTree(int o,int l,int r) &#123; root.sum=root.Len=r-l+1; root.tag=-1; root.lenl=root.lenr=root.len=0; if(l==r) return; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); &#125; void Modifiy(int o,int c) &#123; root.tag=c; root.sum=root.Len*c; root.lenl=root.lenr=root.len=c?0:root.Len; &#125; void pushdown(int o) &#123; if(root.tag!=-1) &#123; Modifiy(o&lt;&lt;1,root.tag); Modifiy(o&lt;&lt;1|1,root.tag); root.tag=-1; &#125; &#125; void upd(int o,int l,int r,int L,int R,int c) &#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; Modifiy(o,c); return; &#125; int mid=(l+r)&gt;&gt;1; pushdown(o); if(L&lt;=mid) upd(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) upd(o&lt;&lt;1|1,mid+1,r,L,R,c); pushup(o); &#125; int query_sum(int o,int l,int r,int L,int R) &#123; if(L&lt;=l &amp;&amp; r&lt;=R) return root.sum; int mid=(l+r)&gt;&gt;1; pushdown(o); int res=0; if(L&lt;=mid) res+=query_sum(o&lt;&lt;1,l,mid,L,R); if(R&gt;mid) res+=query_sum(o&lt;&lt;1|1,mid+1,r,L,R); return res; &#125; int tmp[50],tot,LL[50],RR[50]; void Split(int o,int l,int r,int L,int R) &#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; tmp[++tot]=o; LL[tot]=l; RR[tot]=r; return; &#125; int mid=(l+r)&gt;&gt;1; pushdown(o); if(L&lt;=mid) Split(o&lt;&lt;1,l,mid,L,R); if(R&gt;mid) Split(o&lt;&lt;1|1,mid+1,r,L,R); &#125; int Binary_Search(int o,int l,int r,int x) &#123; int mid=(l+r)&gt;&gt;1; if(l!=r) pushdown(o); if(root.Len-root.sum==x) return r; if(lson.Len-lson.sum&lt;x) return Binary_Search(o&lt;&lt;1|1,mid+1,r,x-lson.Len+lson.sum); else return Binary_Search(o&lt;&lt;1,l,mid,x); &#125; int Search(int L,int R,int brain) &#123; tot=0; Split(1,1,n,L,R); int zero=0,mxrt=-1,x; for(int i=1;i&lt;=tot &amp;&amp; mxrt==-1;++i) &#123; zero+=Tree[tmp[i]].Len-Tree[tmp[i]].sum; if(zero&gt;=brain) &#123; mxrt=i; x=brain-(zero-Tree[tmp[i]].Len+Tree[tmp[i]].sum); &#125; &#125; return Binary_Search(tmp[mxrt],LL[mxrt],RR[mxrt],x); &#125; node query_len(int o,int l,int r,int L,int R) &#123; if(L&lt;=l &amp;&amp; r&lt;=R) return root; int mid=(l+r)&gt;&gt;1; pushdown(o); if(R&lt;=mid) return query_len(o&lt;&lt;1,l,mid,L,R); if(L&gt;mid) return query_len(o&lt;&lt;1|1,mid+1,r,L,R); if(L&lt;=mid &amp;&amp; R&gt;mid) return query_len(o&lt;&lt;1,l,mid,L,R)+query_len(o&lt;&lt;1|1,mid+1,r,L,R); &#125; int solve(int L,int R) &#123; node tmp=query_len(1,1,n,L,R); return tmp.len; &#125;&#125;T;int main()&#123; n=read(),m=read(); T.BuildTree(1,1,n); while(m--) &#123; int tp=read(); if(tp==0) &#123; int L=read(),R=read(); T.upd(1,1,n,L,R,0); &#125; else if(tp==1) &#123; int L0=read(),R0=read(); int L1=read(),R1=read(); int tot1=T.query_sum(1,1,n,L0,R0); if(!tot1) continue; T.upd(1,1,n,L0,R0,0); int tot2=T.query_sum(1,1,n,L1,R1); if(tot1+tot2&gt;=R1-L1+1) T.upd(1,1,n,L1,R1,1); else &#123; int pos=T.Search(L1,R1,tot1); T.upd(1,1,n,L1,pos,1); &#125; &#125; else &#123; int L=read(),R=read(); printf("%d\n",T.solve(L,R)); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>二分</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4562 食物链]]></title>
    <url>%2F2019%2F07%2F11%2Fbzoj-4562-%E9%A3%9F%E7%89%A9%E9%93%BE%2F</url>
    <content type="text"><![CDATA[记忆化搜索. 题面写得非常烂 .作为一道省选题,没有对 食物链 下任何规范的定义,就让求数目,甚至限制也只说 输入数据符合生物学特点. 讲道理,出题人是要出来谢罪的. 结合样例强行理解,可以给出抽象的题目描述. 给定一张 $DAG$ ,求满足以下条件的路径数目:路径的起点终点不同,且起点的入度为 $0$ ,终点的出度为 $0$ . 记忆化搜索一下,记 $f(i)$ 表示从 $i$ 出发到出度为 $0$ 的点的路径条数.答案为所有入度为 $0$ 的点的 $f$ 之和. 注意特判除掉入度出度均为 $0$ 的点. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,m,indeg[MAXN],outdeg[MAXN];int ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt; ++outdeg[u]; ++indeg[v];&#125;int f[MAXN];int dp(int u)&#123; if(f[u]!=-1) return f[u]; if(outdeg[u]==0) return f[u]=1; int &amp;res=f[u]; res=0; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; res+=dp(v); &#125; return res;&#125;int main()&#123; memset(f,-1,sizeof f); n=read(),m=read(); for(int i=1;i&lt;=m;++i) &#123; int u=read(),v=read(); addedge(u,v); &#125; int ans=0; for(int i=1;i&lt;=n;++i) if(!indeg[i] &amp;&amp; outdeg[i]) ans+=dp(i); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>DAG</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1189]]></title>
    <url>%2F2019%2F07%2F11%2FCF1189%2F</url>
    <content type="text"><![CDATA[$Div.2$ A Keanu Reeves 显然只需要判断不分割是否可行,若不可行,就把第一个字符分出去,分成两段就好了. 12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=128;char s[MAXN];int main()&#123; int n=read(); scanf("%s",s+1); int t[2]=&#123;0,0&#125;; for(int i=1;i&lt;=n;++i) ++t[s[i]-'0']; if(t[0]!=t[1]) &#123; puts("1"); printf("%s\n",s+1); &#125; else &#123; puts("2"); putchar(s[1]); putchar(' '); for(int i=2;i&lt;=n;++i) putchar(s[i]); puts(""); &#125; return 0;&#125; B Number CirCle 假的一批,这个题被罚了 $3$ 次. 构造方法是先将元素排序,先将最大的放在任意一个位置 $x$ ,然后次大的放在 $x+1$ ,第三大放在 $x-1$ ,第四大放在 $x+1\dots$ 然后检验是否合法,若这样放置不合法,则其他所有放置也不可能合法. 为什么?因为题面中的图和样例就是这样做的.大概是因为一个比较大的数,它旁边的数尽量也安排成比较大的数,这样对于双方都最优. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,a[MAXN];int b[MAXN];bool check()&#123; if(b[1]&gt;=b[n]+b[2]) return false; if(b[n]&gt;=b[1]+b[n-1]) return false; for(int i=2;i&lt;n;++i) if(b[i]&gt;=b[i-1]+b[i+1]) return false; return true;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); sort(a+1,a+1+n); int x=(n+1)/2; b[x]=a[n]; int tot=n-1; for(int i=1;tot;++i) &#123; b[x+i]=a[tot--]; if(tot) b[x-i]=a[tot--]; &#125; if(check()) &#123; puts("YES"); for(int i=1;i&lt;=n;++i) printf("%d ",b[i]); &#125; else puts("NO"); return 0;&#125; C Candies! 仔细思考一下,不难发现答案就是 $\lfloor \frac {sum(l,r)} {10}\rfloor$ . 因为这个答案就是进位的次数,与运算顺序无关,直接将它们加起来 $/10$ ,得到的就是进位次数. 1234567891011121314151617181920212223242526272829303132#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int a[MAXN];int main()&#123; int n=read(); for(int i=1;i&lt;=n;++i) a[i]=a[i-1]+read(); int q=read(); while(q--) &#123; int l=read(),r=read(); int ans=a[r]-a[l-1]; ans/=10; printf("%d\n",ans); &#125; return 0;&#125; D1 Add on a Tree 容易发现,当且仅当存在两条边,它们只能同时加减同一个数时,就无法得到它们的权值不同的情况. 若存在这样两条边,则一定存在两条这样相邻的边,要让它们满足条件,它们的公共点度数一定为 $2$ ,即不存在其他的边. 于是判一下是否存在度数为 $2$ 的点即可. 代码就是 $D2$ 的一小部分,就不贴了. D2 Add on a Tree: Revolution 好题. 判断合法性和 $D1$ 一样,判是否有度数为 $2$ 的点.若合法,要将每条边的权值都改为要求的权值.特判 $n=2$ . 考虑如何给一条路径 $(u,L_0)$ 上的所有边加上一个权值 $x$ ,其中 $L_0$ 为叶子节点.先选择一个非叶子节点作为根. $u$ 的度数至少为 $3$ ,故一定可以找到另外两个叶子节点 $L_1,L_2$ ,并且这 $3$ 个叶子节点在 $u$ 的 $3$ 个不同子树内. 因为边权都是偶数( $pairwise$ ),所以我们要加的 $x$ 也都选择偶数.于是执行 $(L_0,L_1,\frac x 2),(L_0,L_2,\frac x 2),(L_1,L_2,-\frac x 2)$ 这三个操作,路径 $(u,L_0)$ 上所有边权值就 $+x$ 了. 再来解决原问题,对每条边,维护当前边上的权值与要求的权值还差 $\Delta$ ,然后从根节点开始 $dfs$ ,遍历到 $u$ 时,对它的每个儿子节点 $v$ ,选出子树 $v$ 内任一个叶子节点 $L_0$ ,用上面的操作给路径 $(u,L_0)$ 上的边加上 $\Delta_{u,v}$ 即可. $n\le 1000$ ,可以暴力找/修改,不用写数据结构.时间复杂度 $O(n^2)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e3+10;int head[MAXN],ecnt=0,to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1],val[MAXN&lt;&lt;1];int n,m=0;struct opt&#123; int u,v; ll x; opt(int u=0,int v=0,ll x=0):u(u),v(v),x(x) &#123;&#125;&#125;;queue&lt;opt&gt; Q;void addedge(int u,int v,int w)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; val[ecnt]=w; head[u]=ecnt;&#125;int deg[MAXN],dfn[MAXN],siz[MAXN],idx=0;int fa[MAXN];ll Delta[MAXN];//Edge(i,fa_i)bool In_SubTree(int v,int x)&#123; return dfn[v]&lt;=dfn[x] &amp;&amp; dfn[x]&lt;=dfn[v]+siz[v]-1;&#125;void Init(int u,int Fa)&#123; dfn[u]=++idx; siz[u]=1; fa[u]=Fa; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==Fa) continue; Delta[v]=val[i]; Init(v,u); siz[u]+=siz[v]; &#125;&#125;int rt;void Assign(int u,int v0,int L0,ll x)&#123; int L1=0,L2=0; if(u!=rt) &#123; for(int i=1;i&lt;=n;++i) &#123; if(deg[i]==1 &amp;&amp; !In_SubTree(v0,i)) &#123; if(!L1 &amp;&amp; In_SubTree(u,i)) L1=i; if(!L2 &amp;&amp; !In_SubTree(u,i)) L2=i; if(L1 &amp;&amp; L2) break; &#125; &#125; &#125; else &#123; int v1=0,v2; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==v0 || v==v1) continue; if(!v1) v1=v; else v2=v; &#125; for(int i=1;i&lt;=n;++i) if(deg[i]==1 &amp;&amp; In_SubTree(v1,i)) L1=i; else if(deg[i]==1 &amp;&amp; In_SubTree(v2,i)) L2=i; &#125; m+=3; Q.push(opt(L0,L1,x/2)); Q.push(opt(L0,L2,x/2)); Q.push(opt(L1,L2,-x/2)); while(L0!=u) &#123; Delta[L0]-=x; L0=fa[L0]; &#125;&#125;void dfs(int u)&#123; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa[u]) continue; int L0=0; for(int j=1;j&lt;=n &amp;&amp; !L0;++j) if(deg[j]==1 &amp;&amp; In_SubTree(v,j)) L0=j; Assign(u,v,L0,Delta[v]); dfs(v); &#125;&#125;int main()&#123; n=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(),w=read(); addedge(u,v,w); addedge(v,u,w); ++deg[u],++deg[v]; &#125; if(n==2) &#123; puts("YES"); puts("1"); printf("1 2 %d\n",val[1]); return 0; &#125; for(int i=1;i&lt;=n;++i) if(deg[i]==2) &#123; puts("NO"); return 0; &#125; puts("YES"); rt=0; for(int i=1;i&lt;=n &amp;&amp; !rt;++i) if(deg[i]&gt;1) rt=i; Init(rt,0); dfs(rt); cout&lt;&lt;m&lt;&lt;endl; opt tmp; while(!Q.empty()) &#123; tmp=Q.front(); Q.pop(); printf("%d %d %I64d\n",tmp.u,tmp.v,tmp.x); &#125; return 0;&#125; E Count Pairs 这个题比 $D2$ 简单许多.对于原方程,因为 $a_i\not= a_j$ ,两边乘上 $(a_i-a_j)$ ,可得$$a_i^4 - a_j^4 \equiv k(a_i-a_j)$$ 可以 $O(n) $枚举 $j$ ,计算有多少个 $i$ 满足方程.于是 $a_j$ 此时为常数,整理一下,得到$$a_i^4-k\cdot a_i \equiv a_j^4-k\cdot a_j$$ $k$ 是不变的,所以用一个 $map$ 对于每个 $x\in [0,P)$ 记录 $a_i^4-k\cdot a_i\equiv x$ 的 $i$ 有多少个就好了. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int P;int add(int a,int b)&#123; return (a + b) % P;&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int pw4(int x)&#123; x=mul(x,x); x=mul(x,x); return x;&#125;const int MAXN=3e5+10;unordered_map&lt;int,int&gt; cnt;int n,a[MAXN];int main()&#123; n=read(),P=read(); int k=read(); ll ans=0; for(int i=1;i&lt;=n;++i) &#123; a[i]=read(); int x=pw4(a[i]); x=add(x,mul(P-k,a[i])); if(cnt.find(x)!=cnt.end()) ans+=cnt[x]; ++cnt[x]; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; F Array Beauty 元素的顺序是不影响答案的,所以可以先将所有元素从小到大排序.记最大的元素为 $m$ . $Beauty$ 值最大为 $m$ ,记 $Beauty$ 值 $\ge x$ 的子序列有 $p_x$ 个,那么答案为 $\sum_{x=1}^m p_x$ ,因为若一个子序列的 $Beauty$ 值为 $s$ ,它就会在求和中贡献 $s$ 次. 枚举 $x$ 的值,用 $dp$ 求解 $p_x$ .设 $f(i,j)$ 表示以第 $i$ 个数结尾,长度为 $j$ 的,且美丽值 $\ge x$ 的子序列数目. 转移有 $f(i,j)=\sum f(d,j-1),d&lt;i,a_j-a_d\ge x$ .由于 $a$ 已经排过序,所以合法的 $d$ 一定是一段前缀,可以用 $two\ pointer$ 维护,并记录 $f$ 的前缀和.这样, $p_x=\sum f(i,k)$ ,求一个 $p_x$ 的时间复杂度为 $O(n\cdot k)$ . 注意到 $x$ 只需要枚举到 $\lfloor \frac m {k-1}\rfloor$ ,若 $x$ 大于这个值,子序列首尾元素差值就会 $&gt; m$ ,不可能出现. 所以整个问题的时间复杂度为 $O(m \cdot n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353;int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;const int MAXN=1e3+10;int n,k;int f[MAXN][MAXN],sum[MAXN][MAXN],a[MAXN];int solve(int x)&#123; for(int i=1;i&lt;=n;++i) f[i][1]=1,sum[i][1]=i; for(int j=2;j&lt;=k;++j) &#123; sum[0][j]=0; int r=1; for(int i=1;i&lt;=n;++i) &#123; while(a[r]&lt;=a[i]-x) ++r; f[i][j]=sum[r-1][j-1]; sum[i][j]=add(sum[i-1][j],f[i][j]); &#125; &#125; return sum[n][k];&#125;int main()&#123; n=read(),k=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); sort(a+1,a+1+n); int m=a[n]; int ans=0; for(int x=1;x&lt;=m/(k-1);++x) ans=add(ans,solve(x)); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>数学</tag>
        <tag>构造</tag>
        <tag>codeforces</tag>
        <tag>two pointer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4561 圆的异或并]]></title>
    <url>%2F2019%2F07%2F11%2Fbzoj-4561-%E5%9C%86%E7%9A%84%E5%BC%82%E6%88%96%E5%B9%B6%2F</url>
    <content type="text"><![CDATA[扫描线 + $set$ . 把圆看做上下两段半圆弧,因为位置关系只有包含和相离,所以无论 $x$ 取什么值,各个圆弧上下相对顺序是不变的.所以可以将它们全都丢进 $set$ 里面,方便接下来查询. 做一个扫描线,左边插入,右边删除.对于每个圆弧,插入的时候询问它的 $upper_bound$ . 若找到的是上圆弧,说明它就是当前圆外面的第一个圆. 若找到的是下圆弧,说明当前圆外面的第一个圆就是那个下圆弧外面的第一个圆. 可能出现找不到的情况,需要特判. 发现自己好像是第一次写扫描线… 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;inline double sq(double x)&#123; return x*x;&#125;const int MAXN=2e5+10;int n;double x[MAXN],y[MAXN],r[MAXN],pos;int Sgn[MAXN];struct LR_Arc&#123; int id,sgn; LR_Arc(int id=0,int sgn=0):id(id),sgn(sgn) &#123;&#125; bool operator &lt; (const LR_Arc &amp;rhs) const &#123; return x[id]+sgn*r[id]&lt;x[rhs.id]+rhs.sgn*r[rhs.id]; &#125;&#125;q[MAXN&lt;&lt;1];struct UD_Arc&#123; int id,sgn;//1-up -1-down UD_Arc(int id=0,int sgn=0):id(id),sgn(sgn) &#123;&#125; bool operator &lt; (const UD_Arc &amp;rhs) const &#123; int i=id,j=rhs.id; double y1=y[i]+sgn*(sqrt(sq(r[i])-sq(x[i]-pos))); double y2=y[j]+rhs.sgn*(sqrt(sq(r[j])-sq(x[j]-pos))); return y1==y2?sgn&lt;rhs.sgn:y1&lt;y2; &#125;&#125;;set&lt;UD_Arc&gt; S;set&lt;UD_Arc&gt;::iterator it;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) &#123; x[i]=(double)(read()); y[i]=(double)(read()); r[i]=(double)(read()); q[i*2-1]=LR_Arc(i,-1); q[i*2]=LR_Arc(i,1); &#125; sort(q+1,q+1+2*n); for(int i=1;i&lt;=2*n;++i) &#123; pos=x[q[i].id]+q[i].sgn*r[q[i].id]; if(q[i].sgn==-1) &#123; it=S.upper_bound(UD_Arc(q[i].id,1)); if(it!=S.end()) &#123; UD_Arc tmp=*it; if(tmp.sgn==-1) Sgn[q[i].id]=Sgn[tmp.id]; else Sgn[q[i].id]=-Sgn[tmp.id]; &#125; else Sgn[q[i].id]=1; S.insert(UD_Arc(q[i].id,1)); S.insert(UD_Arc(q[i].id,-1)); &#125; else &#123; S.erase(UD_Arc(q[i].id,1)); S.erase(UD_Arc(q[i].id,-1)); &#125; &#125; double ans=0; for(int i=1;i&lt;=n;++i) ans+=sq(r[i])*Sgn[i]; cout&lt;&lt;(ll)(ans)&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>STL</tag>
        <tag>扫描线</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4560 字符串覆盖]]></title>
    <url>%2F2019%2F07%2F11%2Fbzoj-4560-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A6%86%E7%9B%96%2F</url>
    <content type="text"><![CDATA[字符串 $hash$ + 贪心 + $dp$ . 首先可以字符串 $hash$ 预处理出 $N$ 个串各自可以放的位置 (用开头的位置表示) ,以及 $L_{i,j} ,R_{i,j}$ 分别表示从位置 $j$ 往左/右边找,能找到的第一个可以放第 $i$ 个串的位置(不包含 $j$ ). 求最大值,可以贪心.首先枚举这 $N$ 个串放置的 $N!$ 种顺序,依次选择位置.分两种情况,记上个串结束位置为 $p$ ,若与上个串相交,则放在 $L_{i,p}$ 最优,若与上个串不相交,则放在 $R_{i,p}$ 最优.这个决策也可以大力枚举.这一步的时间复杂度 $O(N!\cdot 2^N)$ 求最小值,不相交时贪心放在 $R_{i,p}$ 不一定最优,考虑 $dp$ . 仍然枚举 $N!$ 种放置顺序,设 $f(i,j)$ 表示考虑了前 $j$ 个位置,下一个放置的应该是第 $i$ 个串. 若不放第 $i$ 个串,则转移到 $f(i,j+1)$ . 若放第 $i$ 个串,若它与上一个串不相交,转移到 $f(i+1,j+Len(i))$ .否则放在匹配 $j$ 后能放的第一个位置. 这一步时间复杂度 $O(N!\cdot N\cdot Len(A))$ ,也是总的时间复杂度. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;typedef unsigned long long ull;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e4+10;const ull Base=37;int n,N,len[5];ull Hash[MAXN],pw[MAXN];char A[MAXN],B[5][MAXN];void Init_Hash()&#123; Hash[0]=0; for(int i=1;i&lt;=n;++i) Hash[i]=Hash[i-1]*Base+(ull)(A[i]-'a');&#125;ull Calc_Hash(int l,int r)&#123; return Hash[r]-Hash[l-1]*pw[r-l+1];&#125;int L[5][MAXN],R[5][MAXN],f[5][MAXN];int id[5];int DP(int i,int j)&#123; if(i&gt;N) return 0; j=R[id[i]][j]; if(j==0) return n+1; if(f[i][j]!=-1) return f[i][j]; int &amp;ans=f[i][j]; ans=DP(i,j+1); int k=j+len[id[i]],st=j; ++i; for(;i&lt;=N;++i) &#123; ans=min(ans,DP(i,k)+k-j); int p=R[id[i]][j]; if(p&lt;st || p&gt;=k) return ans; st=p; k=max(k,st+len[id[i]]); &#125; ans=min(ans,k-j); return ans;&#125;int dfs(int i,int j)&#123; if(i&gt;N) return 0; j=R[id[i]][j]; if(!j) return 0; int k=j+len[id[i]],st=j; int ans=0; ++i; for(;i&lt;=N;++i) &#123; ans=max(ans,dfs(i,k)+k-j); int p=L[id[i]][k]; if(p&lt;st || p&gt;=k) return ans; st=p; k=max(k,st+len[id[i]]); &#125; ans=max(ans,k-j); return ans;&#125;int main()&#123; pw[0]=1; for(int i=1;i&lt;=10000;++i) pw[i]=pw[i-1]*Base; int T=read(); while(T--) &#123; scanf("%s",A+1); n=strlen(A+1); N=read(); for(int i=1;i&lt;=N;++i) &#123; scanf("%s",B[i]+1); len[i]=strlen(B[i]+1); &#125; Init_Hash(); memset(L,0,sizeof L); memset(R,0,sizeof R); for(int i=1;i&lt;=N;++i) &#123; ull val=0; for(int j=1;j&lt;=len[i];++j) val=val*Base+(B[i][j]-'a'); for(int j=1;j+len[i]-1&lt;=n;++j) if(Calc_Hash(j,j+len[i]-1)==val) L[i][j]=j; else L[i][j]=L[i][j-1]; for(int j=n+1-len[i];j&gt;=1;--j) if(Calc_Hash(j,j+len[i]-1)==val) R[i][j]=j; else R[i][j]=R[i][j+1]; &#125; for(int i=1;i&lt;=N;++i) id[i]=i; int minans=n+1,maxans=0; do &#123; memset(f,-1,sizeof f); minans=min(minans,DP(1,1)); maxans=max(maxans,dfs(1,1)); &#125;while(next_permutation(id+1,id+1+N)); printf("%d %d\n",minans,maxans); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4559 成绩比较]]></title>
    <url>%2F2019%2F07%2F10%2Fbzoj-4559-%E6%88%90%E7%BB%A9%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[组合计数 + 容斥原理 + 拉格朗日插值法. 首先我们确定哪些人被碾压,再确定没有被碾压的人各科分数分别是高于 $B$ 神还是小于等于 $B$ 神.然后就可以将每科分开算所有人各自具体分数的方案数,最后乘在一起. 选出被碾压的人有 $n-1\choose k$ 种方案. 对于课程 $i$ ,有 $r_i-1$ 个人的分比 $B$ 神高,这 $r_i-1$ 个人显然只能在未被碾压的 $n-k-1$ 个人中产生.如果任意分配,可能会出现新的人被碾压.所以用容斥原理计算这部分的贡献,没有人被碾压方案数 $=$ 总方案数 $-$ 保证 $1$ 个人被碾压方案数 $+$ 保证 $2$ 个人被碾压方案数 $\dots$ 记这个答案为 $s$ . 再来计算第 $i$ 科排名恰好为 $r_i$ 的方案数 $p_i$ .枚举这一科 $B$ 神考了 $x$ 分.(有 $r_i=1$ 的情况,所以定义 $0^0=1$ ). $$\begin{aligned}p_i=\sum_{x=1}^{u_i} x^{n-r_i}\cdot (u_i-x)^{r_i-1}\end{aligned}$$ 若暴力算 $p_i$ 可以拿到 $70$ 分.注意到 $p_i$ 是个关于 $u_i$ 的 $n$ 次多项式,而我们只需要求它在某一个位置的值. 拉格朗日插值即可,答案为 ${n-1\choose k}\cdot s \cdot \prod p_i$ . 时间复杂度 $O(n^3\cdot \log n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=128;const int P=1e9+7;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int inv(int x)&#123; return fpow(x,P-2);&#125;int n,m,k,C[MAXN][MAXN];int u[MAXN],r[MAXN];void init()&#123; C[0][0]=1; for(int i=1;i&lt;=n;++i) C[i][0]=1; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=i;++j) C[i][j]=add(C[i-1][j],C[i-1][j-1]);&#125;int Assign_Rank()&#123; int res=1; for(int i=1;i&lt;=m;++i) res=mul(res,C[n-k-1][r[i]-1]); bool flag=true; for(int i=1;i&lt;=n-k-1 &amp;&amp; flag;++i) &#123; int tmp=C[n-k-1][i]; for(int j=1;j&lt;=m;++j) if(n-k-1-i&gt;=r[j]-1) tmp=mul(tmp,C[n-k-1-i][r[j]-1]); else &#123; tmp=0; flag=false; break; &#125; if(i&amp;1) res=add(res,P-tmp); else res=add(res,tmp); &#125; return res;&#125;int Calc_p(int i,int U)&#123; int res=0; for(int x=1;x&lt;=U;++x) res=add(res,mul(fpow(x,n-r[i]),fpow(U-x,r[i]-1))); return res;&#125;int x[MAXN],y[MAXN];int Lagrange(int N,int pos)&#123; int res=0; for(int i=1;i&lt;=N;++i) &#123; int tmp=y[i]; for(int j=1;j&lt;=N;++j) if(i!=j) &#123; tmp=mul(tmp,add(pos,P-x[j])); tmp=mul(tmp,inv(add(x[i],P-x[j]))); &#125; res=add(res,tmp); &#125; return res;&#125;int Assign_Score(int i)&#123; for(int U=2;U&lt;=n+2;++U) x[U-1]=U,y[U-1]=Calc_p(i,U); return Lagrange(n+1,u[i]);&#125;int main()&#123; n=read(),m=read(),k=read(); for(int i=1;i&lt;=m;++i) u[i]=read(); for(int i=1;i&lt;=m;++i) r[i]=read(); init(); int ans=C[n-1][k]; ans=mul(ans,Assign_Rank()); for(int i=1;i&lt;=m;++i) ans=mul(ans,Assign_Score(i)); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>容斥原理</tag>
        <tag>拉格朗日插值法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4558 方]]></title>
    <url>%2F2019%2F07%2F10%2Fbzoj-4558-%E6%96%B9%2F</url>
    <content type="text"><![CDATA[容斥原理. 记 $s_i$ 表示顶点恰好有 $i$ 个点是不合法点的正方形数,答案显然是 $s_0-s_1+s_2-s_3+s_4$ . $s_0$ 可以直接算, $s_1$ 可以枚举每个不合法点来算. 算 $s_2,s_3,s_4$ 都只需要枚举每对不合法点,并判断其他两个顶点是否合法,将贡献加入对应的 $s$ . 注意考虑斜着放的正方形. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e8+7;const int inv2=(P+1)&gt;&gt;1;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=2e3+10;typedef pair&lt;int,int&gt; pii;#define mp make_pairset&lt;pii&gt; S;int n,m,k,s[5];int Calc(int l,int r,int h)&#123; int z=min(l+r,h); if(!z) return 0; int res=mul(mul(z,z+3),inv2); if(z&gt;l) res=add(res,P-mul(inv2,mul(z-l,z-l+1))); if(z&gt;r) res=add(res,P-mul(inv2,mul(z-r,z-r+1))); return res;&#125;int calc1(int x,int y)&#123; int t=x,b=n-x,l=y,r=m-y; int res=0; res=add(res,Calc(t,b,l)); res=add(res,Calc(t,b,r)); res=add(res,Calc(l,r,t)); res=add(res,Calc(l,r,b)); res=add(res,P-min(l,t)); res=add(res,P-min(r,t)); res=add(res,P-min(l,b)); res=add(res,P-min(r,b)); return res;&#125;bool check(int x,int y)&#123; return x&gt;=0 &amp;&amp; x&lt;=n &amp;&amp; y&gt;=0 &amp;&amp; y&lt;=m;&#125;void count(int ax,int ay,int bx,int by)&#123; if(check(ax,ay) &amp;&amp; check(bx,by)) &#123; int t=S.count(mp(ax,ay))+S.count(mp(bx,by)); ++s[2]; if(t&gt;0) s[3]=add(s[3],1); if(t&gt;1) s[3]=add(s[3],1),s[4]=add(s[4],1); &#125;&#125;int x[MAXN],y[MAXN];void solve()&#123; for(int i=1;i&lt;=n &amp;&amp; i&lt;=m;++i) s[0]=add(s[0],mul(i,mul(n-i+1,m-i+1))); for(int i=1;i&lt;=k;++i) s[1]=add(s[1],calc1(x[i],y[i])); for(int i=1;i&lt;k;++i) for(int j=i+1;j&lt;=k;++j) &#123; int dx=x[i]-x[j]; int dy=y[i]-y[j]; count(x[i]+dy,y[i]-dx,x[j]+dy,y[j]-dx); count(x[i]-dy,y[i]+dx,x[j]-dy,y[j]+dx); if(abs(dx)+abs(dy) &amp; 1) continue; int X=(dx-dy)&gt;&gt;1,Y=(dx+dy)&gt;&gt;1; count(x[i]-X,y[i]-Y,x[j]+X,y[j]+Y); &#125; s[3]/=3; s[4]/=6;&#125;int main()&#123; n=read(),m=read(); k=read(); for(int i=1;i&lt;=k;++i) &#123; x[i]=read(); y[i]=read(); S.insert(mp(x[i],y[i])); &#125; solve(); int ans=0; for(int i=0;i&lt;=4;++i) if(i&amp;1) ans=add(ans,P-s[i]); else ans=add(ans,s[i]); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 5104 Fib数列]]></title>
    <url>%2F2019%2F07%2F10%2Fbzoj-5104-Fib%E6%95%B0%E5%88%97%2F</url>
    <content type="text"><![CDATA[二次剩余 + $BSGS$ . 这个题可以暴力水过去.先找出模 $P=10^9+9​$ 意义下的循环节,发现是 $\frac {P-1} 3​$ .于是 $O(\frac {P-1} 3)​$ 暴力判. 考虑正经一点的,比较优秀的做法.记 $\phi=\frac {\sqrt 5+1} 2​$ ,则数列第 $n​$ 项 $F_n=\frac 1 {\sqrt 5} \cdot (\phi^n-(-\frac 1 \phi)^n)​$ . 注意 $5$ 在模 $P$ 意义下可以开根号,记开出来的根为 $k=383008016$ ,答案为 $x$ ,那么要解的方程化为, $$\phi^x-(-\frac 1 \phi)^x=k\cdot n$$ 换元,令 $t=\phi ^x$ ,则方程化为, $$t^2-(-1)^x\cdot=(k\cdot n)t$$ 得到了 $t$ 的一元二次方程,对 $x$ 为奇数/偶数分别求解.若 $\Delta$ 不为二次剩余,则无解. 否则,求根公式解得 $t​$ ,再根据 $t=\phi ^x​$ 用 $BSGS​$ 解出最小 $x​$ . 瓶颈在 $BSGS​$ 上,时间复杂度 $O(\sqrt P)​$ . 暴力 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+9;inline int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;int solve(int n)&#123; if(n==1) return 1; int len=333333336; int a=0,b=1,c; for(int i=2;i&lt;=len;++i) &#123; c=add(a,b); if(c==n) return i; a=b; b=c; &#125; return -1;&#125;int main()&#123; int n=read(); cout&lt;&lt;solve(n)&lt;&lt;endl; return 0;&#125; 正经做法 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+9,inv2=(P+1)&gt;&gt;1;const int k=383008016,phi=691504013;const int Len=(P+1)/3;inline int add(int a,int b)&#123; return ((a+b)%P+P)%P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int inv(int x)&#123; return fpow(x,P-2);&#125;bool EulerJudge(int x)&#123; return fpow(x,(P-1)&gt;&gt;1)!=(P-1);&#125;int wi;struct Complex&#123; int x,y;//x+yw Complex(int x=0,int y=0):x(x),y(y) &#123;&#125; Complex operator * (const Complex &amp;rhs) const &#123; int tx=mul(mul(y,rhs.y),wi); tx=add(tx,mul(x,rhs.x)); int ty=add(mul(x,rhs.y),mul(y,rhs.x)); return Complex(tx,ty); &#125; friend Complex operator ^ (Complex a,int b) &#123; Complex res=Complex(1,0); while(b) &#123; if(b&amp;1) res=res*a; a=a*a; b&gt;&gt;=1; &#125; return res; &#125;&#125;;int Cipolla(int n)&#123; if(!EulerJudge(n)) return -1; srand(time(NULL)); int a; while("RLDAKIOI") &#123; a=rand()%P; wi=add(mul(a,a),-n); if(!EulerJudge(wi)) break; &#125; Complex res=Complex(a,1); res=res^((P+1)&gt;&gt;1); res.x=add(res.x,P); return min(res.x,P-res.x);&#125;map&lt;int,int&gt; mp;int BSGS(int a,int b)//a^x=b&#123; mp.clear(); int m=ceil(sqrt(P)); for(int j=0; j&lt;m; ++j) mp[mul(b,fpow(a,j))]=j; for(int i=1; i&lt;=m; ++i) &#123; int j,val=fpow(a,i*m); if(mp.find(val)!=mp.end()) &#123; j=mp[val]; return i*m-j; &#125; &#125; return P;&#125;int n;int solve(int b,int c,int t)&#123; if(t==-1) return P; t=add(t,-b); t=mul(t,inv2); int x=BSGS(phi,t); if(c==1 &amp;&amp; x%2==0) return P; if(c==-1 &amp;&amp; x%2==1) return P; return x;&#125;int calc(int b,int c)&#123; int Delta=add(mul(b,b),mul(-4,c)); int t=Cipolla(Delta); if(t==-1) return P; return min(solve(b,c,t),solve(b,c,add(P,-t)));&#125;int main()&#123; n=read(); int ans=P; int b=mul(P-k,n); ans=min(ans,calc(b,1));//odd ans=min(ans,calc(b,-1));//even if(ans&lt;P) printf("%d\n",ans); else puts("-1"); return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>BSGS</tag>
        <tag>二次剩余</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2305 游戏]]></title>
    <url>%2F2019%2F07%2F10%2FLoj-2305-%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[$2-SAT$ . 如果没有地图 $x$ ,每张地图只能选两种车,就是个裸的 $2-SAT$ 问题. 现在有地图 $x$ ,但不超过 $8$ 张.所以可以暴力枚举每张地图 $x$ 不能选哪种车,然后 $2-SAT$ 判断. 注意枚举不能选的车时,只用枚举两种,就已经包含了地图 $x$ 选车的所有情况. $2-SAT$ 问题若有解,输出一组合法解的方法,是对于每个状态 $i$ 与它的对立面 $inv(i)$ 比较所在 $scc$ 编号的大小,选择所在 $scc$ 编号小的状态.这样做是和缩点建反图后 $topsort$ 等价的. 时间复杂度 $O(2^d\cdot (n+m))$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=3e5+10;int n,m,d;char buf[MAXN],s[10];bool flag[MAXN];int idx(int x,int type)&#123; return x*3+type;&#125;int inv(int id)&#123; int x=id/3; int t=id%3; if(flag[idx(x,0)]==false) return idx(x,3-0-t); if(flag[idx(x,1)]==false) return idx(x,3-1-t); if(flag[idx(x,2)]==false) return idx(x,3-2-t);&#125;int ecnt=0,head[MAXN],to[MAXN],nx[MAXN];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;struct Edge&#123; int x,y; int hx,hy;&#125;E[MAXN];int dfn[MAXN],low[MAXN],scc[MAXN],cnt,tot;int stk[MAXN],tp,in[MAXN];void tarjan(int u)&#123; dfn[u]=low[u]=++cnt; stk[++tp]=u; in[u]=1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(!flag[v]) continue; if(!dfn[v]) &#123; tarjan(v); low[u]=min(low[u],low[v]); &#125; else if(in[v]) low[u]=min(low[u],dfn[v]); &#125; if(dfn[u]==low[u]) &#123; int v; ++tot; do &#123; v=stk[tp--]; in[v]=0; scc[v]=tot; &#125;while(u!=v); &#125;&#125;bool solve(int st)&#123; for(int i=0;i&lt;n;++i) &#123; if(buf[i]=='x') &#123; int t=st&amp;1; flag[idx(i,0)]=true; flag[idx(i,1)]=true; flag[idx(i,t)]=false; st&gt;&gt;=1; &#125; &#125; memset(head,0,sizeof head); ecnt=0; for(int i=1;i&lt;=m;++i) &#123; int x=idx(E[i].x,E[i].hx); int y=idx(E[i].y,E[i].hy); if(x==y) continue; if(!flag[x]) continue; else if(!flag[y]) addedge(x,inv(x)); else &#123; addedge(x,y); addedge(inv(y),inv(x)); &#125; &#125; memset(dfn,0,sizeof dfn); memset(low,0,sizeof low); memset(scc,0,sizeof scc); memset(in,0,sizeof in); tp=0; tot=0; cnt=0; for(int i=0;i&lt;3*n;++i) if(flag[i] &amp;&amp; !dfn[i]) tarjan(i); for(int i=0;i&lt;3*n;++i) if(flag[i] &amp;&amp; scc[i]==scc[inv(i)]) return false; for(int i=0;i&lt;3*n;++i) &#123; if(flag[i] &amp;&amp; scc[i]&lt;scc[inv(i)]) putchar(i%3+'A'); &#125; puts(""); return true;&#125;int main()&#123; n=read(),d=read(); scanf("%s",buf); for(int i=0;i&lt;n;++i) &#123; flag[idx(i,0)]=true; flag[idx(i,1)]=true; flag[idx(i,2)]=true; if(buf[i]!='x') flag[idx(i,buf[i]-'a')]=false; &#125; m=read(); for(int i=1;i&lt;=m;++i) &#123; E[i].x=read()-1; scanf("%s",s); E[i].hx=s[0]-'A'; E[i].y=read()-1; scanf("%s",s); E[i].hy=s[0]-'A'; &#125; bool f=false; for(int i=0;i&lt;(1&lt;&lt;d);++i) if(solve(i)) &#123; f=true; break; &#125; if(!f) puts("-1"); return 0;&#125;]]></content>
      <tags>
        <tag>tarjan</tag>
        <tag>2-SAT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2302 整数]]></title>
    <url>%2F2019%2F07%2F09%2FLoj-2302-%E6%95%B4%E6%95%B0%2F</url>
    <content type="text"><![CDATA[线段树 + 压位. 可以用线段树维护 $x$ 的每个二进制位,一次加/减法可以拆成 $\log$ 次给某一位 $\pm 1$. 假设给第 $p$ 位 $+1$ ,就向高位找到第一个为 $0$ 的位置 $q$ ,将位置 $q$ 改为 $1$ , $p\sim q-1$ 改为 $0$ . 假设给第 $p$ 位 $-1$ ,就向高位找到第一个为 $1$ 的位置 $q$ ,将位置 $q$ 改为 $0$ , $p\sim q-1$ 改为 $1$ . 这样直接做是 $O(n\cdot \log^2n)$ 的,比较慢.因为只维护 $0/1$ 信息,所以一个比较自然的想法是压位. $b\le 30n$ ,为了方便,将 $30$ 位压在一个 $int$ 里面,这样每次操作只用拆成 $2$ 位. 线段树的第 $i$ 个位置维护了二进制位 $(i-1)\times 30\sim i\times 30-1$ 这些位置上的信息.时间复杂度 $O(n\cdot \log n)$. 细节巨多,巨烦.调了两节课. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e6+10;const int Base=30;const int s=(1&lt;&lt;30)-1;int n;struct SegTree&#123; struct node &#123; int val,tag; bool mi,mx; node()&#123;val=0;tag=-1;mi=true;mx=false;&#125; &#125;Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1] void pushup(int o) &#123; root.mi=lson.mi&amp;rson.mi; root.mx=lson.mx&amp;rson.mx; &#125; void modifiy(int o,int c) &#123; root.tag=c; if(!c) &#123; root.val=0; root.mi=true; root.mx=false; &#125; else &#123; root.val=s; root.mi=false; root.mx=true; &#125; &#125; void pushdown(int o) &#123; if(root.tag!=-1) &#123; modifiy(o&lt;&lt;1,root.tag); modifiy(o&lt;&lt;1|1,root.tag); root.tag=-1; &#125; &#125; void upd(int o,int l,int r,int L,int R,int c) &#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; modifiy(o,c); return; &#125; int mid=(l+r)&gt;&gt;1; pushdown(o); if(L&lt;=mid) upd(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) upd(o&lt;&lt;1|1,mid+1,r,L,R,c); pushup(o); &#125; int query(int o,int l,int r,int a,int b)//第b个大位第a小位 &#123; if(l==r) return (root.val&gt;&gt;a)&amp;1; int mid=(l+r)&gt;&gt;1; pushdown(o); if(b&lt;=mid) return query(o&lt;&lt;1,l,mid,a,b); else return query(o&lt;&lt;1|1,mid+1,r,a,b); &#125; void Rejudge(int o) &#123; root.mi=(!root.val); root.mx=(root.val==s); &#125; void upd_fa(int o) &#123; while(o!=1) &#123; pushup(o&gt;&gt;1); o&gt;&gt;=1; &#125; &#125; int Access(int o,int l,int r,int pos) &#123; if(l==r) return o; int mid=(l+r)&gt;&gt;1; pushdown(o); if(pos&lt;=mid) return Access(o&lt;&lt;1,l,mid,pos); else return Access(o&lt;&lt;1|1,mid+1,r,pos); &#125; int First_Non_Mx(int o,int l,int r,int pos) &#123; if(root.mx) return -1; if(l==r) return l; int mid=(l+r)&gt;&gt;1; pushdown(o); if(pos&lt;=mid) &#123; int res=First_Non_Mx(o&lt;&lt;1,l,mid,pos); if(res==-1) return First_Non_Mx(o&lt;&lt;1|1,mid+1,r,pos); else return res; &#125; else return First_Non_Mx(o&lt;&lt;1|1,mid+1,r,pos); &#125; int First_Non_Mi(int o,int l,int r,int pos) &#123; if(root.mi) return -1; if(l==r) return l; int mid=(l+r)&gt;&gt;1; pushdown(o); if(pos&lt;=mid) &#123; int res=First_Non_Mi(o&lt;&lt;1,l,mid,pos); if(res==-1) return First_Non_Mi(o&lt;&lt;1|1,mid+1,r,pos); else return res; &#125; else return First_Non_Mi(o&lt;&lt;1|1,mid+1,r,pos); &#125; void Add(int o,int l,int r,int a,int b)//在第b个大位+a &#123; if(l==r) &#123; root.val+=a; if(root.val&gt;s) &#123; root.val&amp;=s; int p=First_Non_Mx(1,0,n,l+1); int t=Access(1,0,n,p); Tree[t].val++; Rejudge(t); if(Tree[t].val==1 || Tree[t].val==s) upd_fa(t); if(l+1&lt;=p-1) upd(1,0,n,l+1,p-1,0); &#125; Rejudge(o); return; &#125; int mid=(l+r)&gt;&gt;1; pushdown(o); if(b&lt;=mid) Add(o&lt;&lt;1,l,mid,a,b); else Add(o&lt;&lt;1|1,mid+1,r,a,b); pushup(o); &#125; void Del(int o,int l,int r,int a,int b)//在第b个大位-a &#123; if(l==r) &#123; if(root.val&gt;=a) &#123; root.val-=a; Rejudge(o); return; &#125; root.val=s+1+root.val-a; Rejudge(o); int p=First_Non_Mi(1,0,n,l+1); int t=Access(1,0,n,p); Tree[t].val--; Rejudge(t); if(Tree[t].val==0 || Tree[t].val==s-1) upd_fa(t); if(l+1&lt;=p-1) upd(1,0,n,l+1,p-1,1); return; &#125; int mid=(l+r)&gt;&gt;1; pushdown(o); if(b&lt;=mid) Del(o&lt;&lt;1,l,mid,a,b); else Del(o&lt;&lt;1|1,mid+1,r,a,b); pushup(o); &#125;&#125;T;int main()&#123; n=read(); read(),read(),read(); for(int i=1;i&lt;=n;++i) &#123; int tp=read(); if(tp==1) &#123; ll a; scanf("%lld",&amp;a); int b=read(); bool flag=(a&gt;0); a=abs(a); a&lt;&lt;=(b%Base); b/=Base; if(flag) &#123; if(a&amp;s) T.Add(1,0,n,a&amp;s,b); if(a&gt;&gt;Base) T.Add(1,0,n,a&gt;&gt;Base,b+1); &#125; else &#123; if(a&amp;s) T.Del(1,0,n,a&amp;s,b); if(a&gt;&gt;Base) T.Del(1,0,n,a&gt;&gt;Base,b+1); &#125; &#125; else &#123; int k=read(); int ans=T.query(1,0,n,k%Base,k/Base); printf("%d\n",ans); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4161 Shlw loves matrix I]]></title>
    <url>%2F2019%2F07%2F09%2Fbzoj-4161-Shlw-loves-matrix-I%2F</url>
    <content type="text"><![CDATA[常系数线性递推. 矩阵快速幂是 $O(k^3\cdot logn)$ 的,不够优秀.观察式子(后续用 $a$ 代替 $h$ ,用 $f$ 代替 $a$ ), $$a_n=\sum_{i=1}^k f_i\cdot a_{n-i}$$ 注意到任意一项 $a_i$ 都可以被 $\lbrace a_0,a_1,\dots,a_{k-1} \rbrace$ 线性表示,考虑已知 $a_n$ 的线性表示,如何求得 $a_{2n}$ 的线性表示.这里需要利用一个性质,若: $$a_n=\sum_{i=0}^{k-1}b_i\cdot a_i$$ 则, $$a_{n+x}=\sum_{i=0}^{k-1}b_i\cdot a_{i+x}$$ 证明应该是显然的,相当于将 $a_x$ 看做这个数列的首项,递推式都是一样的,所以对应系数也是一样的. 于是,连续用 $2$ 次该性质可得, 这样就用 $\lbrace a_0,a_1,a_2,\dots,a_{2k-2} \rbrace$ 线性表示了 $a_{2n}$ .那么只需要求得 $\lbrace a_k,a_{k+1},a_{k+2},\dots,a_{2k-2} \rbrace$ 的线性表示,然后代进去即可. 像快速幂那样做下去,只用做 $logn$ 次.时间复杂度 $O(k^2\cdot logn)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=2e3+10;int n,k,tmp[MAXN&lt;&lt;1];void Mul(int *a,int *b,int *f)&#123; memset(tmp,0,k&lt;&lt;3); for(int i=0;i&lt;k;++i) for(int j=0;j&lt;k;++j) tmp[i+j]=add(tmp[i+j],mul(a[i],b[j])); for(int i=2*k-2;i&gt;=k;--i) for(int j=0;j&lt;k;++j) tmp[i-j-1]=add(tmp[i-j-1],mul(tmp[i],f[j])); memcpy(a,tmp,k&lt;&lt;2); &#125;int base[MAXN],ans[MAXN];int solve(int *a,int *f,int N)&#123; if(N&lt;k) return a[N]; base[1]=ans[0]=1; while(N) &#123; if(N&amp;1) Mul(ans,base,f); Mul(base,base,f); N&gt;&gt;=1; &#125; int res=0; for(int i=0;i&lt;k;++i) res=add(res,mul(a[i],ans[i])); return res;&#125;int f[MAXN],a[MAXN];int main()&#123; n=read(),k=read(); for(int i=0;i&lt;k;++i) f[i]=add(read(),P); for(int i=0;i&lt;k;++i) a[i]=add(read(),P); cout&lt;&lt;solve(a,f,n)&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>常系数线性递推</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2304 泳池]]></title>
    <url>%2F2019%2F07%2F09%2FLoj-2304-%E6%B3%B3%E6%B1%A0%2F</url>
    <content type="text"><![CDATA[$dp$ + 常系数线性递推. 面积恰好 $=K$ 的概率不太好求,考虑求出面积 $\le K$ 与面积 $\le K-1$ 的概率,两者相减即为答案. 设 $f(i,j)$ 表示矩形长为 $i$ ,最下面 $j$ 行都安全,而第 $j+1$ 行至少一个位置危险,最大面积不超过 $K$ 的概率. 记 $g(i,j)$ 表示矩形长为 $i$ ,最下面 $j$ 行都安全,最大面积不超过 $K$ 的概率.则 $g(i,j)=\sum_{p\ge j} f(i,p)$ . 边界为 $g(0,j)=f(0,j)=1,g(i,j)=f(i,j)=0\ (i\cdot j&gt;K)$ .我们需要求得 $g(n,0)$ . 枚举第 $j+1$ 行第一个危险的格子在 $r+1$ 列.那么要求前 $r$ 列 $j+1$ 行都安全, $r+2\sim i$ 列前 $j$ 行安全,第 $r+1$ 列前 $j$ 行安全, 第 $r+1$ 列第 $j+1$ 行危险,则转移有, $$f(i,j)=\sum_{r=0}^{i-1} g(r,j+1)\cdot g(i-r-1,j) \cdot q^j\cdot(1-q)$$ $4$ 个限制依次对应了转移方程中的 $4$ 项. 大力 $dp$ ,时间复杂度为 $O(n^2)$ . 考虑如何优化.注意到当 $n&gt;K$ 时,仅有 $f(i,0)$ 与 $g(i,0)$ 这些项不为 $0$ ,而我们要求的是 $g(n,0)$ . 所以只用考虑它们的转移.将 $j=0$ 代入原来的转移方程,可以发现, $$f(i,0)=g(i,0)=\sum_{r=0}^K g(r,1)\cdot g(i-r-1,0)\cdot (1-q)$$ $g(r,1)$ 最多只有前 $K+1$ 项非 $0$ ,这部分可以通过大力 $dp$ 求出.那么 $g(r,1)\cdot (1-q)$ 就可看做常系数. 求 $g(i,0)$ 就是一个常系数线性递推,递推式的长度为 $K$ .使用 $O(K^2\cdot logn)$ 的大力取模做法即可. 总时间复杂度 $O(K^2\cdot logn)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int inv(int x)&#123; return fpow(x,P-2);&#125;const int MAXN=1e3+10;int base[MAXN],ans[MAXN],tmp[MAXN&lt;&lt;1];void Mul(int *a,int *b,int *f,int k)&#123; memset(tmp,0,k&lt;&lt;3); for(int i=0;i&lt;k;++i) for(int j=0;j&lt;k;++j) tmp[i+j]=add(tmp[i+j],mul(a[i],b[j])); for(int i=2*k-2;i&gt;=k;--i) for(int j=0;j&lt;k;++j) tmp[i-j-1]=add(tmp[i-j-1],mul(tmp[i],f[j])); memcpy(a,tmp,k&lt;&lt;2);&#125;int solve(int *a,int *f,int n,int k)&#123; memset(base,0,sizeof base); memset(ans,0,sizeof ans); base[1]=ans[0]=1; while(n) &#123; if(n&amp;1) Mul(ans,base,f,k); Mul(base,base,f,k); n&gt;&gt;=1; &#125; int res=0; for(int i=0;i&lt;k;++i) res=add(res,mul(a[i],ans[i])); return res;&#125;int n,q,pw[MAXN];int f[MAXN][MAXN],g[MAXN][MAXN];int a[MAXN],F[MAXN];int Solve(int k)&#123; memset(f,0,sizeof f); memset(g,0,sizeof g); memset(a,0,sizeof a); memset(F,0,sizeof F); for(int j=0;j&lt;=k+1;++j) g[0][j]=f[0][j]=1; for(int i=1;i&lt;=1000;++i) &#123; for(int j=k/i;j&gt;=0;--j) &#123; int L=j?(i-1-k/j):0; L=max(L,0); int R=min(i-1,k/(j+1)); for(int r=L;r&lt;=R;++r) &#123; int t=mul(pw[j],add(1,P-q)); t=mul(t,mul(g[r][j+1],g[i-1-r][j])); f[i][j]=add(f[i][j],t); &#125; g[i][j]=add(g[i][j+1],f[i][j]); &#125; &#125; if(n&lt;=1000) return g[n][0]; for(int i=0;i&lt;=k;++i) a[i]=g[i][0]; for(int r=0;r&lt;=k;++r) F[r]=mul(g[r][1],add(1,P-q)); return solve(a,F,n,k+1);&#125;int main()&#123; n=read(); int k=read(); int x=read(),y=read(); q=mul(x,inv(y)); pw[0]=1; for(int i=1;i&lt;=k;++i) pw[i]=mul(pw[i-1],q); cout&lt;&lt;add(Solve(k),P-Solve(k-1))&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>常系数线性递推</tag>
        <tag>概率/期望</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Berlekamp-Massey 算法学习笔记]]></title>
    <url>%2F2019%2F07%2F09%2FBerlekamp-Massey-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[在李巨的指引下学了一发. 简称 $BM$ 算法,可以以 $O(n^2)$ 的时间复杂度求解一个长度为 $n$ 的数列的最短线性递推式. 对于数列 $\lbrace a_1,a_2,a_3,\dots,a_n \rbrace$ ,称数列 $\lbrace R_1,R_2,R_3,\dots,R_m \rbrace$ 为其线性递推式,当且仅当下式成立: $$\forall m+1\le i\le n,a_i=\sum_{j=1}^m R_j\cdot a_{i-j}$$ 若它是所有合法线性递推式中长度 $m$ 最小的线性递推式,则称它为数列 $\lbrace a_1,a_2,a_3,\dots,a_n \rbrace$ 的最短线性递推式. 若未特殊说明,接下来的递推式,线性递推式均指 最短线性递推式 , $BM$ 算法的主要思路是从前往后依次考虑每个数,修改当前递推式使其合法,并且满足最短. 尝试由 $\lbrace a_1,a_2,a_3,\dots,a_{i-1} \rbrace$ 的递推式 $\lbrace r_1,r_2,r_3,\dots,r_m \rbrace$ 得出 $\lbrace a_1,a_2,a_3,\dots,a_i \rbrace$ 的递推式. 记递推式被更改的次数为 $cnt$ ,第 $i$ 次修改后得到的递推式为 $R_i$ ,规定 $R_0$ 为空.记递推式 $\lbrace r_1,r_2,r_3,\dots,r_m \rbrace$ 为当前递推式,即 $R_{cnt}$ . 记 $delta_i=a_i-\sum_{j=1}^m r_{j}\cdot a_{i-j}$ ,即用当前递推式算得的值与真实值之间的误差.若 $delta_i=0$ ,则不需要对递推式进行修改,直接考虑下一个元素 $a_{i+1}$ . 否则说明 $R_{cnt}$ 在位置 $i$ 出错了,记 $R_{cnt}$ 第一次出错的位置为 $fail_i$ ,则 $fail_{cnt}=i$ .考虑对 $R_{cnt}$ 进行修改,得到 $R_{cnt+1}$ ,并使得它在位置 $i$ 也成立. 若当前 $cnt=0$ ,说明 $a_i$ 是第一个非零元素,直接将 $R_1$ 置为 $\lbrace 0,0,0,\dots0 \rbrace$ ( $i$ 个 $0$ ) 即可. 否则, $cnt&gt;0$ ,说明之前已经修改过递推式,即存在 $R_k$, 记录 $p=fail_k$ ,尝试在 $R_k$ 的基础上修改,在 $a_i$ 的位置上递推出一个 $-delta_{p}$ 每个位置乘上 $\frac {delta_i} {delta_p}$ ,每个位置再加上原来的 $R_{cnt}$ 就得到合法的 $R_{cnt+1}$ . 将 $R_k$ 的元素全部变成它的相反数,再在前面补上一个 $1$ , $-delta_p$ 就到 $p+1$ 位置上来了.再在前面补 $i-p-1$ 个 $0$ , $-delta_p$ 就到位置 $i$ 上来了. 于是得到 $R_{cnt+1}=\frac {delta_i} {delta_p}*\lbrace 0,0,0,\dots,1,-R_{k_1},-R_{k_2},\dots,-R_{k_M} \rbrace + R_{cnt}$ . $0$ 有 $i-p-1$ 个. 为了保证得到的递推式长度最短,我们需要选取恰当的 $k$ .容易看出,得到的 $R_{cnt+1}$ 的长度为 $\max(i-p+M,m)$ , $M$ 为 $R_k$ 的长度, $m$ 为 $R_{cnt}$ 的长度.于是记录 $M-p$ 最短的递推式作为 $R_k$ . 最坏情况需要更新 $n$ 次递推式,时间复杂度 $O(n^2)$ . 用 $BM$ 得到的最短递推式长度最好要明显小于 $n$ 的一半,否则需要再打些表. 为什么?因为若长度为 $\frac n 2$,可以看做 $\frac n 2$ 个变量列出 $\frac n 2$ 个方程,总能找到解. 所以一个随机数列解出的最短递推式长度就是 $n$ 的一半左右,长度在 $\frac n 2$ 左右说明原数列很可能并没有一定的规律,即,大概率对之后的数据不适用. 另,因为计算中涉及 $\frac {delta_i} {delta_p}$ ,所以 $BM$ 在实数域内求解可能有一定的精度误差.若在模质数意义下,则不用考虑. 板子. $vector$ 下标从 $0$ 开始,要注意处理. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;const int inf=P+1;inline int add(int a,int b)&#123; return (a+b)%P;&#125;inline int sub(int a,int b)&#123; return (a-b+P)%P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int inv(int x)&#123; return fpow(x,P-2);&#125;#define len(A) A.size()typedef vector&lt;int&gt; poly;poly BerlekampMassey(poly a)&#123; poly R_k,R; int n=a.size(); int p=-inf,Delta; int fail,delta; for(int i=0;i&lt;n;++i) &#123; delta=a[i]; for(int j=0;j&lt;len(R);++j) delta=sub(delta,mul(R[j],a[i-(j+1)])); if(!delta) continue; fail=i; if(p==-inf) &#123; R.resize(i+1); p=fail; Delta=delta; continue; &#125; poly r; int tmp=mul(delta,inv(Delta)); for(int j=1;j&lt;=i-p-1;++j) r.push_back(0); r.push_back(tmp); for(int j=0;j&lt;len(R_k);++j) r.push_back(sub(0,mul(tmp,R_k[j]))); if(len(r)&lt;len(R)) r.resize(len(R)); for(int j=0;j&lt;len(R);++j) r[j]=add(r[j],R[j]); if(len(R)+p&lt;len(R_k)+fail) &#123; R_k=R; Delta=delta; p=fail; &#125; R=r; &#125; return R;&#125;int main()&#123; int n=read(); poly a; for(int i=1;i&lt;=n;++i) a.push_back(read()); poly R=BerlekampMassey(a); int m=R.size(); printf("%u\n",m); for(int i=0;i&lt;m;++i) printf("%d ",R[i]); puts(""); for(int i=m;i&lt;n;++i) &#123; int delta=a[i]; for(int j=0;j&lt;m;++j) delta=sub(delta,mul(R[j],a[i-(j+1)])); assert(!delta); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>构造</tag>
        <tag>学习笔记</tag>
        <tag>BM</tag>
        <tag>常系数线性递推</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4557 侦察守卫]]></title>
    <url>%2F2019%2F07%2F08%2Fbzoj-4557-%E4%BE%A6%E5%AF%9F%E5%AE%88%E5%8D%AB%2F</url>
    <content type="text"><![CDATA[树形 $dp$ . 设 $f(i,j)$ 表示将子树 $i$ 内除了最上面 $j$ 层,其余关键点都被覆盖的最小代价. $g(i,j)$ 表示子树 $i$ 内所有关键点都已被覆盖,并且还向上覆盖了 $j$ 层的最小代价. 当前处理节点为 $u$ ,其中一个儿子节点为 $v$ ,有转移 $g(u,j)=\min(g(u,j)+f(v,j), f(u,j+1)+g(v,j+1)),f(u,j)=\sum f(v,j-1)$ . 第一个转移表示让子树 $v$ 内的点来覆盖原来需要覆盖的 $j$ 层.第二个转移比较显然. 最后再贪心考虑 $f,g$ 的前缀/后缀和,即 $f(u,j)\leftarrow f(u,j-1),g(u,j)\leftarrow g(u,j+1)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;void upd(int &amp;x,int y)&#123; x=min(x,y);&#125;const int inf=1e9;const int MAXN=5e5+10;int n,m,d,w[MAXN],flag[MAXN];int ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int f[MAXN][22],g[MAXN][22];void dfs(int u,int fa)&#123; if(flag[u]) f[u][0]=g[u][0]=w[u]; for(int i=1;i&lt;=d;++i) g[u][i]=w[u]; g[u][d+1]=f[u][d+1]=inf; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa) continue; dfs(v,u); for(int j=0;j&lt;=d;++j) g[u][j]=min(g[u][j]+f[v][j],f[u][j+1]+g[v][j+1]); for(int j=d-1;j&gt;=0;--j) upd(g[u][j],g[u][j+1]); f[u][0]=g[u][0]; for(int j=1;j&lt;=d;++j) f[u][j]+=f[v][j-1]; for(int j=1;j&lt;=d;++j) upd(f[u][j],f[u][j-1]); &#125;&#125;int main()&#123; n=read(),d=read(); for(int i=1;i&lt;=n;++i) w[i]=read(); m=read(); for(int i=1;i&lt;=m;++i) flag[read()]=1; for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; dfs(1,0); cout&lt;&lt;g[1][0]&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>树形dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 2718 归程]]></title>
    <url>%2F2019%2F07%2F08%2FLoj-2718-%E5%BD%92%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[最短路 + 可持久化并查集. 假设有一个新图,只保留当前没有积水的边,那么一个连通块内的点都可以用车直接到达. 询问出发点为 $v$ 时的答案,就是询问新图中 $v$ 所在联通块内的点到 $1$ 号节点的最短距离.可以先用 $Dijkstra$ 预处理出每个点到 $1$ 的距离. 如果不强制在线,可以将询问离线后按水位线从高到低排序,这样在新图中就只有加边的操作,直接用并查集维护联通情况以及联通块的答案. 强制在线的话,就换成可持久化并查集 (用主席树维护 $fa$ ) ,将边从大到小排序依次加入并更新联通块信息.询问时根据高度二分找到对应的版本,然后回答询问即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;typedef pair&lt;int,int&gt; pii;#define mp make_pairconst int MAXN=4e5+10;int lastans,n,m,Q,K,S;struct Edge&#123; int fr,to,val,h; bool operator &lt; (const Edge &amp;rhs) const &#123; return h==rhs.h?val&gt;rhs.val:h&gt;rhs.h; &#125;&#125;E[MAXN&lt;&lt;1];int ecnt,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1],val[MAXN&lt;&lt;1];void addedge(int u,int v,int w)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; val[ecnt]=w; head[u]=ecnt;&#125;priority_queue&lt;pii&gt; q;int dis[MAXN],vis[MAXN];void Dijkstra()&#123; dis[1]=0; q.push(mp(0,1)); while(!q.empty()) &#123; int u=(q.top()).second; q.pop(); if(vis[u]) continue; vis[u]=1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(dis[v]-dis[u]&gt;val[i]) &#123; dis[v]=dis[u]+val[i]; q.push(mp(-dis[v],v)); &#125; &#125; &#125;&#125;int rt[MAXN&lt;&lt;1];struct PreSegTree&#123; int nodeidx; struct node &#123; int ls,rs; int fa,dep,mn; &#125;Tree[MAXN*30];#define root Tree[o] void init()&#123;nodeidx=0;&#125; void BuildTree(int &amp;o,int l,int r) &#123; o=++nodeidx; if(l==r) &#123; root.fa=l; root.dep=1; root.mn=dis[l]; return; &#125; int mid=(l+r)&gt;&gt;1; BuildTree(root.ls,l,mid); BuildTree(root.rs,mid+1,r); &#125; void upd_fa(int &amp;o,int pre,int l,int r,int pos,int c) &#123; o=++nodeidx; root=Tree[pre]; if(l==r) &#123; root.fa=c; return; &#125; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) upd_fa(root.ls,Tree[pre].ls,l,mid,pos,c); else upd_fa(root.rs,Tree[pre].rs,mid+1,r,pos,c); &#125; void upd_dep(int o,int l,int r,int pos) &#123; if(l==r) &#123; ++root.dep; return; &#125; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) upd_dep(root.ls,l,mid,pos); else upd_dep(root.rs,mid+1,r,pos); &#125; int query_id(int o,int l,int r,int pos) &#123; if(l==r) return o; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) return query_id(root.ls,l,mid,pos); else return query_id(root.rs,mid+1,r,pos); &#125; int query_fa(int o,int x) &#123; int p=query_id(o,1,n,x); if(Tree[p].fa==x) return p; else return query_fa(o,Tree[p].fa); &#125; void recall(int &amp;o,int pre,int l,int r,int pos) &#123; o=++nodeidx; root=Tree[pre]; if(l==r) return; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) recall(root.ls,Tree[pre].ls,l,mid,pos); else recall(root.rs,Tree[pre].rs,mid+1,r,pos); &#125; void merge(int x,int y,int idx) &#123; if(Tree[x].dep&gt;Tree[y].dep) swap(x,y); upd_fa(rt[idx],rt[idx-1],1,n,Tree[x].fa,Tree[y].fa); recall(rt[idx],rt[idx],1,n,Tree[y].fa); int u=query_id(rt[idx],1,n,Tree[y].fa); int v=query_id(rt[idx],1,n,Tree[x].fa); Tree[u].mn=min(Tree[u].mn,Tree[v].mn); if(Tree[x].dep==Tree[y].dep) upd_dep(rt[idx],1,n,Tree[y].fa); &#125;&#125;T;int H[MAXN&lt;&lt;1];void init()&#123; Dijkstra(); sort(E+1,E+1+m); for(int i=1;i&lt;=m;++i) H[i]=E[m+1-i].h; T.BuildTree(rt[0],1,n); for(int i=1;i&lt;=m;++i) &#123; rt[i]=rt[i-1]; int x=E[i].fr,y=E[i].to; x=T.query_fa(rt[i],x); y=T.query_fa(rt[i],y); if(T.Tree[x].fa!=T.Tree[y].fa) T.merge(x,y,i); &#125;&#125;int solve(int v,int p)&#123; int idx=m+1-(upper_bound(H+1,H+1+m,p)-H); int x=T.query_fa(rt[idx],v); return T.Tree[x].mn;&#125;void Reset()&#123; lastans=0; ecnt=0; memset(head,0,sizeof head); memset(dis,0x7f,sizeof dis); memset(vis,0,sizeof vis); T.init(); rt[0]=0;&#125;int main()&#123; freopen("return.in","r",stdin); freopen("return.out","w",stdout); int T=read(); while(T--) &#123; Reset(); n=read(),m=read(); for(int i=1;i&lt;=m;++i) &#123; int u=(E[i].fr=read()); int v=(E[i].to=read()); E[i].val=read(); E[i].h=read(); addedge(u,v,E[i].val); addedge(v,u,E[i].val); &#125; init(); Q=read(),K=read(),S=read(); while(Q--) &#123; int v=(read()+K*lastans-1)%n+1; int p=(read()+K*lastans)%(S+1); lastans=solve(v,p); printf("%d\n",lastans); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>并查集</tag>
        <tag>最短路</tag>
        <tag>可持久化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4555 求和]]></title>
    <url>%2F2019%2F07%2F08%2Fbzoj-4555-%E6%B1%82%E5%92%8C%2F</url>
    <content type="text"><![CDATA[第二类斯特林数 + $NTT$ . 第二类斯特林数 $S(n,m)$ 表示将 $n$ 个球放入 $m$ 个相同盒子的方案数. 递推式是 $S(n,m)=S(n-1,m-1)+m\cdot S(n-1,m)$ .即讨论第一个球是否单独占一个盒子. 也可利用容斥原理计算, $$S(n,m)=\frac 1 {m!} \sum_{k=0}^m (-1)^k{m\choose k}(m-k)^n$$ 意义是枚举空盒个数为 $k$ ,剩下的球任意放置.因为盒子相同,所以最后要除以 $m!$ . 回到这道题, $j&lt;i$ 时, $S(i,j)=0$ ,所以 $j$ 的枚举范围可以换成 $n$ .将上面的容斥计算式代到要求的式子里面, 仔细观察,发现第二个 $\sum$ 后面那一坨是一个卷积的形式,令 $a_i=\frac {(-1)^i} {i!},b_i=\frac {\sum_{j=0}^n i^j} {i!}$ , $c=a*b$ ,则 $ans=\sum_{j=0}^n 2^j\cdot j!\cdot c_j$ . 预处理 $a,b,2^j,j!$ ( $b_i$ 的分子是等比数列求和 ) ,用 $NTT$ 计算 $c$ . 空间要开够. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353,G=3;const int MAXN=1e5+10;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int inv(int x)&#123; return fpow(x,P-2);&#125;int rev[MAXN&lt;&lt;2];void NTT_init(int n,int lim)&#123; for(int i=0;i&lt;n;++i) &#123; for(int j=0;j&lt;lim;++j) if((i&gt;&gt;j)&amp;1) rev[i]|=1&lt;&lt;(lim-j-1); &#125;&#125;void DFT(int *a,int n,bool invflag)&#123; for(int i=0;i&lt;n;++i) &#123; if(i&lt;rev[i]) swap(a[i],a[rev[i]]); &#125; for(int l=2;l&lt;=n;l&lt;&lt;=1) &#123; int gi=fpow(G,(P-1)/l); if(invflag) gi=inv(gi); int m=l&gt;&gt;1; for(int *p=a;p!=a+n;p+=l) &#123; int g=1; for(int i=0;i&lt;m;++i) &#123; int t=mul(g,p[i+m]); p[i+m]=add(p[i],P-t); p[i]=add(p[i],t); g=mul(g,gi); &#125; &#125; &#125; if(invflag) &#123; int Invn=inv(n); for(int i=0;i&lt;n;++i) a[i]=mul(a[i],Invn); &#125;&#125;int n;int a[MAXN&lt;&lt;2],b[MAXN&lt;&lt;2],c[MAXN&lt;&lt;2];int fac[MAXN],invfac[MAXN],pw[MAXN];void init()&#123; pw[0]=1; for(int i=1;i&lt;=n;++i) pw[i]=mul(pw[i-1],2); fac[0]=invfac[0]=1; for(int i=1;i&lt;=n;++i) fac[i]=mul(fac[i-1],i); invfac[n]=inv(fac[n]); for(int i=n-1;i&gt;=1;--i) invfac[i]=mul(invfac[i+1],i+1); for(int i=0;i&lt;=n;++i) if(i&amp;1) a[i]=add(P,-invfac[i]); else a[i]=invfac[i]; b[0]=1; b[1]=n+1; for(int i=2;i&lt;=n;++i) &#123; b[i]=add(fpow(i,n+1),P-1); b[i]=mul(b[i],inv(i-1)); b[i]=mul(b[i],invfac[i]); &#125;&#125;int main()&#123; n=read(); init(); int N=1,lim=0; while(N&lt;=2*n) N&lt;&lt;=1,++lim; NTT_init(N,lim); DFT(a,N,false); DFT(b,N,false); for(int i=0;i&lt;N;++i) c[i]=mul(a[i],b[i]); DFT(c,N,true); int ans=0; for(int i=0;i&lt;=n;++i) &#123; int tmp=mul(pw[i],fac[i]); ans=add(ans,mul(tmp,c[i])); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>多项式</tag>
        <tag>斯特林数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4554 游戏]]></title>
    <url>%2F2019%2F07%2F08%2Fbzoj-4554-%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[最大流. 比较明显是个网络流,考虑如何建模. 硬石头将每一行分成了若干块,每一块内最多放一个炸弹,每一列也同理.然后对每一行/列的块建出它们的点,每一块能通过的流量都是 $1$ .对于空地 $(x,y)$ ,就从 $(x,y)$ 所在的行块向 $(x,y)$ 所在的列块连流量为 $1$ 的边就好了. 再建出源汇点连上这些块,跑一个最大流即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=5e3+10,MAXM=3e5+10,N=51;int n,m,Map[N][N],bx[N][N],by[N][N],tx=0,ty=0;const int inf=1e9;char buf[N];struct Edge&#123; int nx,to,flow;&#125;E[MAXM];int head[MAXN],ecnt=-1;void addedge(int u,int v,int flow)&#123; ++ecnt; E[ecnt].to=v; E[ecnt].nx=head[u]; E[ecnt].flow=flow; head[u]=ecnt;&#125;void ins(int u,int v,int flow)&#123; addedge(u,v,flow); addedge(v,u,0);&#125;int trans(char c)&#123; if(c=='*') return 0; if(c=='x') return 1; return 2;&#125;int cur[MAXN],dis[MAXN],flow[MAXN],dep[MAXN];queue&lt;int&gt; q;bool bfs(int S,int T)&#123; for(int i=1;i&lt;=T;++i) cur[i]=head[i]; memset(dep,-1,sizeof dep); dep[S]=0; q.push(S); while(!q.empty()) &#123; int u=q.front(); q.pop(); for(int i=head[u];i!=-1;i=E[i].nx) &#123; int v=E[i].to; if(dep[v]==-1 &amp;&amp; E[i].flow) &#123; dep[v]=dep[u]+1; q.push(v); &#125; &#125; &#125; return dep[T]!=-1;&#125;int dfs(int u,int T,int limit)&#123; if(u==T || !limit) return limit; int f,Flow=0; for(int i=cur[u];i!=-1;i=E[i].nx) &#123; cur[u]=i; int v=E[i].to; if(dep[v]==dep[u]+1 &amp;&amp; (f=dfs(v,T,min(limit,E[i].flow)))) &#123; Flow+=f; limit-=f; E[i].flow-=f; E[i^1].flow+=f; if(!limit) break; &#125; &#125; return Flow;&#125;int Dinic(int S,int T)&#123; int Maxflow=0; while(bfs(S,T)) Maxflow+=dfs(S,T,inf); return Maxflow;&#125;void solve()&#123; for(int i=1;i&lt;=n;++i) &#123; ++tx; for(int j=1;j&lt;=m;++j) &#123; bx[i][j]=tx; if(Map[i][j]==2) ++tx; &#125; &#125; for(int j=1;j&lt;=m;++j) &#123; ++ty; for(int i=1;i&lt;=n;++i) &#123; by[i][j]=ty; if(Map[i][j]==2) ++ty; &#125; &#125; int S=tx+ty+1,T=tx+ty+2; for(int i=1;i&lt;=tx;++i) ins(S,i,1); for(int i=1;i&lt;=ty;++i) ins(i+tx,T,1); for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) if(!Map[i][j]) ins(bx[i][j],by[i][j]+tx,1); cout&lt;&lt;Dinic(S,T)&lt;&lt;endl;&#125;int main()&#123; memset(head,-1,sizeof head); n=read(),m=read(); for(int i=1;i&lt;=n;++i) &#123; scanf("%s",buf+1); for(int j=1;j&lt;=m;++j) Map[i][j]=trans(buf[j]); &#125; solve(); return 0;&#125;]]></content>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4553 序列]]></title>
    <url>%2F2019%2F07%2F08%2Fbzoj-4553-%E5%BA%8F%E5%88%97%2F</url>
    <content type="text"><![CDATA[$cdq$ 分治处理三维偏序. 记位置 $i$ 原本的值为 $a_i$ ,可能出现的最大值为 $mx_i$ ,可能出现的最小值为 $mn_i$ .像普通的 $LIS$ 那样,设 $f(i)$ 表示必须以第 $i$ 个数结尾的 $LIS$ 长度. 因为每次只能有一个位置被修改,不难发现完成转移 $f(i)\leftarrow f(j)+1$ 需要同时满足三个条件, $mx_j\leq a_i,a_j\leq mn_i,j&lt;i​$ . 就是一个三维偏序,贡献又是可结合的,于是用 $cdq$ 分治处理即可.时间复杂度 $O(n\cdot log^2n)$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,m,a[MAXN],mx[MAXN],mn[MAXN];int f[MAXN];struct FenwickTree&#123; int bit[MAXN]; FenwickTree()&#123;memset(bit,0,sizeof bit);&#125;#define lowbit(x) x&amp;(-x) void add(int x,int c) &#123; for(;x&lt;=n;x+=lowbit(x)) bit[x]=max(bit[x],c); &#125; void rst(int x) &#123; for(;x&lt;=n;x+=lowbit(x)) bit[x]=0; &#125; int sum(int x) &#123; int s=0; for(;x;x-=lowbit(x)) s=max(s,bit[x]); return s; &#125;&#125;T;struct opt&#123; int x,y,pos; bool operator &lt; (const opt &amp;rhs) const &#123; return y==rhs.y?pos&lt;=rhs.pos:y&lt;=rhs.y; &#125;&#125;q[MAXN];void cdq(int L,int R)&#123; if(L==R) return; int mid=(L+R)&gt;&gt;1; cdq(L,mid); int tot=0; for(int i=L;i&lt;=R;++i) &#123; q[++tot].pos=i; if(i&lt;=mid) q[tot].x=mx[i],q[tot].y=a[i]; else q[tot].x=a[i],q[tot].y=mn[i]; &#125; sort(q+1,q+1+tot); for(int i=1;i&lt;=tot;++i) &#123; if(q[i].pos&lt;=mid) T.add(q[i].x,f[q[i].pos]); else f[q[i].pos]=max(f[q[i].pos],T.sum(q[i].x)+1); &#125; for(int i=1;i&lt;=tot;++i) if(q[i].pos&lt;=mid) T.rst(q[i].x); cdq(mid+1,R);&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) &#123; mx[i]=mn[i]=a[i]=read(); f[i]=1; &#125; for(int i=1;i&lt;=m;++i) &#123; int pos=read(),x=read(); mx[pos]=max(mx[pos],x); mn[pos]=min(mn[pos],x); &#125; cdq(1,n); cout&lt;&lt;f[n]&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>cdq分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Atcoder Beginner Contest 133]]></title>
    <url>%2F2019%2F07%2F08%2FAtcoder-Beginner-Contest-133%2F</url>
    <content type="text"><![CDATA[$F$ 没调出来,炸了. C Remainder Minimization 2019 可以直接大力枚举两个余数是多少,再判断它们是否合法,合法就计入贡献. 123456789101112131415161718192021222324252627282930313233343536373839#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;bool judge(int a,int b,int L,int R)&#123; if(R&lt;a || R&lt;b) return false; int L1=(L-a+2018)/2019,R1=(R-a)/2019; int L2=(L-b+2018)/2019,R2=(R-b)/2019; if(L1&gt;R1 || L2&gt;R2) return false; if(a&lt;b) return L1&lt;=R2; else return L1&lt;R2;&#125;int main()&#123; int L=read(),R=read(); int ans=2019; for(int i=0;i&lt;2019;++i) for(int j=0;j&lt;2019;++j) if(judge(i,j,L,R)) ans=min(ans,i*j%2019); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; D Rain Flows into Dams 设第 $i$ 座山收到的水为 $x_i$ ,可以把题目中所给的条件表示为方程组的形式. 题目保证 $x$ 有唯一的一组合法解,所以直接将这个方程组解出来,得到的就是那组合法解,过程中不必判断. 尝试手动解.首先将所有方程加起来可以得到 $\sum x_i$ .每两个相邻的方程相减可以得到 $x_3-x_1,x_4-x_2,x_5-x_3,x_6-x_4\dots$ 这些值. 求前缀和就可以得到每个奇数位置与 $x_1$ 的差值,每个偶数位置与 $x_2$ 的差值.再根据 $x_n+x_1$ 将 $x_1$ 以及所有奇数位置的 $x$ 解出,用 $\sum x_i$ 减去奇数位置的总和,得到偶数位置的总和,再根据求得的差分解出所有偶数位置 $x$. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n;ll sum=0,a[MAXN],t[MAXN],x[MAXN];void pr()&#123; for(int i=1;i&lt;=n;++i) printf("%lld ",x[i]); puts("");&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) sum+=(a[i]=read()); for(int i=3;i&lt;=n;i+=2) &#123; t[i]=a[i-1]-a[i-2]; t[i]+=t[i-2]; &#125; x[1]=a[n]-t[n]; for(int i=1;i&lt;=n;i+=2) sum-=(x[i]=x[1]+2*(t[i])); if(n==3) &#123; x[2]=sum; pr(); return 0; &#125; ll tot=0,cnt=1; for(int i=4;i&lt;n;i+=2) &#123; t[i]=2*(a[i-1]-a[i-2]); t[i]+=t[i-2]; tot+=t[i]; ++cnt; &#125; x[2]=(sum-tot)/(cnt); for(int i=4;i&lt;n;i+=2) x[i]=x[2]+t[i]; pr(); return 0;&#125; E Virus Tree 2 只需满足每个点与它的父亲颜色不同,每个点与它父亲的父亲颜色不同,每个点的所有儿子颜色不同. 设 $f(i)$ 表示当节点 $i$ 的颜色已被确定时,子树 $i$ 内染色的方案数,随便 $dfs$ 一下即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1],ecnt=0;void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;const int P=1e9+7;int add(int a,int b)&#123; return (a + b) % P;&#125;int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int fac[MAXN],invfac[MAXN];int n,k,f[MAXN],Deg[MAXN];int fa[MAXN];int A(int N,int M)&#123; if(N&gt;M) return 0; return mul(fac[M],invfac[M-N]);&#125;int dfs(int u,int num,int Fa)&#123; fa[u]=Fa; if(num&lt;=0) return f[u]=0; int deg=(u==1?Deg[u]:Deg[u]-1); if(!deg) return f[u]=1; if(u==1) f[u]=A(deg,k-1); else f[u]=A(deg,k-2); if(!f[u]) return f[u]; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==Fa) continue; if(u==1) dfs(v,k-1,u); else dfs(v,k-2,u); f[u]=mul(f[u],f[v]); &#125; return f[u];&#125;int main()&#123; n=read(),k=read(); fac[1]=1; for(int i=2;i&lt;=k;++i) fac[i]=mul(fac[i-1],i); invfac[k]=fpow(fac[k],P-2); for(int i=k-1;i&gt;=0;--i) invfac[i]=mul(invfac[i+1],i+1); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); ++Deg[u],++Deg[v]; &#125; cout&lt;&lt;mul(dfs(1,k,0),k)&lt;&lt;endl; return 0;&#125; F Colorful Tree 不难发现对于每个询问 $(x,y,u,v)$ 只需要找出 $u\to v$ 的路径上颜色为 $x$ 的边的数目 $cnt$ 以及这些边的总长度 $sum$ .答案就是 $dist(u,v)-sum+cnt\cdot y$ . 询问一段区间某种颜色的数目/权值和,用主席树进行维护.时间复杂度 $O(n\cdot log^n)$ . 树上的主席树并不需要像线段树那样维护 $dfs$ 序.直接在第一次 $dfs$ 时每个点复制父亲的信息,再修改即可.询问就是 $rt[u]+rt[v]-rt[LCA]-rt[LCA.fa]$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;struct Edge&#123; int nx,to;&#125;E[MAXN&lt;&lt;1];int head[MAXN],ecnt=0;int col[MAXN],val[MAXN];void addedge(int u,int v)&#123; ++ecnt; E[ecnt].nx=head[u]; E[ecnt].to=v; head[u]=ecnt;&#125;void ins(int u,int v)&#123; addedge(u,v); addedge(v,u);&#125;int n,m;int dfn[MAXN],idx=0;int dep[MAXN],fa[MAXN],top[MAXN];int siz[MAXN],mxson[MAXN],dist[MAXN];struct PreSegTree&#123; int nodeidx; struct node &#123; int cnt,sum; int ls,rs; &#125;Tree[MAXN*30]; PreSegTree()&#123;nodeidx=0;Tree[0].cnt=Tree[0].sum=0;&#125;#define root Tree[o] void upd(int &amp;o,int pre,int l,int r,int pos,int c) &#123; o=++nodeidx; root=Tree[pre]; if(!pos) return; if(l==r) &#123; root.cnt++; root.sum+=c; return; &#125; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) upd(root.ls,Tree[pre].ls,l,mid,pos,c); else upd(root.rs,Tree[pre].rs,mid+1,r,pos,c); &#125; int query_sum(int o,int l,int r,int pos) &#123; if(!o) return root.sum; if(l==r) return root.sum; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) return query_sum(root.ls,l,mid,pos); else return query_sum(root.rs,mid+1,r,pos); &#125; int query_cnt(int o,int l,int r,int pos) &#123; if(!o) return root.cnt; if(l==r) return root.cnt; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) return query_cnt(root.ls,l,mid,pos); else return query_cnt(root.rs,mid+1,r,pos); &#125;&#125;T;int rt[MAXN];void dfs1(int u,int Fa)&#123; fa[u]=Fa; dep[u]=dep[Fa]+1; siz[u]=1; T.upd(rt[u],rt[Fa],1,n,col[u],val[u]); for(int i=head[u];i;i=E[i].nx) &#123; int v=E[i].to; if(v==Fa) continue; dist[v]=dist[u]+val[v]; dfs1(v,u); siz[u]+=siz[v]; if(siz[v]&gt;siz[mxson[u]]) mxson[u]=v; &#125;&#125;void dfs2(int u,int tp)&#123; top[u]=tp; if(mxson[u]) dfs2(mxson[u],tp); for(int i=head[u];i;i=E[i].nx) &#123; int v=E[i].to; if(v==fa[u] || v==mxson[u]) continue; dfs2(v,v); &#125;&#125;void init()&#123; dfs1(1,0); dfs2(1,1);&#125;int getLCA(int x,int y)&#123; while(top[x]!=top[y]) &#123; if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); x=fa[top[x]]; &#125; return dep[x]&lt;dep[y]?x:y;&#125;int Solve(int c,int d,int x,int y)&#123; int LCA=getLCA(x,y); int cnt=0,sum=0; cnt+=T.query_cnt(rt[x],1,n,c)+T.query_cnt(rt[y],1,n,c); cnt-=T.query_cnt(rt[LCA],1,n,c)+T.query_cnt(rt[fa[LCA]],1,n,c); sum+=T.query_sum(rt[x],1,n,c)+T.query_sum(rt[y],1,n,c); sum-=T.query_sum(rt[LCA],1,n,c)+T.query_sum(rt[fa[LCA]],1,n,c); int res=dist[x]+dist[y]-dist[LCA]-dist[fa[LCA]]; return res-sum+d*cnt;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); col[n+i]=read(),val[n+i]=read(); ins(u,n+i); ins(v,n+i); &#125; n=2*n-1; init(); while(m--) &#123; int x=read(),y=read(); int u=read(),v=read(); printf("%d\n",Solve(x,y,u,v)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>Atcoder</tag>
        <tag>树形dp</tag>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4551 树]]></title>
    <url>%2F2019%2F07%2F06%2Fbzoj-4551-%E6%A0%91%2F</url>
    <content type="text"><![CDATA[并查集. 大力用树剖 + 树状数组维护是 $O(n\cdot log^3n)$ 的. 考虑先将操作先全部离线下来,每个标记都打上,对于没有被打标记的点,用并查集将它与它的父亲合并. 然后从后往前处理操作,遇到询问就直接回答,遇到修改,其实是给某个点的标记次数 $-1$ ,删除后用并查集合并. 时间复杂度 $O(n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,Q;char buf[2];int head[MAXN],to[MAXN],nx[MAXN],ecnt=0;void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;struct opt&#123; int tp,x;&#125;q[MAXN];struct dsu&#123; int fa[MAXN]; void init() &#123; for(int i=1;i&lt;=n;++i) fa[i]=i; &#125; int Find(int x) &#123; if(x==fa[x]) return x; return (fa[x]=Find(fa[x])); &#125; void Merge(int u,int v) &#123; u=Find(u),v=Find(v); if(u!=v) fa[u]=v; &#125;&#125;DSU;int flag[MAXN],Fa[MAXN];void dfs(int u,int f)&#123; Fa[u]=f; if(!flag[u]) DSU.Merge(u,f); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; dfs(v,u); &#125;&#125;int ans[MAXN],tot=0;int main()&#123; n=read(),Q=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); &#125; flag[1]=1; for(int i=1;i&lt;=Q;++i) &#123; scanf("%s",buf); q[i].tp=(buf[0]=='C'); q[i].x=read(); if(q[i].tp) ++flag[q[i].x]; else ++tot; &#125; int pt=tot; DSU.init(); dfs(1,0); for(int i=Q;i&gt;=1;--i) &#123; int tp=q[i].tp,x=q[i].x; if(!tp) &#123; x=DSU.Find(x); ans[pt--]=x; &#125; else &#123; --flag[x]; if(!flag[x]) DSU.Merge(x,Fa[x]); &#125; &#125; for(int i=1;i&lt;=tot;++i) printf("%d\n",ans[i]); return 0;&#125;]]></content>
      <tags>
        <tag>并查集</tag>
        <tag>离线</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4552 排序]]></title>
    <url>%2F2019%2F07%2F04%2Fbzoj-4552-%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[二分 + 线段树. 开始以为是中间有多次询问,想了两节课.读题发现,只在最后询问一次,那就很友好了. 操作/贡献都只与相对大小有关,经典套路就是二分答案,将数列变为 $0/1$ 数列,就可以直接用线段树维护了. 时间复杂度 $O(m\cdot log^2n)$ . 修改操作注意特判 $L&gt;R$ 的情况. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,m,q,a[MAXN];struct SegTree&#123; struct node &#123; int sum,tag; &#125;Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1] void pushup(int o) &#123; root.sum=lson.sum+rson.sum; &#125; void BuildTree(int o,int l,int r,int k) &#123; root.tag=-1; if(l==r) &#123; if(a[l]&gt;=k) root.sum=1; else root.sum=0; return; &#125; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid,k); BuildTree(o&lt;&lt;1|1,mid+1,r,k); pushup(o); &#125; void Modifiy(int o,int l,int r,int c) &#123; root.sum=(r-l+1)*c; root.tag=c; &#125; void pushdown(int o,int l,int r) &#123; if(root.tag!=-1) &#123; int mid=(l+r)&gt;&gt;1; Modifiy(o&lt;&lt;1,l,mid,root.tag); Modifiy(o&lt;&lt;1|1,mid+1,r,root.tag); root.tag=-1; &#125; &#125; void upd(int o,int l,int r,int L,int R,int c) &#123; if(L&gt;R) return; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; Modifiy(o,l,r,c); return; &#125; pushdown(o,l,r); int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) upd(o&lt;&lt;1|1,mid+1,r,L,R,c); pushup(o); &#125; int query(int o,int l,int r,int L,int R) &#123; if(L&gt;R) return 0; if(L&lt;=l &amp;&amp; r&lt;=R) return root.sum; pushdown(o,l,r); int mid=(l+r)&gt;&gt;1; int res=0; if(L&lt;=mid) res+=query(o&lt;&lt;1,l,mid,L,R); if(R&gt;mid) res+=query(o&lt;&lt;1|1,mid+1,r,L,R); return res; &#125;&#125;T;struct opt&#123; int op,L,R;&#125;Q[MAXN];bool check(int k)&#123; T.BuildTree(1,1,n,k); for(int i=1;i&lt;=m;++i) &#123; int L=Q[i].L,R=Q[i].R; int tot1=T.query(1,1,n,L,R); int tot0=R-L+1-tot1; if(Q[i].op==0) &#123; T.upd(1,1,n,L,L+tot0-1,0); T.upd(1,1,n,L+tot0,R,1); &#125; else &#123; T.upd(1,1,n,L,L+tot1-1,1); T.upd(1,1,n,L+tot1,R,0); &#125; &#125; return (bool)(T.query(1,1,n,q,q));&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); for(int i=1;i&lt;=m;++i) &#123; Q[i].op=read(); Q[i].L=read(); Q[i].R=read(); &#125; q=read(); int L=1,R=n,ans=-1; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(check(mid)) ans=mid,L=mid+1; else R=mid-1; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>二分</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4550 小奇的博弈]]></title>
    <url>%2F2019%2F07%2F02%2Fbzoj-4550-%E5%B0%8F%E5%A5%87%E7%9A%84%E5%8D%9A%E5%BC%88%2F</url>
    <content type="text"><![CDATA[$Nimk$ 游戏 + $dp$ 计数. 最优策略下,白棋显然都选择右移,黑棋都选择左移.如果把每对棋子的间隔长度看做一堆石子的石子数目,那么此题就是一个 $Nim$ 游戏的变种,每次最多可以选 $d$ 堆石子进行操作.这个东西叫做 $Nimk$ 游戏. $Nimk$ 游戏先手必败条件:对于每个二进制位 $i$ ,所有石子数目的第 $i$ 位之和为 $d+1$ 的倍数. 即, $\forall i,(\sum_j(a_j&gt;&gt;i)\&amp;1)\mod d+1=0​$ . 转成 $Nimk$ 模型,有 $\frac k 2$ 堆石子,石子总数不超过 $n-k$ 个.求必胜方案数可以用总方案数 $n \choose k$ 减去必败方案数. 令 $f(i,j)$ 表示从第 $0$ 位开始算,已经考虑了二进制的前 $i$ 位,用掉了 $j$ 个石子的方案数.转移有: $$f(i+1,j+x\cdot (d+1)\cdot 2^i)+=f(i,j)\cdot {k/2 \choose x\cdot(d+1)}$$ 枚举 $x$ 进行转移,必败方案数就是 $\sum f(inf,j)\cdot {n-j-k/2\choose k/2}$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;const int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;inline void upd(int &amp;a,int b)&#123; a=add(a,b);&#125;const int MAXK=101,MAXN=1e4+10;int C[MAXN][MAXK],f[20][MAXN];int main()&#123; int n=read(),k=read(),d=read(); C[0][0]=1; for(int i=1;i&lt;=n;++i) &#123; C[i][0]=1; for(int j=1;j&lt;=i &amp;&amp; j&lt;=k;++j) C[i][j]=add(C[i-1][j],C[i-1][j-1]); &#125; f[0][0]=1; for(int i=0;i&lt;=16;++i) for(int j=0;j&lt;=n-k;++j) for(ll x=0;x*(d+1)&lt;=k/2 &amp;&amp; x*(d+1)*(1LL&lt;&lt;i)+j&lt;=n-k;++x) upd(f[i+1][x*(d+1)*(1&lt;&lt;i)+j],mul(f[i][j],C[k/2][x*(d+1)])); int ans=0; for(int j=0;j&lt;=n-k;++j) upd(ans,mul(f[16][j],C[n-j-k/2][k/2])); ans=add(-ans,C[n][k]); ans%=P,ans+=P,ans%=P; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4548 小奇的糖果]]></title>
    <url>%2F2019%2F06%2F29%2Fbzoj-4548-%E5%B0%8F%E5%A5%87%E7%9A%84%E7%B3%96%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[树状数组. 题面有些歧义,线段上/下方的点是指横坐标也落在线段范围内的点.不包含所有颜色是指不包含所有 $k$ 种颜色. 要求不包含所有颜色,即至少有一种颜色没有包含.可以枚举这个颜色 $c$ ,计算不包含 $c$ 时的最大收益. 把所有点按照 $y$ 坐标从小到大排序,依次处理.如果对某一个点,以它的 $y$ 坐标为下边界画矩形,贪心画最大的,往两边拓展,直到遇到不能选的颜色为止.这个就是在对应颜色的 $set$ 里面找一下前驱后继. 以它的 $y$ 坐标为上边界同理,将 $y$ 坐标从大到小排序做上面过程即可.画矩形时的收益用树状数组维护. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;struct node&#123; int x,y,col; bool operator &lt; (const node &amp;rhs) const &#123; return y&lt;rhs.y; &#125;&#125;a[MAXN];int n,m,ans=0,v[MAXN];struct FenwickTree&#123; int bit[MAXN]; void init()&#123;memset(bit,0,sizeof bit);&#125;#define lowbit(x) x&amp;(-x) void add(int x,int c) &#123; for(;x&lt;=n;x+=lowbit(x)) bit[x]+=c; &#125; int sum(int x) &#123; int s=0; for(;x;x-=lowbit(x)) s+=bit[x]; return s; &#125;&#125;T;set&lt;int&gt; s[MAXN];set&lt;int&gt;::iterator it;void solve()&#123; T.init(); for(int i=1;i&lt;=m;++i) &#123; s[i].clear(); s[i].insert(0); s[i].insert(n+1); &#125; for(int i=1,j=1;i&lt;=n;i=j) &#123; while(j&lt;=n &amp;&amp; a[j].y==a[i].y) ++j; for(int k=i;k&lt;j;++k) &#123; int tmp=T.sum(*s[a[k].col].lower_bound(a[k].x)-1); tmp-=T.sum(*--s[a[k].col].upper_bound(a[k].x)); ans=max(ans,tmp); &#125; for(int k=i;k&lt;j;++k) &#123; T.add(a[k].x,1); s[a[k].col].insert(a[k].x); &#125; &#125; for(int i=1;i&lt;=m;++i) for(it=s[i].begin();*it!=n+1;) &#123; int j=*it; ++it; ans=max(ans,T.sum(*it-1)-T.sum(j)); &#125;&#125;int main()&#123; int C=read(); while(C--) &#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) &#123; a[i].x=read(); a[i].y=read(); a[i].col=read(); v[i]=a[i].x; &#125; sort(a+1,a+1+n); sort(v+1,v+1+n); int cnt=unique(v+1,v+1+n)-v-1; for(int i=1;i&lt;=n;++i) a[i].x=lower_bound(v+1,v+1+cnt,a[i].x)-v; ans=0; solve(); for(int i=1;i*2&lt;=n;++i) swap(a[i],a[n+1-i]); solve(); cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>STL</tag>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190629]]></title>
    <url>%2F2019%2F06%2F29%2Ftest20190629%2F</url>
    <content type="text"><![CDATA[$\%\ nicodafagood$ . $quadratic$ 给 $n$ 个二次项系数为 $1$ 的二次函数,分别求 $x=1\sim n$ 时这 $n$ 个函数中的最小值. $n\leq 10^5$ . 因为二次项贡献固定,所以只需要算一次项和常数项的贡献,就相当于 $n$ 条直线在某个位置的最小值. 用凸包或者李超线段树写一下就好了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e6+10;int n;int A[MAXN],B[MAXN];ll k[MAXN],b[MAXN];const ll inf=1e18;inline ll calc(int seg,int x)&#123; return k[seg]*x+b[seg];&#125;inline int sgn(ll x)&#123; if(!x) return 0; return x&lt;0?-1:1;&#125;ll ans;struct SegTree&#123; int nodecnt; SegTree()&#123;nodecnt=0;&#125; struct node &#123; int ls,rs,id; ll mi; node()&#123;ls=rs=id=0;mi=inf;&#125; &#125;Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[root.ls]#define rson Tree[root.rs] void BuildTree(int l,int r) &#123; int o=++nodecnt; if(l==r) return; int mid=(l+r)&gt;&gt;1; root.ls=nodecnt+1; BuildTree(l,mid); root.rs=nodecnt+1; BuildTree(mid+1,r); &#125; void pushup(int o,int l,int r) &#123; if(root.id) root.mi=k[root.id]&lt;0?calc(root.id,r):calc(root.id,l); else root.mi=inf; if(l&lt;r) &#123; root.mi=min(root.mi,lson.mi); root.mi=min(root.mi,rson.mi); &#125; &#125; void upd(int o,int l,int r,int L,int R,int seg) &#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; if(!root.id) &#123; root.id=seg; pushup(o,l,r); return; &#125; bool f1=calc(root.id,l)&lt;calc(seg,l); bool f2=calc(root.id,r)&lt;calc(seg,r); if(f1==f2 || l==r) &#123; if(!f1) &#123; root.id=seg; pushup(o,l,r); &#125; return; &#125; int mid=(l+r)&gt;&gt;1; bool f3=calc(root.id,mid)&lt;calc(seg,mid); if(f1==f3) &#123; if(f1) upd(root.rs,mid+1,r,L,R,seg); else upd(root.rs,mid+1,r,L,R,root.id),root.id=seg; &#125; else &#123; if(f1) upd(root.ls,l,mid,L,R,root.id),root.id=seg; else upd(root.ls,l,mid,L,R,seg); &#125; &#125; else &#123; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd(root.ls,l,mid,L,R,seg); if(R&gt;mid) upd(root.rs,mid+1,r,L,R,seg); &#125; pushup(o,l,r); &#125; void query(int o,int l,int r,int pos) &#123; if(root.id) &#123; if(k[root.id]&lt;0) ans=min(ans,calc(root.id,min(r,pos))); else ans=min(ans,calc(root.id,max(l,pos))); &#125; if(l==r) &#123; ans=min(ans,root.mi); return; &#125; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) query(root.ls,l,mid,pos); else query(root.rs,mid+1,r,pos); &#125;&#125;T;int main()&#123; freopen("quadratic.in","r",stdin); freopen("quadratic.out","w",stdout); n=read(); b[0]=inf; for(int i=1;i&lt;=n;++i) A[i]=read(); T.BuildTree(1,n); for(int i=1;i&lt;=n;++i) &#123; B[i]=read(); k[i]=-2LL*A[i]; b[i]=1LL*A[i]*A[i]+B[i]; T.upd(1,1,n,1,n,i); &#125; for(int i=1;i&lt;=n;++i) &#123; ans=inf; T.query(1,1,n,i); printf("%lld\n",ans+1LL*i*i); &#125; return 0;&#125; $equation$ 给定 $a,b,p,x$ ,求解 $[1,x]$ 中,满足 $n\cdot a^n\equiv b \mod p$ 的 $n$ 的数目. $0\leq a,b&lt;p\leq 10^6.x\leq 10^{12}.$ 保证 $p$ 为质数. 根据费马小定理,指数可以对 $p-1$ 取模.而 $p$ 的范围比较小,于是直接枚举 $n$ 对 $p-1$ 取模的结果 $i$. 即,在 $[0,p-2]$ 内枚举 $i$ ,对应贡献为满足下面两个条件的 $n$ 的数目. $$n\equiv i (mod\ p-1),n\equiv b\cdot a^{-i}(mod\ p)$$ 用 $CRT$ 求解 $p\cdot (p-1)$ 内的 $n$ ,再计算 $[1,x]$ 内对应 $n$ 数目即可. 时间复杂度 $O(p\cdot logp)$ . $datastructure$ 给定一个长度为 $n$ 的正整数数列 $a$ ,要求支持下列操作,共 $m$ 次. 将区间 $[l,r]$ 内的元素加上 $x$ . 将区间 $[l,r]$ 内的元素开平方,向下取整. 询问区间 $[l,r]$ 内的元素平方总和. 询问区间 $[l,r]$ 内的元素总和. $n,m\leq 10^5,1\leq a_i,x\leq 10^9$ . 考虑用线段树维护询问的答案. 有一档部分分是没有操作 $1$ 的,可以直接做,对每个区间记录元素是否都是 $1$ ,开方时讨论即可. 正解做法类似,不过优化的方法不同.开方 $[l,r]$ 时,先询问 $[l,r]$ 内的最大值 $a$ 与最小值 $b$ . 开方时都向下取整,若 $\sqrt {a}=\sqrt {b}$ ,就将这个区间全部修改为 $\sqrt a$ .若 $a-\sqrt a=b-\sqrt b$ ,就给这个区间全部减去 $a-\sqrt a$ ,因为这个差是关于元素大小不下降的. 若两种情况都不满足,就暴力修改区间内所有元素. 因为一次区间加最多会使得 $logn$ 个结点的 $a-b$ 变化,而变化后我们最多暴力开 $6$ 次方它就变成 $1$ 了,所以操作 $1,2$ 复杂度均摊下来,一次为 $O(logn)$ .于是总时间复杂度 $O(nlogn)$ . $unsigned\ long\ long$ 输出指令是 $\%llu$ .考试写成 $\%u$ 了. $70\to 15$ .]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>数学</tag>
        <tag>test</tag>
        <tag>李超线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1186]]></title>
    <url>%2F2019%2F06%2F29%2FCF1186%2F</url>
    <content type="text"><![CDATA[$Div.2$ 冲上来就 $pp$ 了前 $4$ 个题,感觉终于可以上个分,然后就 $Unrated$ 了. A Vus the Cossack and a Contest 签到题. 123456789101112131415161718192021222324#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int main()&#123; int n=read(),m=read(),k=read(); if(n&lt;=m &amp;&amp; n&lt;=k) puts("Yes"); else puts("No"); return 0;&#125; B Vus the Cossack and a Game 题已经被爆破了. 有一个 $n\times m$ 的网格,要在里面放上若干 $1\times 2$ 的骨牌,要求任意两个八连通的格子不能被同时占据,求最多放置的骨牌数目. $n,m\leq 10^9$ . 暂时还不知道有没有可行的做法. C Vus the Cossack and Strings 其实可以直接算 $1$ 的个数是否相同,若相同,则不同的位置一定是偶数个. 因为两个 $1$ 如果对齐放,没有贡献,如果错开放,贡献是 $2$ ,也相当于没有贡献. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e6+10;int n,m,a[MAXN],b[MAXN];char buf[MAXN];int k[MAXN];void init()&#123; scanf("%s",buf+1); n=strlen(buf+1); for(int i=1;i&lt;=n;++i) a[i]=buf[i]-'0'; scanf("%s",buf+1); m=strlen(buf+1); for(int i=1;i&lt;=m;++i) b[i]=buf[i]-'0';&#125;int query(int l,int r)&#123; return k[r]^k[l-1];&#125;int main()&#123; init(); for(int i=2;i&lt;=n;++i) if(a[i]!=a[i-1]) k[i]^=1; for(int i=1;i&lt;=n;++i) k[i]^=k[i-1]; int ans=0,s=0; for(int i=1;i&lt;=m;++i) if(a[i]!=b[i]) s^=1; if(s==0) ++ans; for(int i=2;i+m-1&lt;=n;++i) &#123; s^=query(i,i+m-1); if(s==0) ++ans; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; D Vus the Cossack and Numbers 考虑如果将所有数都向下取整,得到的和为 $-sum$ ,那么显然需要将 $sum$ 个数改成向上取整. 只要不是整数都能改,所以改掉 $sum$ 个就可以了. 12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;const double eps=1e-8;int n;double a[MAXN],upv[MAXN],downv[MAXN],delta[MAXN];bool flag[MAXN];void pr()&#123; for(int i=1;i&lt;=n;++i) printf("%d\n",flag[i]?(int)ceil(a[i]):(int)floor(a[i]));&#125;int main()&#123; n=read(); double sum=0; for(int i=1;i&lt;=n;++i) &#123; scanf("%lf",&amp;a[i]); upv[i]=ceil(a[i])-a[i]; downv[i]=floor(a[i])-a[i]; delta[i]=upv[i]-downv[i]; sum-=downv[i]; &#125; for(int i=1;i&lt;=n &amp;&amp; fabs(sum)&gt;eps;++i) if(fabs(delta[i])&gt;eps) flag[i]=true,sum-=1.0; pr(); return 0;&#125; E Vus the Cossack and a Field 可以直接算二维前缀和再相减.记 $f(x,y)$ 表示以 $(1,1)$ 为左上角, $(x,y)$ 为右下角的子矩形的权值和. 那么答案就是 $f(x_2,y_2)-f(x_2,y_1-1)-f(x_1-1,y_2)+f(x_1-1,y_1-1)$ . 先预处理出 $x\leq n,y\leq m$ 内的 $f(x,y)$ ,就是二维前缀和. 然后计算所有的 $f(x,y)$ ,就可以将它分割成整的块的不整的块,不整的块用预处理的前缀和算就好了. F Vus the Cossack and a Graph 待更. 有个贪心的假做法,不知道为什么很多人都用这个水过去了.]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4547 小奇的集合]]></title>
    <url>%2F2019%2F06%2F27%2Fbzoj-4547-%E5%B0%8F%E5%A5%87%E7%9A%84%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[贪心 + 矩阵快速幂. 显然可以贪心,每次取最大的两个数加起来.答案为初始所有元素之和加上每次操作加入的数. 记初始时最大数为 $a$ ,次大数为 $b$ ,因为题目保证答案非负,所以 $a,b$ 不可能都为负. 若 $a,b$ 都非负,那么加入的数就是一个类斐波那契数列,用矩阵快速幂加速计算就可以了. 若 $a&gt;0$ , $b&lt;0$ ,那么就先算出最少要加几次能使得有两个非负数.只要 $k$ 不为 $0$ ,又保证最终答案为非负,那么一定能在 $k$ 次之内得到两个非负数. 这部分贡献可以直接算出,然后再对剩余次数计算类斐波那契数列部分的贡献即可. 记得答案 $+$ 模数后再输出. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int inf=0x7fffffff;const int P=1e7+7;const int inv2=(P+1)&gt;&gt;1;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;struct Matrix&#123; int A[3][3]; Matrix()&#123;memset(A,0,sizeof A);&#125; Matrix operator * (const Matrix &amp;rhs) const &#123; Matrix res; for(int k=0;k&lt;3;++k) for(int i=0;i&lt;3;++i) for(int j=0;j&lt;3;++j) res.A[i][j]=add(res.A[i][j],mul(A[i][k],rhs.A[k][j])); return res; &#125;&#125;;Matrix fpow(Matrix a,int b)&#123; Matrix res; for(int i=0;i&lt;3;++i) res.A[i][i]=1; while(b) &#123; if(b&amp;1) res=res*a; a=a*a; b&gt;&gt;=1; &#125; return res;&#125;int calc(int a,int b,int k)&#123; assert(k&gt;=0); Matrix trans,st; trans.A[0][0]=trans.A[0][1]=1; trans.A[1][0]=1; trans.A[2][0]=trans.A[2][1]=trans.A[2][2]=1; st.A[0][0]=a; st.A[1][0]=b; st=fpow(trans,k)*st; return st.A[2][0];&#125;int main()&#123; int n=read(),k=read(),ans=0; int a=-inf,b=-inf; while(n--) &#123; int x=read(); ans=add(ans,x); if(x&gt;a) b=a,a=x; else if(x&gt;b) b=x; &#125; if(a&gt;=0 &amp;&amp; b&gt;=0) ans=add(ans,calc(a,b,k)); else &#123; int tmp=(-b+a-1)/a; ans=add(ans,mul(tmp,b)); ans=add(ans,mul(a,mul(inv2,mul(tmp+1,tmp)))); k-=tmp; b=tmp*a+b; if(b&gt;a) swap(a,b); ans=add(ans,calc(a,b,k)); &#125; cout&lt;&lt;add(ans,P)&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>矩阵优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 1041 圆上的整点]]></title>
    <url>%2F2019%2F06%2F26%2Fbzoj-1041-%E5%9C%86%E4%B8%8A%E7%9A%84%E6%95%B4%E7%82%B9%2F</url>
    <content type="text"><![CDATA[有技巧的大力枚举. 求 $x^2+y^2=r^2$ 的整数解组数,只需要求出 $x,y&gt;0$ 的组数,再 $\times 4,+4$ 即为答案. 方程变形得到 $y^2=(r+x)(r-x)$ ,记 $d=gcd(r+x,r-x)$ ,则 $y^2=d^2\cdot \frac {r+x} d \cdot \frac {r-x} d$ . 记 $u^2=\frac {r+x} d,v^2=\frac {r-x} d,u&gt;v&gt;0$ .则 $2r=d(u^2+v^2),2x=d(u^2-v^2),y=uvd$ . 因为 $d$ 是 $2r$ 的约数,所以大力枚举 $d$ ,再大力枚举 $u$ ,计算出 $v$ 后再验证 $u&gt;v$ 及 $gcd(u,v)=1$ 是否成立即可. 时间复杂度 $O(r^{3\over 4} \cdot \log r)​$ .实际上跑不满,因为枚举 $d​$ 是 $O(r^{1\over 2})​$ 的,而只有 $d​$ 为 $2r​$ 约数时才枚举 $u​$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;ll gcd(ll a,ll b)&#123; if(!b) return a; return gcd(b,a%b);&#125;int check(ll r,ll d,ll u)&#123; ll v2=2*r/d-u*u; ll v=sqrt(v2); if(v*v!=v2) return 0; if(u&lt;=v) return 0; ll x=d*(u*u-v*v); if(x&amp;1) return 0; x/=2; if(gcd(u,v)!=1) return 0; return 1;&#125;int main()&#123; ll r=read(); ll ans=0; for(ll d=1;d*d&lt;=2*r;++d) &#123; if(2*r%d==0) &#123; for(ll u=1;u*u&lt;2*r/d;++u) ans+=check(r,d,u); ll D=2*r/d; if(D!=d) &#123; for(ll u=1;u*u&lt;2*r/D;++u) ans+=check(r,D,u); &#125; &#125; &#125; ans*=4; ans+=4; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4538 网络]]></title>
    <url>%2F2019%2F06%2F25%2Fbzoj-4538-%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[整体二分 + 树状数组. 如果断掉一个点,将经过它的链给撤去,就会比较麻烦.换一个思路,二分答案 $mid$ ,如果所有权值 $\geq mid$ 的链都经过了它,那么真实答案就 $\leq mid$ ,否则 $\geq mid$ . 于是只加入权值 $\geq mid$ 的链,判断该点被覆盖的次数.链的覆盖有一个比较经典的套路,若一条链首尾是 $u,v$ ,就将 $u,v$ 处的权值 $+1$ ,将 $u,v$ 的 $lca$ 以及 $lca$ 的父亲节点的权值 $-1$ ,查询一个点 $x$ 被覆盖的次数,就是查询子树 $x$ 内所有点的权值和.这个可以用一个树状数组来实现. 这些操作是满足整体二分的要求的,所以再套一个整体二分一起处理.时间复杂度 $O(nlog^2n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=3e5+10;int n,m,ans[MAXN],qcnt=0;struct Node&#123; int type,id; int a,b,v,t,x;&#125;q[MAXN&lt;&lt;2],ql[MAXN],qr[MAXN];struct FenwickTree&#123;#define lowbit(x) x&amp;(-x) int bit[MAXN]; void add(int x,int c) &#123; if(!x) return; for(;x&lt;=n;x+=lowbit(x)) bit[x]+=c; &#125; int sum(int x) &#123; int s=0; for(;x;x-=lowbit(x)) s+=bit[x]; return s; &#125; int query(int l,int r) &#123; return sum(r)-sum(l-1); &#125;&#125;T;int ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int fa[MAXN],mxson[MAXN],siz[MAXN];int dep[MAXN],dfnidx=0,dfn[MAXN],top[MAXN];void dfs1(int u,int Fa)&#123; dep[u]=dep[Fa]+1; siz[u]=1; fa[u]=Fa; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==Fa) continue; dfs1(v,u); siz[u]+=siz[v]; if(siz[v]&gt;siz[mxson[u]]) mxson[u]=v; &#125;&#125;void dfs2(int u,int tp)&#123; top[u]=tp; dfn[u]=++dfnidx; if(mxson[u]) dfs2(mxson[u],tp); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v!=fa[u] &amp;&amp; v!=mxson[u]) dfs2(v,v); &#125;&#125;int LCA(int x,int y)&#123; while(top[x]!=top[y]) &#123; if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); x=fa[top[x]]; &#125; return dep[x]&lt;dep[y]?x:y;&#125;int val[MAXN],totv=0;int pcnt=0,pos[MAXN];void upd(int a,int b,int k)&#123; int lca=LCA(a,b); T.add(dfn[a],k); T.add(dfn[b],k); T.add(dfn[lca],-k); T.add(dfn[fa[lca]],-k);&#125;void solve(int l,int r,int L,int R)&#123; if(l&gt;r || L&gt;R) return; if(l==r) &#123; for(int i=L;i&lt;=R;++i) if(q[i].type==2) ans[q[i].id]=val[l]; return; &#125; int mid=val[(l+r)&gt;&gt;1],cntl=0,cntr=0; int tot=0; for(int i=L;i&lt;=R;++i) &#123; if(q[i].type==0) &#123; if(q[i].v&gt;mid) &#123; upd(q[i].a,q[i].b,1); ++tot; qr[++cntr]=q[i]; &#125; else ql[++cntl]=q[i]; &#125; else if(q[i].type==1) &#123; if(q[i].v&gt;mid) &#123; upd(q[i].a,q[i].b,-1); --tot; qr[++cntr]=q[i]; &#125; else ql[++cntl]=q[i]; &#125; else &#123; int x=q[i].x; int tmp=T.query(dfn[x],dfn[x]+siz[x]-1); if(tmp&gt;=tot) ql[++cntl]=q[i]; else qr[++cntr]=q[i]; &#125; &#125; for(int i=L;i&lt;=R;++i) if(q[i].type==0 &amp;&amp; q[i].v&gt;mid) upd(q[i].a,q[i].b,-1); else if(q[i].type==1 &amp;&amp; q[i].v&gt;mid) upd(q[i].a,q[i].b,1); for(int i=1;i&lt;=cntl;++i) q[L+i-1]=ql[i]; for(int i=1;i&lt;=cntr;++i) q[L+i+cntl-1]=qr[i]; int Mid=(l+r)&gt;&gt;1; solve(l,Mid,L,L+cntl-1); solve(Mid+1,r,L+cntl,R);&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; dfs1(1,0); dfs2(1,1); for(int i=1;i&lt;=m;++i) &#123; q[i].type=read(); if(q[i].type==0) &#123; q[i].a=read(); q[i].b=read(); q[i].v=read(); val[++totv]=q[i].v; &#125; else if(q[i].type==1) &#123; int t=read(); q[i]=q[t]; q[i].type=1; &#125; else &#123; q[i].x=read(); q[i].id=++qcnt; &#125; &#125; val[++totv]=-1; sort(val+1,val+1+totv); totv=unique(val+1,val+1+totv)-val-1; solve(1,totv,1,m); for(int i=1;i&lt;=qcnt;++i) printf("%d\n",ans[i]); return 0;&#125;]]></content>
      <tags>
        <tag>树状数组</tag>
        <tag>整体二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3110 K大数查询]]></title>
    <url>%2F2019%2F06%2F23%2Fbzoj-3110-K%E5%A4%A7%E6%95%B0%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[整体二分. 整体二分. 因为修改操作对二分答案的贡献是给一段区间 $+1$ ,所以用线段树来维护即可. 一次分治结束后并不能直接重置线段树,因为这样每次操作就和整个序列长度线性相关了. 将修改操作 $+1$ 的部分都 $-1$ 撤回即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=5e4+10;int n,m,ans[MAXN],qcnt=0;struct Node&#123; int a,b; ll c; int type,id;&#125;q[MAXN&lt;&lt;2],ql[MAXN],qr[MAXN];struct Segtree&#123; struct node &#123; ll sum,tag; node()&#123;sum=0;tag=0;&#125; &#125;Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1] void pushup(int o) &#123; root.sum=lson.sum+rson.sum; &#125; void modifiy(int o,int c,int l,int r) &#123; root.sum+=1LL*c*(r-l+1); root.tag+=c; &#125; void pushdown(int o,int l,int r) &#123; if(root.tag) &#123; int mid=(l+r)&gt;&gt;1; modifiy(o&lt;&lt;1,root.tag,l,mid); modifiy(o&lt;&lt;1|1,root.tag,mid+1,r); root.tag=0; &#125; &#125; void upd(int o,int l,int r,int L,int R,int c) &#123; if(l&gt;R || L&gt;r) return; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; modifiy(o,c,l,r); return; &#125; pushdown(o,l,r); int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) upd(o&lt;&lt;1|1,mid+1,r,L,R,c); pushup(o); &#125; ll query(int o,int l,int r,int L,int R) &#123; if(l&gt;R || L&gt;r) return 0; if(L&lt;=l &amp;&amp; r&lt;=R) return root.sum; ll res=0; pushdown(o,l,r); int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) res+=query(o&lt;&lt;1,l,mid,L,R); if(R&gt;mid) res+=query(o&lt;&lt;1|1,mid+1,r,L,R); return res; &#125;&#125;T;void solve(int l,int r,int L,int R)&#123; if(l&gt;r || L&gt;R) return; if(l==r) &#123; for(int i=L;i&lt;=R;++i) if(q[i].type==2) ans[q[i].id]=l; return; &#125; int cntl=0,cntr=0; int mid=(l+r)&gt;&gt;1; for(int i=L;i&lt;=R;++i) &#123; if(q[i].type==1) &#123; if(q[i].c&gt;mid) &#123; T.upd(1,1,n,q[i].a,q[i].b,1); qr[++cntr]=q[i]; &#125; else ql[++cntl]=q[i]; &#125; else &#123; ll tmp=T.query(1,1,n,q[i].a,q[i].b); if(tmp&gt;=q[i].c) qr[++cntr]=q[i]; else if(tmp&lt;q[i].c) &#123; q[i].c-=tmp; ql[++cntl]=q[i]; &#125; &#125; &#125; for(int i=L;i&lt;=R;++i) if(q[i].type==1 &amp;&amp; q[i].c&gt;mid) T.upd(1,1,n,q[i].a,q[i].b,-1); for(int i=1;i&lt;=cntl;++i) q[L+i-1]=ql[i]; for(int i=1;i&lt;=cntr;++i) q[L+i+cntl-1]=qr[i]; solve(l,mid,L,L+cntl-1); solve(mid+1,r,L+cntl,R);&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=m;++i) &#123; q[i].type=read(); q[i].a=read(); q[i].b=read(); q[i].c=read(); if(q[i].type==2) q[i].id=++qcnt; &#125; solve(-n,n,1,m); for(int i=1;i&lt;=qcnt;++i) printf("%d\n",ans[i]); return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>整体二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 1901 Dynamic Rankings]]></title>
    <url>%2F2019%2F06%2F21%2Fbzoj-1901-Dynamic-Rankings%2F</url>
    <content type="text"><![CDATA[整体二分. $solve(l,r,L,R)$ 表示当前处理编号在 $L\sim R$ 内的询问与修改操作,询问的答案在 $l\sim r$ 内. 每次处理时,若当前 $l=r$ ,就回答 $L\sim R$ 内的询问. 否则,二分答案 $mid$ ,对于编号在 $L\sim R$ 内的修改操作,按照修改的权值分成 $\le mid,&gt;mid$ 两边,若 $\le mid$ ,就在树状数组里将它对应的位置 $+1$ . 对于编号在 $L\sim R$ 内的询问操作,按照在树状数组中询问区间的权值和 $sum\le k,&gt;k$ 分成两边,若 $&lt;k$ ,就将 $k$ 减去这个 $sum$ . 然后将分出的修改与询问操作分到左右两边,递归解决即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int inf=1e9;const int MAXN=1e5+10;int n,m,a[MAXN];int ans[MAXN];struct node&#123; int x,y,k,id,type; node()&#123;x=y=k=id=type=0;&#125; node(int x,int y,int k,int id,int type):x(x),y(y),k(k),id(id),type(type) &#123;&#125;&#125;q[MAXN*3],ql[MAXN*3],qr[MAXN*3];struct FenwickTree&#123; int bit[MAXN]; FenwickTree()&#123;memset(bit,0,sizeof bit);&#125;#define lowbit(x) x&amp;(-x) void add(int x,int c) &#123; for(;x&lt;=n;x+=lowbit(x)) bit[x]+=c; &#125; int sum(int x) &#123; int s=0; for(;x;x-=lowbit(x)) s+=bit[x]; return s; &#125; int query(int l,int r) &#123; return sum(r)-sum(l-1); &#125;&#125;T;int cnt=0,qcnt=0;void solve(int l,int r,int L,int R)&#123; if(l&gt;r || L&gt;R) return; if(l==r) &#123; for(int i=L;i&lt;=R;++i) if(q[i].type) ans[q[i].id]=l; return; &#125; int mid=(l+r)&gt;&gt;1,cntl=0,cntr=0; for(int i=L;i&lt;=R;++i) &#123; if(q[i].type) &#123; int sum=T.query(q[i].x,q[i].y); if(sum&gt;=q[i].k) ql[++cntl]=q[i]; else &#123; q[i].k-=sum; qr[++cntr]=q[i]; &#125; &#125; else &#123; if(q[i].x&lt;=mid) &#123; T.add(q[i].id,q[i].y); ql[++cntl]=q[i]; &#125; else qr[++cntr]=q[i]; &#125; &#125; for(int i=1;i&lt;=cntl;++i) if(!ql[i].type) T.add(ql[i].id,-ql[i].y); for(int i=1;i&lt;=cntl;++i) q[L+i-1]=ql[i]; for(int i=1;i&lt;=cntr;++i) q[L+cntl+i-1]=qr[i]; solve(l,mid,L,L+cntl-1); solve(mid+1,r,L+cntl,R);&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) &#123; a[i]=read(); q[++cnt]=node(a[i],1,0,i,0); &#125; for(int i=1;i&lt;=m;++i) &#123; char buf[2]; scanf("%s",buf); if(buf[0]=='Q') &#123; int x=read(),y=read(),k=read(); q[++cnt]=node(x,y,k,++qcnt,1); &#125; else &#123; int x=read(),y=read(); q[++cnt]=node(a[x],-1,0,x,0); a[x]=y; q[++cnt]=node(a[x],1,0,x,0); &#125; &#125; solve(-inf,inf,1,cnt); for(int i=1;i&lt;=qcnt;++i) printf("%d\n",ans[i]); return 0;&#125;]]></content>
      <tags>
        <tag>离线</tag>
        <tag>整体二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4540 序列]]></title>
    <url>%2F2019%2F06%2F20%2Fbzoj-4540-%E5%BA%8F%E5%88%97%2F</url>
    <content type="text"><![CDATA[线段树. 这道题显然有一个莫队的做法,但它是带根号的,不够优秀.考虑用一个 $O(nlogn)$ 的做法解决它. 考虑将询问离线下来,从 $1$ 到 $n$ 依次加入元素,当前已经加入了第 $p$ 个元素,对每个位置维护 $val_i,sum_i$ ,分别表示区间 $[i,p]$ 的最小值,以及 $val_i$ 所有历史版本值之和.若 $i&gt;p$ ,则当前 $val_i=0$ . 加入第 $p$ 个元素后,立即回答所有 $r=p$ 的询问,答案显然是 $\sum_{i=l}^r sum_i$ . 于是我们只需要用一颗线段树来维护 $val,sum$ 这两个值(的区间和)即可. 考虑加入第 $p$ 个元素后如何修改 $val,sum$ .可以通过单调栈求出最小的 $i$ ,使得 $[i,p]$ 内最小值都为 $a_p$ .需要将 $[i,p]$ 这个区间内的 $val$ 都修改成 $a_p$ ,并让区间 $[1,p]$ 内的 $sum$ 加上对应位置新的 $val$. 时间复杂度 $O(nlogn)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,Q,A[MAXN];ll ans[MAXN];struct Query&#123; int l,id; Query(int l=0,int id=0):l(l),id(id) &#123;&#125;&#125;;vector&lt;Query&gt; V[MAXN];int stk[MAXN],tp=0;struct tag&#123; ll a,b,c,d; void init()&#123;a=1;b=c=d=0;&#125; tag(int a,int b,int c,int d):a(a),b(b),c(c),d(d) &#123;&#125; tag()&#123;init();&#125; bool valid() &#123; if(a==1 &amp;&amp; !b &amp;&amp; !c &amp;&amp; !d) return false; return true; &#125; tag operator + (const tag &amp;rhs) const &#123; tag Newtag; Newtag.a=rhs.a*a; Newtag.b=rhs.a*b+rhs.b; Newtag.c=rhs.c*a+c; Newtag.d=rhs.c*b+d+rhs.d; return Newtag; &#125;&#125;;struct SegTree&#123; struct node &#123; ll val,sum,len; tag t; bool TagValid() &#123; return t.valid(); &#125; &#125; Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1] void BuildTree(int o,int l,int r) &#123; root.val=root.sum=0; root.len=r-l+1; if(l==r) return; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); &#125; void pushup(int o) &#123; root.val=lson.val+rson.val; root.sum=lson.sum+rson.sum; &#125; void Modifiy(int o,tag Newtag) &#123; root.sum+=Newtag.c*root.val+Newtag.d*root.len; root.val=Newtag.a*root.val+Newtag.b*root.len; root.t=root.t+Newtag; &#125; void pushdown(int o) &#123; if(root.TagValid()) &#123; Modifiy(o&lt;&lt;1,root.t); Modifiy(o&lt;&lt;1|1,root.t); (root.t).init(); &#125; &#125; void upd(int o,int l,int r,int L,int R,tag Newtag) &#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; Modifiy(o,Newtag); return; &#125; pushdown(o); int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd(o&lt;&lt;1,l,mid,L,R,Newtag); if(R&gt;mid) upd(o&lt;&lt;1|1,mid+1,r,L,R,Newtag); pushup(o); &#125; ll query(int o,int l,int r,int L,int R) &#123; if(L&lt;=l &amp;&amp; r&lt;=R) return root.sum; pushdown(o); int mid=(l+r)&gt;&gt;1; ll res=0; if(L&lt;=mid) res+=query(o&lt;&lt;1,l,mid,L,R); if(R&gt;mid) res+=query(o&lt;&lt;1|1,mid+1,r,L,R); return res; &#125;&#125;T;int main()&#123; n=read(),Q=read(); for(int i=1; i&lt;=n; ++i) A[i]=read(); for(int i=1; i&lt;=Q; ++i) &#123; int l=read(),r=read(); V[r].push_back(Query(l,i)); &#125; T.BuildTree(1,1,n); for(int p=1; p&lt;=n; ++p) &#123; while(tp &amp;&amp; A[p]&lt;A[stk[tp]]) --tp; int i=stk[tp]+1; stk[++tp]=p; tag Newtag=tag(0,A[p],0,0); T.upd(1,1,n,i,p,Newtag); Newtag=tag(1,0,1,0); T.upd(1,1,n,1,p,Newtag); int siz=V[p].size(); for(int j=0; j&lt;siz; ++j) ans[V[p][j].id]=T.query(1,1,n,V[p][j].l,p); &#125; for(int i=1; i&lt;=Q; ++i) printf("%lld\n",ans[i]); return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>离线</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4537 最小公倍数]]></title>
    <url>%2F2019%2F06%2F19%2Fbzoj-4537-%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0%2F</url>
    <content type="text"><![CDATA[分块 + 并查集. 如果对于每个询问 $(u,v,a,b)$ ,我们都只加入 $a,b$ 均小于等于该询问的 $a,b$ 的边,那么答案为 $Yes$ 就等价于 $u,v$ 在同一个联通块中,并且这个连通块中有一条边的 $a$ 等于该询问的 $a$ ,有一条边的 $b$ 等于该询问的 $b$ . 若只有 $a$ 这一维的限制,可以将所有边,询问按 $a$ 排序后依次处理,用并查集维护. 但现在有 $a,b$ 两维的限制,而 $m$ 不是很大,考虑分块. 将所有边与询问按照 $a$ 的大小分成 $\sqrt m$ 块,按顺序处理每一块.处理第 $i$ 块的时候,将第 $1\sim i-1$ 块内的边和第 $i$ 块内的询问都拿出来,按照 $b$ 从小到大排序后依次处理,并用并查集维护连通性和联通块内最大的 $a,b$ . 第 $i$ 块内的边也可能产生贡献,因为它们的数量不超过 $\sqrt m$ ,所以每次遇到询问时,将这些边当中合法的加入,这个询问结束后再撤销就好了. 因为要实现可撤销的并查集,所以要按秩合并,不能路径压缩.时间复杂度 $O(m\sqrt m\cdot logm)$ . 注意 $a,b$ 可能为 $0$ ,所以初始化最大值要为 $-1$ .因为这个调了一节课. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=5e5+10;struct node&#123; int u,v,a,b,id; int type;&#125;eq[MAXN],tmp[MAXN];bool cmp1(node A,node B)&#123; return A.a&lt;B.a || (A.a==B.a &amp;&amp; A.type&lt;B.type);&#125;bool cmp2(node A,node B)&#123; return A.b&lt;B.b || (A.b==B.b &amp;&amp; A.type&lt;B.type);&#125;int ans[MAXN];int n,m,q,BlockSize,BlockNum;int L[MAXN],R[MAXN],lpos[MAXN],rpos[MAXN];struct Disjoint_Set_Union&#123; int fa[MAXN],siz[MAXN],maxa[MAXN],maxb[MAXN]; int OperationNum; struct Operation &#123; int x,NewFa,sizx,Orgmaxa,Orgmaxb; &#125;opt[MAXN]; void SaveOperation(int x,int NewFa,int sizx,int Orgmaxa,int Orgmaxb) &#123; int k=++OperationNum; opt[k].x=x; opt[k].NewFa=NewFa; opt[k].sizx=sizx; opt[k].Orgmaxa=Orgmaxa; opt[k].Orgmaxb=Orgmaxb; &#125; void Undo() &#123; while(OperationNum) &#123; int k=OperationNum--; int x=opt[k].x,NewFa=opt[k].NewFa; int sizx=opt[k].sizx; int Orgmaxa=opt[k].Orgmaxa; int Orgmaxb=opt[k].Orgmaxb; if(x!=NewFa) siz[NewFa]-=sizx; fa[x]=x; maxa[NewFa]=Orgmaxa; maxb[NewFa]=Orgmaxb; &#125; &#125; void init() &#123; OperationNum=0; for(int i=1;i&lt;=n;++i) &#123; fa[i]=i; siz[i]=1; maxa[i]=maxb[i]=-1; &#125; &#125; int Find(int x) &#123; if(fa[x]==x) return x; return Find(fa[x]); &#125; void addedge(int u,int v,int a,int b,bool flag) &#123; u=Find(u),v=Find(v); if(u!=v) &#123; if(siz[v]&gt;siz[u]) swap(u,v); if(flag) SaveOperation(v,u,siz[v],maxa[u],maxb[u]); siz[u]+=siz[v]; fa[v]=u; maxa[u]=max(maxa[u],a); maxa[u]=max(maxa[u],maxa[v]); maxb[u]=max(maxb[u],b); maxb[u]=max(maxb[u],maxb[v]); &#125; else &#123; if(flag) SaveOperation(u,u,siz[u],maxa[u],maxb[u]); maxa[u]=max(maxa[u],a); maxb[u]=max(maxb[u],b); &#125; &#125; bool check(int u,int v,int a,int b) &#123; u=Find(u),v=Find(v); if(u!=v) return false; if(maxa[u]!=a || maxb[u]!=b) return false; return true; &#125;&#125;DSU;void solve(int CurBlock)&#123; DSU.init(); int tot=0; for(int i=1;i&lt;L[CurBlock];++i) if(eq[i].type==1) tmp[++tot]=eq[i]; for(int i=L[CurBlock];i&lt;=R[CurBlock];++i) if(eq[i].type==2) tmp[++tot]=eq[i]; sort(tmp+1,tmp+1+tot,cmp2); for(int i=1;i&lt;=tot;++i) &#123; if(tmp[i].type==1) DSU.addedge(tmp[i].u,tmp[i].v,tmp[i].a,tmp[i].b,false); else &#123; if(tmp[i].id==44) &#123; int qq=1; &#125; for(int j=L[CurBlock];j&lt;=R[CurBlock];++j) if(eq[j].type==1 &amp;&amp; eq[j].a&lt;=tmp[i].a &amp;&amp; eq[j].b&lt;=tmp[i].b) DSU.addedge(eq[j].u,eq[j].v,eq[j].a,eq[j].b,true); ans[tmp[i].id]=DSU.check(tmp[i].u,tmp[i].v,tmp[i].a,tmp[i].b); DSU.Undo(); &#125; &#125;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=m;++i) &#123; eq[i].u=read(); eq[i].v=read(); eq[i].a=read(); eq[i].b=read(); eq[i].type=1; &#125; q=read(); for(int i=1;i&lt;=q;++i) &#123; eq[i+m].u=read(); eq[i+m].v=read(); eq[i+m].a=read(); eq[i+m].b=read(); eq[i+m].id=i; eq[i+m].type=2; &#125; sort(eq+1,eq+m+q+1,cmp1); BlockSize=sqrt(m+q); BlockNum=(m+q+BlockSize-1)/BlockSize; for(int i=1;i&lt;=BlockNum;++i) &#123; L[i]=R[i-1]+1; R[i]=L[i]+BlockSize-1; &#125; R[BlockNum]=m+q; for(int i=1;i&lt;=BlockNum;++i) solve(i); for(int i=1;i&lt;=q;++i) puts(ans[i]?"Yes":"No"); return 0;&#125;]]></content>
      <tags>
        <tag>并查集</tag>
        <tag>离线</tag>
        <tag>启发式合并</tag>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4518 征途]]></title>
    <url>%2F2019%2F06%2F18%2Fbzoj-4518-%E5%BE%81%E9%80%94%2F</url>
    <content type="text"><![CDATA[斜率优化 $dp$ . 推一下式子,记第 $i$ 天走的长度为 $t_i$ , $s=\sum t_i$ ,则 $S^2 \cdot m^2=(m\cdot \sum t_i^2)-s^2$ . 由于 $m,s$ 为定值,所以只需要最小化平方和 $\sum t_i^2$ . 设 $f(i,j)$ 表示走了 $i$ 天,恰好走了 $j$ 段路时的最小平方和, $sum_i$ 表示前 $i$ 段路的长度和. 暴力转移有 $f(i,j)=\min \lbrace f(i-1,k)+(sum_j-sum_k)^2,0\leq k&lt;j \rbrace$ ,可以看出暴力转移是 $O(n^3)$ 的. 若固定 $i$ ,可以看出 $j$ 这一维是满足斜率优化的,因为同时与 $j,k$ 有关的项是 $-2sum_j\cdot sum_k$ ,而 $sum_k$ 单调. 于是就可以进行斜率优化了.若用 $k_1$ 转移比 $k_2$ 更优 ( $k_1&gt;k_2$ ) ,由转移方程可得到: $$slope(k_1,k_2)={f(i-1,k_1)+sum_{k_1}^2-f(i-1,k_2)-sum_{k_2}^2 \over sum_{k_1}-sum_{k_2}} &lt; 2sum_j$$ 而斜率 $2sum_j$ 也是单调的,所以并不需要二分,直接暴力跳指针,用单调队列维护下凸壳即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=3e3+10;int n,m,sum[MAXN],s;ll f[MAXN][MAXN];double sqr(double x)&#123; return x*x;&#125;double slope(int i,int k1,int k2)&#123; return (f[i-1][k1]+sqr(sum[k1])-f[i-1][k2]-sqr(sum[k2]))/(1.0*sum[k1]-1.0*sum[k2]);&#125;int q[MAXN],head,tail;// [head,tail]int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) sum[i]=sum[i-1]+read(); memset(f,63,sizeof f); f[0][0]=0; for(int i=1;i&lt;=m;++i) &#123; head=tail=0; for(int j=1;j&lt;=n;++j) &#123; while(head&lt;tail &amp;&amp; slope(i,q[head+1],q[head])&lt;2*sum[j]) ++head; int k=q[head]; f[i][j]=f[i-1][k]+1LL*(sum[j]-sum[k])*(sum[j]-sum[k]); while(head&lt;tail &amp;&amp; slope(i,q[tail],q[tail-1])&gt;slope(i,q[tail],j)) --tail; q[++tail]=j; &#125; &#125; cout&lt;&lt;f[m][n]*m-1LL*sum[n]*sum[n]&lt;&lt;endl; return 0;&#125; 更了一个用 $WQS$ 二分的做法. 这道题用 $WQS$ 二分,也称凸优化,可以做到 $O(n\log s_n)$ 的时间复杂度. 定义 $g(i)$ 表示必须走 $i$ 段时的最小 $\sum t_j^2$ .那么我们就是要求 $g(m)$ 的值. 普通的斜率优化其实就是在枚举选了多少段. 二分一个权值 $mid$ ,表示每选一段带来的额外花费,此时得到新的函数 $f(x)=g(x)+mid\cdot x$ . 因为 $g(x)$ 是具有凸性的,所以 $g’(x)$ 是单调的,而 $f’(x)=g’(x)+mid$ ,相当于在左右移动 $g’(x)$ 的零点. 而 $f’(x)$ 的零点就是让 $f(x)$ 取得最小值的点,一次斜率 $dp$ 可以 $O(n)$ 求出,也同时求出了 $f(x)$ 的最小值. 通过二分不断调整 $mid$ ,直到 $f’(x)$ 的零点为 $m$ ,就得到了 $f(m)$ ,再根据 $g(m)=f(m)-mid\cdot m$ 得出答案. 因为实际问题中,这些函数只在整数处才有定义,所以二分权值时也只用在整数中二分. 时间复杂度 $O(n\log s_n)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int read()&#123; int out=0,sgn=1; char jp=getchar(); while(jp!='-' &amp;&amp; (jp&lt;'0' || jp&gt;'9')) jp=getchar(); if(jp=='-') sgn=-1,jp=getchar(); while(jp&gt;='0' &amp;&amp; jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*sgn;&#125;const int MAXN=3e3+10;ll sqr(ll x)&#123; return x*x;&#125;int n,m;ll f[MAXN],g[MAXN],s[MAXN];double slope(int k1,int k2)&#123; return (double)(f[k1]+sqr(s[k1])-f[k2]-sqr(s[k2]))/(double)(s[k1]-s[k2]);&#125;int q[MAXN],head,tail;bool check(ll mid)&#123; q[head=tail=0]=0; for(int i=1;i&lt;=n;++i) &#123; while(head&lt;tail &amp;&amp; slope(q[head+1],q[head])&lt;2*s[i]) ++head; int k=q[head]; f[i]=f[k]+sqr(s[i]-s[k])+mid; g[i]=g[k]+1; while(head&lt;tail &amp;&amp; slope(q[tail-1],q[tail])&gt;slope(q[tail],i)) --tail; q[++tail]=i; &#125; return g[n]&lt;=m;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) s[i]=s[i-1]+read(); ll L=0,R=s[n]*s[n]/m; ll res; while(L&lt;=R) &#123; ll mid=(L+R)&gt;&gt;1; if(check(mid)) &#123; res=m*(f[n]-mid*m)-sqr(s[n]); R=mid-1; &#125; else L=mid+1; &#125; cout&lt;&lt;res&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>斜率优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4516 生成魔咒]]></title>
    <url>%2F2019%2F06%2F18%2Fbzoj-4516-%E7%94%9F%E6%88%90%E9%AD%94%E5%92%92%2F</url>
    <content type="text"><![CDATA[$SAM$ . 每次在末尾加入一个字符,再询问当前串本质不同的子串数目. 用 $SAM$ 维护,答案就是所有非根结点的 $maxlen-minlen+1$ 之和,即 $maxlen(u)-maxlen(fa_u)$ 之和. 由于字符集比较大,所以用 $map$ 存边,确定/更换父亲结点时更新答案即可. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;struct SuffixAutomaton&#123; map&lt;int,int&gt; ch[MAXN]; int idx,lst; int len[MAXN],fa[MAXN]; ll ans; SuffixAutomaton()&#123;idx=lst=1;ans=0;memset(fa,0,sizeof fa);&#125; void Extend(int c) &#123; int p=lst,np=++idx; lst=np; len[np]=len[p]+1; while(p &amp;&amp; ch[p][c]==0) ch[p][c]=np,p=fa[p]; if(p==0) fa[np]=1,ans+=len[np]; else &#123; int q=ch[p][c]; if(len[q]==len[p]+1) &#123; fa[np]=q; ans+=len[np]-len[q]; &#125; else &#123; int nq=++idx; len[nq]=len[p]+1; fa[nq]=fa[q]; fa[q]=fa[np]=nq; ans+=len[np]-len[nq]; ch[nq]=ch[q]; while(p &amp;&amp; ch[p][c]==q) ch[p][c]=nq,p=fa[p]; &#125; &#125; printf("%lld\n",ans); &#125;&#125;SAM;int main()&#123; int n=read(); for(int i=1;i&lt;=n;++i) SAM.Extend(read()); return 0;&#125;]]></content>
      <tags>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1181]]></title>
    <url>%2F2019%2F06%2F18%2FCF1181%2F</url>
    <content type="text"><![CDATA[$Div.2$ 鸽了生物晚自习过来打. A Chunga-Changa 签到题.分类讨论一下就好了. 1234567891011121314151617181920212223242526272829303132#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;ll x,y,z;int main()&#123; x=read(),y=read(),z=read(); if((x+y)/z==x/z+y/z) cout&lt;&lt;(x+y)/z&lt;&lt;' '&lt;&lt;0&lt;&lt;endl; else &#123; ll s=x/z+y/z; x%=z,y%=z; if((x+y)/z) cout&lt;&lt;s+1&lt;&lt;' '&lt;&lt;min(z-x,z-y)&lt;&lt;endl; else cout&lt;&lt;s&lt;&lt;0&lt;&lt;endl; &#125; return 0;&#125; B Split a Number 显然应该贪心从最中间的位置切开. 有 $0$ 的话,就从中间往两边分别找第一个合法的位置就好了. 高精度用 $python$ 就很棒. 12345678910111213n = input()s = raw_input()fig = []for i in xrange(1, n): if s[i] != '0': fig.append((max(i, n - i), i))fig.sort()k = fig[0][0]ans = int(s)for i in xrange(min(10, len(fig))): j = fig[i][1] ans = min(ans, int(s[:j]) + int(s[j:]))print ans C Flag 记录 $D(i,j)$ 表示从 $(i,j)$ 往下走,并且满足颜色一直相同能走到的最远位置, $k(i,j)$ 表示从 $(i,j)$ 往右走,并且满足颜色一直相同能走的最远格数. 然后大力枚举 $(i,j)$ ,统计以 $(i,j)$ 为左上角的 $Flag$ 数目即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e3+10;int n,m;int col[MAXN][MAXN];char buf[MAXN];int D[MAXN][MAXN];int k[MAXN][MAXN];const int inf=1e9;struct seg&#123; int val[MAXN&lt;&lt;2];#define root val[o]#define lson val[o&lt;&lt;1]#define rson val[o&lt;&lt;1|1] void bd(int y,int o,int l,int r) &#123; if(l==r) &#123; root=k[l][y]; return; &#125; int mid=(l+r)&gt;&gt;1; bd(y,o&lt;&lt;1,l,mid); bd(y,o&lt;&lt;1|1,mid+1,r); root=min(lson,rson); &#125; int query(int o,int l,int r,int L,int R) &#123; assert(root); if(L&lt;=l &amp;&amp; r&lt;=R) return root; int mid=(l+r)&gt;&gt;1; int s=inf; if(L&lt;=mid) s=min(s,query(o&lt;&lt;1,l,mid,L,R)); if(R&gt;mid) s=min(s,query(o&lt;&lt;1|1,mid+1,r,L,R)); assert(s&gt;=1 &amp;&amp; s&lt;=m); return s; &#125;&#125;T[MAXN];ll calc(int x,int y)&#123; int p1=x; int p2=D[p1][y]+1; if(p2&gt;n) return 0; int p3=D[p2][y]+1; if(p3&gt;n) return 0; int len=p2-p1; if(p3!=p2+len) return 0; if(p3+len-1&gt;n) return 0; if(D[p3][y]&lt;p3+len-1) return 0; return T[y].query(1,1,n,p1,p3+len-1);&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) &#123; scanf("%s",buf+1); for(int j=1;j&lt;=m;++j) col[i][j]=buf[j]-'a'+1; &#125; for(int i=1;i&lt;=n;++i) &#123; for(int j=m;j&gt;=1;--j) if(col[i][j]!=col[i][j+1]) k[i][j]=1; else k[i][j]=k[i][j+1]+1; &#125; for(int j=1;j&lt;=m;++j) &#123; for(int i=n;i&gt;=1;--i) if(col[i][j]!=col[i+1][j]) D[i][j]=i; else D[i][j]=D[i+1][j]; &#125; for(int j=1;j&lt;=m;++j) T[j].bd(j,1,1,n); ll ans=0; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) ans+=calc(i,j); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; D Irrigation 容易发现当所有的城市次数都相等后举办地点一定会出现循环 $1,2,3,\dots,m$ . 记初始 $n$ 轮举办后,举办次数最多的一个城市举办了 $t$ 场,那么根据规则,再举办 $t\cdot m-n$ 场后,即从第 $t\cdot m+1$ 场开始举办城市就会开始出现循环 $1,2,3,\dots,m$ . 可以将询问离线下来,按照时间从前往后顺序进行回答. 一层一层填满下面这个图,边填边回答询问 ( $two\ pointer$ ),用 $treap$ 维护当前可能会被填到的元素就好了. 最后还剩下的询问的答案一定是出现在 $1,2,3,\dots,m$ 的循环中,答案容易得出. E A Story of One Country 尝试倒着做,每次水平或竖直地将一个子矩形切成两个,并且切的时候不能切断任意一个 $castle$ 区域. 如果经过若干次切割后,能使得每个子矩形内都包含了 恰好一个 $castle$ 区域,那么原图就是合法的. 注意到对于同一个子矩形,如果把它内部的 $castle$ 区域用这个 $castle$ 区域的一个非空子集代替,不会使结果变劣,即,若原子矩形是合法的,那么替换后的子矩形仍然是合法的. 又因为题目对切割次数没有限制,所以我们只要能找到一条切割线(水平或竖直)使得切割后得到的两个子矩形内部都含有 $castle$ 区域,且自身不穿过 $castle$ 区域,就称它是合法的,沿着它切开,不会影响最终的答案. 于是我们可以递归解决这个问题,对于当前的子矩形每次找到一条切割线,切割后递归处理得到的两个子矩形.若当前矩形不是恰好包含一个 $castle$ 区域,又找不到合法的切割线,则说明当前子矩形不合法,原图也不合法. 如果每次随意去找一条合法切割线执行上述操作,最坏情况是每次切割后,一个子矩形内只有 $1$ 个 $castle$ 区域,而另一个子矩形内含有剩下所有的 $castle$ 区域,此时的时间复杂度是 $O(n^2logn)$ ,只能通过简单版的数据. 用线段树来维护 $castle$ 区域,每次找出合适的切割使得得到的两个子矩形含有的 $castle$ 区域数目差尽可能小,此时时间复杂度为 $O(nlog^2n)$ ,可以通过所有数据.]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>平衡树</tag>
        <tag>线段树</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[diverta 2019 Programming Contest 2]]></title>
    <url>%2F2019%2F06%2F17%2Fdiverta-2019-Programming-Contest-2%2F</url>
    <content type="text"><![CDATA[来的时候发现只有一个小时了.然而还是 头铁 开题,怒掉一波 $rating$ . 比赛链接. 官方题解. A Ball Distribution 签到题. 123456789101112131415161718192021222324#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int main()&#123; int n=read(),k=read(); if(k&gt;1) cout&lt;&lt;n-k; else cout&lt;&lt;0; return 0;&#125; B Picking Up 显然只需要枚举两个点,将它们的坐标差作为 $(p,q)$ 进行计算,其他的 $(p,q)$ 没有用. 然后用并查集或者记忆化搜索随便搞搞就可以了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;typedef pair&lt;int,int&gt; pii;int n;pii p[51];int ans=51;int f[51],A,B;map&lt;pii,int&gt; id;int dfs(int x)&#123; if(f[x]!=-1) return f[x]; int&amp; res=f[x]; res=0; if(id.find(make_pair(p[x].first-A,p[x].second-B))!=id.end()) &#123; int y=id[make_pair(p[x].first-A,p[x].second-B)]; if(f[y]!=-1) return 0; else &#123; res=0; return dfs(y); &#125; &#125; return res=1;&#125;void solve(int a,int b)&#123; if(a==-3 &amp;&amp; b==-2) &#123; int d=1; &#125; A=a,B=b; int res=0; memset(f,-1,sizeof f); for(int i=1;i&lt;=n;++i) if(f[i]==-1) res+=dfs(i); ans=min(ans,res);&#125;int main()&#123; n=read(); if(n==1) &#123; puts("1"); return 0; &#125; for(int i=1;i&lt;=n;++i) &#123; p[i].first=read(); p[i].second=read(); id[p[i]]=i; &#125; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=n;++j) if(i!=j) solve(p[i].first-p[j].first,p[i].second-p[j].second); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; C Successive Subtraction 构造 + 贪心. 首先可以将 $0$ 全部减掉,于是只剩下正/负数. 特判只有正数与只有负数的情况,只有正数就让最小的那个数贡献为负,只有负数就让最大的那个数贡献为负. 否则,正负数都有的情况,答案一定是 $\sum |a_i|$ . 证明的话,考虑只有一个正数的情况,用它去减其他所有数即得 $\sum |a_i|$ .只有一个负数的情况,留下一个正数后,让那个负数减其他所有数,再让留下的正数减它,答案也是 $\sum |a_i|$ . 否则,正负数都至少有 $2$ 个.每次取出两个正数 $x,y$ ,一个负数 $z$ ,连续操作两次,先得到 $z-y$ ,再得到 $x-(z-y)=x+y-z$ . 这样操作后正负数都减少了 $1$ 个,并且每个数的贡献还是 $|a_i|$ ,一直操作,直到正数只有一个或负数只有一个时,执行对应情况的操作即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define int llinline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;int n,a[MAXN];int res=0;void solve1()//-&#123; cout&lt;&lt;res+2*a[n]&lt;&lt;endl; int x=a[n]; for(int i=n-1;i&gt;=1;--i) &#123; printf("%lld %lld\n",x,a[i]); x-=a[i]; &#125;&#125;void solve2()//+&#123; cout&lt;&lt;res-2*a[1]&lt;&lt;endl; int x=a[1]; for(int i=2;i&lt;n;++i) &#123; printf("%lld %lld\n",x,a[i]); x-=a[i]; &#125; printf("%lld %lld\n",a[n],x);&#125;int stk1[MAXN],stk2[MAXN];int tp1=0,tp2=0;void solve3()//+,-&#123; cout&lt;&lt;res&lt;&lt;endl; int zr=0; for(int i=1;i&lt;=n;++i) &#123; if(a[i]&gt;0) stk1[++tp1]=a[i]; else if(a[i]&lt;0) stk2[++tp2]=a[i]; else ++zr; &#125; assert(zr!=n); while(zr--) printf("%lld 0\n",stk1[tp1]); assert(tp1 &amp;&amp; tp2); while(tp1!=1 &amp;&amp; tp2!=1) &#123; int x=stk1[tp1]; --tp1; int y=stk1[tp1]; --tp1; int z=stk2[tp2]; --tp2; printf("%lld %lld\n",z,y); printf("%lld %lld\n",x,z-y); stk1[++tp1]=x+y-z; &#125; if(tp1==1) &#123; int x=stk1[tp1]; while(tp2) &#123; printf("%lld %lld\n",x,stk2[tp2]); x-=stk2[tp2--]; &#125; &#125; else &#123; int x=stk2[tp2]; for(int i=1;i&lt;tp1;++i) &#123; printf("%lld %lld\n",x,stk1[i]); x-=stk1[i]; &#125; printf("%lld %lld\n",stk1[tp1],x); &#125;&#125;signed main()&#123; n=read(); bool f1=false,f2=false; for(int i=1;i&lt;=n;++i) &#123; a[i]=read(); res+=abs(a[i]); if(a[i]&gt;0) f1=true; if(a[i]&lt;0) f2=true; &#125; sort(a+1,a+1+n); if(!f1) solve1(); else if(!f2) solve2(); else solve3(); return 0;&#125; D Squirrel Merchant 贪心 + 背包. 显然到 $B$ 时可以先把先前在 $A$ 买的东西全部卖掉后再进行操作,不会使结果变劣. 于是就成了 $A$ 买 + $B$ 卖 与 $B$ 买 + $A$ 卖 两个过程.尝试最大化每一步的收益即可. 如 $A$ 买 + $B$ 卖 这个过程,就可以用 $g_A$ 的容量换取 $g_B-g_A$ 的收益.另外的两种同理. 做两次背包即可.时间复杂度 $O(N\cdot \max(g,s,b))$ . 注意开 $long\ long$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int w[4],c[4],V;const int MAXN=5001*5001;int f[MAXN];int solve_package()&#123; memset(f,0,sizeof f); int res=0; for(int j=1;j&lt;=3;++j) &#123; if(c[j]&lt;=0) continue; for(int i=w[j];i&lt;=V;++i) &#123; f[i]=max(f[i],f[i-w[j]]+c[j]); res=max(res,f[i]); &#125; &#125; return res;&#125;int pr[2][4];int main()&#123; V=read(); for(int i=0;i&lt;2;++i) for(int j=1;j&lt;=3;++j) pr[i][j]=read(); for(int i=1;i&lt;=3;++i) &#123; c[i]=pr[1][i]-pr[0][i]; w[i]=pr[0][i]; &#125; V+=solve_package(); for(int i=1;i&lt;=3;++i) &#123; c[i]=pr[0][i]-pr[1][i]; w[i]=pr[1][i]; &#125; V+=solve_package(); cout&lt;&lt;V&lt;&lt;endl; return 0;&#125; E Balanced Piles $dp$ . 先只考虑 $D=1$ 的情况.设 $f(i,j)$ 表示当前最大值为 $i$ ,最大值有 $j$ 个时,操作到最终状态的方案数. 预先给每块砖钦定一个两两不同的优先度,若可以操作多块砖,则优先操作优先度高的砖. 那么若 $i\not=H$ ,可以转移到 $f(i+1,1)$ ,若 $j\not=N$ ,可以转移到 $f(i,j+1)$ .新加入的那块砖插入到原来的 $j$ 块砖中,有 $j+1$ 种方案.所以 $f(i,j)=f(i+1,1)+(j+1)\cdot f(i,j+1)$ ( $i=H$ 或 $j=N$ 除外). 边界是 $f(H,N)=1$ ,答案是 $f(0,N)$ .钦定优先度会使方案数 $\times N!$ ,但我们转移时规定了顺序,即方案数是序列的方案数,所以又要 $/ N!$ ,两者就抵消掉了. 123456789101112131415161718192021int f[MAXN][MAXN];int dfs(int i,int j)&#123; if(f[i][j]!=-1) return f[i][j]; int&amp; res=f[i][j]; res=0; if(i!=H) res=add(res,dfs(i+1,1)); if(j!=N) res=add(res,mul(j+1,dfs(i,j+1))); return res;&#125;int main()&#123; N=read(),H=read(),D=read(); memset(f,-1,sizeof f); f[H][N]=1; cout&lt;&lt;dfs(0,N)&lt;&lt;endl; return 0;&#125; 观察转移形式 $f(i,j)=f(i+1,1)+(j+1)\cdot f(i,j+1)$ ,可发现答案 $f(0,N)$ 就对应了下面这个 $DAG$ 从 $(0,N)$ 到 $(H,N)$ 的路径条数. 边上的数字代表有几条重边 ,图中 $N=4,H=5$ . 经过 奥妙重重 的运算,答案 $f(0,N)=(\sum_{i=1}^N i!)^{H-1}\cdot N!$ . 再来考虑一般的 $D\geq 1$ 的情况. 考虑一个数列 $0=h_0&lt;h_1&lt;\dots &lt;h_K=H$ ,满足 $\forall 0\leq i&lt;K,h_{i+1}-h_i\leq D$ .那么现在要求每次操作的高度 $h$ 能依次构成上面形式的数列,答案就是 $(\sum_{i=1}^N i!)^{K-1}\cdot N!$ . 沿用 $D=1$ 时构造 $DAG$ 的思路,答案对应了下面的 $DAG$ 从 $0$ 到 $N$ 的路径数目. $weight$ 其实就是说重边的数目.图片均来自官方题解. 维护 $f(i)$ 表示 $0\to i$ 的路径条数,并维护 $f$ 的前缀和,即可在 $O(n)$ 内解决此题. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;const int MAXN=1e6+10;int fac[MAXN];inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int inv(int x)&#123; return fpow(x,P-2);&#125;int N,H,D,sf=0;int f[MAXN],sum[MAXN];int main()&#123; N=read(),H=read(),D=read(); fac[0]=1; for(int i=1;i&lt;=N;++i) &#123; fac[i]=mul(fac[i-1],i); sf=add(sf,fac[i]); &#125; f[0]=1,sum[0]=1; for(int i=1;i&lt;=H;++i) &#123; if(i-D-1&gt;=0) f[i]=add(sum[i-1],P-sum[i-D-1]); else f[i]=sum[i-1]; f[i]=mul(f[i],sf); sum[i]=add(sum[i-1],f[i]); &#125; cout&lt;&lt;mul(mul(f[H],fac[N]),inv(sf))&lt;&lt;endl; return 0;&#125; F Diverta City 构造. 考虑数学归纳法,对于 $N=2$ 的情况,显然可以直接连一条长度 $1$ 的边完成构造. 否则,对于 $N\geq 3$ ,先构造一个 $N-1$ 个点的完全图满足要求,再加入第 $N$ 个点,则只需要考虑从第 $N$ 个点向前 $N-1$ 个点连边的长度. 令 $M$ 为先前构造出的 $N-1$ 个点的图中最长的哈密顿路径长度,令 $a=\lbrace 1,2,4,7,12,20,29,38,52\rbrace$ ,则第 $N$ 个点与第 $i$ 个点相连的边长度为 $(M+1)\cdot a_i$ 即可满足新得到的 $N$ 个点的图也符合要求. 为啥呢?因为任意一条新图的哈密顿路径中,只有 $1$ 条新加入的边( $N$ 为路径起点/终点) , 或 $2$ 条新加入的边( $N$ 不为路径起点/终点),而其余的边一定是 $N-1$ 个点的图中一条哈密顿路径的一部分. 所以新图中的每一条哈密顿路径长度都可以被表示为 $x+(M+1)\cdot a_i$ 或 $x+(M+1)\cdot(a_i+a_j)$ . 其中 $0\leq x\leq M$ .而我们构造的数列 $a$ 是满足所有 $a_i,a_i+a_j$ 都是互异的,所以新图的每条哈密顿路径长度也是互异的,于是得到的新图也满足条件. 当 $N=10$ 时,可以验证此时最长的边为 $96755758040&lt;10^{11}$ 满足限制.每次加点后暴力枚举 $i!/2$ 条哈密顿路径,计算 $M$ .时间复杂度 $O((N+1)!)$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=11;const int a[]=&#123;0,1,2,4,7,12,20,29,38,52&#125;;int n,p[MAXN];ll w[MAXN][MAXN],M;void GetM(int x)&#123; M=0; for(int i=1;i&lt;=x;++i) p[i]=i; do &#123; ll res=0; for(int i=1;i&lt;x;++i) res+=w[p[i]][p[i+1]]; M=max(M,res); &#125;while(next_permutation(p+1,p+1+x));&#125;void solve(int x)&#123; for(int i=1;i&lt;x;++i) w[i][x]=w[x][i]=(M+1)*a[i];&#125;int main()&#123; n=read(); w[1][2]=w[2][1]=1; M=1; for(int i=3;i&lt;=n;++i) &#123; solve(i); GetM(i); &#125; for(int i=1;i&lt;=n;++i) &#123; for(int j=1;j&lt;=n;++j) printf("%lld ",w[i][j]); puts(""); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>atcoder</tag>
        <tag>dp计数</tag>
        <tag>贪心</tag>
        <tag>构造</tag>
        <tag>DAG</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4515 游戏]]></title>
    <url>%2F2019%2F06%2F14%2Fbzoj-4515-%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[树链剖分 + 李超线段树. 显然可以先来一个树剖,就成了区间上的问题.每次修改 $(s,t)$ 就拆成 $(s,lca),(lca,t)$ 两段来做. 于是修改操作都是给一条区间加一条线段的形式,询问是问一个区间内点值的最小值. 用李超线段树维护优势线段与区间的答案即可. 时间复杂度 $O(nlog^3n)$ ,但常数比较小,所以能过. 强行上树系列. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const ll inf=123456789123456789;const int MAXN=1e5+10;int ecnt=0,head[MAXN];int to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1],val[MAXN&lt;&lt;1];void addedge(int u,int v,int w)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; val[ecnt]=w; head[u]=ecnt;&#125;ll dist[MAXN];int mxson[MAXN],siz[MAXN],fa[MAXN],dep[MAXN];int idx=0,dfn[MAXN],rnk[MAXN],top[MAXN],distofa[MAXN];void dfs1(int u,int Fa)&#123; siz[u]=1; fa[u]=Fa; dep[u]=dep[Fa]+1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==Fa) continue; distofa[v]=val[i]; dfs1(v,u); siz[u]+=siz[v]; if(siz[v]&gt;siz[mxson[u]]) mxson[u]=v; &#125;&#125;void dfs2(int u,int tp,ll CurDist)&#123; top[u]=tp; dfn[u]=++idx; rnk[idx]=u; dist[idx]=CurDist; if(mxson[u]) dfs2(mxson[u],tp,CurDist+distofa[mxson[u]]); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa[u] || v==mxson[u]) continue; dfs2(v,v,CurDist+distofa[v]); &#125;&#125;int Query_LCA(int x,int y)&#123; while(top[x]!=top[y]) &#123; if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); x=fa[top[x]]; &#125; return dep[x]&lt;dep[y]?x:y;&#125;ll tmp,k[MAXN*50],b[MAXN*50];ll calc(int seg,int x)&#123; return k[seg]*dist[x]+b[seg];&#125;int n,m,cnt=0;ll ans;struct SegTree&#123; int nodecnt; SegTree()&#123;nodecnt=0;&#125; struct node &#123; int ls,rs,id; ll mi; node()&#123;ls=rs=id=0;mi=inf;&#125; &#125;Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[root.ls]#define rson Tree[root.rs] void BuildTree(int l,int r) &#123; int o=++nodecnt; if(l==r) return; int mid=(l+r)&gt;&gt;1; root.ls=nodecnt+1; BuildTree(l,mid); root.rs=nodecnt+1; BuildTree(mid+1,r); &#125; void pushup(int o,int l,int r) &#123; if(root.id) root.mi=k[root.id]&lt;0?calc(root.id,r):calc(root.id,l); else root.mi=inf; if(l&lt;r) &#123; root.mi=min(root.mi,lson.mi); root.mi=min(root.mi,rson.mi); &#125; &#125; void upd(int o,int l,int r,int L,int R,int seg) &#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; if(!root.id) &#123; root.id=seg; pushup(o,l,r); return; &#125; bool f1=calc(root.id,l)&lt;calc(seg,l); bool f2=calc(root.id,r)&lt;calc(seg,r); if(f1==f2 || l==r) &#123; if(!f1) &#123; root.id=seg; pushup(o,l,r); &#125; return; &#125; int mid=(l+r)&gt;&gt;1; bool f3=calc(root.id,mid)&lt;calc(seg,mid); if(f1==f3) &#123; if(f1) upd(root.rs,mid+1,r,L,R,seg); else upd(root.rs,mid+1,r,L,R,root.id),root.id=seg; &#125; else &#123; if(f1) upd(root.ls,l,mid,L,R,root.id),root.id=seg; else upd(root.ls,l,mid,L,R,seg); &#125; &#125; else &#123; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd(root.ls,l,mid,L,R,seg); if(R&gt;mid) upd(root.rs,mid+1,r,L,R,seg); &#125; pushup(o,l,r); &#125; void query(int o,int l,int r,int L,int R) &#123; if(root.id) &#123; if(k[root.id]&lt;0) ans=min(ans,calc(root.id,min(r,R))); else ans=min(ans,calc(root.id,max(l,L))); &#125; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; ans=min(ans,root.mi); return; &#125; if(l==r) return; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) query(root.ls,l,mid,L,R); if(R&gt;mid) query(root.rs,mid+1,r,L,R); &#125;&#125;T;void Modifiy1(int x,int lca,int A,int B)&#123; tmp=B; while(top[x]!=top[lca]) &#123; k[++cnt]=-A; b[cnt]=tmp+1LL*A*dist[dfn[x]]; int L=dfn[top[x]],R=dfn[x]; T.upd(1,1,n,L,R,cnt); tmp+=1LL*(dist[R]-dist[L]+distofa[top[x]])*A; x=fa[top[x]]; &#125; k[++cnt]=-A; b[cnt]=tmp+1LL*A*dist[dfn[x]]; int L=dfn[lca],R=dfn[x]; T.upd(1,1,n,L,R,cnt); tmp+=1LL*(dist[R]-dist[L])*A;&#125;void Modifiy2(int x,int lca,int A,int B)&#123; tmp+=1LL*(dist[dfn[x]]-dist[dfn[lca]])*A; while(top[x]!=top[lca]) &#123; k[++cnt]=A; b[cnt]=tmp-1LL*A*dist[dfn[x]]; int L=dfn[top[x]],R=dfn[x]; T.upd(1,1,n,L,R,cnt); tmp-=1LL*(dist[R]-dist[L]+distofa[top[x]])*A; x=fa[top[x]]; &#125; if(x!=lca) &#123; k[++cnt]=A; b[cnt]=tmp-1LL*A*dist[dfn[x]]; int L=dfn[lca]+1,R=dfn[x]; T.upd(1,1,n,L,R,cnt); &#125;&#125;void Query(int x,int lca)&#123; while(top[x]!=top[lca]) &#123; int L=dfn[top[x]],R=dfn[x]; T.query(1,1,n,L,R); x=fa[top[x]]; &#125; int L=dfn[lca],R=dfn[x]; T.query(1,1,n,L,R);&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(),w=read(); addedge(u,v,w); addedge(v,u,w); &#125; dfs1(1,0); dfs2(1,1,0); T.BuildTree(1,n); while(m--) &#123; int tp=read(); int x=read(),y=read(); int lca=Query_LCA(x,y); if(tp==1) &#123; int A=read(),B=read(); Modifiy1(x,lca,A,B); Modifiy2(y,lca,A,B); &#125; else &#123; ans=inf; Query(x,lca); Query(y,lca); printf("%lld\n",ans); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>树链剖分</tag>
        <tag>李超线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4514 数字配对]]></title>
    <url>%2F2019%2F06%2F12%2Fbzoj-4514-%E6%95%B0%E5%AD%97%E9%85%8D%E5%AF%B9%2F</url>
    <content type="text"><![CDATA[费用流. 将每个数字 $a_i$ 拆成入点 $p_i$ 和出点 $q_i$,对于 $S\to p_i,q_i\to T$ 连费用为 $0$ ,容量为 $b_i$ 的边. 若 $a_i,a_j$ 之间可以配对,就对于 $p_i\to q_j,p_j\to q_i$ 连费用为 $-c_i\cdot c_j$ ,容量为 $inf$ 的边. 跑 $mcmf$ ,每次 $spfa$ 完之后判一下是否会使得费用 $&gt;0$ ,若会,就加上限制下的最大流量,然后退出即可. 这样做每对的贡献都被算了 $2$ 次,所以最后答案要 $/2$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;const ll inf=1e18;int head[MAXN],ecnt=-1,pcnt=0;struct Edge&#123; int to,nx; ll flow,val;&#125;E[MAXN];void addedge(int u,int v,ll flow,ll val)&#123; ++ecnt; E[ecnt].to=v; E[ecnt].nx=head[u]; E[ecnt].flow=flow; E[ecnt].val=val; head[u]=ecnt;&#125;void ins(int u,int v,ll flow,ll val)&#123; addedge(u,v,flow,val); addedge(v,u,0,-val);&#125;int n,a[MAXN],b[MAXN],c[MAXN];int p[MAXN],q[MAXN];bool is_prime(int x)&#123; if(x==1) return false; for(int i=2;i*i&lt;=x;++i) if(x%i==0) return false; return true;&#125;int vis[MAXN],pre[MAXN],lst[MAXN];ll dis[MAXN],flow[MAXN];bool spfa(int S,int T)&#123; for(int i=1;i&lt;=pcnt;++i) dis[i]=inf,flow[i]=inf,vis[i]=0; pre[T]=-1; queue&lt;int&gt; q; dis[S]=0; vis[S]=1; q.push(S); while(!q.empty()) &#123; int u=q.front(); q.pop(); vis[u]=0; for(int i=head[u];i!=-1;i=E[i].nx) &#123; int v=E[i].to; if(E[i].flow&gt;0 &amp;&amp; dis[v]-dis[u]&gt;E[i].val) &#123; dis[v]=dis[u]+E[i].val; pre[v]=u; lst[v]=i; flow[v]=min(flow[u],E[i].flow); if(!vis[v]) &#123; q.push(v); vis[v]=1; &#125; &#125; &#125; &#125; return pre[T]!=-1;&#125;ll mcmf(int S,int T)&#123; ll maxflow=0,mincost=0; while(spfa(S,T)) &#123; if(mincost+flow[T]*dis[T]&gt;0) &#123; ll tmp=-mincost; maxflow+=tmp/dis[T]; return maxflow; &#125; maxflow+=flow[T]; mincost+=flow[T]*dis[T]; int now=T; while(now!=S) &#123; E[lst[now]].flow-=flow[T]; E[lst[now]^1].flow+=flow[T]; now=pre[now]; &#125; &#125; return maxflow;&#125;int main()&#123; memset(head,-1,sizeof head); int S=++pcnt,T=++pcnt; n=read(); for(int i=1;i&lt;=n;++i) p[i]=++pcnt,q[i]=++pcnt; for(int i=1;i&lt;=n;++i) a[i]=read(); for(int i=1;i&lt;=n;++i) &#123; b[i]=read(); ins(S,p[i],b[i],0); ins(q[i],T,b[i],0); &#125; for(int i=1;i&lt;=n;++i) c[i]=read(); for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;i;++j) &#123; int x=max(a[i],a[j]),y=min(a[i],a[j]); if(x%y==0 &amp;&amp; is_prime(x/y)) &#123; ins(p[i],q[j],inf,-1LL*c[i]*c[j]); ins(p[j],q[i],inf,-1LL*c[i]*c[j]); &#125; &#125; int ans=mcmf(S,T); cout&lt;&lt;ans/2&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4584 赛艇]]></title>
    <url>%2F2019%2F06%2F12%2Fbzoj-4584-%E8%B5%9B%E8%89%87%2F</url>
    <content type="text"><![CDATA[$dp$ + 组合数学. 如果值域很小,那么可以直接设 $f(i,j)$ 表示考虑了前 $i$ 个人,第 $i$ 个人选 $j$ 的方案数. 于是考虑离散化.将这些区间离散化为 $O(n)$ 个区间,区间按 $l$ 从小到大排序,且互不相交. 设 $f(i,j)$ 表示考虑了前 $i$ 个人,第 $i$ 个人参了赛,且选择的数在第 $j$ 个区间内的方案数. 那么 $1\sim i-1$ 这些人选择的数有在区间 $j$ 内的,也有不在区间 $j$ 内的.若有 $m$ 个在区间 $j$ 内的,区间 $j$ 的长度为 $L$ ,那么方案数为 ${L+m-1\choose m}$ ,因为 $i$ 必须选.而不在区间 $j$ 内的部分就是个前缀和. 于是大力枚举从 $k$ 转移来,前 $p$ 个人都没选在区间 $j$ 内,用前缀和优化一下转移就好了. 时间复杂度 $O(n^3)$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=500+10;int n,a[MAXN],b[MAXN],num[MAXN&lt;&lt;1],tot,g[MAXN],C[MAXN],inv[MAXN];void pre_inv()&#123; inv[1]=1; for(int i=2;i&lt;=n;++i) inv[i]=1LL*(P-P/i)*inv[P%i]%P;&#125;int main()&#123; n=read(); pre_inv(); for(int i=1;i&lt;=n;++i) &#123; a[i]=read(); b[i]=read(); num[++tot]=a[i]; num[++tot]=b[i]+1; &#125; sort(num+1,num+1+tot); tot=unique(num+1,num+1+tot)-num-1; for(int i=1;i&lt;=n;++i) &#123; a[i]=lower_bound(num+1,num+1+tot,a[i])-num; b[i]=lower_bound(num+1,num+1+tot,b[i]+1)-num; &#125; C[0]=1; g[0]=1; for(int j=1;j&lt;tot;++j) &#123; int len=num[j+1]-num[j]; for(int i=1;i&lt;=n;++i) C[i]=mul(mul(C[i-1],len+i-1),inv[i]); for(int i=n;i&gt;=1;--i) &#123; if(a[i]&gt;j || b[i]&lt;j+1) continue; int f=0,m=1,c=len; for(int p=i-1;p&gt;=0;--p) &#123; f=add(f,mul(c,g[p])); if(a[p]&lt;=j &amp;&amp; j+1&lt;=b[p]) c=C[++m]; &#125; g[i]=add(g[i],f); &#125; &#125; int ans=0; for(int i=1;i&lt;=n;++i) ans=add(ans,g[i]); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4596 黑暗前的幻想乡]]></title>
    <url>%2F2019%2F06%2F11%2Fbzoj-4596-%E9%BB%91%E6%9A%97%E5%89%8D%E7%9A%84%E5%B9%BB%E6%83%B3%E4%B9%A1%2F</url>
    <content type="text"><![CDATA[矩阵树定理 + 容斥原理. 如果把所有出现的边都加上,直接算生成树个数,可能会包括了有某些公司没有用边的情况. 于是减去 $1$ 个公司不修路,其他公司随便修的方案数.再加上 $2$ 个公司不修路的方案数… 二进制大力枚举每个公司的边考不考虑,用矩阵树定理算方案数,乘上容斥系数即可. 时间复杂度 $O(2^n\cdot n^3)$ . 二进制表示状态的题,下标从 $0$ 开始会方便一些. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;inline int count(int x)&#123; int s=0; while(x) s+=x&amp;1,x&gt;&gt;=1; return s;&#125;const int MAXN=20;typedef pair&lt;int,int&gt; pii;#define mp make_pairint n,ans=0;vector&lt;pii&gt; E[MAXN];int A[MAXN][MAXN];int sgn;void SwapRow(int x,int y,int k)&#123; for(int i=k;i&lt;n;++i) swap(A[x][i],A[y][i]);&#125;void GCD(int x,int y)&#123; if(!A[y][x]) return; int t=A[x][x]/A[y][x]; for(int i=x;i&lt;n;++i) A[x][i]=add(A[x][i],P-mul(t,A[y][i])); SwapRow(x,y,x); sgn*=-1; GCD(x,y);&#125;void Gauss(int x)&#123; if(x==n-1) return; if(!A[x][x]) &#123; for(int i=x+1;i&lt;n;++i) if(A[i][x]) &#123; SwapRow(x,i,x); sgn*=-1; break; &#125; &#125; if(!A[x][x]) return; for(int i=x+1;i&lt;n;++i) if(A[i][x]) GCD(x,i); Gauss(x+1);&#125;int det()&#123; int res=1; sgn=1; Gauss(1); for(int i=1;i&lt;n;++i) res=mul(res,A[i][i]); return add(P,sgn*res);&#125;int main()&#123; n=read(); for(int i=0;i&lt;n-1;++i) &#123; int m=read(); for(int j=1;j&lt;=m;++j) &#123; int u=read(),v=read(); E[i].push_back(mp(u-1,v-1)); &#125; &#125; int mx=1&lt;&lt;(n-1); for(int st=0;st&lt;mx;++st) &#123; memset(A,0,sizeof A); int tot=count(st); for(int i=0;i&lt;n-1;++i) &#123; if((st&gt;&gt;i)&amp;1) continue; int siz=E[i].size(); for(int j=0;j&lt;siz;++j) &#123; int u=E[i][j].first; int v=E[i][j].second; ++A[u][u],++A[v][v]; A[u][v]=add(A[u][v],P-1); A[v][u]=add(A[v][u],P-1); &#125; &#125; if(tot&amp;1) ans=add(ans,P-det()); else ans=add(ans,det()); &#125; cout&lt;&lt;add(ans%P,P)&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>高斯消元</tag>
        <tag>矩阵树定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190611]]></title>
    <url>%2F2019%2F06%2F11%2Ftest20190611%2F</url>
    <content type="text"><![CDATA[$noip$ 模拟题? $exam$ 贪心. 显然是每 $k$ 题安排错一次能使得分最小.若能通过安排使得没有 $k$ 个连续正确,那么答案就是 $m$ . 否则,一定会出现连续对 $k$ 次,我们尽量把它们安排在前面,错的题安排在后面.这样后面贡献就是做对的题目数,前面的贡献是连续做对 $x$ 道题目得分.这个得分单独算一下就可以了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstdlib&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;using namespace std;inline int read()&#123; int x=0,k=1; char ch=getchar(); while(ch&lt;'0'||ch&gt;'9') &#123;if(ch=='-') k=-1;ch=getchar();&#125; while(ch&gt;='0'&amp;&amp;ch&lt;='9') &#123;x=(x&lt;&lt;3)+(x&lt;&lt;1)+ch-'0';ch=getchar();&#125; return k*x;&#125;const int P=1e9+9;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int n,m,k;int calc(int x)&#123; int t=x/k; int tmp=fpow(2,t+1); tmp=add(tmp,P-2-t); tmp=mul(tmp,k); return add(tmp,x);&#125;int main()//use dp to check&#123; freopen("exam.in","r",stdin); freopen("exam.out","w",stdout); n=read(),m=read(),k=read(); m=n-m; int tot=n/k; int ans=0; if(tot&lt;=m) &#123; ans=n-m; cout&lt;&lt;ans&lt;&lt;endl; &#125; else &#123; int x=n-m*k; ans=calc(x); ans=add(ans,mul(m,k-1)); cout&lt;&lt;add(ans%P,P)&lt;&lt;endl; &#125; return 0;&#125; $genes$ 线段树. 其实只有 $n$ 种情况,每次将第一个元素放到最后,并检验当前是否合法,做 $n$ 次即可. 用线段树来维护每个元素当前对应的前缀和就好了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstdlib&gt;#include&lt;cstring&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;using namespace std;inline int read()&#123; int x=0,k=1; char ch=getchar(); while(ch&lt;'0'||ch&gt;'9') &#123;if(ch=='-') k=-1;ch=getchar();&#125; while(ch&gt;='0'&amp;&amp;ch&lt;='9') &#123;x=(x&lt;&lt;3)+(x&lt;&lt;1)+ch-'0';ch=getchar();&#125; return k*x;&#125;const int MAXN=1e6+10;int n,a[MAXN],sum[MAXN],tot;struct Segtree&#123; int val[MAXN&lt;&lt;2]; int tag[MAXN&lt;&lt;2];#define root val[o]#define lson val[o&lt;&lt;1]#define rson val[o&lt;&lt;1|1] void pushup(int o) &#123; root=min(lson,rson); &#125; void modifiy(int o,int c) &#123; root+=c; tag[o]+=c; &#125; void pushdown(int o) &#123; if(tag[o]) &#123; modifiy(o&lt;&lt;1,tag[o]); modifiy(o&lt;&lt;1|1,tag[o]); tag[o]=0; &#125; &#125; void BuildTree(int o,int l,int r) &#123; tag[o]=0; if(l==r) &#123; root=sum[l]; return; &#125; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); pushup(o); &#125; void upd(int o,int l,int r,int L,int R,int c) &#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; modifiy(o,c); return; &#125; int mid=(l+r)&gt;&gt;1; pushdown(o); if(L&lt;=mid) upd(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) upd(o&lt;&lt;1|1,mid+1,r,L,R,c); pushup(o); &#125; int query(int o,int l,int r,int pos) &#123; if(l==r) return root; int mid=(l+r)&gt;&gt;1; pushdown(o); if(pos&lt;=mid) return query(o&lt;&lt;1,l,mid,pos); else return query(o&lt;&lt;1|1,mid+1,r,pos); &#125; int check() &#123; return val[1]&gt;=0; &#125;&#125;T;int main()//use bf to check&#123; freopen("genes.in","r",stdin); freopen("genes.out","w",stdout); n=read(); for(int i=1;i&lt;=n;++i) &#123; a[i]=read(); sum[i]=sum[i-1]+a[i]; &#125; tot=sum[n]; T.BuildTree(1,1,n); int ans=0; for(int i=1;i&lt;=n;++i) &#123; int tmp=T.query(1,1,n,i); T.upd(1,1,n,i,i,tot-tmp); if(i&gt;1) T.upd(1,1,n,1,i-1,-tmp); if(i&lt;n) T.upd(1,1,n,i+1,n,-tmp); ans+=T.check(); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; $paths$ $dp$ . 其实就是要求两条不相交路径总长最小值.设 $f(i,j)$ 表示当前一条路径的最后一个点是 $i$ ,另一条路径的最后一个点是 $j$ 时的最短长度. 每次用 $f(i,j)$ 去更新 $f(i,1+\max(i,j)),f(1+\max(i,j),j)$ 就可以保证每个点恰好被选一次了. 特殊点和起点终点特判一下就可以了. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;#define rg registerusing namespace std;inline int read()&#123; int x=0,k=1; char ch=getchar(); while(ch&lt;'0'||ch&gt;'9') &#123; if(ch=='-') k=-1; ch=getchar(); &#125; while(ch&gt;='0'&amp;&amp;ch&lt;='9') &#123; x=(x&lt;&lt;3)+(x&lt;&lt;1)+ch-'0'; ch=getchar(); &#125; return k*x;&#125;const int MAXN=1e3+10;const double inf=1e18;int n,x[MAXN],y[MAXN],b1,b2;double dis[MAXN][MAXN],f[MAXN][MAXN];double calcModulus(int i,int j)&#123; return sqrt(1.0*(x[i]-x[j])*(x[i]-x[j])+1.0*(y[i]-y[j])*(y[i]-y[j]));&#125;int main()&#123; freopen("paths.in","r",stdin); freopen("paths.out","w",stdout); n=read(),b1=read()+1,b2=read()+1; for(int i=1; i&lt;=n; ++i) &#123; x[i]=read(); y[i]=read(); for(int j=1; j&lt;i; ++j) dis[i][j]=dis[j][i]=calcModulus(i,j); &#125; for(int i=1; i&lt;=n; ++i) for(int j=1; j&lt;=n; ++j) f[i][j]=inf; f[1][1]=0; for(int i=1; i&lt;=n; ++i) for(int j=1; j&lt;=n; ++j) &#123; if(i==n &amp;&amp; j==n) break; int k=max(i,j)+1; if(k&gt;n) --k; if(k!=b2) f[k][j]=min(f[k][j],f[i][j]+dis[i][k]); if(k!=b1) f[i][k]=min(f[i][k],f[i][j]+dis[j][k]); &#125; printf("%.2f\n",f[n][n]); return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>线段树</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4590 自动刷题机]]></title>
    <url>%2F2019%2F06%2F10%2Fbzoj-4590-%E8%87%AA%E5%8A%A8%E5%88%B7%E9%A2%98%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[二分答案. 不难发现 $n$ 增大,切题数不会增多, $n$ 减小,切题数不会减少. 于是分别二分 $n$ 的最小值与最大值,检验直接模拟操作就好了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,k,x[MAXN];bool checkmin(ll mid)&#123; int tot=0; ll len=0; for(int i=1;i&lt;=n;++i) &#123; len+=x[i]; len=max(len,0LL); if(len&gt;=mid) len=0,++tot; &#125; if(len&gt;=mid) len=0,++tot; return tot&lt;=k;&#125;ll solvemin()&#123; ll L=1,R=1e18; ll ans=-1; while(L&lt;=R) &#123; ll mid=(L+R)&gt;&gt;1; if(checkmin(mid)) ans=mid,R=mid-1; else L=mid+1; &#125; return ans;&#125;bool checkmax(ll mid)&#123; int tot=0; ll len=0; for(int i=1;i&lt;=n;++i) &#123; len+=x[i]; len=max(len,0LL); if(len&gt;=mid) len=0,++tot; &#125; if(len&gt;=mid) len=0,++tot; return tot&gt;=k;&#125;ll solvemax()&#123; ll L=1,R=1e18; ll ans=-1; while(L&lt;=R) &#123; ll mid=(L+R)&gt;&gt;1; if(checkmax(mid)) ans=mid,L=mid+1; else R=mid-1; &#125; return ans;&#125;int main()&#123; n=read(),k=read(); for(int i=1;i&lt;=n;++i) x[i]=read(); ll a=solvemin(),b=solvemax(); if(a&gt;b || a&lt;0 || b&lt;0) puts("-1"); else cout&lt;&lt;a&lt;&lt;' '&lt;&lt;b&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1173]]></title>
    <url>%2F2019%2F06%2F08%2FCF1173%2F</url>
    <content type="text"><![CDATA[$Div.2$ 官方题解 A Nauuo and Votes 签到题. B Nauuo and Chess 构造题. 可以将所有数沿着第一列与最后一行放成一个 $L$ 形.容易验证一定是合法的. 这样构造, $m=\lfloor \frac n 2 \rfloor+1$ .而考虑首尾两个位置,有$$|r_1-r_n|+|c_1-c_n|\geq n-1$$ 而 $|r_1-r_n|\leq m-1,|c_1-c_n|\leq m-1$ ,所以 $2m-2\geq n-1$ , $m$ 为整数,可得到 $m\geq \lfloor \frac n 2 \rfloor+1$ . 所以这样构造一定是一个最优解. C Nauuo and Cards 策略是如果能不打 $0$ 直接完成,就直接完成,否则先打若干 $0$ ,然后再也不打 $0$ . 考虑如果已经打了若干 $0$ ,开始一直打数字牌,那么此时 $1$ 必定在手中, $2$ 必定在手中或在牌堆的第 $1$ 个位置(打了 $1$ 就会被摸到手中), $3$ 必定在手中或在第 $2$ 个位置,以此类推. 如果有一些牌的位置不合要求,那么我们需要先打空白牌来将他们加入到手中或是放到正确的位置. 在手中可以看做位置 $0$ ,记 $p_i$ 为 $i$ 的初始位置,那么答案就是 $n+\max\limits_{i=1}^n (p_i-i+1)$ . $n$ 是因为要连续打出 $1\sim n$ 这些牌,后面的部分是将 $p_i$ 调整到 $i-1$ 所需打出的 $0$ 的数目. 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;int n,a[MAXN],b[MAXN],p[MAXN];int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); for(int i=1;i&lt;=n;++i) p[b[i]=read()]=i; if(p[1]) &#123; int x; for(x=2;p[x]==p[1]+x-1;++x); if(p[x-1]==n) &#123; int y; for(y=x;y&lt;=n &amp;&amp; p[y]&lt;=y-x;++y); if(y&gt;n) &#123; cout&lt;&lt;n-x+1&lt;&lt;endl; return 0; &#125; &#125; &#125; int ans=0; for(int i=1;i&lt;=n;++i) ans=max(ans,p[i]-i+1); cout&lt;&lt;ans+n&lt;&lt;endl; return 0;&#125; D Nauuo and Circle $dp$ 计数. 考虑 $dp$ ,设 $f_u$ 表示子树 $u$ 的方案数,先钦定根节点为 $1$ ,最后答案就是 $n\cdot f_1$ . 画子树时,先要给所有儿子,若不为根,还有自己排序,转移有 $f_u=(|son_u|+[u==1])!\cdot \prod\limits_{v \in son_u}f_v$ . 把 $dp$ 的式子展开,可以发现答案就是 $n\cdot \prod\limits _{i=1}^n deg_i$ , $deg$ 表示度数. 待续…]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>构造</tag>
        <tag>树形dp</tag>
        <tag>codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4805 欧拉函数求和]]></title>
    <url>%2F2019%2F06%2F08%2Fbzoj-4805-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%E6%B1%82%E5%92%8C%2F</url>
    <content type="text"><![CDATA[练习了min_25筛.跑得挺快的. 注意将所有数都当成质数时, $f(x)=x-1$ ,但它并不是个完全积性函数. 所以要拆成 $f(x)=1,g(x)=x$ 两个函数分别预处理,然后相减. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int cnt=0,prime[MAXN],ism[MAXN];ll sumphi[MAXN];void init_prime(int n)&#123; ism[1]=1; for(int i=2;i&lt;=n;++i) &#123; if(!ism[i]) prime[++cnt]=i; for(int j=1;j&lt;=cnt &amp;&amp; i*prime[j]&lt;=n;++j) &#123; ism[i*prime[j]]=1; if(i%prime[j]==0) break; &#125; &#125; for(int i=1;i&lt;=cnt;++i) sumphi[i]=sumphi[i-1]+prime[i]-1;&#125;ll calcsum(int x)&#123; return 1LL*(2+x)*(x-1)/2;&#125;int tot=0,w[MAXN],id1[MAXN],id2[MAXN];ll f[MAXN],g[MAXN];int N,sqN;ll S(int n,int j)&#123; if(n&lt;=1 || prime[j]&gt;n) return 0; int id=n; if(id&lt;=sqN) id=id1[id]; else id=id2[N/id]; ll res=g[id]-sumphi[j-1]; for(int k=j;k&lt;=cnt &amp;&amp; 1LL*prime[k]*prime[k]&lt;=n;++k) &#123; ll pw1=prime[k],pw2=prime[k]*prime[k]; for(int e=1;pw2&lt;=n;++e) &#123; ll tmp=pw1/prime[k]*(prime[k]-1); tmp*=S(n/pw1,k+1); tmp+=pw2/prime[k]*(prime[k]-1); res+=tmp; pw1*=prime[k],pw2*=prime[k]; &#125; &#125; return res;&#125;int main()&#123; N=read(); sqN=(sqrt(N)); init_prime(sqN); for(int l=1,r;l&lt;=N;l=r+1) &#123; r=N/(N/l); w[++tot]=N/l; if(N/l&lt;=sqN) id1[N/l]=tot; else id2[N/(N/l)]=tot; &#125; for(int i=1;i&lt;=tot;++i) f[i]=w[i]-1,g[i]=calcsum(w[i]); for(int j=1;j&lt;=cnt;++j) for(int i=1;i&lt;=tot &amp;&amp; prime[j]*prime[j]&lt;=w[i];++i) &#123; int k=w[i]/prime[j]; if(k&lt;=sqN) k=id1[k]; else k=id2[N/k]; g[i]-=1LL*(prime[j])*(g[k]-sumphi[j-1]-j+1); f[i]-=f[k]-j+1; &#125; for(int i=1;i&lt;=tot;++i) g[i]-=f[i]; ll ans=S(N,1)+1; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>min_25筛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[min_25筛学习笔记]]></title>
    <url>%2F2019%2F06%2F05%2Fmin-25%E7%AD%9B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[一篇比较详细的学习笔记. 由于渲染有点小问题,所以就直接传 $PDF$ 了.]]></content>
      <tags>
        <tag>数学</tag>
        <tag>学习笔记</tag>
        <tag>min_25筛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4667 小y的密码]]></title>
    <url>%2F2019%2F06%2F04%2Fbzoj-4667-%E5%B0%8Fy%E7%9A%84%E5%AF%86%E7%A0%81%2F</url>
    <content type="text"><![CDATA[排列/组合计数. 限制是否满足只与 $0\sim 9$ 这些数字各自出现了多少次有关.所以可以 $dfs$ 大力枚举这些数字各自的出现次数. 若限制满足,再计算用这些数字能组合出多少 $\leq n$ 的数. 若这些数个数不足 $n$ 的位数,那么就是带重复元素的排列数.注意减掉有前导 $0$ 的情况. 若个数达到了 $n$ 的位数,就枚举从哪一位开始可以不用考虑限制(就相当于数位 $dp$ 里面那个 $limit$ ). 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int n,k,limit;int t,pw[11];int a[11],tot[11],fig[11],m=0;int fac[11];ll ans=0;bool check()&#123; if(!m || !a[m]) return false; int mid=a[(m+1)&gt;&gt;1]; ll sum=0; for(int i=1;i&lt;=m &amp;&amp; sum&lt;=limit;++i) &#123; ll tmp=1; for(int j=1;j&lt;=k;++j) tmp*=a[i]-mid; sum+=tmp; &#125; return sum&lt;=limit;&#125;int calc(int x)&#123; int res=fac[x]; for(int i=0;i&lt;=9;++i) res/=fac[tot[i]]; return res;&#125;void solve()&#123; memset(tot,0,sizeof tot); for(int i=1;i&lt;=m;++i) ++tot[a[i]]; if(m&lt;t) &#123; ans+=calc(m); if(tot[0]) &#123; --tot[0]; ans-=calc(m-1); &#125; &#125; else &#123; bool flag=true; int tmp=t; for(int i=t;i&gt;=1;--i) &#123; for(int j=(i==t);j&lt;fig[i];++j) if(tot[j]) &#123; --tot[j]; --tmp; ans+=calc(tmp); ++tot[j]; ++tmp; &#125; if(!tot[fig[i]]) &#123; flag=false; break; &#125; --tot[fig[i]]; --tmp; &#125; ans+=(int)flag; &#125;&#125;void dfs(int x)&#123; if(check()) solve(); if(m==t) return; for(int i=x;i&lt;=9;++i) &#123; ++m; a[m]=i; dfs(i); --m; &#125;&#125;int main()&#123; fac[0]=1; for(int i=1;i&lt;=9;++i) fac[i]=fac[i-1]*i; n=read(),k=read(),limit=read(); while(n) fig[++t]=n%10,n/=10; dfs(0); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4606 DNA]]></title>
    <url>%2F2019%2F06%2F04%2Fbzoj-4606-DNA%2F</url>
    <content type="text"><![CDATA[$dp$ 计数. 求第 $R$ 大,可以想到把某一类的方案数全部算出来,用 $R$ 去减,就和用平衡树求第 $k$ 大,用 $k$ 减 $siz$ 的操作类似. 题面都明示了? 设 $f(i,j,k)$ 表示第 $i$ 个字符填 $j$ ,至少需要分成 $k$ 个不下降段的方案数.倒着 $dp$ 即可. 最后就从前往后匹配,一边匹配一边减就好了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=5e4+10;int n,m,a[MAXN],id[400];char s[MAXN],invid[5]=&#123;'A','C','G','T'&#125;;ll f[MAXN][5][11],R;int main()&#123; for(int i=0;i&lt;4;++i) id[invid[i]]=i; id['N']=4; n=read(),m=read(); R=read(); scanf("%s",s+1); for(int i=1;i&lt;=n;++i) a[i]=id[s[i]]; if(a[n]==4) for(int i=0;i&lt;4;++i) f[n][i][1]=1; else f[n][a[n]][1]=1; for(int i=n-1;i&gt;=1;--i) &#123; if(a[i]==4) &#123; for(int j=0;j&lt;4;++j) for(int k=1;k&lt;=m;++k) for(int l=0;l&lt;4;++l) f[i][j][k]+=f[i+1][l][k-(j&gt;l)]; &#125; else &#123; for(int k=1;k&lt;=m;++k) for(int l=0;l&lt;4;++l) f[i][a[i]][k]+=f[i+1][l][k-(a[i]&gt;l)]; &#125; &#125; for(int i=1;i&lt;=n;++i) for(int j=0;j&lt;4;++j) for(int k=1;k&lt;=m;++k) f[i][j][k]+=f[i][j][k-1]; a[0]=0; for(int i=1;i&lt;=n;++i) &#123; if(a[i]==4) &#123; for(int j=0;j&lt;4;++j) &#123; ll tmp=(j&lt;a[i-1])?f[i][j][m-1]:f[i][j][m]; if(R&gt;tmp) R-=tmp; else &#123; a[i]=j; break; &#125; &#125; &#125; if(a[i]&lt;a[i-1]) --m; printf("%c",invid[a[i]]); &#125; puts(""); return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4600 硬币游戏]]></title>
    <url>%2F2019%2F06%2F04%2Fbzoj-4600-%E7%A1%AC%E5%B8%81%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[博弈论. 操作一枚硬币,它只能影响到 $c$ 与自己相同的硬币.于是 $SG$ 函数就只需要 $a,b$ 两个状态. 而 $a,b$ 是指数,非常小,所以状态数目也很少,直接暴力计算 $SG$ 函数即可. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=25;int SG[MAXN][MAXN][MAXN];void init_SG(int maxq)&#123; vector&lt;int&gt; s; int tmp=0; for(int a=0;a&lt;=20;++a) for(int b=0;b&lt;=20;++b) &#123; s.clear(); for(int p=1;p&lt;=20;++p,tmp=0) for(int q=1;q&lt;=maxq &amp;&amp; p*q&lt;=a;++q) &#123; tmp^=SG[maxq][a-p*q][b]; s.push_back(tmp); &#125; for(int p=1;p&lt;=20;++p,tmp=0) for(int q=1;q&lt;=maxq &amp;&amp; p*q&lt;=b;++q) &#123; tmp^=SG[maxq][a][b-p*q]; s.push_back(tmp); &#125; sort(s.begin(),s.end()); int siz=s.size(); if(!siz || s[0]) &#123; SG[maxq][a][b]=0; continue; &#125; for(int i=1;i&lt;siz;++i) &#123; if(s[i]-s[i-1]&gt;=2) &#123; SG[maxq][a][b]=s[i-1]+1; break; &#125; &#125; if(!SG[maxq][a][b]) SG[maxq][a][b]=s[siz-1]+1; &#125;&#125;int n,maxq;int main()&#123; for(int i=1;i&lt;=20;++i) init_SG(i); int T=read(); while(T--) &#123; n=read(),maxq=read(); int ans=0; for(int i=1;i&lt;=n;++i) &#123; int dir=read(); if(dir) continue; int x=i,a=0,b=0; while(x%2==0) ++a,x/=2; while(x%3==0) ++b,x/=3; ans^=SG[maxq][a][b]; &#125; if(ans) puts("win"); else puts("lose"); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4602 齿轮]]></title>
    <url>%2F2019%2F06%2F04%2Fbzoj-4602-%E9%BD%BF%E8%BD%AE%2F</url>
    <content type="text"><![CDATA[图的 $dfs$ 遍历. 方向和速度显然可以分开判. 方向就是判二分图.而对于速度,走过一条边,相对速度可以看做乘了一个比值. 因为 $x,y\leq 100$ ,所以可以直接分解质因数,像染色那样做就可以了. 时间复杂度 $O(25m)$ . 另外一种更优雅的方法是直接在模大质数意义下做乘除法. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e4+10;int ism[101],cnt=0,prime[101];void init_prime()&#123; ism[1]=1; for(int i=2;i&lt;=100;++i) &#123; if(!ism[i]) prime[++cnt]=i; for(int j=1;j&lt;=cnt &amp;&amp; prime[j]*i&lt;=100;++j) &#123; ism[prime[j]*i]=1; if(i%prime[j]==0) break; &#125; &#125;&#125;int ecnt,head[MAXN];struct edge&#123; int to,nx; int dir; int x,y;&#125;E[MAXN&lt;&lt;1];void addedge(int u,int v,int x,int y)&#123; ++ecnt; E[ecnt].to=v; E[ecnt].nx=head[u]; E[ecnt].dir=(x*y&lt;0)?-1:1; E[ecnt].x=abs(x); E[ecnt].y=abs(y); head[u]=ecnt;&#125;int n,m;int dir[MAXN],factor[MAXN][26];void init()&#123; ecnt=0; memset(head,0,sizeof head); memset(dir,0,sizeof dir); memset(factor,0,sizeof factor);&#125;int transfac[26];void add(int x,int c)&#123; for(int i=1;i&lt;=cnt &amp;&amp; prime[i]&lt;=x;++i) while(x%prime[i]==0) &#123; x/=prime[i]; transfac[i]+=c; &#125;&#125;bool dfs(int u)&#123; bool flag=true; for(int i=head[u];i &amp;&amp; flag;i=E[i].nx) &#123; int v=E[i].to; memset(transfac,0,sizeof transfac); add(E[i].y,1); add(E[i].x,-1); if(dir[v]) &#123; if(dir[u]*E[i].dir!=dir[v]) return false; for(int i=1;i&lt;=25;++i) if(factor[u][i]+transfac[i]!=factor[v][i]) return false; &#125; else &#123; dir[v]=dir[u]*E[i].dir; for(int i=1;i&lt;=25;++i) factor[v][i]=factor[u][i]+transfac[i]; flag&amp;=dfs(v); &#125; &#125; return flag;&#125;int main()&#123; init_prime(); int T=read(); for(int casenum=1;casenum&lt;=T;++casenum) &#123; init(); n=read(),m=read(); for(int i=1;i&lt;=m;++i) &#123; int u=read(),v=read(),x=read(),y=read(); addedge(u,v,x,y); addedge(v,u,y,x); &#125; bool flag=true; for(int i=1;i&lt;=n &amp;&amp; flag;++i) if(!dir[i]) &#123; dir[i]=1; flag&amp;=dfs(i); &#125; if(flag) printf("Case #%d: Yes\n",casenum); else printf("Case #%d: No\n",casenum); &#125; return 0;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4627 回转寿司]]></title>
    <url>%2F2019%2F06%2F03%2Fbzoj-4627-%E5%9B%9E%E8%BD%AC%E5%AF%BF%E5%8F%B8%2F</url>
    <content type="text"><![CDATA[线段树. 区间和可以转化为前缀和之差.记前缀和为 $sum$ ,从前往后加入数,加入到第 $i$ 个数的时候,就要算 $L\leq sum_i-sum_j\leq R,0\leq j&lt;i$ 的 $j$ 的数目. 不等式变一下,就是求 $sum_i-R\leq sum_j\leq sum_i-L$ 的数目.用权值线段树来维护,动态开点即可. 注意权值可能是负的,所以根节点的 $l,r$ 分别为 $-inf,inf$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;const ll inf=1e10;int n,L,R;struct Segtree&#123; int idx; struct node &#123; int cnt; int ls,rs; node()&#123;cnt=ls=rs=0;&#125; &#125;Tree[MAXN*50]; Segtree()&#123;idx=0;&#125;#define root Tree[o] void upd(int &amp;o,ll l,ll r,ll pos) &#123; if(!o) o=++idx; ++root.cnt; if(l==r) return; ll mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) upd(root.ls,l,mid,pos); else upd(root.rs,mid+1,r,pos); &#125; int query(int o,ll l,ll r,ll L,ll R) &#123; if(L&gt;R || R&lt;l || l&gt;R) return 0; if(L&lt;=l &amp;&amp; r&lt;=R) return root.cnt; int res=0; ll mid=(l+r)&gt;&gt;1; if(L&lt;=mid) res+=query(root.ls,l,mid,L,R); if(R&gt;mid) res+=query(root.rs,mid+1,r,L,R); return res; &#125;&#125;T;int rt=0;ll ans=0,sum=0;int main()&#123; n=read(); L=read(),R=read(); T.upd(rt,-inf,inf,0); for(int i=1;i&lt;=n;++i) &#123; sum+=read(); ans+=T.query(rt,-inf,inf,sum-R,sum-L); T.upd(rt,-inf,inf,sum); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4662 snow]]></title>
    <url>%2F2019%2F06%2F02%2Fbzoj-4662-snow%2F</url>
    <content type="text"><![CDATA[线段树. 考虑将 $L$ 离散化后,用线段树来维护每个清理工当前的工作长度. 若一个人将区间 $[L,R]$ 清扫后,被影响的人 $i$ 应该满足 $L&lt;L_i\leq R$ 或 $R_i\geq L&gt;L_i$ ,编号是一个区间. 显然不能直接修改,因为对它们的影响是不一样的.但对于所有影响到的 $L_i$ 相同的 $i$ 或所有 $R_i$ 相同的 $i$ 的影响是一样的,而这些人的编号也是一个区间. 于是可以用一个 $set$ 存储所有的三元组 $(l,r,pos)$ 表示编号在区间 $l,r$ 内的人,均满足 $L_i=pos$ .再用一个 $set$ 存储 $R_i=pos$ 的所有三元组. 修改时暴力取出所有的三元组,在线段树上修改后将它们合并成一个三元组放回去.而合并只会使区间变大,操作总次数是 $O(n)$ 的,所以时间复杂度是对的. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=3e5+10;const int inf=1e9;int n,t,L[MAXN],R[MAXN];struct Segtree&#123; struct node &#123; int tag,val; node()&#123;tag=val=0;&#125; &#125;Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1] void pushup(int o) &#123; root.val=min(lson.val,rson.val); &#125; void modifiy(int o,int c) &#123; root.tag+=c; root.tag=min(root.tag,inf); root.val+=c; root.val=min(root.val,inf); &#125; void pushdown(int o) &#123; if(root.tag) &#123; modifiy(o&lt;&lt;1,root.tag); modifiy(o&lt;&lt;1|1,root.tag); root.tag=0; &#125; &#125; void BuildTree(int o,int l,int r) &#123; if(l==r) &#123; root.val=R[l]-L[l]+1; return; &#125; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); pushup(o); &#125; void upd(int o,int l,int r,int L,int R,int c)//[L,R]+=c &#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; modifiy(o,c); return; &#125; pushdown(o); int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) upd(o&lt;&lt;1|1,mid+1,r,L,R,c); pushup(o); &#125; int query(int o,int l,int r) &#123; if(l==r) return l; pushdown(o); int mid=(l+r)&gt;&gt;1; if(lson.val&lt;=rson.val) return query(o&lt;&lt;1,l,mid); else return query(o&lt;&lt;1|1,mid+1,r); &#125;&#125;Seg;struct Fenwicktree&#123; int bit[MAXN]; Fenwicktree()&#123;memset(bit,0,sizeof bit);&#125;#define lowbit(x) x&amp;(-x) void add(int x,int c) &#123; for(;x&lt;=n;x+=lowbit(x)) bit[x]+=c,bit[x]=min(bit[x],inf); &#125; int query(int x) &#123; int s=0; for(;x;x-=lowbit(x)) s+=bit[x],s=min(s,inf); return s; &#125; void upd(int L,int R,int c) &#123; add(L,c); add(R+1,-c); &#125;&#125;Fenwick;struct interval&#123; int l,r,pos; interval(int l=0,int r=0,int pos=0):l(l),r(r),pos(pos) &#123;&#125; bool operator &lt; (const interval &amp;rhs) const &#123; return pos&lt;rhs.pos; &#125;&#125;;set&lt;interval&gt; SL,SR;set&lt;interval&gt;::iterator it,tt;int main()&#123; t=read(),n=read(); for(int i=1;i&lt;=n;++i) &#123; L[i]=read(); R[i]=read(); &#125; for(int i=1;i&lt;=n;++i) &#123; Fenwick.add(i,L[i]-L[i-1]); SL.insert(interval(i,i,L[i])); SR.insert(interval(i,i,R[i])); &#125; Seg.BuildTree(1,1,n); SL.insert(interval(0,0,0)); SL.insert(interval(0,0,t+1)); SR.insert(interval(0,0,0)); SR.insert(interval(0,0,t+1)); for(int i=1;i&lt;=n;++i) &#123; int x=Seg.query(1,1,n); printf("%d\n",x); int l=Fenwick.query(x); int r=l+Seg.Tree[1].val-1; if(l!=r) &#123; int lx=n+1,rx=1; interval tmp=interval(0,0,l); it=SL.lower_bound(tmp); while((*it).pos&lt;=r) &#123; rx=max(rx,(*it).r); lx=min(lx,(*it).l); Fenwick.upd((*it).l,(*it).r,r-(*it).pos); Seg.upd(1,1,n,(*it).l,(*it).r,(*it).pos-r); tt=it; ++it; SL.erase(tt); &#125; SL.insert(interval(lx,rx,r)); lx=n+1,rx=1; tmp=interval(0,0,r); it=SR.lower_bound(tmp); while((*it).pos&gt;l) &#123; rx=max(rx,(*it).r); lx=min(lx,(*it).l); Seg.upd(1,1,n,(*it).l,(*it).r,l-(*it).pos); tt=it; --it; SR.erase(tt); &#125; SR.insert(interval(lx,rx,l)); &#125; Seg.upd(1,1,n,x,x,inf); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4663 hack]]></title>
    <url>%2F2019%2F05%2F30%2Fbzoj-4663-hack%2F</url>
    <content type="text"><![CDATA[最小割. 如果没有只能经过 $1$ 条被 $hack$ 边的限制,就是个裸的最小割. 解决的方法就是反向边的权值建成 $inf$ .感性理解一下,看下面这个图(图来自出题人): 在没有建 $inf$ 边前,割掉图中两条红色标记边是最优方案.而加上 $inf$ 后,就会出现 $st\to b\to a\to ed$ 这条路径.还需要割掉其他的边. 这样一来,不同时割掉两条红色标记边(即在一条路径上的边)就不会变得更劣. 还要注意将 $st$ 原来到不了的点预处理出来,将它们打上标记删去.否则可能出现如下情况(图来自出题人): 本来 $st$ 到不了 $a$ ,但加了 $inf$ 边后就连通了,会导致割掉额外的边. 这大概是几个月前考试做的?犹记李巨随手切了此题. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e2+10,MAXM=1e4+10;const ll inf=1e18;int ecnt=-1,head[MAXN];struct Edge&#123; int to,nx; ll flow;&#125;E[MAXM];void addedge(int u,int v,ll flow)&#123; ++ecnt; E[ecnt].to=v; E[ecnt].nx=head[u]; E[ecnt].flow=flow; head[u]=ecnt;&#125;int n,m;bool reachable[MAXN];void init()&#123; queue&lt;int&gt; q; reachable[1]=true; q.push(1); while(!q.empty()) &#123; int u=q.front(); q.pop(); for(int i=head[u];i!=-1;i=E[i].nx) &#123; int v=E[i].to; if(reachable[v] || E[i].flow&gt;=inf) continue; reachable[v]=true; q.push(v); &#125; &#125;&#125;int dep[MAXN],cur[MAXN];bool bfs(int S,int T)&#123; for(int i=1;i&lt;=n;++i) cur[i]=head[i]; memset(dep,-1,sizeof dep); dep[S]=0; queue&lt;int&gt; q; q.push(S); while(!q.empty()) &#123; int u=q.front(); q.pop(); for(int i=head[u];i!=-1;i=E[i].nx) &#123; int v=E[i].to; if(!reachable[v] || E[i].flow&lt;=0 || dep[v]!=-1) continue; dep[v]=dep[u]+1; q.push(v); &#125; &#125; return dep[T]!=-1;&#125;ll dfs(int u,int T,ll limit)&#123; if(u==T || !limit) return limit; ll f,flow=0; for(int i=cur[u];i!=-1;i=E[i].nx) &#123; cur[u]=i; int v=E[i].to; if(!reachable[v]) continue; if(E[i].flow&gt;0 &amp;&amp; dep[v]==dep[u]+1 &amp;&amp; (f=dfs(v,T,min(limit,E[i].flow)))) &#123; flow+=f; limit-=f; E[i].flow-=f; E[i^1].flow+=f; if(!limit) break; &#125; &#125; return flow;&#125;ll Dinic(int S,int T)&#123; ll maxflow=0; while(bfs(S,T)) maxflow+=dfs(S,T,inf); return maxflow;&#125;int main()&#123; memset(head,-1,sizeof head); n=read(),m=read(); for(int i=1;i&lt;=m;++i) &#123; int u=read()+1; int v=read()+1; int w=read(); addedge(u,v,w); addedge(v,u,inf); &#125; init(); ll ans=Dinic(1,n); if(ans&lt;0 || ans&gt;=inf) puts("-1"); else cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4681 旅行]]></title>
    <url>%2F2019%2F05%2F30%2Fbzoj-4681-%E6%97%85%E8%A1%8C%2F</url>
    <content type="text"><![CDATA[最短路. 这类点,边数目比较少,却有一些奇奇怪怪的条件的最短路,大多都是拆点.然而实现时并不需要真的拆点,只需要在做最短路的时候给 $dis$ 多加几维即可. 考虑暴力做法,应该是 $dfs$ 找出每一条路径,贪心地将不在路径上最短的边与在路径上最长的边交换,最多 $k$ 次. 然而路径条数可以被随便搞到指数级. 沿用贪心的思想,最后最优路径中的边一定会包含全部前 $L$ 小的边,可以将边排序,枚举 $L$ ,结合最短路解决. 设 $f(u,j,k)$ 表示从 $1$ 到 $u$ ,路径上有 $j$ 条前 $L$ 小的边,交换了 $k$ 次时的最短路.转移时分当前边不在前 $L$ 小与当前边在前 $L$ 小,用 $Dijkstra$ 转移即可. 注意正反加了两条边,实际排名需 $/2$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=151;int ans=0x7fffffff;int ecnt=0,head[MAXN],nx[MAXN&lt;&lt;1],to[MAXN&lt;&lt;1];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;struct Edge&#123; int u,v,len; bool operator &lt; (const Edge &amp;rhs) const &#123; return len&lt;rhs.len; &#125;&#125;E[MAXN];struct node&#123; int u,j,k,dis; bool operator &lt; (const node &amp;rhs) const &#123; return dis&gt;rhs.dis; &#125; node(int u=0,int j=0,int k=0,int dis=0):u(u),j(j),k(k),dis(dis) &#123;&#125;&#125;;int N,M,K;int dis[MAXN][MAXN][MAXN],vis[MAXN][MAXN][MAXN];priority_queue&lt;node&gt; q;void Dijkstra(int L)&#123; memset(vis,0,sizeof vis); memset(dis,63,sizeof dis); node p=node(1,0,0,0); dis[1][0][0]=0; q.push(p); while(!q.empty()) &#123; p=q.top(); q.pop(); int u=p.u,j=p.j,k=p.k; if(vis[u][j][k]) continue; vis[u][j][k]=1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(i&lt;=L*2) &#123; if(j&lt;L &amp;&amp; dis[v][j+1][k]-dis[u][j][k]&gt;E[j+1].len) &#123; dis[v][j+1][k]=dis[u][j][k]+E[j+1].len; p=node(v,j+1,k,dis[v][j+1][k]); q.push(p); &#125; &#125; else &#123; if(j&lt;L &amp;&amp; k&lt;K &amp;&amp; dis[v][j+1][k+1]-dis[u][j][k]&gt;E[j+1].len) &#123; dis[v][j+1][k+1]=dis[u][j][k]+E[j+1].len; p=node(v,j+1,k+1,dis[v][j+1][k+1]); q.push(p); &#125; if(dis[v][j][k]-dis[u][j][k]&gt;E[(i+1)&gt;&gt;1].len) &#123; dis[v][j][k]=dis[u][j][k]+E[(i+1)&gt;&gt;1].len; p=node(v,j,k,dis[v][j][k]); q.push(p); &#125; &#125; &#125; &#125; for(int i=0;i&lt;=K;++i) ans=min(ans,dis[N][L][i]);&#125;int main()&#123; N=read(),M=read(),K=read(); for(int i=1;i&lt;=M;++i) &#123; E[i].u=read(); E[i].v=read(); E[i].len=read(); &#125; sort(E+1,E+1+M); for(int i=1;i&lt;=M;++i) &#123; addedge(E[i].u,E[i].v); addedge(E[i].v,E[i].u); &#125; for(int i=0;i&lt;=M;++i) Dijkstra(i); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4669 抢夺]]></title>
    <url>%2F2019%2F05%2F30%2Fbzoj-4669-%E6%8A%A2%E5%A4%BA%2F</url>
    <content type="text"><![CDATA[二分答案 + 费用流. 答案显然可以二分,只需要如何验证一个答案 $mid$ 是否合法. 考虑第一波同时出发的人,他们会选择最优的路径,而后来的人选择的路径必定与他们相同. 于是可以通过增广计算出在 $mid$ 天内到达的人数.而退流操作对应的贡献也是正确的,所以不需要另外考虑. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e4+10;const int inf=1e9;int ecnt=-1,head[MAXN];struct edge&#123; int nx,to,flow,dis;&#125;E[MAXN];void addedge(int u,int v,int flow,int dis)&#123; ++ecnt; E[ecnt].nx=head[u]; E[ecnt].to=v; E[ecnt].flow=flow; E[ecnt].dis=dis; head[u]=ecnt;&#125;void ins(int u,int v,int flow,int dis)&#123; addedge(u,v,flow,dis); addedge(v,u,0,-dis);&#125;int n,m,k;int dis[MAXN],flow[MAXN],pre[MAXN],lst[MAXN],vis[MAXN];queue&lt;int&gt; q;bool spfa(int S,int T)&#123; while(!q.empty()) q.pop(); for(int i=1;i&lt;=n;++i) &#123; vis[i]=0; flow[i]=inf; dis[i]=inf; &#125; pre[T]=-1; vis[S]=1; dis[S]=0; q.push(S); while(!q.empty()) &#123; int u=q.front(); q.pop(); vis[u]=0; for(int i=head[u];i!=-1;i=E[i].nx) &#123; int v=E[i].to; if(E[i].flow&gt;0 &amp;&amp; dis[v]&gt;dis[u]+E[i].dis) &#123; dis[v]=dis[u]+E[i].dis; flow[v]=min(flow[u],E[i].flow); pre[v]=u; lst[v]=i; if(!vis[v]) &#123; vis[v]=1; q.push(v); &#125; &#125; &#125; &#125; return pre[T]!=-1;&#125;int Dist[MAXN],Flow[MAXN],tot=0;int mcmf(int S,int T)&#123; while(spfa(S,T)) &#123; int now=T; while(now!=S) &#123; E[lst[now]].flow-=flow[T]; E[lst[now]^1].flow+=flow[T]; now=pre[now]; &#125; ++tot; Dist[tot]=dis[T]; Flow[tot]=flow[T]; &#125;&#125;void init()&#123; memset(head,-1,sizeof head); ecnt=-1; tot=0;&#125;bool check(int mid)&#123; ll tmp=k; for(int i=1;i&lt;=tot &amp;&amp; tmp&gt;0;++i) tmp-=1LL*(mid-Dist[i]+1)*Flow[i]; return tmp&lt;=0;&#125;int main()&#123; while(~scanf("%d%d%d",&amp;n,&amp;m,&amp;k)) &#123; init(); for(int i=1;i&lt;=m;++i) &#123; int u=read()+1,v=read()+1,c=read(); ins(u,v,c,1); &#125; mcmf(1,n); int ans=-1,L=0,R=n+k+1; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(check(mid)) ans=mid,R=mid-1; else L=mid+1; &#125; if(ans==-1) puts("No solution"); else printf("%d\n",ans); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>二分</tag>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4621 Tc605]]></title>
    <url>%2F2019%2F05%2F29%2Fbzoj-4621-Tc605%2F</url>
    <content type="text"><![CDATA[$dp$ . 一个数字只可以往左右拓展,把周围的数变成和它一样的数.所以最终状态一定是一些数字段拼起来的,而且数字之间相对的前后顺序不会改变. 对最终状态进行 $dp$ .设 $f(i,j)$ 表示考虑了前 $i$ 个位置,操作了 $j$ 次的情况总数.一个数字段最多操作一次,处理出每个数字左右延伸的范围,枚举拓展的右端点进行转移即可. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=512;int n,m,a[MAXN],f[MAXN][MAXN];int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); f[0][0]=1; for(int i=1;i&lt;=n;++i) &#123; int l=i; while(l&gt;1 &amp;&amp; a[l-1]&lt;a[i]) --l; int r=i; while(r&lt;n &amp;&amp; a[r+1]&lt;a[i]) ++r; f[i][m]=add(f[i][m],f[i-1][m]); for(int j=m;j&gt;=1;--j) &#123; int tmp=f[l-1][j-1]; for(int k=l;k&lt;=r;++k) &#123; f[k][j]=add(f[k][j],tmp); tmp=add(tmp,f[k][j-1]); &#125; f[i][j-1]=add(f[i][j-1],f[i-1][j-1]); f[i][j]=add(f[i][j],-f[i-1][j-1]); &#125; &#125; int ans=0; for(int i=0;i&lt;=m;++i) ans=add(ans,f[n][i]); cout&lt;&lt;add(ans,P)&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4658 rescue]]></title>
    <url>%2F2019%2F05%2F29%2Fbzoj-4658-rescue%2F</url>
    <content type="text"><![CDATA[$dp$ + 线段树. 显然只有关键点有用.设 $f(i)$ 表示到了第 $i$ 个关键点时的最小损失.把起点看做第 $0$ 个关键点,转移有: $$f(i)=\min_{j=0}^{i-1}\lbrace f(j)+ \lceil \frac {T_i-T_j} D \rceil\cdot A\rbrace - b_i$$ 这样大力转移是 $O(n^2)$ 的.注意到 $D$ 是固定的,考虑把 $T$ 写成 $T=C\cdot D+E,0\leq E&lt;D$ . 那么原式就可以变成 $$f(i)=\min_{j=0}^{i-1}\lbrace f(j)+ A\cdot (C_i-C_j)+[E_i&gt;E_j]\cdot A\rbrace - b_i$$ 以 $E$ 为下标建一颗动态开点的线段树,在 $E_j&lt; E_i,E_j\geq E_i$ 两部分分别查询 $f_j-A\cdot C_j$ 的最小值即可. 注意把 $Tree[0].val$ 初始化为 $inf$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;const ll inf=1e18;struct Segtree&#123; int idx; Segtree()&#123;idx=0;Tree[0].ls=Tree[0].rs=0;Tree[0].val=inf;&#125; struct node &#123; int ls,rs; ll val; &#125;Tree[MAXN*30];#define root Tree[o]#define lson Tree[root.ls]#define rson Tree[root.rs] void pushup(int o) &#123; root.val=min(lson.val,rson.val); &#125; void ins(int &amp;o,int l,int r,int pos,ll c) &#123; if(!o) &#123; o=++idx; root.val=inf; root.ls=root.rs=0; &#125; if(l==r) &#123; root.val=min(root.val,c); return; &#125; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) ins(root.ls,l,mid,pos,c); else ins(root.rs,mid+1,r,pos,c); pushup(o); &#125; ll query(int o,int l,int r,int L,int R) &#123; if(!o || L&gt;R) return inf; if(L&lt;=l &amp;&amp; r&lt;=R) return root.val; ll res=inf; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) res=min(res,query(root.ls,l,mid,L,R)); if(R&gt;mid) res=min(res,query(root.rs,mid+1,r,L,R)); return res; &#125;&#125;T;int n,rt=0;int A,B[MAXN],C[MAXN],D,E[MAXN],K,M;ll f[MAXN];void update_info(int x)&#123; T.ins(rt,0,D-1,E[x],f[x]-1LL*A*C[x]);&#125;int main()&#123; K=read(),M=read(),D=read(),A=read(); n=read(); C[0]=K/D,E[0]=K%D,B[0]=0; ++n; C[n]=M/D,E[n]=M%D,B[n]=0; f[0]=0; update_info(0); for(int i=1;i&lt;n;++i) &#123; int T=read(); C[i]=T/D; E[i]=T%D; B[i]=read(); &#125; for(int i=1;i&lt;=n;++i) &#123; f[i]=1LL*C[i]*A-B[i]; ll tmp=T.query(rt,0,D-1,0,E[i]-1)+A; tmp=min(tmp,T.query(rt,0,D-1,E[i],D-1)); f[i]+=tmp; update_info(i); &#125; cout&lt;&lt;(-f[n])&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4659 lcm]]></title>
    <url>%2F2019%2F05%2F28%2Fbzoj-4659-lcm%2F</url>
    <content type="text"><![CDATA[莫比乌斯反演. 转化一下条件,数对 $(a,b)$ 符合要求等价于 $\mu(gcd(a,b))\not=0​$ . 为了方便,记 $m=\min(A,B)$ , 集合 $S=\lbrace x|\mu(x)\not=0\rbrace$ ,$sum(x)=\frac {x(x+1)} 2$ . 则答案 $ans$ 为: 到这一步,直接用两个整除分块算,时间复杂度 $O(T\cdot n^{\frac 3 4})$. 然而发现极限数据要跑 $10s+$ . 再变一步,将枚举 $x,d$ 变为先枚举 $D=xd$ ,再枚举 $x$. $$ans=\sum_{D=1}^{m}D \sum_{x|D} \mu(x)^2\mu(\frac D x)\frac D x \sum_{a=1}^{A/D}\sum_{b=1}^{B/D} ab$$ 设三个函数 $f,g,h$ : 函数 $g,h$ 显然都是积性函数.而 $f=g*h$ ,也为积性函数.于是可以线性筛预处理 $f$ ,然后对 $D$ 整除分块. 时间复杂度优化到 $O(T\cdot \sqrt n)$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1&lt;&lt;30;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P; &#125;const int MAXN=4e6+10;int prime[MAXN],cnt=0,ism[MAXN],mu[MAXN];int f[MAXN],sumfx[MAXN];void init(int N)&#123; ism[1]=1,mu[1]=1; sumfx[1]=1; f[1]=1; for(int i=2;i&lt;=N;++i) &#123; if(!ism[i]) &#123; prime[++cnt]=i; mu[i]=-1; f[i]=-i+1; &#125; for(int j=1;j&lt;=cnt &amp;&amp; prime[j]*i&lt;=N;++j) &#123; ism[prime[j]*i]=1; if(i%prime[j]) &#123; mu[i*prime[j]]=-mu[i]; f[i*prime[j]]=mul(f[i],f[prime[j]]); &#125; else &#123; mu[i*prime[j]]=0; if((1LL*i)%(1LL*prime[j]*prime[j])==0) f[i*prime[j]]=0; else f[i*prime[j]]=mul(f[i/prime[j]],-prime[j]); break; &#125; &#125; sumfx[i]=add(sumfx[i-1],mul(i,f[i])); &#125;&#125;int sum(int x)&#123; return (1LL*x*(x+1)/2)%P;&#125;int main()&#123; init(4000000); int T=read(); while(T--) &#123; int ans=0; int A=read(),B=read(); int m=min(A,B); for(int LD=1,RD;LD&lt;=m;LD=RD+1) &#123; RD=min(A/(A/LD),B/(B/LD)); ans=add(ans,mul(sumfx[RD]-sumfx[LD-1],mul(sum(A/LD),sum(B/LD)))); &#125; printf("%d\n",add(ans,P)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4657 tower]]></title>
    <url>%2F2019%2F05%2F28%2Fbzoj-4657-tower%2F</url>
    <content type="text"><![CDATA[最小割. 想到网络流应该不难,但关键是怎样建模. 因为只有横向炮塔与竖向炮塔可能发生冲突,所以可以先套路地把一个点拆成一个横点和一个竖点,横点向对应竖点之间连一条边权为 $inf$ 的边.然后从源点 $S$ 向每个竖向攻击的炮塔的竖点连边权为 $inf$ 的边,从每个横向攻击的炮塔的横点向汇点 $T$ 连一条边权为 $inf$ 的边. 考虑每个炮塔,选择一个点进行攻击,这个点显然是从炮塔出发到最大贡献所在点这条路径 $p$ 上的某个点. 那么对于一个竖向攻击的炮塔,沿着路径 $p$ ,从炮塔到最大贡献点,相邻两点的竖点连上边. 对于一个横向攻击的炮塔,沿着路径 $p$ ,从最大贡献点到炮塔,相邻两点的横点连上边. 开始时钦定每个炮塔都打各自最大贡献点,收益为 $\sum max_i$ ,但这样会有路径相交,在图中表现为 $S$ 与 $T$ 连通.若一个炮塔改为打点 $u$ ,就把对应的路径 $p$ 上以 $u$ 为一端,另一端远离炮塔的点的边割掉就行了.减少的收益是 $max_i-val_u$ .可以发现,最后 $S$ 与 $T$ 不连通就与炮弹路径不相交是等价的. 于是在路径 $p$ 上连边时,将边权设置为 $max_i-val_u$ ,用 $\sum max_i$ 减去最小割即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int inf=1e9;const int MAXN=2e5+10;int ecnt=-1,head[MAXN],cur[MAXN],tot=0;struct edge&#123; int nx,to,flow;&#125;E[MAXN];void addedge(int u,int v,int w)&#123; ++ecnt; E[ecnt].to=v; E[ecnt].nx=head[u]; E[ecnt].flow=w; head[u]=ecnt;&#125;void ins(int u,int v,int w)&#123; addedge(u,v,w); addedge(v,u,0);&#125;int dep[MAXN];bool bfs(int S,int T)&#123; queue&lt;int&gt; q; while(!q.empty()) q.pop(); for(int i=1;i&lt;=tot;++i) cur[i]=head[i]; memset(dep,-1,sizeof dep); dep[S]=0; q.push(S); while(!q.empty()) &#123; int u=q.front(); q.pop(); for(int i=head[u];i!=-1;i=E[i].nx) &#123; int v=E[i].to; if(dep[v]==-1 &amp;&amp; E[i].flow) &#123; dep[v]=dep[u]+1; q.push(v); &#125; &#125; &#125; return dep[T]!=-1;&#125;int dfs(int u,int T,int limit)&#123; if(u==T || !limit) return limit; int f,flow=0; for(int i=cur[u];i!=-1;i=E[i].nx) &#123; cur[u]=i; int v=E[i].to; if(dep[v]==dep[u]+1 &amp;&amp; (f=dfs(v,T,min(limit,E[i].flow)))) &#123; limit-=f; flow+=f; E[i].flow-=f; E[i^1].flow+=f; if(!limit) break; &#125; &#125; return flow;&#125;int Dinic(int S,int T)&#123; int maxflow=0; while(bfs(S,T)) maxflow+=dfs(S,T,inf); return maxflow;&#125;int n,m;int node_id[51][51][2];//0:up/down 1:left/rightint org_graph[51][51];int S,T,ans=0;void build_graph(int x,int y,int tp)&#123; org_graph[x][y]=0; if(tp==1 || tp==2) &#123; ins(S,node_id[x][y][0],inf); int mx=0,maxpos=-1; if(tp==1) &#123; for(int i=x-1;i&gt;=1;--i) if(org_graph[i][y]&gt;mx) mx=org_graph[i][y],maxpos=i; if(maxpos==-1) return; for(int i=x-1;i&gt;=maxpos;--i) ins(node_id[i+1][y][0],node_id[i][y][0],mx-org_graph[i+1][y]); &#125; else &#123; for(int i=x+1;i&lt;=n;++i) if(org_graph[i][y]&gt;mx) mx=org_graph[i][y],maxpos=i; if(maxpos==-1) return; for(int i=x+1;i&lt;=maxpos;++i) ins(node_id[i-1][y][0],node_id[i][y][0],mx-org_graph[i-1][y]); &#125; ans+=mx; &#125; else &#123; ins(node_id[x][y][1],T,inf); int mx=0,maxpos=-1; if(tp==3) &#123; for(int j=y-1;j&gt;=1;--j) if(org_graph[x][j]&gt;mx) mx=org_graph[x][j],maxpos=j; if(maxpos==-1) return; for(int j=y-1;j&gt;=maxpos;--j) ins(node_id[x][j][1],node_id[x][j+1][1],mx-org_graph[x][j+1]); &#125; else &#123; for(int j=y+1;j&lt;=m;++j) if(org_graph[x][j]&gt;mx) mx=org_graph[x][j],maxpos=j; if(maxpos==-1) return; for(int j=y+1;j&lt;=maxpos;++j) ins(node_id[x][j][1],node_id[x][j-1][1],mx-org_graph[x][j-1]); &#125; ans+=mx; &#125;&#125;int main()&#123; memset(head,-1,sizeof head); n=read(),m=read(); for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) &#123; org_graph[i][j]=read(); node_id[i][j][0]=++tot; node_id[i][j][1]=++tot; ins(tot-1,tot,inf); &#125; S=++tot,T=++tot; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) if(org_graph[i][j]&lt;0) build_graph(i,j,-org_graph[i][j]); ans-=Dinic(S,T); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Loj 6053 简单的函数]]></title>
    <url>%2F2019%2F05%2F28%2FLoj-6053-%E7%AE%80%E5%8D%95%E7%9A%84%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[min_25 筛 . 除了 $2$ 之外的质数 $p$ 都是奇数, $f(p)=p-1$ ,而 $f(2)=3$ . 把 $f(p)$ 都当成 $f(p)=p-1$ ,用 min_25 筛法来做.有 $2$ 就特判一下, $+2$ 就好了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;const int P=1e9+7;const int inv2=(P+1)&gt;&gt;1;inline int add(ll a,ll b)&#123; a%=P; b%=P; return (a + b) % P;&#125;inline int mul(ll a,ll b)&#123; a%=P; b%=P; return 1LL * a * b % P;&#125;ll n,sqr,w[MAXN];int cnt=0,ism[MAXN],sump[MAXN],m;ll prime[MAXN];ll id1[MAXN],id2[MAXN];void init(int N)&#123; ism[1]=1; for(int i=2;i&lt;=N;++i) &#123; if(!ism[i]) &#123; prime[++cnt]=i; sump[cnt]=add(sump[cnt-1],i); &#125; for(int j=1;j&lt;=cnt &amp;&amp; prime[j]*i&lt;=N;++j) &#123; ism[prime[j]*i]=1; if(i%prime[j]==0) break; &#125; &#125;&#125;int h[MAXN],g[MAXN],ans;int S(ll x,int y)&#123; if(x&lt;=1 || prime[y]&gt;x) return 0; int k=(x&lt;=sqr)?id1[x]:id2[n/x]; int res=add(g[k]-sump[y-1],y-h[k]-1); if(y==1) res+=2; for(int i=y;i&lt;=cnt &amp;&amp; 1LL*prime[i]*prime[i]&lt;=x;++i) &#123; ll pow1=prime[i],pow2=1LL*prime[i]*prime[i]; for(int e=1;pow2&lt;=x;++e,pow1=pow2,pow2*=prime[i]) &#123; int tmp=mul(S(x/pow1,i+1),prime[i]^e); tmp=add(tmp,prime[i]^(e+1)); res=add(res,tmp); &#125; &#125; return res;&#125;int main()&#123; n=read(); sqr=sqrt(n); init(sqr); for(ll l=1,r;l&lt;=n;l=r+1) &#123; ll &amp;i=l,&amp;j=r; r=n/(n/l); w[++m]=n/l; h[m]=add(w[m]%P,-1); g[m]=mul(w[m],w[m]+1); g[m]=mul(g[m],inv2); g[m]=add(g[m],-1); if(w[m]&lt;=sqr) id1[n/l]=m; else id2[r]=m; &#125; for(int j=1;j&lt;=cnt;++j) for(int i=1;i&lt;=m &amp;&amp; prime[j]*prime[j]&lt;=w[i];++i) &#123; int k=(w[i]/prime[j]&lt;=sqr)?id1[w[i]/prime[j]]:id2[n/(w[i]/prime[j])]; g[i]=add(g[i],-mul(prime[j],add(g[k],-sump[j-1]))); h[i]=add(h[i],j-h[k]-1); &#125; ans=add(S(n,1),1); cout&lt;&lt;(ans+P)%P&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
        <tag>min_25筛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4665 小w的喜糖]]></title>
    <url>%2F2019%2F05%2F27%2Fbzoj-4665-%E5%B0%8Fw%E7%9A%84%E5%96%9C%E7%B3%96%2F</url>
    <content type="text"><![CDATA[容斥 + $dp$ . 要求有重复元素的错排方案数. 设 $f(i,j)$ 表示考虑前 $i$ 种糖,钦定 $j$ 个人拿到原来的糖,其他 $(n-j)$ 个人乱拿的方案数. $cnt_x$ 表示第 $x$ 种糖的数目. 枚举第 $i$ 种糖被 $k$ 个原来的人拿到,有 $f(i,j)=\sum_{k\leq j,k\leq cnt_i} f(i-1,j-k)\times {cnt_i \choose k}\times [(cnt_i-k)!]^{-1}$ . 最终答案为 $ans=\sum_{i=0}^n (-1)^i \times f(n,i) \times (n-i)!$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+9;inline int add(int a,int b)&#123; return (a + b) % P; &#125; inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int inv(int x)&#123; return fpow(x,P-2);&#125;const int MAXN=2019;int n,cnt[MAXN],fac[MAXN],invfac[MAXN];int ans=0,f[MAXN][MAXN];void init()&#123; fac[0]=1; for(int i=1;i&lt;=n;++i) fac[i]=mul(fac[i-1],i); invfac[n]=inv(fac[n]); for(int i=n-1;i&gt;=0;--i) invfac[i]=mul(invfac[i+1],i+1);&#125;int C(int M,int N)// M \choose N&#123; if(M&lt;0 || N&lt;0 || M&lt;N) return 0; return mul(fac[M],mul(invfac[M-N],invfac[N]));&#125;int main()&#123; n=read(); init(); for(int i=1;i&lt;=n;++i) &#123; int x=read(); ++cnt[x]; &#125; f[0][0]=1; int sum=0; for(int i=1;i&lt;=n;++i) &#123; sum+=cnt[i]; for(int j=0;j&lt;=sum;++j) for(int k=0;k&lt;=cnt[i] &amp;&amp; k&lt;=j;++k) &#123; int tmp=mul(f[i-1][j-k],C(cnt[i],k)); tmp=mul(tmp,invfac[cnt[i]-k]); f[i][j]=add(f[i][j],tmp); &#125; &#125; for(int i=0;i&lt;=n;++i) &#123; int tmp=(i&amp;1)?(-1):(1); tmp=mul(tmp,f[n][i]); tmp=mul(tmp,fac[n-i]); ans=add(ans,tmp); &#125; cout&lt;&lt;add(ans,P)&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>数学</tag>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190526]]></title>
    <url>%2F2019%2F05%2F26%2Ftest20190526%2F</url>
    <content type="text"><![CDATA[感觉 $T3$ 很假. $tweak$ 题面有误.题意是每次可以选一条边,权值修改为任意非负整数,问至少改多少条可以使 $1\to n$ 的最短路 $\leq c$ . 显然可以贪心,每次修改时都改成 $0$ .设 $f(i,j)$ 表示 $1\to i$ ,改了 $j$ 条边时的最短路.用 $spfa$ 转移即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include&lt;bits/stdc++.h&gt;using namespace std;inline int read()&#123; int x=0,k=1; char ch=getchar(); while(ch&lt;'0'||ch&gt;'9') &#123;if(ch=='-') k=-1;ch=getchar();&#125; while(ch&gt;='0'&amp;&amp;ch&lt;='9') &#123;x=(x&lt;&lt;3)+(x&lt;&lt;1)+ch-'0';ch=getchar();&#125; return k*x;&#125;const int MAXN=1e3+10;int ecnt=0,head[MAXN],to[MAXN],nx[MAXN],val[MAXN];inline void addedge(int u,int v,int w)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; val[ecnt]=w; head[u]=ecnt;&#125;int n,m,c;int f[MAXN][MAXN],tot=0;int vis[MAXN];queue&lt;int&gt; q;void spfa()&#123; memset(f,63,sizeof f); int inf=f[0][0]; f[1][0]=0; vis[1]=1; q.push(1); while(!q.empty()) &#123; int u=q.front(); q.pop(); vis[u]=0; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; bool flag=false; for(int j=0;j&lt;=m;++j) &#123; if(f[u][j]&gt;=inf) break; if(f[u][j]&lt;=f[v][j+1]) &#123; f[v][j+1]=f[u][j]; &#125; if(f[u][j]+val[i]&lt;=f[v][j]) &#123; f[v][j]=f[u][j]+val[i]; if(!j) flag=true; &#125; &#125; if(flag &amp;&amp; !vis[v]) &#123; vis[v]=1; q.push(v); &#125; &#125; &#125;&#125;int main()&#123; freopen("tweak.in","r",stdin); freopen("tweak.out","w",stdout); n=read(),m=read(),c=read(); for(int i=1;i&lt;=m;++i) &#123; int u=read(),v=read(),w=read(); addedge(u,v,w); &#125; spfa(); for(int i=0;i&lt;=m;++i) if(f[n][i]&lt;=c) &#123; cout&lt;&lt;i&lt;&lt;endl; return 0; &#125; return 0;&#125; $coins$ 把每个硬币看做多项式 $(x^{a_i}+1)$ ,如果每个硬币都可以用,方案数就是 $\prod (x^{a_i}+1)$ 这个多项式中系数非零的 $x^k(k&gt;0)$ 的个数. 限定某个硬币 $i$ 不能用,只需要在多项式 $\prod (x^{a_i}+1)$ 中把 $(x^{a_i}+1)$ 除去,然后统计答案. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;bits/stdc++.h&gt;using namespace std;#define ll long longinline int read()&#123; int x=0,k=1; char ch=getchar(); while(ch&lt;'0'||ch&gt;'9') &#123;if(ch=='-') k=-1;ch=getchar();&#125; while(ch&gt;='0'&amp;&amp;ch&lt;='9') &#123;x=(x&lt;&lt;3)+(x&lt;&lt;1)+ch-'0';ch=getchar();&#125; return k*x;&#125;int n,a[101];const int MAXN=3e5+10;ll poly[MAXN],tmp[MAXN];ll stk[MAXN],sk[MAXN];int deg=0,tp=0;int query(int p)&#123; tp=0; int Deg=deg,res=0; while(Deg) &#123; ll s=poly[Deg]; if(!s) &#123; --Deg; continue; &#125; if(!tmp[Deg-p] &amp;&amp; Deg-p) ++res; tmp[Deg-p]+=s; stk[++tp]=Deg-p; poly[Deg-p]-=s; sk[tp]=s; --Deg; &#125; for(int i=1;i&lt;=tp;++i) &#123; tmp[stk[i]]=0; poly[stk[i]]+=sk[i]; &#125; return res;&#125;int main()&#123; freopen("coin.in","r",stdin); freopen("coin.out","w",stdout); n=read(); poly[0]=1; for(int i=1;i&lt;=n;++i) &#123; a[i]=read(); for(int j=deg;j&gt;=0;--j) poly[a[i]+j]+=poly[j]; deg+=a[i]; &#125; for(int i=1;i&lt;=n;++i) printf("%d\n",query(a[i])); return 0;&#125; $cakes$ $std:$ 维护一个堆,存储每种大小的元素数目.每次取出顶部三个,做最多的三元组,把剩余的放回去. 并不知道我的贪心哪里出了问题.]]></content>
      <tags>
        <tag>数学</tag>
        <tag>STL</tag>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4653 区间]]></title>
    <url>%2F2019%2F05%2F26%2Fbzoj-4653-%E5%8C%BA%E9%97%B4%2F</url>
    <content type="text"><![CDATA[线段树. 可以先将区间按照大小从小到大排序,并将端点离散化. 枚举以第 $i$ 个区间为最短区间时的答案,从 $i$ 开始往后面添加区间,直到有个点被覆盖 $m$ 次. 更新答案后,下次枚举不需要重新加入,只需要把第 $i$ 个区间删除即可. 用线段树支持区间覆盖与撤销,并维护被覆盖次数的最大值. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=5e5+10,inf=2e9;int n,m,ans=inf;int A[MAXN&lt;&lt;1],cnt=0;struct interval&#123; int l,r,len; bool operator &lt; (const interval &amp;rhs) const &#123; return len &lt; rhs.len; &#125;&#125;I[MAXN];int rk(int x)&#123; return lower_bound(A+1,A+1+cnt,x)-A;&#125;struct Segtree&#123; struct node &#123; int tag,mx; node()&#123;tag=mx=0;&#125; &#125;Tree[MAXN&lt;&lt;3];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1] int query() &#123; return Tree[1].mx; &#125; void pushup(int o) &#123; root.mx=max(lson.mx,rson.mx); &#125; void modifiy(int o,int c) &#123; root.tag+=c; root.mx+=c; &#125; void pushdown(int o) &#123; if(root.tag) &#123; modifiy(o&lt;&lt;1,root.tag); modifiy(o&lt;&lt;1|1,root.tag); root.tag=0; &#125; &#125; void upd(int o,int l,int r,int L,int R,int c) &#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; modifiy(o,c); return; &#125; int mid=(l+r)&gt;&gt;1; pushdown(o); if(L&lt;=mid) upd(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) upd(o&lt;&lt;1|1,mid+1,r,L,R,c); pushup(o); &#125;&#125;T;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) &#123; A[++cnt]=I[i].l=read(); A[++cnt]=I[i].r=read(); I[i].len=I[i].r-I[i].l; &#125; sort(I+1,I+1+n); sort(A+1,A+1+cnt); cnt=unique(A+1,A+1+cnt)-(A+1); for(int i=1;i&lt;=n;++i) &#123; I[i].l=rk(I[i].l); I[i].r=rk(I[i].r); &#125; int head=1,tail=0; while(head&lt;=n) &#123; while(T.query()&lt;m &amp;&amp; tail&lt;n) &#123; ++tail; T.upd(1,1,cnt,I[tail].l,I[tail].r,1); &#125; if(T.query()==m) ans=min(ans,I[tail].len-I[head].len); T.upd(1,1,cnt,I[head].l,I[head].r,-1); ++head; &#125; cout&lt;&lt;(ans==inf?-1:ans)&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4767 两双手]]></title>
    <url>%2F2019%2F05%2F26%2Fbzoj-4767-%E4%B8%A4%E5%8F%8C%E6%89%8B%2F</url>
    <content type="text"><![CDATA[容斥 +$dp$ . 把两种移动方式看做两个向量 $\vec a,\vec b$ .因为题目保证它们不共线,所以每个点都可以被写成 $x\cdot \vec a+y\cdot \vec b$ . 那么以解出来的 $(x,y)$ 代替原来的坐标,问题就变成了每次可以向右或向上走一步,求方案数. 如果没有障碍,答案显然是 $C_{x+y}^x$ .但现在有障碍.直接递推显然不行,因为新坐标可以达到 $2\times 500^2$ . 考虑容斥.将障碍点,目标点视为关键点,做坐标转换(如果不是整数就直接舍去),然后排序.原点为第 $0$ 个关键点. 设 $f(i)$ 表示从原点到达第 $i$ 个关键点而不经过其他关键点的方案数. $g(i,j)$ 表示从第 $i$ 个关键点到第 $j$ 个关键点的所有方案数.转移有 $f(i)=g(0,i)-\sum_{j=1}^{i-1} g(j,i)\cdot f(j)$ .而 $g$ 不需要考虑障碍,显然就是组合数. 时间复杂度 $O(n^2)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e6+10;const int P=1e9+7;const int inf=1e9;inline int add(int a,int b)&#123; return (a + b &gt;= P) ? (a + b - P) : (a + b);&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;typedef pair&lt;int,int&gt; pii;const pii badp=make_pair(inf,inf);int n,k=0,ax,ay,bx,by;int ex=inf,ey=inf;pii p[MAXN];pii trans(int M,int N)&#123; int x,y; int up=ay*M-ax*N,down=bx*ay-by*ax; if(up%down || up/down&lt;0) return badp; y=up/down; up=M*by-N*bx,down=ax*by-ay*bx; if(up%down || up/down&lt;0) return badp; x=up/down; if(x&gt;ex || y&gt;ey) return badp; return make_pair(x,y);&#125;int fac[MAXN],invfac[MAXN];void init()&#123; int N=MAXN-10; fac[0]=1; for(int i=1;i&lt;=N;++i) fac[i]=mul(fac[i-1],i); invfac[N]=fpow(fac[N],P-2); for(int i=N-1;i&gt;=0;--i) invfac[i]=mul(invfac[i+1],i+1);&#125;int C(int N,int M)&#123; return mul(fac[M],mul(invfac[N],invfac[M-N]));&#125;int g(int i,int j)&#123; int x=p[j].first-p[i].first,y=p[j].second-p[i].second; if(x&lt;0 || y&lt;0) return 0; return C(x,x+y);&#125;int f[MAXN];int main()&#123; init(); int Ex=read(),Ey=read(); n=read(),ax=read(),ay=read(),bx=read(),by=read(); p[++k]=trans(Ex,Ey); if(p[k]==badp) &#123; puts("0"); return 0; &#125; ex=p[k].first,ey=p[k].second; for(int i=1;i&lt;=n;++i) &#123; int x=read(),y=read(); pii tmp=trans(x,y); x=tmp.first,y=tmp.second; if(ex&lt;x || ey&lt;y) continue; assert(tmp!=badp); p[++k]=tmp; &#125; p[0]=make_pair(0,0); ++k; sort(p,p+k); f[0]=1; for(int i=1;i&lt;k;++i) &#123; f[i]=g(0,i); for(int j=1;j&lt;i;++j) f[i]=add(f[i],P-mul(g(j,i),f[j])); &#125; cout&lt;&lt;f[k-1]&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>容斥原理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Atcoder Beginner Contest 127]]></title>
    <url>%2F2019%2F05%2F25%2FAtcoder-Beginner-Contest-127%2F</url>
    <content type="text"><![CDATA[被 $E$ 给卡住了.数据范围读错还行. 前 $3$ 道题目主要考察读入和输出. D Integer Cards 贪心 + 二分. 显然可以随意安排操作的顺序.于是可以给操作按照 $c$ 从大到小排序,那么前面的操作就不会影响后面的操作. 于是每次操作的时候贪心选小的替换,替换后直接将那部分删去就可以了. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,m,a[MAXN];ll t[MAXN],sum[MAXN];struct opt&#123; int b,c; bool operator &lt; (const opt &amp;rhs) const &#123; return c&gt;rhs.c; &#125;&#125;q[MAXN];ll ans=0;int head,tail;int bs(int x)&#123; int L=head,R=tail,res=-1; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(a[mid]&lt;x) L=mid+1,res=mid; else R=mid-1; &#125; return res;&#125;int main()&#123; n=read(); m=read(); for(int i=1;i&lt;=n;++i) a[i]=read(); sort(a+1,a+1+n); for(int i=1;i&lt;=n;++i) sum[i]=sum[i-1]+a[i]; for(int i=1;i&lt;=m;++i) &#123; q[i].b=read(); q[i].c=read(); &#125; sort(q+1,q+1+m); head=1,tail=n; for(int i=1;i&lt;=m;++i) &#123; int pos=bs(q[i].c); if(pos==-1) continue; int tmp=min(q[i].b,pos-head+1); ans+=1LL*tmp*q[i].c; head=head+tmp; &#125; while(head&lt;=tail) &#123; ans+=a[head]; ++head; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; E Cell Distance $N\times M\leq 2\times 10^5$ ,我看成 $N,M\leq 2\times 10^5$ 了… 考虑一对点 $p,q$ ,它们显然会在 $C^{K-2}_{NM}$ 个方案中被计入贡献. 于是只需要枚举每个点,计算它到其他点的距离和,再乘上 $C_{NM}^{K-2}$ ,最后还要除以 $2$ . F Absolute Minima 平衡树 + 线段树. 那个 $b$ 显然没什么用,可以单独算. 问题就变成可以在数轴上插入点,每次询问到这些点距离和最小的位置与这个距离和. 若现在有 $k$ 个点,第一问,显然应该取中位数.这个可以用一颗平衡树维护答案. 第二问,把绝对值拆开,只需要询问当前比 $x$ 小的数总和,当前比 $x$ 大的数总和.用了离散化 + 权值线段树.感觉应该有更简单的方法? 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;struct FhqTreap&#123;#define rt treap[o]#define ls treap[treap[o].lson]#define rs treap[treap[o].rson] int x,y,z,ans; int idx; FhqTreap() &#123; x=y=z=0; idx=0; &#125; struct node &#123; int lson,rson,key,weight,size; &#125; treap[MAXN]; inline int newnode(int key) &#123; ++idx; treap[idx].size=1; treap[idx].weight=rand(); treap[idx].key=key; return idx; &#125; inline void pushup(int o) &#123; rt.size=ls.size+rs.size+1; &#125; void split(int&amp; x,int&amp; y,int key,int o)//小于等于key的分在x中 &#123; if(!o) x=y=0; else &#123; if(rt.key&lt;=key) &#123; x=o; split(rt.rson,y,key,rt.rson); &#125; else &#123; y=o; split(x,rt.lson,key,rt.lson); &#125; pushup(o); &#125; &#125; int merge(int x,int y)//合并,保证x的权值小于y的权值. key_x&lt;key_y &#123; if(x==0||y==0) return x+y; if(treap[x].weight&lt;treap[y].weight) &#123; treap[x].rson=merge(treap[x].rson,y); pushup(x); return x; &#125; else &#123; treap[y].lson=merge(x,treap[y].lson); pushup(y); return y; &#125; &#125; inline int Rank(int&amp;root,int key)//get the node (which key equals to the key)'s rank. &#123; split(x,y,key-1,root); ans=treap[x].size+1; root=merge(x,y); return ans; &#125; inline int kth(int o,int rank)// find the id of the node which rank is the rank in the tree which root is o. &#123; while(1) &#123; if(ls.size&gt;=rank) o=rt.lson;//the answer must be in o's lson,search in it. else if(ls.size+1==rank) return treap[o].key;//o is the rank'th. else &#123; rank-=ls.size+1; o=rt.rson;//cannot find in o and o's lson,search in o's rson. &#125; &#125; &#125; inline void Insert(int&amp;root,int key)// insert a node which key is the key in whole the tree. &#123; split(x,y,key,root); root=merge(merge(x,newnode(key)),y); &#125;&#125; T;ll bsum=0;int Q,k=0,Rt=0;struct query&#123; int op,a,b;&#125;q[MAXN];int A[MAXN],cnt=0;struct Segtree&#123; struct node &#123; ll sum,tot; int l,r; &#125;Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1] void pushup(int o) &#123; root.sum=lson.sum+rson.sum; &#125; void BuildTree(int o,int l,int r) &#123; root.l=l,root.r=r; root.sum=0; if(l==r) return; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); &#125; void upd(int o,int pos,int c) &#123; int l=root.l,r=root.r; if(l==r) &#123; root.sum+=c; return; &#125; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) upd(o&lt;&lt;1,pos,c); else upd(o&lt;&lt;1|1,pos,c); pushup(o); &#125; ll query(int o,int L,int R) &#123; if(L&gt;R) return 0; int l=root.l,r=root.r; if(L&lt;=l &amp;&amp; r&lt;=R) return root.sum; ll res=0; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) res+=query(o&lt;&lt;1,L,R); if(R&gt;mid) res+=query(o&lt;&lt;1|1,L,R); return res; &#125;&#125;Seg;int rnk(int x)&#123; return lower_bound(A+1,A+1+cnt,x)-A;&#125;int main()&#123; Q=read(); for(int i=1;i&lt;=Q;++i) &#123; q[i].op=read(); if(q[i].op==1) &#123; A[++cnt]=q[i].a=read(); q[i].b=read(); &#125; &#125; sort(A+1,A+1+cnt); cnt=unique(A+1,A+1+cnt)-(A+1); Seg.BuildTree(1,1,cnt); for(int i=1;i&lt;=Q;++i) &#123; if(q[i].op==1) &#123; int a=q[i].a,b=q[i].b; ++k; bsum+=b; Seg.upd(1,rnk(a),a); T.Insert(Rt,a); &#125; else &#123; int rk=(k+1)&gt;&gt;1; int x=T.kth(Rt,rk); rk=T.Rank(Rt,x); int pos=rnk(x); ll res=1LL*(rk-1)*x-Seg.query(1,1,pos-1)-1LL*(k-rk+1)*x+Seg.query(1,pos,cnt); printf("%d %lld\n",x,res+bsum); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>Atcoder</tag>
        <tag>贪心</tag>
        <tag>二分</tag>
        <tag>平衡树</tag>
        <tag>线段树</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4670 佛罗里达]]></title>
    <url>%2F2019%2F05%2F24%2Fbzoj-4670-%E4%BD%9B%E7%BD%97%E9%87%8C%E8%BE%BE%2F</url>
    <content type="text"><![CDATA[随机乱搞. 随机做很多次,每次 $random\ shuffle$ 出一个加点的序列,然后按照这个序列加点. 每次贪心判,加在哪个集合里面能使答案增加的量更小,就加在哪个里面. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int T=800;const int inf=0x7fffffff;const int MAXN=256;int n,val[MAXN][MAXN],p[MAXN];int A[MAXN],sizA,B[MAXN],sizB,mxA,mxB;ll ans;int main()&#123; srand(time(NULL)); while(~scanf("%d",&amp;n)) &#123; ans=inf; memset(val,0,sizeof val); for(int i=1;i&lt;n;++i) for(int j=i+1;j&lt;=n;++j) val[i][j]=val[j][i]=read(); for(int i=1;i&lt;=n;++i) p[i]=i; for(int t=1;t&lt;=T;++t) &#123; ll res=0; random_shuffle(p+1,p+1+n); sizA=sizB=0; mxA=mxB=0; for(int i=1;i&lt;=n;++i) &#123; int valA=0,valB=0; for(int j=1;j&lt;=sizA;++j) valA=max(valA,val[p[i]][A[j]]); for(int j=1;j&lt;=sizB;++j) valB=max(valB,val[p[i]][B[j]]); if(valA&lt;=mxA &amp;&amp; valB&lt;=mxB) &#123; int k=rand()&amp;1; if(k) A[++sizA]=p[i]; else B[++sizB]=p[i]; continue; &#125; if(valA-mxA&lt;=valB-mxB) &#123; if(valA-mxA&gt;0) &#123; res+=valA-mxA; mxA=valA; &#125; A[++sizA]=p[i]; &#125; else &#123; if(valB-mxB&gt;0) &#123; res+=valB-mxB; mxB=valB; &#125; B[++sizB]=p[i]; &#125; if(res&gt;=ans) break; &#125; ans=min(ans,res); &#125; cout&lt;&lt;ans&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>近似算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4675 点对游戏]]></title>
    <url>%2F2019%2F05%2F23%2Fbzoj-4675-%E7%82%B9%E5%AF%B9%E6%B8%B8%E6%88%8F%2F</url>
    <content type="text"><![CDATA[点分治. 表面上看是个期望的题,然而跟期望没多大关系. 每个人的答案显然是 能选的点对数目/总点对数目*幸运点对的总数目 . 只需要求幸运点对的总数目.由于 $m$ 很小,所以直接点分治就可以了.时间复杂度 $O(nmlogn)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int inf=1e9;const int MAXN=5e4+10;int n,m,luckynum[11];ll sum=0;int ecnt=0,head[MAXN],nx[MAXN&lt;&lt;1],to[MAXN&lt;&lt;1];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int totsiz,siz[MAXN],mi,rt,vis[MAXN];void getroot(int u,int fa)&#123; siz[u]=1; int sonsiz=0; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(vis[v] || v==fa) continue; getroot(v,u); siz[u]+=siz[v]; sonsiz=max(sonsiz,siz[v]); &#125; sonsiz=max(sonsiz,totsiz-siz[u]); if(sonsiz&lt;mi) mi=sonsiz,rt=u;&#125;int dis[MAXN],bucket[MAXN],stk1[MAXN],tp1=0,stk2[MAXN],tp2=0;void getdis(int u,int fa)&#123; stk2[++tp2]=u; dis[u]=dis[fa]+1; for(int i=1;i&lt;=m;++i) if(luckynum[i]&gt;=dis[u]) sum+=bucket[luckynum[i]-dis[u]]; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(vis[v] || v==fa) continue; getdis(v,u); &#125;&#125;void solve(int u)&#123; while(tp1) bucket[dis[stk1[tp1--]]]=0; dis[u]=0;//先清空,再设dis[u]=0,否则可能清空错误 bucket[0]=1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(vis[v]) continue; tp2=0; getdis(v,u); while(tp2) &#123; stk1[++tp1]=stk2[tp2]; ++bucket[dis[stk2[tp2]]]; --tp2; &#125; &#125;&#125;void divide(int u)&#123; solve(u); vis[u]=1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(vis[v]) continue; mi=inf,totsiz=siz[v]; getroot(v,0); divide(rt); &#125;&#125;void getsum()&#123; mi=inf,totsiz=n; getroot(1,0); divide(rt);&#125;double calc(ll pairs)&#123; return (double(pairs)) * (double(sum)) / (double(1LL * n * (n-1) )) ;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=m;++i) luckynum[i]=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; getsum(); int p=(n+2)/3; printf("%.2f\n",calc(1LL*p*(p-1))); p=(n+1)/3; printf("%.2f\n",calc(1LL*p*(p-1))); p=n/3; printf("%.2f\n",calc(1LL*p*(p-1))); return 0;&#125;]]></content>
      <tags>
        <tag>点分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4698 Sandy的卡片]]></title>
    <url>%2F2019%2F05%2F23%2Fbzoj-4698-Sandy%E7%9A%84%E5%8D%A1%E7%89%87%2F</url>
    <content type="text"><![CDATA[$SAM$ . 相同的定义比较奇怪,其实只需要差分一下就可以了,问题就是求这些串的最长公共子串.用 $SAM$ 解决. 答案就是求出的公共子串 $+1$ ?但有可能没有位置补,比如 $s_1=”23”,s_2=”23”$ ,答案应该是 $2$ 而不是 $3$ . 解决办法也很简单,在每个串后面加一个独特的且不在字符集中的标识符就可以了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129#include&lt;bits/stdc++.h&gt;using namespace std;#define ll long longinline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int Siz=1500,MAXN=2e3+10;int buf[MAXN];int L,n,T=0;struct SuffixAutoMation&#123; int idx,lst; int fa[MAXN],ch[MAXN][Siz]; int len[MAXN],siz[MAXN]; int A[MAXN],t[MAXN]; int mxl[MAXN],res[MAXN]; SuffixAutoMation() &#123; idx=lst=1; &#125; void Extend(int c) &#123; int p=lst,np=++idx; lst=np; res[np]=len[np]=len[p]+1; siz[np]=1; while(p &amp;&amp; ch[p][c]==0) ch[p][c]=np,p=fa[p]; if(p==0) fa[np]=1; else &#123; int q=ch[p][c]; if(len[q]==len[p]+1) fa[np]=q; else &#123; int nq=++idx; res[nq]=len[nq]=len[p]+1; fa[nq]=fa[q]; fa[q]=fa[np]=nq; memcpy(ch[nq],ch[q],sizeof ch[q]); while(p &amp;&amp; ch[p][c]==q) ch[p][c]=nq,p=fa[p]; &#125; &#125; &#125; void topsort() &#123; for(int i=1; i&lt;=idx; ++i) ++t[len[i]]; for(int i=1; i&lt;=idx; ++i) t[i]+=t[i-1]; for(int i=1; i&lt;=idx; ++i) A[t[len[i]]--]=i; &#125; void solve() &#123; L=read(); for(int i=1; i&lt;=L; ++i) buf[i]=read()-2; buf[L+1]=T+200,buf[L+2]=0; ++L; for(int i=1; i&lt;=L; ++i) buf[i]=buf[i+1]-buf[i]+1200; memset(mxl,0,sizeof mxl); int p=1,tmp=0; for(int i=1; i&lt;=L; ++i) &#123; int c=buf[i]; while(p &amp;&amp; ch[p][c]==0) p=fa[p]; if(p==0) p=1,tmp=0; else &#123; tmp=min(tmp,len[p])+1; p=ch[p][c]; &#125; mxl[p]=max(mxl[p],tmp); &#125; for(int i=idx; i&gt;=1; --i) &#123; int u=A[i]; mxl[fa[u]]=max(mxl[fa[u]],mxl[u]); &#125; for(int i=1; i&lt;=idx; ++i) res[i]=min(res[i],mxl[i]); &#125; void pr() &#123; int ans=0; for(int i=1; i&lt;=idx; ++i) ans=max(ans,res[i]); cout&lt;&lt;ans+1&lt;&lt;endl; &#125;&#125; SAM;int main()&#123; n=read(); L=read(); for(int i=1; i&lt;=L; ++i) buf[i]=read()-2; ++T; buf[L+1]=T+200,buf[L+2]=0; ++L; for(int i=1; i&lt;=L; ++i) &#123; buf[i]=buf[i+1]-buf[i]+1200; SAM.Extend(buf[i]); &#125; SAM.topsort(); for(int i=1; i&lt;n; ++i) &#123; ++T; SAM.solve(); &#125; SAM.pr(); return 0;&#125;]]></content>
      <tags>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4668 冷战]]></title>
    <url>%2F2019%2F05%2F22%2Fbzoj-4668-%E5%86%B7%E6%88%98%2F</url>
    <content type="text"><![CDATA[并查集按秩合并. 除了维护连通性,还需要维护每个点与它父亲的边被连上的时间. 用路径压缩会破坏树内部的结构,使用按秩合并就可以了.这样合并,树高不超过 $logn$ ,询问时,直接暴力跳到 $LCA$ ,路径上边被连上的最晚时间即为答案. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=5e5+10;int n,m,lastans=0;int fa[MAXN],siz[MAXN],t[MAXN],dep[MAXN],tid=0;int Find(int x)&#123; if(x==fa[x]) return x; int fx=Find(fa[x]); dep[x]=dep[fa[x]]+1; return fx;&#125;void merge(int x,int y)&#123; x=Find(x),y=Find(y); if(x==y) return; if(siz[x]&lt;siz[y]) swap(x,y); siz[x]+=siz[y]; fa[y]=x; t[y]=tid;&#125;int query(int x,int y)&#123; int fx=Find(x),fy=Find(y); if(fx!=fy) return 0; int res=0; while(x!=y) &#123; if(dep[x]&lt;dep[y]) swap(x,y); res=max(res,t[x]); x=fa[x]; &#125; return res;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;=n;++i) siz[i]=1,fa[i]=i; for(int i=1;i&lt;=m;++i) &#123; int tp=read(); if(!tp) &#123; int u=read()^lastans,v=read()^lastans; ++tid; merge(u,v); &#125; else &#123; int u=read()^lastans,v=read()^lastans; lastans=query(u,v); printf("%d\n",lastans); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>并查集</tag>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4700 适者]]></title>
    <url>%2F2019%2F05%2F22%2Fbzoj-4700-%E9%80%82%E8%80%85%2F</url>
    <content type="text"><![CDATA[李超线段树. 如果没有秒杀,就是个简单的贪心.算出第 $i$ 个敌人需要攻击的次数 $T_i$ ,考虑在攻击顺序中,交换两个相邻敌人带来的影响. 容易发现按照 $\frac {T_i} {A_i}$ 从小到大排序就可以了. 现在可以秒杀两个敌人,先按照 $\frac {T_i} {A_i}$ 从小到大排个序.但肯定不能贪心秒杀前两个.因为原来是考虑了击杀时间,而秒杀没有击杀时间.可以随意举出反例. 考虑秒杀 $i,j(i&lt;j)$ 时,答案会减少的值.记 $preT,sufA$ 分别表示 $T$ 的前缀和, $A$ 的后缀和.贡献就有 $i,j,[i+1,j-1],[j+1,n]$ 这四段. 发现如果固定 $i$ ,那么就是要求 $-A_j\cdot T_i+b_j$ 的最大值,其中 $b_j$ 是可以预处理的,是仅和 $j$ 有关的一个量. 那么就是求 $x=T_i$ 这条直线与 $j&gt;i$ 的这些直线 $(-A_j,b_j)$ 交点纵坐标最大值.枚举 $i$ 时从大到小,就只需要维护加入直线和询问这两个操作.用李超线段树维护一下就可以了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=3e5+10;int n,ATK;ll k[MAXN],b[MAXN],ans=0,delta=0;ll calc(int seg,int pos)&#123; return 1LL * k[seg] * pos + b[seg];&#125;bool is_cover(int a,int b,int pos)&#123; return calc(a,pos)&gt;=calc(b,pos);&#125;struct Segtree&#123; int v[MAXN&lt;&lt;2]; void ins(int o,int l,int r,int c) &#123; if(l==r) &#123; if(is_cover(c,v[o],l)) v[o]=c; return; &#125; int mid=(l+r)&gt;&gt;1; if(k[c]&gt;k[v[o]]) &#123; if(is_cover(c,v[o],mid)) ins(o&lt;&lt;1,l,mid,c),v[o]=c; else ins(o&lt;&lt;1|1,mid+1,r,c); &#125; else &#123; if(is_cover(c,v[o],mid)) ins(o&lt;&lt;1|1,mid+1,r,c),v[o]=c; else ins(o&lt;&lt;1,l,mid,c); &#125; &#125; ll query(int o,int l,int r,int pos) &#123; ll res=calc(v[o],pos); if(l==r) return res; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) res=max(res,query(o&lt;&lt;1,l,mid,pos)); else res=max(res,query(o&lt;&lt;1|1,mid+1,r,pos)); return res; &#125;&#125;T;struct enemy&#123; int a,t; bool operator &lt; (const enemy &amp;rhs) const &#123; return a*rhs.t&gt;rhs.a*t; &#125;&#125;p[MAXN];ll preT[MAXN],sufA[MAXN];int main()&#123; n=read(),ATK=read(); for(int i=1;i&lt;=n;++i) &#123; p[i].a=read(); int D=read(); p[i].t=(D+ATK-1)/ATK; &#125; sort(p+1,p+1+n); for(int i=1;i&lt;=n;++i) preT[i]=preT[i-1]+p[i].t; for(int i=n;i&gt;=1;--i) sufA[i]=sufA[i+1]+p[i].a; for(int i=1;i&lt;=n;++i) &#123; k[i]=-p[i].a; b[i]=sufA[i]*p[i].t+preT[i-1]*p[i].a-p[i].a; ans+=p[i].t*sufA[i]-p[i].a; &#125; T.ins(1,1,n,n); for(int i=n-1;i&gt;=1;--i) &#123; delta=max(delta,T.query(1,1,n,p[i].t)+b[i]); T.ins(1,1,n,i); &#125; ans-=delta; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>李超线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3073 Journeys]]></title>
    <url>%2F2019%2F05%2F21%2Fbzoj-3073-Journeys%2F</url>
    <content type="text"><![CDATA[线段树优化连边. 边是双向的.开两颗线段树, $A$ 里面节点表示一条有向边的起点,儿子向父亲连边, $B$ 里面节点表示一条有向边的终点,父亲向儿子连边, $B$ 向 $A$ 中对应的节点连边. 区间连边时,新建一个节点,将区间在线段树上拆成 $log$ 个区间进行连边就好了. 最后跑一次 $Dijkstra$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=5e5+10,MAXM=2220000;int n,m,S;int ecnt=0,head[MAXM],to[MAXM],nx[MAXM],val[MAXM];void addedge(int u,int v,int w)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; val[ecnt]=w; head[u]=ecnt;&#125;struct node&#123; int ls,rs;&#125;Tree[MAXN&lt;&lt;2];#define root Tree[o]int pos[MAXN],tot=0;void bd1(int &amp;o,int l,int r)&#123; o=++tot; if(l==r) &#123; pos[l]=o; return; &#125; int mid=(l+r)&gt;&gt;1; bd1(root.ls,l,mid); bd1(root.rs,mid+1,r); addedge(root.ls,o,0); addedge(root.rs,o,0);&#125;void bd2(int &amp;o,int l,int r)&#123; o=++tot; if(l==r) &#123; addedge(o,pos[l],0); return; &#125; int mid=(l+r)&gt;&gt;1; bd2(root.ls,l,mid); bd2(root.rs,mid+1,r); addedge(o,root.ls,0); addedge(o,root.rs,0);&#125;void upd1(int o,int l,int r,int L,int R)&#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; addedge(o,tot,1); return; &#125; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd1(root.ls,l,mid,L,R); if(R&gt;mid) upd1(root.rs,mid+1,r,L,R);&#125;void upd2(int o,int l,int r,int L,int R)&#123; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; addedge(tot,o,1); return; &#125; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) upd2(root.ls,l,mid,L,R); if(R&gt;mid) upd2(root.rs,mid+1,r,L,R);&#125;int rt1=0,rt2=0;int vis[MAXM],dis[MAXM];typedef pair&lt;int,int&gt; pii;#define mp make_pairpriority_queue&lt;pii&gt; q;void Dijkstra()&#123; memset(dis,0x7f,sizeof dis); dis[pos[S]]=0; q.push(mp(0,pos[S])); while(!q.empty()) &#123; int u=q.top().second; q.pop(); if(vis[u]) continue; vis[u]=1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(dis[v]-dis[u]&gt;val[i]) &#123; dis[v]=dis[u]+val[i]; q.push(mp(-dis[v],v)); &#125; &#125; &#125;&#125;int main()&#123; n=read(),m=read(),S=read(); bd1(rt1,1,n); bd2(rt2,1,n); while(m--) &#123; int x1=read(),y1=read(),x2=read(),y2=read(); ++tot;upd1(rt1,1,n,x1,y1);upd2(rt2,1,n,x2,y2); ++tot;upd1(rt1,1,n,x2,y2);upd2(rt2,1,n,x1,y1); &#125; Dijkstra(); for(int i=1;i&lt;=n;++i) printf("%d\n",dis[pos[i]]&gt;&gt;1); return 0;&#125;]]></content>
      <tags>
        <tag>最短路</tag>
        <tag>线段树连边</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4762 最小集合]]></title>
    <url>%2F2019%2F05%2F21%2Fbzoj-4762-%E6%9C%80%E5%B0%8F%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[状压 $dp$ . 如果把所有元素 $xor\ 1023$ ,那么就等价于集合内元素 $or$ 和为 $1023$ ,去掉任意一个后 $or$ 和不为 $1023$ . 设 $f(i,j,k)$ 表示考虑了前 $i$ 个数,前面已经选择的数 $or$ 和为 $j$ ,期望后面选出的数 $or$ 和包含 $k$ 时的方案数. 若第 $i+1$ 个数为 $x$ ,不选它,则有 $f(i+1,j,k)+=f(i,j,k)$ . 如果选了它,假设能转移到 $f(i+1,j|x,k’)$ ,那么 $k’$ 需要满足: $k’|x=k$ . $k’|j|x\not= k’|j$ .这是为了保证去掉 $x$ 后就不合法了. 如果只考虑满足第一个条件的,就有 $f(i+1,j|x,k\ xor\ (k\&amp;x) )+=f(i,j,k)$ .因为 $x,k$ 都为 $1$ 的位置上可以随便选. 还要减去满足第一个条件,但不满足第二个条件的部分. $f(i+1,j|x,(k\ xor\ (k\&amp;x))|(x\ xor (x\&amp; j)) )-=f(i,j,k)$ . 后面括号表示 $x$ 对 $j$ 产生的贡献,即将原来的 $0$ 变为了 $1$ .如果 $k’$ 的这些位上也是 $1$ ,就不满足第二个条件了. 初始有 $f(0,0,0)=1$ ,答案为 $f(n,1023,0)$ .这样做是 $O(n\cdot 4^{10})$ 的. 注意到若 $f(i,j,k)\not = 0$ ,则一定有 $k$ 是 $j$ 的子集.于是枚举 $k$ 时只用枚举 $j$ 的子集.时间复杂度 $O(n\cdot 3^{10})$ . 滚掉第一维,优化空间. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;inline int add(int a,int b)&#123; return (a + b &gt;= P)? (a + b - P) : (a + b); &#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int N=1023;int n,a[N+10],f[2][N+10][N+10];int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) a[i]=read()^N; int id=0; f[0][0][0]=1; for(int i=1;i&lt;=n;++i) &#123; int x=a[i]; memset(f[id^1],0,sizeof f[id^1]); for(int j=0;j&lt;=N;++j) &#123; for(int k=j;;k=(k-1)&amp;j) &#123; if(f[id][j][k]) &#123; f[id^1][j][k]=add(f[id^1][j][k],f[id][j][k]); f[id^1][j|x][k^(k&amp;x)]=add(f[id^1][j|x][k^(k&amp;x)],f[id][j][k]); f[id^1][j|x][(k^(k&amp;x))|(x^(x&amp;j))]=add(f[id^1][j|x][(k^(k&amp;x))|(x^(x&amp;j))],P-f[id][j][k]); &#125; if(!k) break; &#125; &#125; id^=1; &#125; cout&lt;&lt;f[id][N][0]&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>状压dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4754 独特的树叶]]></title>
    <url>%2F2019%2F05%2F21%2Fbzoj-4754-%E7%8B%AC%E7%89%B9%E7%9A%84%E6%A0%91%E5%8F%B6%2F</url>
    <content type="text"><![CDATA[树 $hash$ . 要判断树的同构,自然要用到 $hash$ .但 $hash$ 的方法很多,我们要选取一种 优美 的方式.比如说字符串中,进制 $hash$ 就很优美,它可以 $O(1)$ 计算一个子串的 $hash$ 值. 在树中,一般是将一个点的 $hash$ 值设为所有儿子 $hash$ 值从小到大排序组成的串的进制 $hash$ 值,再乘上这个点的子树大小.若为叶子节点,则 $hash$ 值为 $1$ . 上面是对有根树的操作.然而这道题是无根树.找重心转成有根树十分麻烦(因为多了一个点),考虑换根,求出以每个点作为根节点的 $hash$ 值. 设 $f(i),g(i),h(i)$ 分别表示以 $1$ 为根时节点 $i$ 的 $hash$ 值,以 $fa_i$ 为根并去掉子树 $i$ 后 $fa_i$ 的 $hash$ 值,以 $i$ 为根时节点 $i$ 的 $hash$ 值. 对 $A,B$ 两棵树都做一次 $hash$ ,将 $A$ 中每个节点的 $h(i)$ 放入 $set$ 中,然后从小到大枚举 $B$ 树中度数为 $1$ 的点 $x$ .如果它连在 $y$ 上,由于我们 优美 的 $hash$ 定义,删去它后以 $y$ 为根, $y$ 的 $hash$ 值应该是 $\frac {h(x)} {n+1}$ .在 $set$ 中查询是否出现即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;typedef pair&lt;int,int&gt; pii;#define mp make_pairconst int MAXN=1e5+10;const int P=998244353;inline int add(int a,int b)&#123; return (a + b &gt;= P)? (a + b - P) : (a + b); &#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int Pow[MAXN],Base=37,val[MAXN];int pre[MAXN],suf[MAXN];pii vp[MAXN];set&lt;int&gt; s;struct Tree&#123; int n; int ecnt,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1]; int f[MAXN],g[MAXN],h[MAXN],siz[MAXN]; int deg[MAXN]; void addedge(int u,int v) &#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt; &#125; void init() &#123; ecnt=0; for(int i=1;i&lt;=n;++i) head[i]=f[i]=g[i]=h[i]=deg[i]=0; for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); ++deg[u],++deg[v]; &#125; &#125; void dfs1(int u,int fa) &#123; siz[u]=1; int tot=0; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa) continue; dfs1(v,u); siz[u]+=siz[v]; &#125; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v!=fa) val[++tot]=f[v]; &#125; sort(val+1,val+1+tot); int tmp=1; for(int i=1;i&lt;=tot;++i) &#123; f[u]=add(f[u],mul(tmp,val[i])); tmp=mul(tmp,Base); &#125; f[u]=mul(f[u],siz[u]); if(!tot) f[u]=1; &#125; void dfs2(int u,int fa) &#123; int tot=0; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa) continue; vp[++tot]=mp(f[v],v); &#125; if(fa) vp[++tot]=mp(g[u],-1); sort(vp+1,vp+1+tot); pre[0]=suf[tot+1]=0; for(int i=1;i&lt;tot;++i) pre[i]=add(pre[i-1],mul(Pow[i-1],vp[i].first)); for(int i=tot;i&gt;1;--i) suf[i]=add(suf[i+1],mul(Pow[i-2],vp[i].first)); for(int i=1;i&lt;=tot;++i) &#123; if(vp[i].second==-1) continue; g[vp[i].second]=mul(n-siz[vp[i].second],pre[i-1]+suf[i+1]); &#125; if(!fa &amp;&amp; tot==1) g[vp[1].second]=1; int tmp=1; for(int i=1;i&lt;=tot;++i) &#123; h[u]=add(h[u],mul(vp[i].first,tmp)); tmp=mul(tmp,Base); &#125; h[u]=mul(h[u],n); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v!=fa) dfs2(v,u); &#125; &#125; void solve(int id) &#123; dfs1(1,0); dfs2(1,0); if(!id) &#123; for(int i=1;i&lt;=n;++i) s.insert(h[i]); &#125; else &#123; int inv=fpow(n,P-2); for(int i=1;i&lt;=n;++i) &#123; if(deg[i]!=1) continue; int tmp=mul(h[i],inv); if(s.find(tmp)!=s.end()) &#123; cout&lt;&lt;i&lt;&lt;endl; return; &#125; &#125; &#125; &#125;&#125;A,B;int main()&#123; int n=read(); Pow[0]=1; for(int i=1;i&lt;=n+1;++i) Pow[i]=mul(Pow[i-1],Base); A.n=n,B.n=n+1; A.init(); B.init(); A.solve(0); B.solve(1); return 0;&#125;]]></content>
      <tags>
        <tag>树形dp</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190519]]></title>
    <url>%2F2019%2F05%2F20%2Ftest20190519%2F</url>
    <content type="text"><![CDATA[$T3$ 题意理解错了.直接爆炸. $sequence$ 考虑一段区间 $[l,r]$ 合法,则显然 $\forall\ l\leq i\leq r,b_i\geq \max_{j=l}^i a_j$ . 这个东西对于 $l,r$ 两边来说都是具有单调性的, $two\ pointer$ 扫一遍即可. 用线段树做 $RMQ$ 为 $O(nlogn)$ ,用 $ST$ 表则为 $O(n)$ . $circulate$ 考虑枚举循环节循环次数,对于每个确定的循环次数,二分出循环节数字的最大值. 为了计算不重不漏,容斥一下,该循环次数的质因子个数为奇数,则加上,否则减去. $2\times 10^{18}$ 有 $19$ 个数字…考试没加 $19$ 的情况,丢了 $20$ 分. $cannon$ 题意搞错了,没注意到一座山被轰了几次后高度减低,可以换其他的炮轰… $80pts$ 很简单.设 $f(i)$ 表示轰平一座高度为 $i$ 的山最少需要轰几次,然后从低到高判断能否轰即可. 转移就有 $\forall x\leq 0,f(x)=0.f(i)=1+f(i-max_D)$ , $max_D$ 表示 $A_j\geq i$ 中最大的 $D_j$ . $100pts$ 的做法就是在上面改一下.因为 $D\leq 300$ ,所以上面的 $f$ 数组有用的只有 $M\cdot D$ 个.用 $map$ 做即可.]]></content>
      <tags>
        <tag>二分</tag>
        <tag>STL</tag>
        <tag>two pointer</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4755 扭动的回文串]]></title>
    <url>%2F2019%2F05%2F20%2Fbzoj-4755-%E6%89%AD%E5%8A%A8%E7%9A%84%E5%9B%9E%E6%96%87%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[二分 + $Hash​$ . 先补充上多余字符,将回文串全部弄成奇回文串.然后二分 + $Hash$ 预处理出每个位置的最大回文半径. 对于第三种情况,可以枚举回文中心,显然往两边拓展时,过了最大回文半径时就换到另一个串是最优的.于是可以二分在另一个串中的长度, $Hash$ 判断合法性.拼接位置的处理比较麻烦,可以调用补字符前的原串 $Hash$ 值. 时间复杂度 $O(nlogn)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;typedef unsigned long long ull;const int MAXN=2e5+10;const ull Base=137;ull Pow[MAXN],Hash[4][MAXN],revHash[4][MAXN];int n,ans=1;char s[2][MAXN],buf[2][MAXN];int cnt;ull calc(int k,int l,int r)&#123; return Hash[k][r]-Pow[r-l+1]*Hash[k][l-1];&#125;ull revcalc(int k,int l,int r)&#123; return revHash[k][l]-Pow[r-l+1]*revHash[k][r+1];&#125;bool check(int k,int pos,int len)&#123; ull Left=calc(k,pos-len,pos-1); ull Right=revcalc(k,pos+1,pos+len); return Left==Right;&#125;int r[2][MAXN];int solve(int L,int R)&#123; int l=1,r=min(L,n-R+1),res=0; while(l&lt;=r) &#123; int mid=(l+r)&gt;&gt;1; if(calc(2,L-mid+1,L)==revcalc(3,R,R+mid-1)) res=mid,l=mid+1; else r=mid-1; &#125; return res;&#125;int main()&#123; n=read(); scanf("%s%s",s[0]+1,s[1]+1); for(int k=0;k&lt;2;++k) &#123; for(int i=1;i&lt;=n;++i) Hash[k+2][i]=Hash[k+2][i-1]*Base+s[k][i]; for(int i=n;i&gt;=1;--i) revHash[k+2][i]=revHash[k+2][i+1]*Base+s[k][i]; &#125; n=cnt; Pow[0]=1; for(int i=1;i&lt;=n;++i) Pow[i]=Pow[i-1]*Base; for(int k=0;k&lt;2;++k) &#123; for(int i=1;i&lt;=n;++i) Hash[k][i]=Hash[k][i-1]*Base+(buf[k][i]); for(int i=n;i&gt;=1;--i) revHash[k][i]=revHash[k][i+1]*Base+(buf[k][i]); &#125; for(int k=0;k&lt;2;++k) &#123; for(int pos=1;pos&lt;=n;++pos) &#123; int L=1,R=(n-1)&gt;&gt;1; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(check(k,pos,mid)) r[k][pos]=mid,L=mid+1; else R=mid-1; &#125; &#125; &#125; for(int i=1;i&lt;=n;++i) &#123; int L=(i-r[0][i]+1)&gt;&gt;1,R=(i+r[0][i])&gt;&gt;1; ans=max(ans,r[0][i]+solve(L-1,R)*2); &#125; for(int i=1;i&lt;=n;++i) &#123; int L=(i-r[1][i]+1)&gt;&gt;1,R=(i+r[1][i])&gt;&gt;1; ans=max(ans,r[1][i]+solve(L,R+1)*2); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>二分</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4771 七彩树]]></title>
    <url>%2F2019%2F05%2F19%2Fbzoj-4771-%E4%B8%83%E5%BD%A9%E6%A0%91%2F</url>
    <content type="text"><![CDATA[主席树. 询问的点要求在子树 $x$ 内,并且 $dep\leq dep_x+d$ ,这样就有 $dfn,dep$ 上的两维限制,所以可以用主席树把符合条件的点抠出来. 只需要考虑怎么计算不同颜色的种数.对于一种颜色,可以在每个点的位置让权值 $+1$ ,而在 $LCA$ 处让权值 $-1$ .只需要处理 $dfs$ 序相邻的两个点的 $LCA$ (因为最深)就可以保证询问子树时贡献不会被重复计算了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;struct PreSegtree&#123; int idx; void init()&#123;idx=0;Tree[0].siz=Tree[0].ls=Tree[0].rs=0;&#125; struct node &#123; int ls,rs,siz; &#125;Tree[MAXN*50];#define root Tree[o] void insert(int &amp;o,int lst,int l,int r,int pos,int c) &#123; o=++idx; root=Tree[lst]; root.siz+=c; if(l==r) return; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) insert(root.ls,Tree[lst].ls,l,mid,pos,c); else insert(root.rs,Tree[lst].rs,mid+1,r,pos,c); &#125; int query(int o,int l,int r,int L,int R) &#123; if(L&gt;r || l&gt;R || !o) return 0; if(L&lt;=l &amp;&amp; r&lt;=R) return root.siz; int mid=(l+r)&gt;&gt;1; int res=0; if(L&lt;=mid) res+=query(root.ls,l,mid,L,R); if(R&gt;mid) res+=query(root.rs,mid+1,r,L,R); return res; &#125;&#125;T;int rt[MAXN];int ecnt=0,head[MAXN],to[MAXN],nx[MAXN];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int n,m;int dfnidx=0,dfn[MAXN],rnk[MAXN],siz[MAXN],dep[MAXN];int fa[MAXN][20],Log[MAXN];int LCA(int x,int y)&#123; if(dep[x]&lt;dep[y]) swap(x,y); for(int i=Log[dep[x]-dep[y]];i&gt;=0;--i) if(dep[fa[x][i]]&gt;=dep[y]) x=fa[x][i]; if(x==y) return x; for(int i=Log[dep[x]];i&gt;=0;--i) if(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i]; return fa[x][0];&#125;void dfs(int u)&#123; dfn[u]=++dfnidx; rnk[dfnidx]=u; siz[u]=1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; dep[v]=dep[u]+1; dfs(v); siz[u]+=siz[v]; &#125;&#125;set&lt;int&gt; S[MAXN];set&lt;int&gt;::iterator it;void init()&#123; ecnt=0; dfnidx=0; T.init(); memset(head,0,sizeof head); memset(rt,0,sizeof rt); memset(fa,0,sizeof fa); dep[1]=1;&#125;int pd[MAXN],v[MAXN];bool cmp(int x,int y)&#123; return dep[x]&lt;dep[y];&#125;void solve()&#123; int lastans=0; n=read(),m=read(); for(int i=1;i&lt;=n;++i) &#123; v[i]=read(); S[i].clear(); pd[i]=i; &#125; for(int i=2;i&lt;=n;++i) &#123; fa[i][0]=read(); addedge(fa[i][0],i); &#125; dfs(1); for(int j=1;j&lt;=Log[n];++j) for(int i=1;i&lt;=n;++i) fa[i][j]=fa[fa[i][j-1]][j-1]; sort(pd+1,pd+1+n,cmp); for(int i=1;i&lt;=n;++i) &#123; int j=pd[i]; int a=0,b=0; it=S[v[j]].lower_bound(dfn[j]); T.insert(rt[dep[j]],rt[dep[pd[i-1]]],1,n,dfn[j],1); if(it!=S[v[j]].end()) &#123; b=rnk[*it]; T.insert(rt[dep[j]],rt[dep[j]],1,n,dfn[LCA(b,j)],-1); &#125; if(it!=S[v[j]].begin()) &#123; --it; a=rnk[*it]; T.insert(rt[dep[j]],rt[dep[j]],1,n,dfn[LCA(a,j)],-1); &#125; if(a &amp;&amp; b) T.insert(rt[dep[j]],rt[dep[j]],1,n,dfn[LCA(a,b)],1); S[v[j]].insert(dfn[j]); &#125; while(m--) &#123; int x=read()^lastans; int d=read()^lastans; lastans=T.query(rt[min(dep[x]+d,dep[pd[n]])],1,n,dfn[x],dfn[x]+siz[x]-1); lastans-=T.query(rt[dep[x]-1],1,n,dfn[x],dfn[x]+siz[x]-1); printf("%d\n",lastans); &#125;&#125;int main()&#123; Log[1]=0; for(int i=2;i&lt;MAXN;++i) Log[i]=Log[i&gt;&gt;1]+1; int Testcases=read(); while(Testcases--) &#123; init(); solve(); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>主席树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4773 负环]]></title>
    <url>%2F2019%2F05%2F19%2Fbzoj-4773-%E8%B4%9F%E7%8E%AF%2F</url>
    <content type="text"><![CDATA[$floyd$ + 倍增. 写保卫王国那道题的时候学习了 Min-plus matrix multiplication ,即将矩阵乘法中的乘法换成加法,加法换成取 $\min$ .这东西还有其他的用法.若一个图的邻接矩阵的 $k$ 次方为 $A$ (在这样运算下), 则 $A_{i,j}$ 表示图中从 $i$ 到 $j$ ,经过 $k$ 条边的最短路长度. 为啥?因为这样运算其实就是 $floyd$ 的转移,只不过恰好也满足了结合律. 要找最短的负环,可以设 $f[k]$ 为原邻接矩阵的 $2^k$ 次方,倍增解决即可,环的大小即为边的数目. 时间复杂度 $O(n^3logn)$ . 注意要将邻接矩阵中自己到自己的距离设为 $0$ ,这样答案才满足单调性. 也可以直接二分答案,时间复杂度为 $O(n^3log^2n)$ ,但对于 $n\leq 300$ 来说差异不大. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int inf=1e9;const int MAXN=300+10;int n,m;struct Matrix&#123; int A[MAXN][MAXN]; Matrix()&#123;memset(A,63,sizeof A);&#125; Matrix operator * (const Matrix &amp;rhs) const &#123; Matrix res; for(int k=1;k&lt;=n;++k) for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=n;++j) res.A[i][j]=min(res.A[i][j],A[i][k]+rhs.A[k][j]); return res; &#125;&#125;f[10],cur,nx;int Log[MAXN];int main()&#123; Log[1]=0; for(int i=2;i&lt;MAXN;++i) Log[i]=Log[i&gt;&gt;1]+1; n=read(),m=read(); for(int i=1;i&lt;=m;++i) &#123; int u=read(),v=read(),w=read(); f[0].A[u][v]=w; &#125; for(int i=1;i&lt;=n;++i) cur.A[i][i]=f[0].A[i][i]=0; int mx=Log[n]; for(int i=1;i&lt;=mx;++i) f[i]=f[i-1]*f[i-1]; int ans=0; for(int i=mx;i&gt;=0;--i) &#123; bool flag=false; nx=f[i]*cur; for(int j=1;j&lt;=n &amp;&amp; !flag;++j) if(nx.A[j][j]&lt;0) flag=true; if(!flag) ans+=1&lt;&lt;i,cur=nx; &#125; printf("%d",ans+1&gt;n?0:ans+1); return 0;&#125;]]></content>
      <tags>
        <tag>floyd</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4774 修路]]></title>
    <url>%2F2019%2F05%2F17%2Fbzoj-4774-%E4%BF%AE%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[斯坦纳树 + 状压 . 开始感觉直接做一颗最小生成树出来,把没用的边割掉就好了.然而随手画几个图发现是错的. 然后学习了一波 最小斯坦纳树 .这东西可以看做是最小生成树的一般情况.生成树是求一个选边方案,将所有的点加入联通块中.斯坦纳树是把指定点集中的点加入联通块中,也可以加入不在点集中的点来辅助. 求解最小斯坦纳树是 $NP$ 的,没有多项式算法,用状压做.设 $f[S][i]$ 为指定点的连通状态为 $S$ ,最小斯坦纳树的根节点为 $i$ 时的最小权值.转移有两种.第一种是将当前集合拆成两个不相交的子集, $f[S][i]\leftarrow f[S_1][i]+f[S_2][i],S_1,S_2\subset S,S_1 \&amp; S_2=0$ .另一种是换根, $f[S][i]\leftarrow f[S][j]+val_{i,j}$ ,后者表示连接 $i,j$ 的边权.这东西有后效性,用 $Spfa$ 转移. 而这道题是指定点对间连通,可以看做最小斯坦纳森林.设 $g[S]$ 表示连通了点集 $S$ 的最小斯坦纳森林的权值. 转移有 $g[S]\leftarrow g[S_1]+g[S_2],S_1,S_2\subset S,S_1 \&amp; S_2=0​$ .即将 $S​$ 拆成两个不相交子集. $S_1,S_2​$ 都需要满足每对对应点要么都不在其中,要么都在其中. 最后答案就是 $g[S_0]$ , $S_0$ 表示将那 $2d$ 个点都连通的状态. 小心爆 $int$ . 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e4+10,MAXS=1&lt;&lt;8;int inf;int ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1],val[MAXN&lt;&lt;1];inline void addedge(int u,int v,int w)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; val[ecnt]=w; head[u]=ecnt;&#125;int f[MAXS][MAXN],g[MAXS];int n,m,D;queue&lt;int&gt; q;int vis[MAXN];void SPFA(int S)&#123; while(!q.empty()) &#123; int u=q.front(); q.pop(); vis[u]=0; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(f[S][v]-f[S][u]&gt;val[i]) &#123; f[S][v]=f[S][u]+val[i]; if(!vis[v]) &#123; vis[v]=1; q.push(v); &#125; &#125; &#125; &#125;&#125;bool check(int S)&#123; return (S&amp;((1&lt;&lt;D)-1))==(S&gt;&gt;D);&#125;int main()&#123; n=read(),m=read(),D=read(); for(int i=1;i&lt;=m;++i) &#123; int u=read(),v=read(),w=read(); addedge(u,v,w); addedge(v,u,w); &#125; memset(f,63,sizeof f); memset(g,63,sizeof g); inf=f[0][0]; for(int i=1;i&lt;=D;++i) f[1&lt;&lt;(i-1)][i]=f[1&lt;&lt;(D+i-1)][n-i+1]=0; int mx=1&lt;&lt;(2*D); for(int S=0;S&lt;mx;++S) &#123; for(int i=1;i&lt;=n;++i) &#123; for(int S1=(S-1)&amp;S;S1;S1=(S1-1)&amp;S) f[S][i]=min(f[S][i],f[S1][i]+f[S^S1][i]); if(f[S][i]&lt;inf) &#123; q.push(i); vis[i]=1; &#125; &#125; SPFA(S); for(int i=1;i&lt;=n;++i) g[S]=min(g[S],f[S][i]); &#125; for(int S=0;S&lt;mx;++S) for(int S1=(S-1)&amp;S;S1;S1=(S1-1)&amp;S) if(check(S1) &amp;&amp; check(S^S1)) g[S]=min(g[S],g[S1]+g[S^S1]); if(g[mx-1]&gt;=inf) puts("-1"); else cout&lt;&lt;g[mx-1]; return 0;&#125;]]></content>
      <tags>
        <tag>状压dp</tag>
        <tag>斯坦纳树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4735 你的生命已如风中残烛]]></title>
    <url>%2F2019%2F05%2F16%2Fbzoj-4735-%E4%BD%A0%E7%9A%84%E7%94%9F%E5%91%BD%E5%B7%B2%E5%A6%82%E9%A3%8E%E4%B8%AD%E6%AE%8B%E7%83%9B%2F</url>
    <content type="text"><![CDATA[一道短小精悍(指代码)的数学题. 把每个位置上的数都 $-1$ ,于是要求就变为每个位置的前缀和都是非负数. 如果在最后再加入一个 $-1$ ,那么就只有最后一个位置前缀和为 $-1$ ,其他位置都是非负数. 这样就可证明,对于一个序列的所有循环同构,有且仅有一种序列是合法的. 因为只有把多出来的 $-1$ 放在最后才合法.因为总和为 $-1$ ,若最后一个位置不是 $-1$ ,那么前面一个位置的前缀和一定为负. 而这个 $-1$ 可以是原有的与新加的共 $m-n+1$ 个 $-1$ 中的任意一个,所以应除去. $$ans=\frac {m!} {m-n+1}$$ 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int main()&#123; int n=read(),m=0; for(int i=1;i&lt;=n;++i) m+=read(); int ans=1; for(int i=2;i&lt;=m;++i) ans=mul(ans,i); ans=mul(ans,fpow(m-n+1,P-2)); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4860 树的难题]]></title>
    <url>%2F2019%2F05%2F16%2Fbzoj-4860-%E6%A0%91%E7%9A%84%E9%9A%BE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[点分治 + 线段树合并. 英语月考的时候一直在想这个题… 有路径长度的限制,可以考虑点分治.然后发现在合并两条路径时有两种情况. 靠近当前分治中心的那两条边如果颜色不同,就直接将两条路径权值加起来.否则还要减去那条边的颜色权值. 分治时把子树按照与当前分支中心连接的边的颜色排序,扫一遍,维护两颗线段树,分别表示连到分治中心的边与当前颜色不同的最大权值与相同的最大权值. 处理完一种颜色的时候把两颗线段树合并起来就好了.时间复杂度 $O(nlog^2n)$ . bzoj 不支持 C++11​ 是真的毒瘤… 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;#define mp make_pairtypedef pair&lt;int,int&gt; pii;const ll inf=1e18;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;int n,m,limL,limR,roota,rootb,cnt;struct node&#123; int ls,rs; ll mxv;&#125;Tree[MAXN*30];#define root Tree[o]int newnode()&#123; int o=++cnt; root.ls=root.rs=0; root.mxv=-inf; return o;&#125;void pushup(int o)&#123; root.mxv=max(Tree[root.ls].mxv,Tree[root.rs].mxv);&#125;int merge(int a,int b)&#123; if(!a || !b) return a+b; Tree[a].mxv=max(Tree[a].mxv,Tree[b].mxv); Tree[a].ls=merge(Tree[a].ls,Tree[b].ls); Tree[a].rs=merge(Tree[a].rs,Tree[b].rs); return a;&#125;void insert(int &amp;o,int l,int r,int pos,ll c)&#123; if(!o) o=newnode(); if(l==r) &#123; root.mxv=max(root.mxv,c); return; &#125; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) insert(root.ls,l,mid,pos,c); else insert(root.rs,mid+1,r,pos,c); pushup(o);&#125;ll query(int o,int l,int r,int L,int R)&#123; if(!o) return -inf; if(L&lt;=l &amp;&amp; r&lt;=R) return root.mxv; ll res=-inf; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) res=max(res,query(root.ls,l,mid,L,R)); if(R&gt;mid) res=max(res,query(root.rs,mid+1,r,L,R)); return res;&#125;vector&lt;pii&gt; edge[MAXN];ll ans=-inf,mi;int rt=0,totsize,vis[MAXN],siz[MAXN];int val[MAXN];void Findrt(int u)&#123; siz[u]=1; vis[u]=1; int sonsize=0; int SIZ=edge[u].size(); for(int id=0;id&lt;SIZ;++id) &#123; pii i=edge[u][id]; int v=i.second; if(vis[v]) continue; Findrt(v); siz[u]+=siz[v]; sonsize=max(sonsize,siz[v]); &#125; sonsize=max(sonsize,totsize-siz[u]); if(sonsize&lt;mi) rt=u,mi=sonsize; vis[u]=0;&#125;void getsize(int u)&#123; ++totsize; vis[u]=1; int SIZ=edge[u].size(); for(int id=0;id&lt;SIZ;++id) &#123; pii i=edge[u][id]; int v=i.second; if(!vis[v]) getsize(v); &#125; vis[u]=0;&#125;ll mx[MAXN];void dfs(int u,ll c,int len,int curcol)&#123; if(len&gt;limR) return; vis[u]=1; mx[len]=max(mx[len],c); int SIZ=edge[u].size(); for(int id=0;id&lt;SIZ;++id) &#123; pii i=edge[u][id]; int v=i.second,r=i.first; ll newc=c; if(r!=curcol) newc+=val[r]; if(!vis[v]) dfs(v,newc,len+1,r); &#125; vis[u]=0;&#125;void solve(int u)&#123; totsize=cnt=roota=rootb=0; mi=inf; getsize(u); Findrt(u); int Rt=rt; getsize(Rt); vis[Rt]=1; int precol=0; int SIZ=edge[Rt].size(); for(int id=0;id&lt;SIZ;++id) &#123; pii e=edge[Rt][id]; int v=e.second,r=e.first; if(vis[v]) continue; for(int k=0;k&lt;=siz[v];++k) mx[k]=-inf; if(rootb &amp;&amp; r!=precol) &#123; roota=merge(roota,rootb); rootb=0; &#125; dfs(v,val[r],1,r); for(int i=1;i&lt;=siz[v] &amp;&amp; i&lt;limR &amp;&amp; mx[i]!=mx[0];++i) &#123; ll tmp=max(ans,i&gt;=limL &amp;&amp; i&lt;=limR? mx[i]:-inf); tmp=max(tmp,query(roota,1,limR,max(1,limL-i),limR-i)+mx[i]); tmp=max(tmp,query(rootb,1,limR,max(1,limL-i),limR-i)-val[r]+mx[i]); ans=max(ans,tmp); &#125; for(int i=1;i&lt;=siz[v] &amp;&amp; i&lt;limR &amp;&amp; mx[i]!=mx[0];++i) &#123; insert(rootb,1,limR,i,mx[i]); &#125; precol=r; &#125; for(int id=0;id&lt;SIZ;++id) &#123; pii e=edge[Rt][id]; int v=e.second; if(!vis[v]) solve(v); &#125;&#125;int main()&#123; Tree[0].mxv=-inf; n=read(),m=read(),limL=read(),limR=read(); for(int i=1;i&lt;=m;++i) val[i]=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(),c=read(); edge[u].push_back(mp(c,v)); edge[v].push_back(mp(c,u)); &#125; for(int i=1;i&lt;=n;++i) sort(edge[i].begin(),edge[i].end()); solve(1); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>线段树合并</tag>
        <tag>点分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4916 神犇与蒟蒻]]></title>
    <url>%2F2019%2F05%2F14%2Fbzoj-4916-%E7%A5%9E%E7%8A%87%E4%B8%8E%E8%92%9F%E8%92%BB%2F</url>
    <content type="text"><![CDATA[杜教筛小水题. 根据 $\mu$ 的定义,第一个式子显然为 $1$ . 根据 $\varphi$ 的定义,第二个式子显然为 $\sum_{i=1}^N i\cdot \varphi(i)$ ,直接杜教筛即可. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P; &#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int inv2,inv6;inline int sumh(int x)&#123; int s=mul(x,x+1); s=mul(s,2*x+1); s=mul(s,inv6); return s;&#125;inline int sumg(int l,int r)&#123; return mul(mul(l+r,r-l+1),inv2);&#125;const int N=32000,MAXN=N+10;int phi[MAXN],cnt=0,prime[MAXN],ism[MAXN],sum[MAXN];void init()&#123; phi[1]=1,ism[1]=1; for(int i=2;i&lt;=N;++i) &#123; if(!ism[i]) prime[++cnt]=i,phi[i]=i-1; for(int j=1;j&lt;=cnt &amp;&amp; i*prime[j]&lt;=N;++j) &#123; ism[i*prime[j]]=1; if(i%prime[j]==0) &#123; phi[i*prime[j]]=mul(phi[i],prime[j]); break; &#125; phi[i*prime[j]]=mul(phi[i],prime[j]-1); &#125; &#125; for(int i=1;i&lt;=N;++i) sum[i]=add(sum[i-1],mul(i,phi[i]));&#125;map&lt;int,int&gt; mp;int calc(int n)&#123; if(n&lt;=N) return sum[n]; if(mp.find(n)!=mp.end()) return mp[n]; int res=sumh(n); for(int l=2,r;l&lt;=n;l=r+1) &#123; r=n/(n/l); res=add(res,P-mul(sumg(l,r),calc(n/l))); &#125; return mp[n]=res;&#125;int main()&#123; inv2=fpow(2,P-2); inv6=fpow(6,P-2); init(); int n=read(); printf("%d\n%d\n",1,calc(n)); return 0;&#125;]]></content>
      <tags>
        <tag>杜教筛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4926 皮皮妖的递推]]></title>
    <url>%2F2019%2F05%2F14%2Fbzoj-4926-%E7%9A%AE%E7%9A%AE%E5%A6%96%E7%9A%84%E9%80%92%E6%8E%A8%2F</url>
    <content type="text"><![CDATA[构造. 发现这个迭代过程与斐波那契数列有相似之处,构造 $g(i)=g(i-1)+g(i-m),g(0)=1$ . 把 $n$ 拆成 $k$ 个 $g_i$ 的和, $n=\sum_{i=1}^k g(a_i)$ ,则 $f_n=\sum_{i=1}^k g(a_i-1)$ . 证明:将 $f$ 定义式变形得到 $f(n)+f^m(n-1)=n$ .而 $n=\sum_{i=1}^k g(a_i),f_n=\sum_{i=1}^k g(a_i-1)$ . $f^2(n)=\sum_{i=1}^k g(a_i-2)$ ,依次计算,可得 $f^m(n)=\sum_{i=1}^k g(a_i-m)$ . 而现在需要的是 $f^m(n-1)$ ,而 $n$ 只比 $n-1$ 多了个 $1$ ,把 $g(0)$ 设为 $1$ 即可. 那么就有 $\sum_{i=1}^k g(a_i-1)+\sum_{i=1}^k g(a_i-m)=\sum_{i=1}^k g(a_i)$ .于是 $g(i)=g(i-1)+g(i-m),g(0)=1$ . 12345678910111213141516171819202122232425262728293031323334353637#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=5e6+10;ll g[MAXN];int main()&#123; ll n=read(),m=read(); for(int i=0;i&lt;=m;++i) g[i]=1; int mx=m+1; for(;;++mx) &#123; g[mx]=g[mx-1]+g[mx-m]; if(g[mx]&gt;n) break; &#125; --mx; ll ans=0; for(int i=mx;i&gt;=1 &amp;&amp; n;--i) if(n&gt;=g[i]) n-=g[i],ans+=g[i-1]; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4962 简单的字符串]]></title>
    <url>%2F2019%2F05%2F14%2Fbzoj-4962-%E7%AE%80%E5%8D%95%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[$Manacher$ . 不知道性质的话应该挺难做的… 先枚举子串中心,往两侧拓展,将走到的位置的字符交替写下来,记作 $S$ . 比如字符串是 $abcdacce$ ,以 $d$ 右侧的那个位置为中心,则 $S=daccbcae$ (此处先写左边). 若中心的两侧长度为 $L$ 的两个子串循环同构,则 $S$ 中对应的长度为 $2L$ 的前缀能被 $1$ 或 $2$ 个偶回文串拼接成. 证明:如果左右两个子串完全相同,那么这个长度为 $2L$ 的前缀自身就是一个偶回文串.否则,若左右两个子串不同,但循环同构,那么设右边的串为 $s_1,s_2,\dots s_L$ ,左边的串为 $s_i,s_{i+1},\dots,s_L,s_1,s_2\dots,s_{i-1}$ . 那么这个长度为 $2L$ 的前缀就应该是 $(s_{i-1},s_1,s_{i-2},s_2,\dots,s_1,s_{i-1})+(s_L,s_i,s_{L-1},s_{i+1},\dots,s_i,s_L)$ . 显然加号两边的串都是偶回文串. 还有一个性质,若 $S=u+v$ , $u$ 和 $v$ 都是偶回文串,那么要么 $u$ 是 $S$ 的最长偶回文前缀,要么 $v$ 是 $S$ 的最长偶回文后缀.Claris的证明 于是用 $Manacher$ 跑出每个位置的最长回文半径 $rmax$ ,对于每个前缀判断一下拆成 最长偶回文前缀 + 偶回文串 与拆成 偶回文串 + 最长偶回文后缀 是否有一个合法即可. 时间复杂度 $O(n^2)$ . 若用 $Hash$ 代替 $Manacher$ 则为 $O(n^2 logn)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=5e3+10;int ch[MAXN],s[MAXN];int n,rmax[MAXN],pre[MAXN];int solve(int p)&#123; int len=0; for(int i=p,j=p+1;i&gt;=1 &amp;&amp; j&lt;=n;--i,++j) s[++len]=ch[i],s[++len]=ch[j]; fill(pre+1,pre+2+len,0); int r=0,pos=1; for(int i=1;i&lt;=len;++i) &#123; int mx=min(max(r-i,0),rmax[2*pos-i]); while(i+mx+1&lt;=n &amp;&amp; i-mx&gt;0 &amp;&amp; s[i+mx+1]==s[i-mx]) ++mx; rmax[i]=mx; if(i+mx&gt;=r) r=i+mx,pos=i; pre[i+rmax[i]]=max(pre[i+rmax[i]],rmax[i]); &#125; for(int i=len;i&gt;=1;--i) pre[i]=max(pre[i],pre[i+1]-1); for(int i=len;i&gt;=1;i-=2) pre[i]&lt;&lt;=1; int mx=0,res=0; for(int i=2;i&lt;=len;i+=2) &#123; if(rmax[i/2]==i/2) mx=i; if(rmax[(i+mx)/2]&gt;=(i-mx)/2 || rmax[(i-pre[i])/2]&gt;=(i-pre[i])/2) ++res; &#125; return res;&#125;int main()&#123; int ans=0; n=read(); for(int i=1;i&lt;=n;++i) ch[i]=read(); for(int i=1;i&lt;n;++i) ans+=solve(i); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>Manacher</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4985 评分]]></title>
    <url>%2F2019%2F05%2F14%2Fbzoj-4985-%E8%AF%84%E5%88%86%2F</url>
    <content type="text"><![CDATA[二分答案 + $dp$ . 这种只有比较大小的操作的题,套路大多是二分答案 $x$ ,将大于等于 $x$ 的视作 $1$ ,其余视作 $0$ ,再考虑判断. 此题二分答案后,可以设 $f(i)$ 表示要将位置 $i$ 上的数确定为 $1$ ,至少需要在前面填几个 $1$ (已确定的位置不算). 那么初始时,若 $i$ 的值未确定,则 $f(i)=1$ ,若 $\geq x$ ,则为 $0$ ,若 $&lt;x$ ,则为 $inf$ . 转移时用队列,将前三个取出来,将最小的两个值加起来放在最后.因为要让最后一个为 $1$ ,则这三个中至少有两个 $1$ . 只剩下一个数时,判断它是否不超过可以随便填的 $1$ 的数目即可. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;bits/stdc++.h&gt;const int inf=1e9;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,m;int d[MAXN];int fd[MAXN];queue&lt;int&gt; q;bool check(int x)&#123; while(!q.empty()) q.pop(); int fcnt=0; for(int i=1;i&lt;=n-m;++i) if(fd[i]&gt;=x) ++fcnt; for(int i=1;i&lt;=n;++i) &#123; if(d[i]==0) q.push(1); else if(d[i]&gt;=x) q.push(0); else q.push(inf); &#125; while(1) &#123; int a=q.front(); q.pop(); if(q.empty()) return a&lt;=fcnt; int b=q.front(); q.pop(); int c=q.front(); q.pop(); q.push(min(inf,min(a+b,min(a+c,b+c)))); &#125;&#125;int main()&#123; n=read(),m=read(); int L=1,R=0; for(int i=1;i&lt;=m;++i) &#123; int x=read(),pos=read(); d[pos]=x; R=max(R,x); &#125; for(int i=1;i&lt;=n-m;++i) &#123; fd[i]=read(); R=max(R,fd[i]); &#125; int ans=0; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(check(mid)) ans=mid,L=mid+1; else R=mid-1; &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>二分</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4998 星球联盟]]></title>
    <url>%2F2019%2F05%2F13%2Fbzoj-4998-%E6%98%9F%E7%90%83%E8%81%94%E7%9B%9F%2F</url>
    <content type="text"><![CDATA[离线,并查集维护点双. 一个比较直接的做法是将点双缩点,然后用 $LCT$ 维护缩点后的树. 其实也可以直接用并查集做.因为只有加边的操作,所以可以离线处理出最后图的一颗生成树. 然后加边时,若为树边,答案显然是 $No$ .否则用并查集将那两个点合并起来,同时维护 $siz$ 就好了. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;int n,m,q;int ecnt=0,head[MAXN],to[MAXN&lt;&lt;2],nx[MAXN&lt;&lt;2];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int f[MAXN],siz[MAXN];int Find(int x)&#123; return x==f[x]?x:(f[x]=Find(f[x]));&#125;int U[MAXN&lt;&lt;1],V[MAXN&lt;&lt;1];int fa[MAXN],dep[MAXN];void dfs(int u,int Fa)&#123; fa[u]=Fa; dep[u]=dep[Fa]+1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v!=Fa) dfs(v,u); &#125;&#125;int treeedge[MAXN&lt;&lt;1];void merge(int x,int y)&#123; x=Find(x),y=Find(y); while(x!=y) &#123; if(dep[x]&lt;dep[y]) swap(x,y); int fx=Find(fa[x]); f[x]=fx; siz[fx]+=siz[x]; x=fx; &#125;&#125;int main()&#123; n=read(),m=read(),q=read(); for(int i=1;i&lt;=n;++i) f[i]=i; for(int i=1;i&lt;=m+q;++i) &#123; int u=read(),v=read(); U[i]=u,V[i]=v; int x=Find(u),y=Find(v); if(x!=y) &#123; f[x]=y; addedge(u,v); addedge(v,u); treeedge[i]=1; &#125; &#125; for(int i=1;i&lt;=n;++i) if(!fa[i]) dfs(i,i); for(int i=1;i&lt;=n;++i) f[i]=i,siz[i]=1; for(int i=1;i&lt;=m;++i) if(!treeedge[i]) merge(U[i],V[i]); for(int i=m+1;i&lt;=m+q;++i) &#123; if(treeedge[i]) puts("No"); else &#123; merge(U[i],V[i]); printf("%d\n",siz[Find(U[i])]); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190512]]></title>
    <url>%2F2019%2F05%2F12%2Ftest20190512%2F</url>
    <content type="text"><![CDATA[普及组套题.可能就 $AK$ 了. 前两题很 $sb$ ,没啥可说的. 考后发现 $T3$ 是个普及组模拟赛的题?还是入门 $OJ$ 上的… Link 考试做法:考虑枚举答案为 $t$ ,那么前 $t$ 天不割的总长是确定的,为 $\sum h_i+t\cdot grow_i$ .需要最大化 $t$ 次割草割去的长度总和. 一株草显然可以只割一次,割多次和只割最后一次是等价的.那么枚举范围就可以设为 $1\sim n$ . 而同一天也不能割两株草.所以 $n$ 株草, $t$ 天就形成了一个 $n\times t$ 的矩阵,每个点有权值,现在每一行每一列最多选 $1$ 个,要求共选 $t​$ 个的最大收益,就成了经典模型. 用一个大数 $inf$ 减去原权值作为权值,就是最小费用最大流,最后算一下就可以了.由于 $n\leq 50​$ ,肯定能过. 大家的做法:枚举答案 $t$ ,将草按 $grow$ 排序,先割 $grow$ 小的,再割大的,总共割 $t$ 次. 然后设 $f(i,j)$ 表示前 $i$ 株草割了 $j$ 株能获得的最大收益就好了. 贪心部分的正确性可以用经典套路证明,尝试交换两株草被割的次序,答案不会变得更优. 顿时感觉自己好 $sb​$ 啊.如果这题把数据出大点今天可能就凉了…]]></content>
      <tags>
        <tag>test</tag>
        <tag>背包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 5479 tree]]></title>
    <url>%2F2019%2F05%2F12%2Fbzoj-5479-tree%2F</url>
    <content type="text"><![CDATA[欧拉序 + 贪心 + 二分. $LCA$ 问题首先可以处理出欧拉序,将树上问题转化成序列问题. 于是就变成了给出一些 $A$ 类点,一些 $B$ 类点,选两个不同类的点作为区间,求区间内 $dep$ 的最小值的最大值. 看上去可以直接二分,然而没什么用,因为区间数目是 $|A|\cdot |B|$ 的. 考虑贪心.对于一个 $B$ 类点,如果我们钦定它作为左端点,那么那个作为右端点的 $A$ 类点应该越靠左越好.如果钦定它为右端点,那么那个 $A$ 类点应该越靠左越好. 于是对每个 $B$ 类点二分出左/右最近的 $A$ 类点,将这两个区间的 $dep$ 最小值加入贡献. 预处理 $ST$ 表,时间复杂度 $O(\sum |B| \cdot log|A|)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10;int n,m;int ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int dep[MAXN],dfn[MAXN],idx;int a[MAXN&lt;&lt;1];void dfs(int u,int fa)&#123; dep[u]=dep[fa]+1; dfn[u]=++idx; a[idx]=dep[u]; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa) continue; dfs(v,u); a[++idx]=dep[u]; &#125;&#125;const int LogN=20;int st[MAXN&lt;&lt;1][LogN];int Log[MAXN&lt;&lt;1];void init_ST()&#123; for(int i=1;i&lt;=2*n-1;++i) st[i][0]=a[i]; for(int j=1;(1&lt;&lt;j)&lt;=2*n-1;++j) for(int i=1;i+(1&lt;&lt;j)-1&lt;=2*n-1;++i) st[i][j]=min(st[i][j-1],st[i+(1&lt;&lt;(j-1))][j-1]);&#125;int query(int l,int r)&#123; int k=Log[r-l+1]; return min(st[l][k],st[r-(1&lt;&lt;k)+1][k]);&#125;void reset()&#123; ecnt=0; idx=0; for(int i=1;i&lt;=n;++i) head[i]=0;&#125;int dfnset[MAXN&lt;&lt;1],A;int pre(int x)&#123; return dfnset[upper_bound(dfnset,dfnset+A,x)-dfnset-1];&#125;int suf(int x)&#123; return dfnset[lower_bound(dfnset,dfnset+A,x)-dfnset];&#125;int main()&#123; Log[1]=0; for(int i=2;i&lt;=200000;++i) Log[i]=Log[i&gt;&gt;1]+1; int T=read(); while(T--) &#123; n=read(),m=read(); reset(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; dfs(1,0); init_ST(); while(m--) &#123; int ans=0; A=read(); for(int i=1;i&lt;=A;++i) dfnset[i]=dfn[read()]; sort(dfnset+1,dfnset+1+A); dfnset[0]=0,dfnset[A+1]=2*n; A+=2; int B=read(); for(int i=1;i&lt;=B;++i) &#123; int x=dfn[read()]; int lx=pre(x),rx=suf(x); if(lx) ans=max(ans,query(lx,x)); if(rx!=2*n) ans=max(ans,query(x,rx)); &#125; printf("%d\n",ans); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>二分</tag>
        <tag>dfs序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 5478 gcd]]></title>
    <url>%2F2019%2F05%2F11%2Fbzoj-5478-gcd%2F</url>
    <content type="text"><![CDATA[莫比乌斯反演. 题面有误, $a$ 应该是 $1\sim n$ 的一个排列.因为这个卡了好久… 用 $\varphi$ 反演就很好做. $O(n)$ 大力枚举 $d$ ,因为 $a$ 是个排列,所以可以大力枚举集合中的每个数的约数,对 $1\sim n$ 中每个数记录一下有 $f(i)$ 个数是它的倍数,那么后面那坨就是 $\sum f(i)^2$ 了. 集合大小总和是个调和级数,总时间复杂度应该是 $O(nlog^3n)$ .(其实我不会证) 直接 $memset$ 会 $T$ ,可能需要一点卡常的奇技淫巧. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;const int MAXN=1e5+10;inline int add(int a,int b)&#123; return (a+b&gt;=P)?(a+b-P):(a+b);&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int n,a[MAXN];int phi[MAXN],ism[MAXN],cnt=0,prime[MAXN];vector&lt;int&gt; factor[MAXN];void init()&#123; for(int i=1;i&lt;=n;++i) for(int j=i;j&lt;=n;j+=i) factor[j].push_back(i); ism[1]=1,phi[1]=1; for(int i=2;i&lt;=n;++i) &#123; if(!ism[i]) prime[++cnt]=i,phi[i]=i-1; for(int j=1;j&lt;=cnt &amp;&amp; i*prime[j]&lt;=n;++j) &#123; ism[i*prime[j]]=1; if(i%prime[j]==0) &#123; phi[i*prime[j]]=mul(phi[i],prime[j]); break; &#125; phi[i*prime[j]]=mul(phi[i],prime[j]-1); &#125; &#125;&#125;int f[MAXN],vis[MAXN];int main()&#123; n=read(); init(); for(int i=1;i&lt;=n;++i) a[i]=read(); int ans=0; for(int i=1;i&lt;=n;++i) &#123; int res=0; for(int j=i;j&lt;=n;j+=i) &#123; int p=a[j]; int siz=factor[p].size(); for(int k=0;k&lt;siz;++k) &#123; int q=factor[p][k]; if(vis[q]!=i) &#123; f[q]=1; vis[q]=i; &#125; else ++f[q]; res=add(res,mul(2*f[q]-1,phi[q])); &#125; &#125; res=mul(res,phi[i]); ans=add(ans,res); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;]]></content>
      <tags>
        <tag>莫比乌斯反演</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 5477 星际穿越]]></title>
    <url>%2F2019%2F05%2F10%2Fbzoj-5477-%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A%2F</url>
    <content type="text"><![CDATA[$dfs$ 序 + 树状数组. 由于路径的权是点权,可以考虑每个点被多少条路径经过,乘上它的点权即为贡献. 假设当前询问是在子树 $p$ 内,考虑一个点 $i$ ,在子树 $i$ 内与不在子树 $i$ 内的点形成了 $siz[i]\cdot (siz[p]-siz[i]+1)$ 条路径,都经过了点 $i$ . 还有一部分路径是将 $i$ 作为 $LCA$ 经过.显然每两个在 $i$ 的不同儿子形成的子树内的点都会经过 $i$ .这部分路径数目可以在 $dfs$ 时利用前缀和算出,记作 $k[i]$ . 由于修改只会单点修改点权,不改变树的形态,把那个 $siz[p]$ 拆出去算,预处理出每个点的剩下的系数. 直接利用 $dfs$ 序,树状数组维护答案. 记 $w[i]=k[i]+siz[i]\cdot (1-siz[u])​$ . 那么每次询问的答案就是子树 $p​$ 内的 $siz[p]\cdot (\sum siz[i]\cdot val[i])+(\sum w[i]\cdot val[i])​$ . 开两个树状数组分别维护前缀 $\sum siz\cdot val$ 与 $\sum siz\cdot w$ 就好了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#include&lt;bits/stdc++.h&gt;using namespace std;#define ll long longinline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;const int P=1e9+7;int n,m;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;struct FenwickTree&#123; #define lowbit(x) x&amp;(-x) int bit[MAXN]; FenwickTree()&#123;memset(bit,0,sizeof bit);&#125; void upd(int x,int c) &#123; for(;x&lt;=n;x+=lowbit(x)) bit[x]=add(bit[x],c); &#125; int sum(int x) &#123; int s=0; for(;x;x-=lowbit(x)) s=add(s,bit[x]); return s; &#125; int query(int l,int r) &#123; return add(sum(r),P-sum(l-1)); &#125;&#125;;int ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1],val[MAXN];void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int siz[MAXN],dfn[MAXN],idx=0;int k[MAXN],w[MAXN];void dfs(int u,int fa)&#123; dfn[u]=++idx; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa) continue; dfs(v,u); k[u]=add(k[u],mul(siz[v],siz[u])); siz[u]+=siz[v]; &#125; siz[u]++;&#125;FenwickTree T1;//siz*valFenwickTree T2;//w*valvoid init()&#123; for(int i=1;i&lt;=n;++i) &#123; T1.upd(dfn[i],mul(siz[i],val[i])); w[i]=add(k[i],mul(siz[i],P+1-siz[i])); T2.upd(dfn[i],mul(w[i],val[i])); &#125;&#125;int main()&#123; n=read(),m=read(); for(int i=1;i&lt;n;++i) &#123; val[i]=1; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; val[n]=1; dfs(1,0); init(); while(m--) &#123; int op=read(); if(op==1) &#123; int p=read(),x=read(); T1.upd(dfn[p],mul(siz[p],x)); T2.upd(dfn[p],mul(w[p],x)); &#125; else &#123; int p=read(); int ans=T2.query(dfn[p],dfn[p]+siz[p]-1); ans=add(ans,mul(siz[p],T1.query(dfn[p],dfn[p]+siz[p]-1))); printf("%d\n",ans); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>树状数组</tag>
        <tag>dfs序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 5476 位运算]]></title>
    <url>%2F2019%2F05%2F09%2Fbzoj-5476-%E4%BD%8D%E8%BF%90%E7%AE%97%2F</url>
    <content type="text"><![CDATA[树状数组. 如果直接离散化 + 莫队,时间复杂度 $O(m\sqrt n)$ ,无法通过. 如果在计算异或和时,一个数在区间内出现了 $k$ 次,使最后一次不计入贡献,那么就只算了 $k-1$ 次. 这样得到的答案就是出现偶数次的数的异或和. 将询问离线,并按照 $r$ 排序,于是可以从前往后一个个加入数.加入一个数 $a_i$ 后,就处理所有 $r=i$ 的询问. 每次加入数 $x$ 时,在它的上一次出现的位置(若有)加入贡献即可.用树状数组维护前缀异或和. $bzoj$ 上数据有点毒.还需要开 $long\ long$. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e6+10;ll a[MAXN],A[MAXN];int n,m,tot;ll res[MAXN];struct qry&#123; int l,r; int id; bool operator &lt; (const qry &amp;rhs) const &#123; return r==rhs.r?l&lt;rhs.l:r&lt;rhs.r; &#125;&#125;q[MAXN];#define lowbit(x) x&amp;(-x)ll bit[MAXN];void add(int x,ll c)&#123; for(;x&lt;=n;x+=lowbit(x)) bit[x]^=c;&#125;ll sum(int x)&#123; ll s=0; for(;x&gt;0;x-=lowbit(x)) s^=bit[x]; return s;&#125;ll query(int l,int r)&#123; return sum(r)^sum(l-1);&#125;int lstpos[MAXN];int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) A[i]=a[i]=read(); sort(A+1,A+1+n); tot=unique(A+1,A+1+n)-A-1; m=read(); for(int i=1;i&lt;=m;++i) &#123; q[i].l=read(),q[i].r=read(); q[i].id=i; &#125; sort(q+1,q+1+m); for(int i=1,j=1;i&lt;=n;++i) &#123; int x=lower_bound(A+1,A+1+tot,a[i])-A; if(lstpos[x]) add(lstpos[x],A[x]); lstpos[x]=i; for(;j&lt;=m &amp;&amp; q[j].r==i;++j) res[q[j].id]=query(q[j].l,q[j].r); &#125; for(int i=1;i&lt;=m;++i) printf("%lld\n",res[i]); return 0;&#125;]]></content>
      <tags>
        <tag>树状数组</tag>
        <tag>离线</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 5496 字符串问题]]></title>
    <url>%2F2019%2F05%2F09%2Fbzoj-5496-%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[$SAM$ 优化连边 + $DAG$ 上 $dp$ . 首先可以搞一个 $n_a+n_b$ 个节点的图.如果一个 $A$ 串支配了一个 $B$ 串,就从这个 $A$ 串对应的点向 $B$ 串对应的点连一条有向边.如果一个 $B$ 串是一个 $A$ 串的前缀,就从这个 $B$ 串对应的点向 $A$ 串对应的点连一条有向边. 然后判环,如果没有环就在 $DAG$ 上 $dp$ 找最长路径.节点数目为 $O(n_a+n_b)$ ,可以接受. 但是暴力连边的时间复杂度高达 $O(n_an_b)$ ,于是获得 $40$ 分好成绩. 考虑利用 $SAM$ 的 $parent$ 树自带的树形结构来优化连边. 第一类边,对于一个 $A$ 串,我们可以在 $SAM$ 上倍增找到它对应的节点,然后对于每个它支配的 $B$ 串也用倍增找到节点,从 $A$ 串节点向 $B$ 串节点连一条有向边. 第二类边,要求 $B$ 串是 $A$ 串前缀.我们如果把主串反过来,就变成了 $B$ 串是 $A$ 串的后缀.在 $parent$ 树上显然表现为 $B$ 对应的节点是 $A$ 对应的节点的祖先.那么建 $parent$ 树时就从父亲到儿子连有向边,边自动就连好了. 这样连边的时间复杂度为 $O(|S|log|S|)$ ,节点数目为 $O(|S|)$ ,均可以接受. 但还存在一个问题. $parent$ 树上一个节点对应的子串不止一个.可能出现两个 $A$ 串都被定位到一个节点上.于是每次 $A$ 串定位到一个位置时就新建一个节点栽上去.新建 $n_a​$ 个节点,不会爆炸. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236#include&lt;bits/stdc++.h&gt;using namespace std;#define ll long longinline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;typedef pair&lt;int,int&gt; pii;const int Siz=26,MAXN=1e6+10;int lst,idx,tmp;int n,m,K;int siz[MAXN],pos[MAXN];int ch[MAXN][Siz],fa[MAXN];int len[MAXN];void Extend(int c,int id)&#123; int p=lst,np=++idx; lst=np; pos[id]=np; siz[np]=1; len[np]=len[p]+1; while(p &amp;&amp; ch[p][c]==0) ch[p][c]=np,p=fa[p]; if(p==0) fa[np]=1; else &#123; int q=ch[p][c]; if(len[q]==len[p]+1) fa[np]=q; else &#123; int nq=++idx; len[nq]=len[p]+1; fa[nq]=fa[q]; fa[q]=fa[np]=nq; memcpy(ch[nq],ch[q],sizeof ch[q]); while(p &amp;&amp; ch[p][c]==q) ch[p][c]=nq,p=fa[p]; &#125; &#125;&#125;int L;int Lg[MAXN];int ecnt=0,head[MAXN],to[MAXN],nx[MAXN],eval[MAXN],indeg[MAXN];ll dp[MAXN];int val[MAXN],dep[MAXN],g[MAXN];vector&lt;pii&gt; d[MAXN];vector&lt;int&gt; v[MAXN];set&lt;pii&gt; s;int l[MAXN],r[MAXN],p[MAXN];int A[MAXN],t[MAXN];void topsort()&#123; for(int i=1;i&lt;=idx;++i) t[len[i]]++; for(int i=1;i&lt;=L;++i) t[i]+=t[i-1]; for(int i=idx;i&gt;=1;--i) A[t[len[i]]--]=i; for(int i=1;i&lt;=idx;++i) &#123; int u=A[i]; dep[u]=dep[fa[u]]+1; v[fa[u]].push_back(u); &#125; for(int i=1;i&lt;=L;++i) t[i]=0;&#125;inline void addedge(int u,int v,int w)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; ++indeg[v]; eval[ecnt]=w; head[u]=ecnt;&#125;const int Logn=20;int f[MAXN][Logn];int jump(int u,int l)&#123; for(int i=Lg[dep[u]];i&gt;=0;--i) if(len[f[u][i]]&gt;=l) u=f[u][i]; pii t=make_pair(u,l); if(s.find(t)==s.end()) &#123; g[u]++; s.insert(t); &#125; return u;&#125;void dfs(int u,int Fa)&#123; if(Fa) addedge(Fa,u,0); int h=0; sort(d[u].begin(),d[u].end()); if(d[u].size()) &#123; p[d[u][0].second]=u; for(int i=1;i&lt;d[u].size();++i) &#123; if(d[u][i].first!=d[u][i-1].first) &#123; h=i; break; &#125; p[d[u][i].second]=u; &#125; &#125; int pre=u; while(g[u]&gt;1) &#123; ++idx; --g[u]; p[d[u][h].second]=idx; for(int i=h+1;i&lt;d[u].size();++i) &#123; if(d[u][i].first!=d[u][i-1].first) &#123; h=i; break; &#125; p[d[u][i].second]=idx; &#125; addedge(pre,idx,0); pre=idx; &#125; for(int i=0;i&lt;v[u].size();++i) dfs(v[u][i],pre);&#125;char buf[MAXN];void init()&#123; s.clear(); ecnt=0; for(int i=1;i&lt;=idx;++i) &#123; dep[i]=0; head[i]=0; indeg[i]=0; dp[i]=0; val[i]=0; &#125; for(int i=1;i&lt;=tmp;++i) &#123; v[i].clear(); d[i].clear(); memset(ch[i],0,sizeof ch[i]); fa[i]=0; g[i]=0; &#125; lst=idx=1;&#125;int q[MAXN];void solve()&#123; scanf("%s",buf+1); L=strlen(buf+1); for(int i=L;i&gt;=1;--i) Extend(buf[i]-'a',i); topsort(); for(int i=2;i&lt;=idx;++i) f[i][0]=fa[i]; for(int j=1;j&lt;=Lg[L];++j) for(int i=2;i&lt;=idx;++i) f[i][j]=f[f[i][j-1]][j-1]; n=read(); for(int i=1;i&lt;=n;++i) &#123; l[i]=read(); r[i]=read(); p[i]=jump(pos[l[i]],r[i]-l[i]+1); &#125; m=read(); for(int i=n+1;i&lt;=n+m;++i) &#123; l[i]=read(); r[i]=read(); p[i]=jump(pos[l[i]],r[i]-l[i]+1); &#125; for(int i=1;i&lt;=n+m;++i) d[p[i]].push_back(make_pair(r[i]-l[i]+1,i)); tmp=idx; dfs(1,0); for(int i=1;i&lt;=n;++i) val[p[i]]=r[i]-l[i]+1; K=read(); for(int i=1;i&lt;=K;++i) &#123; int x=read(),y=read(); addedge(p[x],p[y+n],r[x]-l[x]+1); &#125; int tot=0; ll ans=0; q[++tot]=1; for(int i=1;i&lt;=tot;++i) &#123; int U=q[i]; ans=max(ans,dp[U]+val[U]); for(int j=head[U];j;j=nx[j]) &#123; int V=to[j]; indeg[V]--; dp[V]=max(dp[V],dp[U]+eval[j]); if(!indeg[V]) q[++tot]=V; &#125; &#125; if(tot&lt;idx) puts("-1"); else printf("%lld\n",ans);&#125;int main()&#123; for(int i=2;i&lt;MAXN;++i) Lg[i]=Lg[i&gt;&gt;1]+1; int T=read(); while(T--) &#123; init(); solve(); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>DAG</tag>
        <tag>倍增</tag>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu 5358 快速查询]]></title>
    <url>%2F2019%2F05%2F08%2FLuogu-5358-%E5%BF%AB%E9%80%9F%E6%9F%A5%E8%AF%A2%2F</url>
    <content type="text"><![CDATA[乱搞 $STL$ + 线性筛乘法逆元. 乱搞 $STL$ + 线性筛乘法逆元. 因为只有 $10^5$ 种操作,所以被单独赋值的位置最多也就 $10^5$ 个,这些可以开 $map$ 记录,其他位置可以整体维护. 维护 $mul,add,sum,v$ 四个标记, $mul,add$ 表示 $map$ 中存储的值为 $x$ ,实际上是 $mul\cdot x+add$ . $sum$ 表示当前所有元素的和. $v$ 表示不在 $map​$ 中的数统一的值. 初始 $mul=1,add=sum=v=0.​$ 几种操作仔细推一下就好了: 操作 $1$ :先用操作 $5$ 查询 $a_i$ ,算出新的 $sum$ ,再将 $map$ 中位置 $i$ 改为 $(val-add)\cdot mul^{-1}$ . 操作 $2$ : $sum+=val\cdot n,add+=val,v+=val.$ 操作 $3$ : 若 $val\not = 0,sum\times =val,mul\times =val,add\times =val,v\times =val.$ 若 $val=0$ ,执行操作 $4$ ,将所有值都赋为 $0$,否则会使 $mul=0$ ,要用到 $mul^{-1}​$ 时就炸了 . 操作 $4$ : 将 $map$ 清空, $sum=val\cdot n,mul=1,add=0,v=val$ . 操作 $5$ : 若 $a_i$ 在 $map$ 中有权值 $x$ ,那么就是 $mul\cdot x+add$ ,否则为 $v$ . 操作 $6$ : 当前的 $sum​$ . $O(P)$ 预处理乘法逆元,并使用 $unordered$_$map$ ,时间复杂度即为 $O(tq)$ .123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e7+19;int inv[P+10];void init()&#123; inv[1]=1; for(int i=2;i&lt;P;++i) &#123; inv[i]=1LL*(P-P/i)*inv[P%i]%P;// assert(1LL*inv[i]*i%P==1); &#125;&#125;inline int Add(int a,int b)&#123; return (a+b)%P;&#125;inline int Mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=1e5+10;unordered_map&lt;int,int&gt; mp;int n,q,t;int opt[MAXN],qx[MAXN],qy[MAXN];int add=0,mul=1,sum=0,v=0;int ans=0;int query(int x)&#123; if(mp.find(x)!=mp.end()) &#123; int key=mp[x]; return Add(add,Mul(key,mul)); &#125; else return v;&#125;void operate(int id)&#123; int val,op=opt[id],i; if(op==1) &#123; i=qx[id]; val=qy[id]; int org=query(i); sum=Add(sum,val-org); mul=Add(mul,P); int curv=Mul(inv[mul],Add(val,-add)); mp[i]=curv; return; &#125; if(op==2) &#123; val=qx[id]; sum=Add(sum,Mul(val,n)); add=Add(add,val); v=Add(v,val); return; &#125; bool trans=false; if(op==3) &#123; val=qx[id]; if(val) &#123; sum=Mul(sum,val); mul=Mul(mul,val); add=Mul(add,val); v=Mul(v,val); return; &#125; else op=4,trans=true; &#125; if(op==4) &#123; val=trans?0:qx[id]; mp.clear(); sum=Mul(val,n); mul=1,add=0; v=val; return; &#125; if(op==5) &#123; i=qx[id]; ans=Add(ans,query(i)); return; &#125; if(op==6) &#123; ans=Add(ans,sum); return; &#125;&#125;int main()&#123; init(); n=read(),q=read(); for(int i=1;i&lt;=q;++i) &#123; opt[i]=read(); if(opt[i]!=6) qx[i]=read(); if(opt[i]==1) qy[i]=read(); &#125; t=read(); while(t--) &#123; int a=read(),b=read(); for(int j=1;j&lt;=q;++j) operate((a+1LL*j*b)%q+1); &#125; printf("%d\n",(ans%P+P)%P); return 0;&#125;]]></content>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1149]]></title>
    <url>%2F2019%2F05%2F07%2FCF1149%2F</url>
    <content type="text"><![CDATA[$Div.1$ CF1149A Prefix Sum Primes 构造 + 贪心. 可以先线性筛预处理一个质数表.于是就变成了用一定数量的 $1,2​$ 来填每个位置差分的值. 从前往后填,如果当前能放 $2​$ 的话肯定不会劣于放两个 $1​$ .于是能放 $2​$ 就放,否则放 $1​$ ,直到放完为止. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e6+10;int prime[MAXN],cnt=0,ism[MAXN];void init(int N)&#123; ism[1]=1; for(int i=2;i&lt;=N;++i) &#123; if(!ism[i]) prime[++cnt]=i; for(int j=1;j&lt;=cnt &amp;&amp; i*prime[j]&lt;=N;++j) &#123; ism[i*prime[j]]=1; if(i%prime[j]==0) break; &#125; &#125;&#125;int bgs[3];void solve()&#123; for(int i=1;i&lt;=cnt;++i) &#123; int dif=prime[i]-prime[i-1]; int us2=min(bgs[2],dif/2); for(int j=1;j&lt;=us2;++j) printf("2 "); bgs[2]-=us2; dif-=2*us2; int us1=min(bgs[1],dif); for(int j=1;j&lt;=us1;++j) printf("1 "); bgs[1]-=us1; if(bgs[1]+bgs[2]==0) return; &#125;&#125;int main()&#123; init(1000000); int n=read(); for(int i=1;i&lt;=n;++i) bgs[read()]++; solve(); return 0;&#125; CF1149B Three Religions 贪心 + $dp$ . 首先可以发现如果三个串匹配到了一定位置,最后在原串中用的字符位置肯定越靠前越好. 于是可以设 $f(i,j,k)$ 表示三个串分别匹配了 $i,j,k$ 的长度时,最后用的字符在原串中的位置. 可以预处理 $nx(i,j)$ 表示原串中第 $i$ 个字符往后跳,跳到的第一个字符为 $j$ 的位置.跳不到设为 $n+1$ .那么就可以借助 $nx$ 来完成 $f$ 的转移. 那么计算完成后,只需要判断 $f(len_1,len_2,len_3)\leq n$ 是否成立.成立则为 $YES$ ,否则为 $NO$ . 并不能 $O(q\cdot 250^3)$ 暴力 $dp$ .注意每次加一个字符时(假定加在第一个串上),前面的 $dp$ 值不会被影响,只需计算 $f(len_1+1,j,k)$ 这 $250^2$ 个状态.每次删字符时直接让 $len$ 减 $1$ 就可以了.下次会覆盖掉多余的值. 时间复杂度 $O(q\cdot 250^2)$. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e5+10,L=251;const int Siz=26;char buf[MAXN];int n,Q,nx[MAXN][Siz];int minpos[Siz];int f[L][L][L];int len[4];int s[4][L];int main()&#123; n=read(); Q=read(); scanf("%s\n",buf+1); for(int i=0;i&lt;Siz;++i) minpos[i]=n+1; buf[0]='a'; for(int i=n+1;i&gt;=0;--i) &#123; memcpy(nx[i],minpos,sizeof minpos); minpos[buf[i]-'a']=i; &#125; f[0][0][0]=0; while(Q--) &#123; char tp[2],newchar[2]; int id; scanf("%s%d",tp,&amp;id); if(tp[0]=='+') &#123; scanf("%s",&amp;newchar); s[id][++len[id]]=newchar[0]-'a'; if(id==1) &#123; for(int i=len[1];i&lt;=len[1];++i) for(int j=0;j&lt;=len[2];++j) for(int k=0;k&lt;=len[3];++k) &#123; int res=n+1; if(i) res=min(res,nx[f[i-1][j][k]][s[1][i]]); if(j) res=min(res,nx[f[i][j-1][k]][s[2][j]]); if(k) res=min(res,nx[f[i][j][k-1]][s[3][k]]); f[i][j][k]=res; &#125; &#125; else if(id==2) &#123; for(int i=0;i&lt;=len[1];++i) for(int j=len[2];j&lt;=len[2];++j) for(int k=0;k&lt;=len[3];++k) &#123; int res=n+1; if(i) res=min(res,nx[f[i-1][j][k]][s[1][i]]); if(j) res=min(res,nx[f[i][j-1][k]][s[2][j]]); if(k) res=min(res,nx[f[i][j][k-1]][s[3][k]]); f[i][j][k]=res; &#125; &#125; else &#123; for(int i=0;i&lt;=len[1];++i) for(int j=0;j&lt;=len[2];++j) for(int k=len[3];k&lt;=len[3];++k) &#123; int res=n+1; if(i) res=min(res,nx[f[i-1][j][k]][s[1][i]]); if(j) res=min(res,nx[f[i][j-1][k]][s[2][j]]); if(k) res=min(res,nx[f[i][j][k-1]][s[3][k]]); f[i][j][k]=res; &#125; &#125; &#125; else --len[id]; puts(f[len[1]][len[2]][len[3]]&lt;=n?"YES":"NO"); &#125; return 0;&#125; CF1149C Tree Generator™ 给的括号序列就是一个欧拉序(进出都记录). 容易处理出每个点的 $dep​$ ,遇见 $(​$ 就 $+1​$ ,否则 $-1​$ . 考虑两个点的距离为 $dep_u+dep_v-2dep_{lca}​$ ,在欧拉序中.和用 $RMQ​$ 做 $LCA​$ 一样,两个点的 $lca​$ 一定位于这两个点的中间,且深度最小. 那么找直径就转化为找三个位置 $u\leq lca\leq v$ ,使得 $dep_u+dep_v-2dep_{lca}$ 最大. 每次修改交换两个括号,中间那一段 $dep$ 都会 $+2/-2$ .于是用线段树维护每个位置的 $dep$ , $dep_l-2dep_i$ , $dep_r-2dep_i$ 的 $max$ 即可. 注意合并节点,标记的细节. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;int n,Q;int dep[MAXN];struct SegTree&#123; struct node &#123; int res;//dep[l]+dep[r]-2dep[i] int tag; int mxdep,negdep;//dep[i],-2dep[i] int ldep,rdep;//dep[l]-2dep[i],dep[r]-2dep[i] &#125;Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1] void pushup(int o) &#123; root.mxdep=max(lson.mxdep,rson.mxdep); root.negdep=max(lson.negdep,rson.negdep); root.ldep=max(lson.ldep,rson.ldep); root.ldep=max(root.ldep,lson.mxdep+rson.negdep); root.rdep=max(lson.rdep,rson.rdep); root.rdep=max(root.rdep,lson.negdep+rson.mxdep); root.res=max(lson.res,rson.res); root.res=max(root.res,lson.mxdep+rson.rdep); root.res=max(root.res,lson.ldep+rson.mxdep); &#125; void BuildTree(int o,int l,int r) &#123; root.tag=0; if(l==r) &#123; root.mxdep=dep[l]; root.negdep=-2*dep[l]; root.rdep=root.ldep=-dep[l]; root.res=0; return; &#125; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); pushup(o); &#125; void modifiy(int o,int c) &#123; root.tag+=c; root.mxdep+=c; root.negdep-=2*c; root.ldep-=c; root.rdep-=c; &#125; void pushdown(int o) &#123; if(root.tag) &#123; modifiy(o&lt;&lt;1,root.tag); modifiy(o&lt;&lt;1|1,root.tag); root.tag=0; &#125; &#125; void update(int o,int l,int r,int L,int R,int c) &#123; if(L&gt;r || l&gt;R || L&gt;R) return; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; modifiy(o,c); return; &#125; pushdown(o); int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) update(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) update(o&lt;&lt;1|1,mid+1,r,L,R,c); pushup(o); &#125;&#125;T;#define pr printf("%d\n",T.Tree[1].res);char buf[MAXN];int main()&#123; n=read(),Q=read(); scanf("%s",buf+1); for(int i=1;i&lt;=2*n-2;++i) &#123; dep[i]=dep[i-1]; if(buf[i]=='(') ++dep[i]; else --dep[i]; &#125; T.BuildTree(1,1,2*n-2); pr; while(Q--) &#123; int L=read(),R=read(); if(L&gt;R) swap(L,R); if(buf[L]=='(') T.update(1,1,2*n-2,L,R-1,-2); else T.update(1,1,2*n-2,L,R-1,2); pr; swap(buf[L],buf[R]); &#125; return 0;&#125; CF1149D Abandoning Roads 最小生成树 + 状压 $dp$. 用 $kruskal$ 做最小生成树的时候,会先考虑权值为 $a$ 的边,那么可以先预处理出由 $a$ 边连接出的联通块. 从 $1$ 到 $p$ 跑最短路,每条 $b$ 边会连接两个联通块,将联通块状压,就可以记录哪些联通块已经走过了. 注意到对一个点数 $\leq 3$ 的联通块,不可能进入它后再走出去,因为这样的长度至少为 $2b$ ,而它内部长度最长才 $2a$ .所以可以不记这些联通块.状态数目在 $O(2^{n/4}m)$ 级别,就可以直接做了. CF1149E Election Promises 博弈论. 结论: $SG_u=mex(SG_v),sum(x)=\oplus_{SG_i=x}h_i$ , $\oplus$ 表示异或和.先手能胜,当且仅当 $\exists x ,sum(x)\not=0​$ . 如果所有的 $sum$ 都为 $0$ ,那么先手随意操作一次,都会使得有 $sum$ 变为非 $0$ .然后后手再操作一次,所有 $sum$ 又可以被修改为 $0$ :找到最大的 $x$ , $sum(x)&gt;0$ 进行修改.]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>线段树</tag>
        <tag>构造</tag>
        <tag>codeforces</tag>
        <tag>博弈论</tag>
        <tag>状压dp</tag>
        <tag>dfs序</tag>
        <tag>最小生成树</tag>
        <tag>自动机dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 2286 消耗战]]></title>
    <url>%2F2019%2F05%2F06%2Fbzoj-2286-%E6%B6%88%E8%80%97%E6%88%98%2F</url>
    <content type="text"><![CDATA[虚树 + 树形 $dp$ . 考虑最暴力的树形 $dp$.设 $f_u$ 表示使得子树 $u$ 中所有关键点都与 $1$ 断开的最小代价. 那么对于 $u$ 的所有儿子 $v$ ,如果 $v$ 是关键点,代价为 $val(u,v)$ ,否则为 $min(val(u,v),f_v)$ . $f_u$ 就是所有儿子的代价之和,最终答案即为 $f_1$ . 这样暴力 $dp$ 是 $O(nm)$ 的,无法通过.但注意到关键点数目总和 $\sum k\leq 5\times 10^5$ ,所以可以使用 虚树 进行处理. 虚树 就是新建出的一颗树,只保留原树中所有关键节点与它们所有的 $LCA$ ,而原图中其它的链被简化成边或点. 这样一颗 虚树 的节点数目不会超过 $2k-1$.因为 $k$ 个关键节点所有不同的 $LCA$ 最多 $k-1$ 个. 构造时,先在原树中预处理 $dfs$ 序,子树大小 $siz$ ,并预处理倍增数组,以快速查找 $LCA$ 以及一条链上最小边. 然后将所有关键点加入一个数组中,按照 $dfs$ 序排序,再将相邻两个点的 $LCA$ 也放入数组中,再放入 $1$ . 再按照 $dfs$ 序排序,去重,就得到了我们在虚树上的 $dfs$ 遍历顺序.按照这个顺序进行 $dfs$ ,判断下个点是继续$dfs$ 还是回溯回来,只需用预处理的 $dfs$ 序和 $siz$ 判断下个点是否在当前的子树中. 在虚树上 $dfs$ 的同时像原来一样进行树形 $dp$ .不过虚树中两个点的边在原图中实际是一条链.在虚树中直接割断两个点的花费是连接这两个点的链上所有边的最小边权.用预处理的倍增数组进行查询即可. 时间复杂度 $O(\sum klogk)$ . 开始写的时候预处理倍增数组居然没有按拓扑序,而是直接按照节点编号顺序处理.这样居然还能有 $90pts$ .出计数不好吗,非要出最优化让人水过去. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151#include&lt;bits/stdc++.h&gt;using namespace std;#define ll long longinline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=250010;int ecnt,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1],val[MAXN&lt;&lt;1];inline void addedge(int u,int v,int w)&#123; ++ecnt; to[ecnt]=v; val[ecnt]=w; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int n,m,k;int tid=0,marked[MAXN];int fa[MAXN][20],minc[MAXN][20];void init()&#123; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=19;++j) &#123; fa[i][j]=fa[fa[i][j-1]][j-1]; minc[i][j]=min(minc[i][j-1],minc[fa[i][j-1]][j-1]); &#125;&#125;int dfsidx=0,dfn[MAXN],siz[MAXN],dep[MAXN];void dfs(int u,int f)&#123; siz[u]=1; dep[u]=dep[f]+1; dfn[u]=++dfsidx; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==f) continue; fa[v][0]=u; minc[v][0]=val[i]; dfs(v,u); siz[u]+=siz[v]; &#125;&#125;int LCA(int x,int y)&#123; if(dep[x]&lt;dep[y]) swap(x,y); for(int i=19;i&gt;=0;--i) if(dep[x]-(1&lt;&lt;i)&gt;=dep[y]) x=fa[x][i]; if(x==y) return x; for(int i=19;i&gt;=0;--i) if(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i]; return fa[x][0];&#125;int minval(int x,int lca)&#123; int res=1e9; for(int i=19;i&gt;=0;--i) if(dep[x]-(1&lt;&lt;i)&gt;=dep[lca]) &#123; res=min(res,minc[x][i]); x=fa[x][i]; &#125; return res;&#125;bool cmp(int x,int y)&#123; return dfn[x]&lt;dfn[y];&#125;int q[MAXN&lt;&lt;1],tot;int id;ll f[MAXN];void dfs_vtree()&#123; int u=q[id]; f[u]=1e18; ll res=0; while(1) &#123; if(id==tot) break; if(dfn[q[id+1]]&lt;=dfn[u]+siz[u]-1) &#123; int v=q[++id]; if(marked[v]==tid) &#123; dfs_vtree(); f[v]=minval(v,u); &#125; else &#123; dfs_vtree(); f[v]=min(f[v],1LL*minval(v,u)); &#125; res+=f[v]; &#125; else break; &#125; if(res) f[u]=min(f[u],res);&#125;int main()&#123; n=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(),w=read(); addedge(u,v,w); addedge(v,u,w); &#125; dfs(1,0); init(); m=read(); while(m--) &#123; tot=0; k=read(); ++tid; for(int i=1;i&lt;=k;++i) &#123; int x=read(); marked[x]=tid; q[++tot]=x; &#125; sort(q+1,q+1+tot,cmp); for(int i=1;i&lt;k;++i) q[++tot]=LCA(q[i],q[i+1]); q[++tot]=1; sort(q+1,q+1+tot,cmp); tot=unique(q+1,q+1+tot)-q-1; id=1; dfs_vtree(); printf("%lld\n",f[1]); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>树形dp</tag>
        <tag>虚树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 4556 字符串]]></title>
    <url>%2F2019%2F05%2F04%2Fbzoj-4556-%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[$SAM$ + 倍增 + 线段树合并. 这里有两个小性质需要注意. 答案是可二分的.这个应该比较显然. 两个子串的最长公共后缀就是它们在 $SAM$ 上状态节点 $LCA$ 的 $maxlen$ .想象两个串都从前往后缩短,当两者缩到同一个串,即公共后缀时,节点也跳到了它们的 $LCA$ .长度即为 $maxlen$ . 于是把整个串翻转,询问前缀相关问题就变成了询问后缀相关问题.询问时,可以二分答案 $x$ ,转化为判定问题. 从 $d$ 对应的位置用倍增往上跳,找到 $maxlen\geq x$ 的 $dep$ 最小的祖先(其 $right$ 集合最大,为最优),判断它的 $right$ 集合中是否出现了 $[a+x-1,b]$ 中的某个位置. 如果出现了,那么从这个位置往前的 $x$ 个字符就是要找的子串,否则就找不到. 可以看出 $c$ 的作用就是限制了二分答案 $x$ 的范围,显然不能超过 $d-c+1$ 与 $b-a+1​$ . 一个点的 $right$ 集合是它所有儿子节点 $right$ 集合的并集.所以可以用线段树合并来维护. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165#include&lt;bits/stdc++.h&gt;using namespace std;#define ll long longinline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int Siz=26,MAXN=2e5+10;int lst=1,idx=1;int n,m;int siz[MAXN],pos[MAXN],leafright[MAXN];int ch[MAXN][Siz],fa[MAXN];int len[MAXN];void Extend(int c,int id)&#123; int p=lst,np=++idx; lst=np; pos[id]=np; leafright[np]=id; siz[np]=1; len[np]=len[p]+1; while(p &amp;&amp; ch[p][c]==0) ch[p][c]=np,p=fa[p]; if(p==0) fa[np]=1; else &#123; int q=ch[p][c]; if(len[q]==len[p]+1) fa[np]=q; else &#123; int nq=++idx; len[nq]=len[p]+1; fa[nq]=fa[q]; fa[q]=fa[np]=nq; memcpy(ch[nq],ch[q],sizeof ch[q]); while(p &amp;&amp; ch[p][c]==q) ch[p][c]=nq,p=fa[p]; &#125; &#125;&#125;int ecnt=0,head[MAXN],to[MAXN],nx[MAXN];inline void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int tot=0;struct node&#123; int sum,ls,rs;&#125;Tree[MAXN*30];#define root Tree[o]#define lson Tree[root.ls]#define rson Tree[root.rs]void update(int &amp;o,int l,int r,int pos)&#123; o=++tot; ++root.sum; if(l==r) return; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) update(root.ls,l,mid,pos); else update(root.rs,mid+1,r,pos);&#125;void pushup(int o)&#123; root.sum=lson.sum+rson.sum;&#125;int merge(int x,int y)&#123; if(!x || !y) return x+y; int o=++tot; root.ls=merge(Tree[x].ls,Tree[y].ls); root.rs=merge(Tree[x].rs,Tree[y].rs); pushup(o); return o;&#125;int query(int o,int l,int r,int L,int R)&#123; if(L&gt;r || l&gt;R) return 0; if(L&lt;=l &amp;&amp; r&lt;=R) return root.sum; int mid=(l+r)&gt;&gt;1; int res=0; if(L&lt;=mid) res+=query(root.ls,l,mid,L,R); if(R&gt;mid) res+=query(root.rs,mid+1,r,L,R); return res;&#125;int f[MAXN][18];int rt[MAXN];void mergeright(int u)&#123; f[u][0]=fa[u]; for(int i=1;i&lt;=17;++i) f[u][i]=f[f[u][i-1]][i-1]; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; mergeright(v); rt[u]=merge(rt[u],rt[v]); &#125;&#125;bool check(int x,int L,int R,int u)&#123; if(!x) return true; if(L&gt;R) return false; for(int i=17;i&gt;=0;--i) if(len[f[u][i]]&gt;=x) u=f[u][i]; return query(rt[u],1,n,L,R)&gt;0;&#125;char buf[MAXN];int main()&#123; n=read(),m=read(); scanf("%s",buf+1); for(int i=1;i&lt;(n+1-i);++i) swap(buf[i],buf[n+1-i]); for(int i=1;i&lt;=n;++i) Extend(buf[i]-'a',i); for(int i=1;i&lt;=idx;++i) addedge(fa[i],i); for(int i=1;i&lt;=idx;++i) if(leafright[i]) update(rt[i],1,n,leafright[i]); mergeright(1); while(m--) &#123; int a=read(),b=read(),c=read(),d=read(); swap(a,b),swap(c,d); a=n+1-a,b=n+1-b,c=n+1-c,d=n+1-d; int L=0,R=min(d-c+1,b-a+1); int res=0; while(L&lt;=R) &#123; int mid=(L+R)&gt;&gt;1; if(check(mid,a+mid-1,b,pos[d])) res=max(res,mid),L=mid+1; else R=mid-1; &#125; printf("%d\n",res); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>倍增</tag>
        <tag>SAM</tag>
        <tag>线段树合并</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 2555 substring]]></title>
    <url>%2F2019%2F05%2F04%2Fbzoj-2555-substring%2F</url>
    <content type="text"><![CDATA[$SAM+LCT$ . 如果没有修改,就直接建出 $SAM$ ,询问时从根出发走到对应状态,该状态的 $siz$ 即为答案. 现在要支持修改,沿用上面思路,只不过要动态维护 $parent$ 树的形态,需要加边,删边. 套一个 $LCT$ 进行维护就可以了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191#include&lt;bits/stdc++.h&gt;using namespace std;#define ll long longinline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int Siz=26,MAXN=2e6+10;int lst=1,idx=1;int siz[MAXN],tag[MAXN];int stk[MAXN],tp=0;struct Link_Cut_Tree&#123; struct node &#123; int ch[2],fa; node()&#123;ch[0]=ch[1]=fa=0;&#125; &#125;Tree[MAXN];#define root Tree[x] bool isroot(int x) &#123; return Tree[root.fa].ch[0]!=x &amp;&amp; Tree[root.fa].ch[1]!=x; &#125; void modifiy(int x,int c) &#123; if(x) &#123; siz[x]+=c; tag[x]+=c; &#125; &#125; void pushdown(int x) &#123; if(tag[x]) &#123; modifiy(root.ch[0],tag[x]); modifiy(root.ch[1],tag[x]); tag[x]=0; &#125; &#125; void rotate(int x) &#123; int y=Tree[x].fa; int z=Tree[y].fa; if(!isroot(y)) Tree[z].ch[Tree[z].ch[1]==y]=x; Tree[x].fa=z; int k=(x==Tree[y].ch[1]); Tree[y].ch[k]=Tree[x].ch[k^1]; Tree[Tree[x].ch[k^1]].fa=y; Tree[x].ch[k^1]=y; Tree[y].fa=x; &#125; void splay(int x) &#123; stk[++tp]=x; for(int pos=x;!isroot(pos);pos=Tree[pos].fa) stk[++tp]=Tree[pos].fa; while(tp) pushdown(stk[tp--]); while(!isroot(x)) &#123; int y=Tree[x].fa; int z=Tree[y].fa; if(!isroot(y)) (Tree[z].ch[0]==y)^(Tree[y].ch[0]==x)?rotate(x):rotate(y); rotate(x); &#125; &#125; void Access(int x) &#123; for(int y=0;x;y=x,x=Tree[x].fa) &#123; splay(x); Tree[x].ch[1]=y; &#125; &#125; void link(int x,int y) &#123; Tree[x].fa=y; Access(y); splay(y); modifiy(y,siz[x]); &#125; void cut(int x) &#123; Access(x); splay(x); modifiy(Tree[x].ch[0],-siz[x]); Tree[x].ch[0]=Tree[Tree[x].ch[0]].fa=0; &#125;&#125;LCT;struct SuffixAutoMation&#123; int ch[MAXN][Siz],fa[MAXN]; int len[MAXN]; void Extend(int c) &#123; int p=lst,np=++idx; lst=np; siz[np]=1; len[np]=len[p]+1; while(p &amp;&amp; ch[p][c]==0) ch[p][c]=np,p=fa[p]; if(p==0) &#123; fa[np]=1; LCT.link(np,1); &#125; else &#123; int q=ch[p][c]; if(len[q]==len[p]+1) &#123; fa[np]=q; LCT.link(np,q); &#125; else &#123; int nq=++idx; len[nq]=len[p]+1; LCT.link(nq,fa[q]); LCT.cut(q); LCT.link(q,nq); LCT.link(np,nq); fa[nq]=fa[q]; fa[q]=fa[np]=nq; memcpy(ch[nq],ch[q],sizeof ch[q]); while(p &amp;&amp; ch[p][c]==q) ch[p][c]=nq,p=fa[p]; &#125; &#125; &#125;&#125;SAM;int L;char buf[MAXN];void getinfo(int mask)&#123; scanf("%s",buf); L=strlen(buf); for(int i=0; i&lt;L; ++i) &#123; mask=(mask*131+i) % L; swap(buf[i],buf[mask]); &#125;&#125;int mask=0;int main()&#123; int Q=read(); scanf("%s",buf); L=strlen(buf); for(int i=0;i&lt;L;++i) SAM.Extend(buf[i]-'A'); while(Q--) &#123; scanf("%s",buf); if(buf[0]=='A') //Add &#123; getinfo(mask); for(int i=0;i&lt;L;++i) SAM.Extend(buf[i]-'A'); &#125; else //Query &#123; getinfo(mask); int p=1; for(int i=0;i&lt;L;++i) &#123; p=SAM.ch[p][buf[i]-'A']; &#125; if(!p) puts("0"); else &#123; LCT.splay(p); printf("%d\n",siz[p]); mask^=siz[p]; &#125; &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>LCT</tag>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190504]]></title>
    <url>%2F2019%2F05%2F04%2Ftest20190504%2F</url>
    <content type="text"><![CDATA[据说 是 $noip$ 难度. 题面 $find$ 比较简单.按照 $x$ 坐标排序后,就是以 $y$ 坐标为关键字做一个 $LIS​$ . $O(nlogn)​$. 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;using namespace std;inline int read()&#123; int x=0,k=1; char ch=getchar(); while(ch&lt;'0'||ch&gt;'9') &#123; if(ch=='-') k=-1; ch=getchar(); &#125; while(ch&gt;='0'&amp;&amp;ch&lt;='9') &#123; x=x*10+ch-'0'; ch=getchar(); &#125; return k*x;&#125;const int MAXN=1e6+10;int n=0,my,y[MAXN],Y[MAXN];pair&lt;int,int&gt; p[MAXN];int bit[MAXN];#define lowbit(x) x&amp;(-x)inline void add(int x,int c)&#123; for(; x&lt;=my; x+=lowbit(x)) bit[x]=max(bit[x],c);&#125;inline int sum(int x)&#123; int s=0; for(; x; x-=lowbit(x)) s=max(s,bit[x]); return s;&#125;int main()&#123; freopen("find.in","r",stdin); freopen("find.out","w",stdout); int N=read(); for(int i=1; i&lt;=N; ++i) &#123; int a=read(),b=read(); if(a&lt;0 || b&lt;0) continue; ++n; p[n].first=a; Y[n]=y[n]=b; &#125; sort(Y+1,Y+1+n); my=unique(Y+1,Y+1+n)-Y-1; for(int i=1; i&lt;=n; ++i) p[i].second=lower_bound(Y+1,Y+1+my,y[i])-Y; sort(p+1,p+1+n); int ans=0; for(int i=1; i&lt;=n; ++i) &#123; int ky=p[i].second; int mx=sum(ky); ans=max(ans,mx+1); add(ky,mx+1); &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; $walk$ 是个套路题. 标算套路:因为询问给出的 $v$ 最大是 $10^{18}$ ,所以走不为 $1$ 的边,最多走 $60$ 次就会变成 $0$ . 于是只需要用并查集把边权为 $1$ 连接的两个点并在一起,然后跳的时候暴力跳,跳成 $0$ 或者到终点就退出. 这样最多跳 $60$ 次,而且大多数时候跳不满,所以可以过. 我的做法相当假.注意到这个操作是可合并的,直接树剖 + 线段树维护区间边权乘积. 但是区间乘积可能会爆掉 $long\ long$ . 于是每次 $pushup$ 的时候都让乘积与 $0$ 取 $max$ .这样一段爆掉的区间乘积(大概率)是 $0$ .跳的时候遇到了就直接输出 $0$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll x=0,k=1; char ch=getchar(); while(ch&lt;'0'||ch&gt;'9') &#123; if(ch=='-') k=-1; ch=getchar(); &#125; while(ch&gt;='0'&amp;&amp;ch&lt;='9') &#123; x=x*10+ch-'0'; ch=getchar(); &#125; return k*x;&#125;const int MAXN=2e5+10;int n,Q;int ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1],fa[MAXN];int dep[MAXN];inline void addedge(int u,int v,ll w)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; val[ecnt]=w; head[u]=ecnt;&#125;ll wp[MAXN];int dfn[MAXN],dfnidx=0,rnk[MAXN],siz[MAXN],mxson[MAXN],top[MAXN];void dfs1(int u,int f)&#123; fa[u]=f; siz[u]=1; dep[u]=dep[f]+1; for(int i=head[u]; i; i=nx[i]) &#123; int v=to[i]; if(v==f) continue; dfs1(v,u); siz[u]+=siz[v]; if(siz[v]&gt;siz[mxson[u]]) mxson[u]=v; &#125;&#125;void dfs2(int u,int tp)&#123; dfn[u]=++dfnidx; rnk[dfnidx]=u; top[u]=tp; if(mxson[u]) dfs2(mxson[u],tp); for(int i=head[u]; i; i=nx[i]) &#123; int v=to[i]; if(v!=mxson[u] &amp;&amp; v!=fa[u]) dfs2(v,v); &#125;&#125;ll prod[MAXN&lt;&lt;2];#define root prod[o]#define lson prod[o&lt;&lt;1]#define rson prod[o&lt;&lt;1|1]void pushup(int o)&#123; root=lson*rson; root=max(root,0LL);&#125;void bd(int o,int l,int r)&#123; if(l==r) &#123; root=wp[rnk[l]]; return; &#125; int mid=(l+r)&gt;&gt;1; bd(o&lt;&lt;1,l,mid); bd(o&lt;&lt;1|1,mid+1,r); pushup(o);&#125;void update(int o,int l,int r,int pos,ll c)&#123; if(l==r) &#123; root=c; return; &#125; int mid=(l+r)&gt;&gt;1; if(pos&lt;=mid) update(o&lt;&lt;1,l,mid,pos,c); else update(o&lt;&lt;1|1,mid+1,r,pos,c); pushup(o);&#125;ll query(int o,int l,int r,int L,int R)&#123; ll res=1; if(l&gt;R || L&gt;r) return 1; if(L&lt;=l &amp;&amp; r&lt;=R) return max(0LL,root); int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) &#123; res*=query(o&lt;&lt;1,l,mid,L,R); res=max(res,0LL); &#125; if(R&gt;mid) &#123; res*=query(o&lt;&lt;1|1,mid+1,r,L,R); res=max(res,0LL); &#125; return res;&#125;void solve()&#123; int idx=n; for(int i=1; i&lt;n; ++i) &#123; int u=read(),v=read(); ll w=read(); ++idx; addedge(u,idx,0); addedge(idx,u,0); addedge(idx,v,0); addedge(v,idx,0); wp[idx]=w; &#125; for(int i=1; i&lt;=n; ++i) wp[i]=1; dfs1(1,0); dfs2(1,1); bd(1,1,idx); while(Q--) &#123; int tp=read(); if(tp==1) &#123; int x=read(),y=read(); ll v=read(); while(top[x]!=top[y]) &#123; if(dep[top[x]]&lt;dep[top[y]]) swap(x,y); ll p=query(1,1,idx,dfn[top[x]],dfn[x]); if(p&lt;=0) &#123; puts("0"); continue; &#125; v/=p; x=fa[top[x]]; &#125; if(dep[x]&lt;dep[y]) swap(x,y); ll p=query(1,1,idx,dfn[y],dfn[x]); if(p&lt;=0) &#123; puts("0"); continue; &#125; v/=p; printf("%lld\n",v); &#125; else &#123; int p=read(); ll c=read(); update(1,1,idx,dfn[p+n],c); &#125; &#125;&#125;int main()&#123; freopen("walk.in","r",stdin); freopen("walk.out","w",stdout); n=read(); Q=read(); solve(); return 0;&#125; $sunset$ 想出了正确做法,但今天是按照 $5$ 个小时的节奏在打的,实际是 $3.5h$ ,只剩了 $20min$ ,就没写了. 显然每个联通块可以分开做.对于一个联通块,做一颗 $dfs​$ 树,因为是无向图,所以除了树边之外就只有返祖边. 返祖边会形成一个环,如果这个环的大小为偶(通过 $dep​$ 之差判断),显然没有作用.若为奇,就把环上的边都打上标记. 询问时,若 $dep_x,dep_y$ 奇偶性不同,直接走树边长度就是奇数.否则如果两者路径上有被标记的边,走一个奇环再出来,长度也是奇数. 如果两种情况都不满足,就无法找到长度为奇数的路径.]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>tarjan</tag>
        <tag>树链剖分</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3926 诸神眷顾的幻想乡]]></title>
    <url>%2F2019%2F05%2F03%2Fbzoj-3926-%E8%AF%B8%E7%A5%9E%E7%9C%B7%E9%A1%BE%E7%9A%84%E5%B9%BB%E6%83%B3%E4%B9%A1%2F</url>
    <content type="text"><![CDATA[广义 $SAM$ . 广义 $SAM$ ,就是在 $Trie$ 树上建 $SAM$ .注意到树上的每个串都可以看成以某个叶子节点为根的 $Trie$ 树上的一条路径. 而叶子节点数 $\leq 20$ ,所以可以以每个叶子节点为根建 $Trie$ 树,建的时候需要注意插入一个点时,将 $lst$ 置为其父亲在 $SAM​$ 上对应的节点. 注意判重,即处理插入一个字符时, $lst$ 对应的转移边已经有点的情况.建好后就是问有多少个不同子串,每个点的贡献都是 $Max-Min+1$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=1e7+10;const int Siz=10;int n;struct SuffixAutoMation&#123; int idx,lst; SuffixAutoMation()&#123;lst=idx=1;&#125; int fa[MAXN],ch[MAXN][Siz]; int len[MAXN]; int Extend(int p,int c) &#123; if(ch[p][c]) &#123; int q=ch[p][c]; if(len[q]==len[p]+1) lst=q; else &#123; int nq=++idx; lst=nq; len[nq]=len[p]+1; fa[nq]=fa[q]; fa[q]=nq; memcpy(ch[nq],ch[q],sizeof ch[q]); while(p &amp;&amp; ch[p][c]==q) ch[p][c]=nq,p=fa[p]; &#125; &#125; else &#123; int np=++idx; lst=np; len[np]=len[p]+1; while(p &amp;&amp; ch[p][c]==0) ch[p][c]=np,p=fa[p]; if(p==0) fa[np]=1; else &#123; int q=ch[p][c]; if(len[q]==len[p]+1) fa[np]=q; else &#123; int nq=++idx; len[nq]=len[p]+1; fa[nq]=fa[q]; fa[q]=fa[np]=nq; memcpy(ch[nq],ch[q],sizeof ch[q]); while(p &amp;&amp; ch[p][c]==q) ch[p][c]=nq,p=fa[p]; &#125; &#125; &#125; return lst; &#125; void solve() &#123; ll ans=0; for(int i=2;i&lt;=idx;++i) ans+=len[i]-len[fa[i]]; cout&lt;&lt;ans&lt;&lt;endl; &#125;&#125;SAM;int ecnt=0,head[MAXN],to[MAXN],nx[MAXN],deg[MAXN];void addedge(int u,int v)&#123; ++deg[u]; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int col[MAXN];void dfs(int u,int fa,int lst)&#123; int newlst=SAM.Extend(lst,col[u]); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa) continue; dfs(v,u,newlst); &#125;&#125;int main()&#123; n=read(); int c=read(); for(int i=1;i&lt;=n;++i) col[i]=read(); for(int i=1;i&lt;n;++i) &#123; int u=read(),v=read(); addedge(u,v); addedge(v,u); &#125; for(int i=1;i&lt;=n;++i) if(deg[i]==1) dfs(i,0,1); SAM.solve(); return 0;&#125;]]></content>
      <tags>
        <tag>SAM</tag>
        <tag>广义SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TJOI2019 选做]]></title>
    <url>%2F2019%2F05%2F02%2FTJOI2019-%E9%80%89%E5%81%9A%2F</url>
    <content type="text"><![CDATA[向 $CQOI\ 2018$ 致敬? 甲苯先生的字符串 矩阵快速幂. 板子题.处理相邻两个字符时改一下转移矩阵里的系数就好了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=26;struct matrix&#123; int v[MAXN][MAXN]; matrix()&#123;memset(v,0,sizeof v);&#125; matrix operator * (const matrix &amp;rhs) const &#123; matrix res; for(int i=0;i&lt;MAXN;++i) for(int j=0;j&lt;MAXN;++j) for(int k=0;k&lt;MAXN;++k) res.v[i][j]=add(res.v[i][j],mul(v[i][k],rhs.v[k][j])); return res; &#125;&#125;;matrix fpow(matrix a,ll b)&#123; matrix res; for(int i=0;i&lt;MAXN;++i) res.v[i][i]=1; while(b) &#123; if(b&amp;(1LL)) res=res*a; a=a*a; b&gt;&gt;=1; &#125; return res;&#125;ll n;char buf[100005];int main()&#123; scanf("%lld%s",&amp;n,buf); matrix st,trans; for(int i=0;i&lt;MAXN;++i) st.v[i][0]=1; for(int i=0;i&lt;MAXN;++i) for(int j=0;j&lt;MAXN;++j) trans.v[i][j]=1; int len=strlen(buf); for(int i=1;i&lt;len;++i) &#123; int p=buf[i-1]-'a'; int q=buf[i]-'a'; trans.v[q][p]=0; &#125; st=fpow(trans,n-1)*st; int ans=0; for(int i=0;i&lt;MAXN;++i) ans=add(ans,st.v[i][0]); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; 甲苯先生的滚榜 平衡树. 又是板子题.随便上个啥平衡树写一下插入,删除,查询排名. 唱、跳、rap 和篮球 顶风作案,律师函警告. 容斥原理+ $dp$ 计数. 为了方便,称题目中所说的一组同学为 位置 $k$ 在讨论蔡徐坤 ,要求出没有位置在讨论蔡徐坤的方案数. 显然可以容斥原理搞一搞,只需对每个 $i$ 求出钦定 $i$ 个位置在讨论蔡徐坤,其它不涉及的位置乱选的方案数. 其它位置乱选方案数就是有重复元素的排列数,但每个元素使用次数有限制.可以构造多项式 $(x+y+z+w)^{tot}$ , $tot=n-4i$ ,将次数符合要求的对应系数求和. 二项式定理套两次,多项式展开为$$\begin{aligned}(x+y+z+w)^{tot}&amp;=\sum C_{tot}^j (x+y)^j(z+w)^{tot-j}\\&amp;=\sum C_{tot}^j(\sum C_j^p x^p y^{j-p})(\sum C_{tot-j}^q z^q w^{tot-j-q})\end{aligned}$$ 预处理组合数前缀和,把 $x,y,z,w​$ 系数都符合限制的那一段取出来计算即可. 考虑怎么求钦定 $i​$ 个位置在讨论蔡徐坤的方案数. 抽象一下就是选出 $i$ 个位置,相邻两个位置之差至少为 $4$ .需要求出每个 $i$ 的方案数. 可以设计一个三维的 $dp​$ ,状态需要记录考虑的数目,选的数目,最后一个选的位置. 注意到最后一个选的位置其实只有四种情况有区别,设 $f(j,i,0/1/2/3)$ 表示已经考虑了前 $j$ 个位置,选了 $i$ 个位置,最后选的位置分别是 $j,j-1,j-2,\leq j-3$ 时的方案数.将 $f(n-3,i,0/1/2/3)$ 求出即可. 时间复杂度 $O(n^2)​$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;void upd(int x,int &amp;y)&#123; y=add(x,y);&#125;const int MAXN=1e3+10;int n,mx;int C[MAXN][MAXN],sumc[MAXN][MAXN];int f[MAXN][MAXN][4];void init()&#123; for(int i=0;i&lt;=n;++i) C[i][0]=1; for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=i;++j) C[i][j]=add(C[i-1][j],C[i-1][j-1]); for(int i=0;i&lt;=n;++i) &#123; sumc[i][0]=1; for(int j=1;j&lt;=i;++j) sumc[i][j]=add(sumc[i][j-1],C[i][j]); &#125; f[0][0][3]=1; for(int i=0;i&lt;n;++i) for(int j=0;j&lt;=mx;++j) for(int k=0;k&lt;4;++k) &#123; if(!f[i][j][k]) continue; upd(f[i][j][k],f[i+1][j][k==3?k:k+1]); if(k==3) upd(f[i][j][k],f[i+1][j+1][0]); &#125;&#125;int lim[4];int main()&#123; n=read(); for(int i=0;i&lt;4;++i) lim[i]=read(); sort(lim,lim+4); mx=min(lim[0],n/4);//最多mx个位置讨论蔡徐坤 init(); int ans=0,sgn=1; for(int i=0;i&lt;=mx;++i) &#123; int res=0,tmp=0; if(n&lt;4) tmp=1; else &#123; for(int k=0;k&lt;4;++k) tmp=add(tmp,f[n-3][i][k]); &#125; for(int k=0;k&lt;4;++k) lim[k]-=i; int tot=n-i*4; for(int j=0;j&lt;=tot;++j) &#123; int lp=max(0,j-lim[1]); int rp=min(lim[0],j); int lk=max(0,tot-j-lim[3]); int rk=min(lim[2],tot-j); if(lp&gt;rp || lk&gt;rk) continue; int t1=lp?sumc[j][rp]-sumc[j][lp-1]:sumc[j][rp]; int t2=lk?sumc[tot-j][rk]-sumc[tot-j][lk-1]:sumc[tot-j][rk]; res=add(res,mul(C[tot][j],mul(t1,t2))); &#125; res=mul(res,tmp); ans=add(ans,res*sgn); for(int k=0;k&lt;4;++k) lim[k]+=i; sgn*=-1; &#125; cout&lt;&lt;add(ans,P)&lt;&lt;endl; return 0;&#125; 甲苯先生与线段树 位运算,数位 $dp$ . 大概是个原题. 甲苯先生和大中锋的字符串 $SAM$ + 差分. 建出 $SAM$ 后在 $parent$ 树上递推 $right$ 集合的大小,若其为 $k$ ,则对 $[Minlen,Maxlen]$ 内的计数器都加 $1$ . 最后询问一次计数器最大值.可以修改差分,最后求前缀和,就可以做到 $O(n)$ 了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include&lt;bits/stdc++.h&gt;using namespace std;#define ll long longinline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int Siz=26;const int MAXN=2e5+10;int n,k;int ans,mxt;int dif[MAXN];struct SuffixAutoMation&#123; int lst,idx; int fa[MAXN],siz[MAXN]; int ch[MAXN][Siz],len[MAXN]; int A[MAXN],t[MAXN]; SuffixAutoMation()&#123;lst=idx=1;&#125; void Extend(int c) &#123; int p=lst,np=++idx; lst=np; siz[np]=1; len[np]=len[p]+1; while(p &amp;&amp; ch[p][c]==0) ch[p][c]=np,p=fa[p]; if(p==0) fa[np]=1; else &#123; int q=ch[p][c]; if(len[q]==len[p]+1) fa[np]=q; else &#123; int nq=++idx; fa[nq]=fa[q]; fa[q]=fa[np]=nq; for(int i=0;i&lt;Siz;++i) ch[nq][i]=ch[q][i]; len[nq]=len[p]+1; siz[nq]=0; while(p &amp;&amp; ch[p][c]==q) ch[p][c]=nq,p=fa[p]; &#125; &#125; &#125; void topsort() &#123; for(int i=1;i&lt;=idx;++i) ++t[len[i]]; for(int i=1;i&lt;=n;++i) t[i]+=t[i-1]; for(int i=1;i&lt;=idx;++i) A[t[len[i]]--]=i; &#125; void solve() &#123; topsort(); for(int i=idx;i&gt;=1;--i) &#123; int u=A[i]; siz[fa[u]]+=siz[u]; if(siz[u]==k &amp;&amp; u!=1) &#123; int mx=len[u],mi=len[fa[u]]+1; ++dif[mi]; --dif[mx+1]; &#125; &#125; int sum=0; for(int i=1;i&lt;=n;++i) &#123; sum+=dif[i]; if(sum&gt;=mxt) mxt=sum,ans=i; &#125; printf("%d\n",mxt==0?-1:ans); &#125; void reset() &#123; for(int i=1;i&lt;=n+1;++i) dif[i]=0; for(int i=0;i&lt;=n;++i) t[i]=0; for(int i=1;i&lt;=idx;++i) memset(ch[i],0,sizeof ch[i]); mxt=0; lst=idx=1; &#125;&#125;SAM;char buf[MAXN];int main()&#123; int T=read(); while(T--) &#123; scanf("%s",buf); n=strlen(buf); scanf("%d",&amp;k); cout&lt;&lt;k&lt;&lt;endl; for(int i=0;i&lt;n;++i) SAM.Extend(buf[i]-'a'); SAM.solve(); SAM.reset(); &#125; return 0;&#125; 读入格式很诡异.用快读读 $k​$ 会炸两个点,原因不明. 大中锋的游乐场 最短路. 记 $dis[i][j]$ 表示从起点出发到节点 $i$ ,经过的 $1$ 减去经过的 $2$ 的数目为 $j$ 时的最短路长度. 用 $Dijkstra$ 进行转移即可.]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>平衡树</tag>
        <tag>矩阵优化</tag>
        <tag>容斥原理</tag>
        <tag>最短路</tag>
        <tag>差分</tag>
        <tag>位运算</tag>
        <tag>SAM</tag>
        <tag>数位dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1137]]></title>
    <url>%2F2019%2F04%2F28%2FCF1137%2F</url>
    <content type="text"><![CDATA[$Div.1​$ CF1137A Skyscrapers 二分. 通过观察可以发现,对于每个询问,如果交点位置的值是 $x$ ,那么答案就是该列比 $x$ 小的数字种数与该行比 $x$ 小的数字种数的较大值+该列比 $x$ 小的数字种数与该行比 $x$ 小的数字种数的较大值 + $1$ . 离散化后二分一下就可以求出了. CF1137B Camp Schedule 贪心 + $kmp$ . 这个东西显然可以贪心,构造字符串时先放一个目标串,然后后面从最长 $border$ 那里接上去继续放,直到放完或者 $0/1$ 不够用. 用 $kmp$ 搞一下最长 $border$ 长度就好了. CF1137C Museums Tour $tarjan$ 缩点, $DAG$ 上 $dp$ . 注意到 $d$ 较小,所以首先可以把原来的每个点拆成 $d$ 个点,并连上合法的转移边.这样每个点有两个值 $(x,t)$ ,如果城市 $x$ 在当天有展览,这个点权值为 $1$ ,否则为 $0$ . 用 $tarjan$ 搞出每个强连通分量,缩成一个点,那么这个新点的权值就是这个 $SCC$ 内有展览的城市数目和. 注意到同一个城市拆出来的点 $(x,t)$ 与 $(x,t’)$ 路径可逆(连续走 $d-1$ 次),要么彼此都不可达,对应的两个 $SCC$ 不连通;要么彼此都可达.在同一个 $SCC$ 内. 所以在 $DAG$ 上 $dp$ 的话,两个 $SCC$ 内相同城市拆出来的点贡献不会叠加. 那么就可以直接从 $(1,0)$ 所在的强连通分量出发,在 $DAG$ 上找一条点权和最大的路径,可以 $dp$ 解决. 时间复杂度 $O(nd)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include&lt;bits/stdc++.h&gt;using namespace std;#define ll long longinline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int N=1e5+10;const int MAXN=5e6+10;int n,m,d;vector&lt;int&gt; graph[MAXN];int eu[N],ev[N];int on_display[MAXN];char schedule[51];bool vis[N];int low[MAXN],dfn[MAXN],idx=0;int stk[MAXN],tp=0;int scc[MAXN],scc_cnt=0,sccval[MAXN];void tarjan(int u)&#123; stk[++tp]=u; dfn[u]=low[u]=++idx; for(auto v:graph[u]) &#123; if(!dfn[v]) &#123; tarjan(v); low[u]=min(low[u],low[v]); &#125; else if(!scc[v]) low[u]=min(low[u],dfn[v]); &#125; if(dfn[u]==low[u]) &#123; ++scc_cnt; while(tp) &#123; int v=stk[tp--]; scc[v]=scc_cnt; if(on_display[v]) &#123; sccval[scc_cnt]+=(int)(!vis[(v/d)+1]); vis[(v/d)+1]=true; &#125; if(v==u) break; &#125; &#125;&#125;int f[MAXN];int dfs(int u)&#123; if(f[u]!=-1) return f[u]; f[u]=0; for(auto v:graph[u]) f[u]=max(f[u],dfs(v)); f[u]+=sccval[u]; return f[u];&#125;int main()&#123; n=read(),m=read(),d=read(); for(int i=1;i&lt;=m;++i) &#123; int u=read(),v=read(); eu[i]=u,ev[i]=v; for(int ut=0;ut&lt;d;++ut) &#123; int vt=(ut+1)%d; graph[(u-1)*d+ut].push_back((v-1)*d+vt); &#125; &#125; for(int i=1;i&lt;=n;++i) &#123; scanf("%s",schedule); for(int j=0;j&lt;d;++j) on_display[(i-1)*d+j]=schedule[j]-'0'; &#125; tarjan((1-1)*d+0); for(int i=0;i&lt;n*d;++i) graph[i].clear(); for(int i=1;i&lt;=m;++i) &#123; int u=eu[i],v=ev[i]; for(int ut=0;ut&lt;d;++ut) &#123; int vt=(ut+1)%d; if(scc[(u-1)*d+ut] &amp;&amp; scc[(u-1)*d+ut]!=scc[(v-1)*d+vt]) graph[scc[(u-1)*d+ut]].push_back(scc[(v-1)*d+vt]); &#125; &#125; memset(f,-1,sizeof f); int ans=dfs(scc[(1-1)*d+0]); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; 然而需要卡空间.懒得卡了. CF1137D Cooperative Game 交互题. 这个模型可以考虑 $floyd$ 判圈算法.即 $A$ 的速度是 $2$ , $B$ 的速度是 $1$ ,同时从起点出发,当两人重新相遇时,快的那个人比慢的那个人多走了 $k$ 圈,即 $k\cdot c$ 步.操作时可以让 $A,B$ 一起走一步,再让 $A$ 走一步. 相遇时, $B$ 肯定还没有走完一圈.记此时 $B$ 在圈内走了 $x$ 步( $x&lt;c$ ),那么 $B$ 一共走了 $t+x$ 步, $A$ 一共走了 $t+x+kc$ 步.而 $A$ 走的步数恰好是 $B$ 的二倍. 所以可以得到 $kc=t+x$ .那么此时这两个人再一起往前走 $t$ 步就可以一起到达环的起点. 而剩余的人还在出发点,也是再往前走 $t$ 步到达环的起点.于是相遇后所有人一起走,到达同一个位置时就结束了. 分析一下总步数. $A,B$ 相遇前要进行 $2(t+x)$ 个操作,相遇后要进行 $t$ 个操作.总操作数不会大于 $3(t+c)$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include&lt;bits/stdc++.h&gt;using namespace std;#define ll long longinline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;int groups;char buf[10][10];void getinfo()&#123; groups=read(); for(int i=0;i&lt;groups;++i) scanf("%s",buf[i]);&#125;void moveA()&#123; puts("next 0"); fflush(stdout);&#125;void moveAB()&#123; puts("next 0 1"); fflush(stdout);&#125;void moveAll()&#123; puts("next 0 1 2 3 4 5 6 7 8 9"); fflush(stdout);&#125;void Done()&#123; puts("done"); fflush(stdout);&#125;void stage_catch()&#123; while(1) &#123; moveAB(); getinfo(); moveA(); getinfo(); for(int i=0;i&lt;groups;++i) &#123; bool fa=false,fb=false; int len=strlen(buf[i]); for(int j=0;j&lt;len;++j) &#123; if(buf[i][j]=='0') fa=true; if(buf[i][j]=='1') fb=true; if(fa &amp;&amp; fb) return; &#125; &#125; &#125;&#125;void stage_meet()&#123; while(1) &#123; moveAll(); getinfo(); if(groups==1) &#123; Done(); return; &#125; &#125;&#125;int main()&#123; stage_catch(); stage_meet(); return 0;&#125; CF1137F Matches Are Not a Child’s Play 树剖 + 线段树. $compare$ 询问显然不用单独考虑,做两次 $when$ 询问就可以了. 初始的删点序列我们可以暴力搞出,只需要考虑每次 $up$ 操作带来的影响. 首先可以发现在一条路径上,只能从两边往中间删.,若 $up$ 当前权值最大的节点,就没有影响.否则,如果把 $u$ 改成了最大, $v$ 是原来最大的点, $v\not = u$ ,那么 $v-u$ 这条路径一定是最后被删除的,且删除顺序是严格按照 $v\rightarrow u$ 这条单向路径. 不在这条路径上的点被删除的相对顺序显然不会变.即, $up$ 操作一次之后,先删除不在这条路径上的点,顺序是操作前被删除的相对顺序,再沿路径 $v\rightarrow u$ 顺次删除. 实现可以通过染色,第 $i$ 次 $up$ 操作时把 $v_i\rightarrow u_i$ 这条路径上的点颜色染为 $i$ .那么询问 $when(x)$ 的答案就是颜色序号比 $col_x$ 小的节点数加上路径 $v_{colx} \rightarrow x$ 的节点数目.初始化可以看做进行了 $n$ 次 $up$ 操作. 染色用树剖+线段树实现,答案的两部分,前者用线段树维护每种颜色的节点数目,后者只需要记录每次的 $v_i$ ,利用树剖维护的 $dep,top$ 计算. 时间复杂度 $O(qlog^2n)$ .]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>二分</tag>
        <tag>线段树</tag>
        <tag>DAG</tag>
        <tag>codeforces</tag>
        <tag>kmp</tag>
        <tag>tarjan</tag>
        <tag>非传统题</tag>
        <tag>floyd判圈</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DNA分子计数]]></title>
    <url>%2F2019%2F04%2F28%2FDNA%E5%88%86%E5%AD%90%E8%AE%A1%E6%95%B0%2F</url>
    <content type="text"><![CDATA[怎么生物课也遇到计数题啊… 今天生物课老师直接说: $n$ 个碱基对的 $DNA$ 种类数目就是 $4^n$ ,如果还要考虑对称的话太麻烦了… 于是就想了一下考虑对称同构怎么算.讨论前后翻转,两条链交换,中心对称都算一种的话的情况. 考虑 $Burnside$ 引理,显然可以构造出置换群 ${ \text{不变,左右翻转,上下翻转,中心对称}}$ ,中心对称其实就是左右翻转与上下翻转都操作了一次. 那么现在只需要计算出每种变换的不动点数目,求其平均数即可. 不变 的不动点数目显然是 $4^n$ . 左右翻转 的不动点数目显然是 $0$ .因为碱基互补,不可能两条链相同. 上下翻转 的不动点数目其实就是回文串的数目. $n$ 为偶数时为 $2^n$ , $n$ 为奇数时为 $2^{n+1}$ . 中心对称 的不动点数目,其实就是第 $i$ 个位置恰好与第 $n+i-1$ 个位置互补的数目. $n$ 为偶数时为 $2^n$ . $n$ 为奇数时,中间那个位置要求与自己互补,这是不可能的,数目为 $0$ . 对 $4$ 种变换的不动点数目求平均值,得到答案 $4^{n-1}+2^{n-1}$ . 其实 $DNA$ 分子好像只有中心对称这一种变换?因为左右翻转和上下翻转后其实裸露的那两个磷酸分子旁边的东西的是不一样的???但总之无论考虑哪些变换都可以用 $Burnside$ 像上面那样直接搞吧…]]></content>
      <tags>
        <tag>Burnside/Polya</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 2946 公共串]]></title>
    <url>%2F2019%2F04%2F28%2Fbzoj-2946-%E5%85%AC%E5%85%B1%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[$SAM$ 解决多个串的最长公共子串. $SAM$. 显然可以 二分 + $hash$ 做,时间复杂度 $O(logL\cdot L \cdot n)$. 考虑 $SAM$ 的做法.对第一个串建个 $SAM$ ,然后每读入一个新串就把它放在自动机上匹配. 匹配时维护每个状态能与每个串都匹配的最大长度.最后的答案就是所有状态能匹配长度的最大值. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111#include&lt;bits/stdc++.h&gt;using namespace std;#define ll long longinline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int Siz=26,MAXN=4e3+10;char buf[MAXN];int L,n;struct SuffixAutoMation&#123; int idx,lst; int fa[MAXN],ch[MAXN][Siz]; int len[MAXN],siz[MAXN]; int A[MAXN],t[MAXN]; int mxl[MAXN],res[MAXN]; SuffixAutoMation()&#123;idx=lst=1;&#125; void Extend(int c) &#123; int p=lst,np=++idx; lst=np; res[np]=len[np]=len[p]+1; siz[np]=1; while(p &amp;&amp; ch[p][c]==0) ch[p][c]=np,p=fa[p]; if(p==0) fa[np]=1; else &#123; int q=ch[p][c]; if(len[q]==len[p]+1) fa[np]=q; else &#123; int nq=++idx; res[nq]=len[nq]=len[p]+1; fa[nq]=fa[q]; fa[q]=fa[np]=nq; memcpy(ch[nq],ch[q],sizeof ch[q]); while(p &amp;&amp; ch[p][c]==q) ch[p][c]=nq,p=fa[p]; &#125; &#125; &#125; void topsort() &#123; for(int i=1;i&lt;=idx;++i) ++t[len[i]]; for(int i=1;i&lt;=idx;++i) t[i]+=t[i-1]; for(int i=1;i&lt;=idx;++i) A[t[len[i]]--]=i; &#125; void solve() &#123; scanf("%s",buf+1); memset(mxl,0,sizeof mxl); L=strlen(buf+1); int p=1,tmp=0; for(int i=1;i&lt;=L;++i) &#123; int c=buf[i]-'a'; while(p &amp;&amp; ch[p][c]==0) p=fa[p]; if(p==0) p=1,tmp=0; else &#123; tmp=min(tmp,len[p])+1; p=ch[p][c]; &#125; mxl[p]=max(mxl[p],tmp); &#125; for(int i=idx;i&gt;=1;--i) &#123; int u=A[i]; mxl[fa[u]]=max(mxl[fa[u]],mxl[u]); &#125; for(int i=1;i&lt;=idx;++i) res[i]=min(res[i],mxl[i]); &#125; void pr() &#123; int ans=0; for(int i=1;i&lt;=idx;++i) ans=max(ans,res[i]); cout&lt;&lt;ans&lt;&lt;endl; &#125;&#125;SAM;int main()&#123; n=read(); scanf("%s",buf+1); L=strlen(buf+1); for(int i=1;i&lt;=L;++i) SAM.Extend(buf[i]-'a'); SAM.topsort(); for(int i=1;i&lt;n;++i) SAM.solve(); SAM.pr(); return 0;&#125;]]></content>
      <tags>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 1396 识别子串]]></title>
    <url>%2F2019%2F04%2F27%2Fbzoj-1396-%E8%AF%86%E5%88%AB%E5%AD%90%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[$SAM$ + 线段树. 先建出 $parent$ 树,按照题意,我们只需要处理 $right$ 集合大小为 $1$ 的节点. 如下图,先算出这样的一个节点合法长度的 $max,min$ ( $min$ 可以用 $max(fa)+1$ 计算). 那么区域 $I$ 内每个点的贡献就是区域 $II$ 的长度加上这个点到区域 $II$ 的距离. 区域 $II$ 内每个点的贡献就是区间 $II$ 的长度.开两颗线段树分别修改就可以了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162#include&lt;bits/stdc++.h&gt;using namespace std;#define ll long longinline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int Siz=26,MAXN=2e5+10;const int inf=1e9;#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1]struct SegTree&#123; struct node &#123; int l,r; int mi,tag; &#125;Tree[MAXN&lt;&lt;2]; void pushup(int o) &#123; root.mi=min(lson.mi,rson.mi); &#125; void modifiy(int o,int c) &#123; root.mi=min(root.mi,c); root.tag=min(root.tag,c); &#125; void pushdown(int o) &#123; if(root.tag&lt;inf) &#123; modifiy(o&lt;&lt;1,root.tag); modifiy(o&lt;&lt;1|1,root.tag); root.tag=inf; &#125; &#125; void BuildTree(int o,int l,int r) &#123; root.mi=root.tag=inf; root.l=l,root.r=r; if(l==r) return; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); &#125; void update(int o,int L,int R,int c) &#123; int l=root.l,r=root.r; if(L&gt;r || l&gt;R || L&gt;R) return; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; modifiy(o,c); return; &#125; int mid=(l+r)&gt;&gt;1; pushdown(o); if(L&lt;=mid) update(o&lt;&lt;1,L,R,c); if(R&gt;mid) update(o&lt;&lt;1|1,L,R,c); pushup(o); &#125;&#125;T1,T2;int ans[MAXN];void query(int o,int l,int r)&#123; if(l==r) &#123; int res=min(T1.Tree[o].mi-l,T2.Tree[o].mi); ans[l]=res; return; &#125; int mid=(l+r)&gt;&gt;1; T1.pushdown(o); T2.pushdown(o); query(o&lt;&lt;1,l,mid); query(o&lt;&lt;1|1,mid+1,r);&#125;char buf[MAXN];int L;int t[MAXN],A[MAXN];struct SuffixAutomation&#123; int lst,idx; int ch[MAXN][Siz],fa[MAXN]; int siz[MAXN],len[MAXN]; int pos[MAXN]; SuffixAutomation()&#123;lst=idx=1;&#125; void Extend(int c,int curl) &#123; int p=lst,np=++idx; lst=np; siz[np]=1; len[np]=len[p]+1; pos[np]=curl; while(p &amp;&amp; ch[p][c]==0) ch[p][c]=np,p=fa[p]; if(p==0) fa[np]=1; else &#123; int q=ch[p][c]; if(len[q]==len[p]+1) fa[np]=q; else &#123; int nq=++idx; len[nq]=len[p]+1; fa[nq]=fa[q]; fa[q]=fa[np]=nq; memcpy(ch[nq],ch[q],sizeof ch[q]); while(p &amp;&amp; ch[p][c]==q) ch[p][c]=nq,p=fa[p]; &#125; &#125; &#125; void solve() &#123; for(int i=1;i&lt;=idx;++i) ++t[len[i]]; for(int i=1;i&lt;=idx;++i) t[i]+=t[i-1]; for(int i=1;i&lt;=idx;++i) A[t[len[i]]--]=i; T1.BuildTree(1,1,L); T2.BuildTree(1,1,L); for(int i=idx;i&gt;=1;--i) &#123; int u=A[i]; siz[fa[u]]+=siz[u]; pos[fa[u]]=pos[u]; if(u==1 || siz[u]&gt;1) continue; int l=pos[u]-len[u]+1,r=pos[u]-(len[fa[u]]+1)+1; T1.update(1,l,r-1,pos[u]+1); T2.update(1,r,pos[u],pos[u]-r+1); &#125; query(1,1,L); for(int i=1;i&lt;=L;++i) printf("%d\n",ans[i]); &#125;&#125;SAM;int main()&#123; scanf("%s",buf+1); L=strlen(buf+1); for(int i=1;i&lt;=L;++i) SAM.Extend(buf[i]-'a',i); SAM.solve(); return 0;&#125;]]></content>
      <tags>
        <tag>线段树</tag>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bzoj 3998 弦论]]></title>
    <url>%2F2019%2F04%2F27%2Fbzoj-3998-%E5%BC%A6%E8%AE%BA%2F</url>
    <content type="text"><![CDATA[$SAM​$ 的入门练习题. 先把 $SAM​$ 建出来,每个节点的 $right​$ 集合大小就是走到这个节点时对应的子串出现次数. 如果 $t=0​$ ,那么这些位置只能被算一次,把每个点的 $right​$ 集合大小都置为 $1​$ ,否则就拓扑排序后(桶排),在$parent​$ 树上递推得出真正的 $right​$ 集合大小. 注意根节点处对应的子串都是空串,不能算入贡献,要把根节点的 $siz$ 置为 $0$ . 再在转移图中递推得到每个点能转移到的所有点的子串出现次数 $sum$ ,然后从根节点出发贪心走就好了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118#include&lt;bits/stdc++.h&gt;using namespace std;#define ll long longinline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int Siz=26,MAXN=2e6+10;int t[MAXN],A[MAXN];int T,K;struct SuffixAutomation&#123; int idx,lst; int ch[MAXN][Siz]; int siz[MAXN],len[MAXN]; int fa[MAXN]; int sum[MAXN]; SuffixAutomation()&#123;idx=lst=1;&#125; void Extend(int c) &#123; int p=lst,np=++idx; lst=np; siz[np]=1; len[np]=len[p]+1; while(p &amp;&amp; ch[p][c]==0) ch[p][c]=np,p=fa[p]; if(p==0) fa[np]=1; else &#123; int q=ch[p][c]; if(len[q]==len[p]+1) fa[np]=q; else &#123; int nq=++idx; len[nq]=len[p]+1; fa[nq]=fa[q]; fa[q]=fa[np]=nq; memcpy(ch[nq],ch[q],sizeof ch[q]); while(p &amp;&amp; ch[p][c]==q) ch[p][c]=nq,p=fa[p]; &#125; &#125; &#125; void solve() &#123; for(int i=1;i&lt;=idx;++i) ++t[len[i]]; for(int i=1;i&lt;=idx;++i) t[i]+=t[i-1]; for(int i=1;i&lt;=idx;++i) A[t[len[i]]--]=i; if(T==0) &#123; for(int i=1;i&lt;=idx;++i) siz[i]=1; &#125; else &#123; for(int i=idx;i&gt;=1;--i) &#123; int u=A[i]; siz[fa[u]]+=siz[u]; &#125; &#125; siz[1]=0;//在根节点处的串都是空串,不能计入 for(int i=idx;i&gt;=1;--i) &#123; int u=A[i]; sum[u]=siz[u]; for(int j=0;j&lt;26;++j) if(ch[u][j]) sum[u]+=sum[ch[u][j]]; &#125; int u=1; if(sum[u]&lt;K) &#123; puts("-1"); return; &#125; while(K) &#123; for(int i=0;i&lt;Siz;++i) &#123; if(K&lt;=sum[ch[u][i]]) &#123; putchar('a'+i); K-=siz[ch[u][i]]; u=ch[u][i]; break; &#125; else K-=sum[ch[u][i]]; &#125; &#125; puts(""); &#125;&#125;SAM;char buf[MAXN];int main()&#123; scanf("%s",buf+1); int L=strlen(buf+1); for(int i=1;i&lt;=L;++i) SAM.Extend(buf[i]-'a'); T=read(),K=read(); SAM.solve(); return 0;&#125;]]></content>
      <tags>
        <tag>SAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1151]]></title>
    <url>%2F2019%2F04%2F25%2FCF1151%2F</url>
    <content type="text"><![CDATA[一场难度略高于普及组的 $Div.2$ . CF1151C Problem for Nazar 二分. 转化成求前缀和 $sum(r)-sum(l-1)$ .算每个前缀和的时候二分出整的前 $2^k$ 个数,剩下的单独算就好了. CF1151D Stas and the Queue at the Buffet 贪心. 考虑当前的两个位置 $i,j\ (i&lt;j)$ , 有 $x,y$ 两个元素,若交换这两个元素,对答案的影响. 化简出来发现只需要将所有元素按 $a_i-b_i$ 从大到小排序就好了. 这种判定贪心的可行性及怎样贪心的方法很常见,就是考虑交换两个元素对答案的影响. CF1151E Number of Components 构造. 考虑若当前计算的权值区间是 $(l,r)$ ,那么把在这个范围内的点权值赋为 $1$ ,否则赋为 $0$. 再在位置 $0$ 处补上一个权值 $0$ ,可以发现此时对于这对 $(l,r)$ 的答案就是相邻的 $(0,1)$ 对数. 那么我们直接来算每两个相邻位置的贡献,即 $a_i,a_{i+1}$ 在多少组 $(l,r)$ 中被赋的权值不同就好了. CF1153F Sonya and Informatics 概率+矩阵快速幂. 设 $f(i,j)$ 表示操作了 $j$ 次,当前最后一个 $1$ 在位置 $i$ 的概率. 每次 $j\rightarrow j+1$ 转移的时候分类讨论一下选了哪两个位置,写出转移矩阵,转移 $k$ 次,矩阵快速幂加速即可. 时间复杂度 $O(n^3logk)$ .]]></content>
      <tags>
        <tag>贪心</tag>
        <tag>二分</tag>
        <tag>构造</tag>
        <tag>codeforces</tag>
        <tag>概率/期望</tag>
        <tag>矩阵优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GXOI/GZOI2019 选做]]></title>
    <url>%2F2019%2F04%2F21%2FGXOI-GZOI2019-%E9%80%89%E5%81%9A%2F</url>
    <content type="text"><![CDATA[广西/贵州 $OI$ . 题面Day 1Day 2 与或和 显然可以每一位分开做. 或就是用总子矩阵数目减去全 $0$ 子矩阵数目.与就是全 $1$ 子矩阵数目.单调栈经典问题. 时间复杂度 $O(32n^2)​$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7,inv2=(P+1)&gt;&gt;1;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=1e3+10;int n,a[MAXN][MAXN];int d[MAXN][MAXN];int ansand=0,ansor=0;int stk[MAXN],tp;int calc(int k,int v)//submatrix all of v&#123;#define val ((a[i][j]&gt;&gt;k)&amp;1) for(int i=1;i&lt;=n;++i) &#123; for(int j=1;j&lt;=n;++j) &#123; if(val!=v) d[i][j]=0; else d[i][j]=d[i-1][j]+1; &#125; &#125; int s,res=0; for(int i=1;i&lt;=n;++i) &#123; tp=0; s=0; for(int j=1;j&lt;=n;++j) &#123; s=add(s,d[i][j]); while(tp &amp;&amp; d[i][stk[tp]]&gt;=d[i][j]) &#123; int del=mul(add(stk[tp],P-stk[tp-1]),add(d[i][stk[tp]],P-d[i][j])); s=add(s,P-del); --tp; &#125; res=add(res,s); stk[++tp]=j; &#125; &#125; return res;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=n;++j) a[i][j]=read(); int tot=mul(n,n+1); tot=mul(tot,inv2); tot=mul(tot,tot); for(int k=0;k&lt;31;++k) &#123; int tmpand=calc(k,1); tmpand=mul(tmpand,1&lt;&lt;k); ansand=add(ansand,tmpand); int tmpor=add(tot,P-calc(k,0)); tmpor=mul(tmpor,1&lt;&lt;k); ansor=add(ansor,tmpor); &#125; cout&lt;&lt;ansand&lt;&lt;' '&lt;&lt;ansor&lt;&lt;endl; return 0;&#125; 宝牌一大堆 怎么又是 $mahjong$ …是不是可以专门出一类 麻将 $dp$ 啊. 七对子和国士无双可以单独做.七对子可以 $dp$ , $g(i,j)$ 表示考虑前 $i$ 种牌,组成 $j$ 个对子的最大得分.国士无双可以大力枚举一下哪张幺九牌有两张. 对于普通的 $3\times 4+2$ 的胡牌,把牌搞上标号,使得顺子的标号是连续的.记 $f[i][j][k][l][m][n]$ 表示考虑了前 $i$ 种牌,形成了 $j$ 个面子, $k$ 个雀头, $i-2,i-1,i$ 已经选了 $l,m,n$ 个时,前 $i-3$ 种牌能获得的最大得分. 转移时枚举一下 $i$ 这张牌不选/成刻子/成杠子/与 $i-2,i-1$ 成顺子的几种情况即可,注意判断合法性. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;ll g[35][35];ll f[35][5][2][5][5][5],ans;int a[35],c[5][5],d[35];bool shunend[]=&#123;0,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0&#125;;void init()&#123; memset(f,0,sizeof f); memset(g,0,sizeof g); ans=0; for(int i=1;i&lt;=34;++i) d[i]=0,a[i]=4;&#125;// 1m 2m ... 9m 1p 2p ... 9p 1s 2s ... 9s E S W N Z B Fint id(char s[])&#123; if(s[0]=='E') return 28; if(s[0]=='S') return 29; if(s[0]=='W') return 30; if(s[0]=='N') return 31; if(s[0]=='Z') return 32; if(s[0]=='B') return 33; if(s[0]=='F') return 34; if(s[1]=='m') return s[0]-'0'; if(s[1]=='p') return s[0]-'0'+9; if(s[1]=='s') return s[0]-'0'+18; return 0;&#125;void upd(ll &amp;x,ll y)&#123; if(y&gt;x) x=y;&#125;ll dora(int idx,int cnt)&#123; if(d[idx]) return 1LL&lt;&lt;cnt; return 1LL;&#125;ll MaHu()&#123; ll res=0; f[1][0][0][0][0][0]=1; for(int i=1;i&lt;=34;++i) for(int j=0;j&lt;=4;++j) for(int k=0;k&lt;=1;++k) for(int l=0;l&lt;=4;++l) for(int m=0;m&lt;=4;++m) for(int n=0;n&lt;=4;++n) &#123; ll cur=f[i][j][k][l][m][n]; if(!cur) continue; if(i&lt;34) upd(f[i+1][j][k][m][n][0],cur*(i&gt;2?c[a[i-2]][l]*dora(i-2,l):1));//give up if(j&lt;4 &amp;&amp; a[i]-n&gt;=3) upd(f[i][j+1][k][l][m][n+3],cur);//kezi if(j&lt;4 &amp;&amp; a[i]-n&gt;=4) upd(f[i][j+1][k][l][m][n+4],cur);//gangzi if(j&lt;4 &amp;&amp; shunend[i] &amp;&amp; a[i]-n &amp;&amp; a[i-1]-m &amp;&amp; a[i-2]-l) upd(f[i][j+1][k][l+1][m+1][n+1],cur);//shunzi if(!k &amp;&amp; a[i]-n&gt;=2) upd(f[i][j][k+1][l][m][n+2],cur); if(i==34 &amp;&amp; j==4 &amp;&amp; k==1) &#123; ll s=cur*c[a[i]][n]*c[a[i-1]][m]*c[a[i-2]][l]; s*=dora(i,n)*dora(i-1,m)*dora(i-2,l); upd(res,s); &#125; &#125; return res;&#125;ll QiDuizi()&#123; g[0][0]=1; for(int i=1;i&lt;=34;++i) for(int j=0;j&lt;=7;++j) &#123; if(!g[i-1][j]) continue; upd(g[i][j],g[i-1][j]); if(j&lt;7) upd(g[i][j+1],g[i-1][j]*c[a[i]][2]*dora(i,2)); &#125; return g[34][7]*7;&#125;int yao[13]=&#123;1,9,10,18,19,27,28,29,30,31,32,33,34&#125;;ll GSWS()&#123; ll res=0; for(int i=0;i&lt;13;++i) &#123; if(a[yao[i]]==0) return 0; if(a[yao[i]]==1) continue; ll tmp=c[a[yao[i]]][2]*dora(yao[i],2); for(int j=0;j&lt;13;++j) &#123; if(i==j) continue; tmp*=c[a[yao[j]]][1]*dora(yao[j],1); &#125; upd(res,tmp); &#125; return res*13;&#125;int main()&#123; for(int i=0;i&lt;=4;++i) c[i][0]=1; for(int i=1;i&lt;=4;++i) for(int j=1;j&lt;=4;++j) c[i][j]=c[i-1][j]+c[i-1][j-1]; int T=read(); while(T--) &#123; init(); char s[5]; while(1) &#123; scanf("%s",s); int x=id(s); if(x) --a[x]; else break; &#125; while(1) &#123; scanf("%s",s); int x=id(s); if(x) d[x]=1; else break; &#125; upd(ans,MaHu()); upd(ans,QiDuizi()); upd(ans,GSWS()); printf("%lld\n",ans); &#125; return 0;&#125; 特技飞行 无论怎样决策,所有交点的位置是确定的.所以 $c$ 的贡献可以和 $a,b$ 分开算. 所有合法决策最值,一定是一个使 对向交换 的次数最多,另一个使 对向交换 的次数最少. 计算 $a,b$ 的贡献时,交点的具体位置不重要,先只考虑 $y$ 的相对大小. 对于最多的情况,我们可以在 每个 交点处都选择 对向交换 .因为每个交点其实就是二元组 $(y_0,y_1)$ 的一个逆序对产生的.那么将每个逆序对的 $y_1$ 都交换,最后就不会有逆序对(交换排序),即满足要求. 对于最少的情况,可以发现对于 $y_1$ 中的每个置换,内部需要交换大小 $-1$ 次,各个置换独立,那么总交换次数为 $n-​$ 置换数目.找到的证明. 再来算 $c$ 的贡献.可以把所有点按 $y_1$ 从大到小依次加入 $set$ 中,以 $y_0$ 为关键字,这样能产生交点的点在 $set$ 中是一个前缀部分,合法就计算交点,不合法时就跳出,加入下一个点. 曼哈顿距离不太好搞,经典套路,转化成切比雪夫距离,就变成了问每个交点是否被一些矩形中的至少一个覆盖. 把点加入 $kdtree$ 中,每个矩形给其中的点打一打标记就好了.也可以离线后扫描线+树状数组. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const double eps=1e-10;int fcmp(double x)&#123; if(fabs(x)&lt;=eps) return 0; return x&gt;0?1:-1;&#125;const int MAXN=5e5+10;typedef pair&lt;int,int&gt; pii;#define mp make_pairint n,Y0[MAXN],Y1[MAXN],st,ed,is[MAXN],tot,id[MAXN],to[MAXN],k,vis[MAXN];ll A,B,C;double mn[MAXN][2],mx[MAXN][2];int flag[MAXN],D,ch[MAXN][2],marked[MAXN];// flag表示这个点以及其管辖的点都被标记了 marked表示这个点被标记了 set&lt;pii&gt; s;set&lt;pii&gt;::iterator it;struct point&#123; double p[2]; point()&#123;p[0]=p[1]=0;&#125; point(double x,double y)&#123;p[0]=x,p[1]=y;&#125; bool operator &lt; (const point &amp;rhs) const &#123; return p[D]==rhs.p[D]?p[D^1]&lt;rhs.p[D^1]:p[D]&lt;rhs.p[D]; &#125;&#125;a[MAXN];bool cmp(int a,int b)&#123; return Y1[a]&lt;Y1[b];&#125;void pushup(int o,int x)&#123; for(int i=0;i&lt;2;++i) &#123; mn[o][i]=min(mn[o][i],mn[x][i]); mx[o][i]=max(mx[o][i],mx[x][i]); &#125;&#125;int BuildTree(int l,int r,int d)&#123; if(l&gt;r) return 0; int mid=(l+r)&gt;&gt;1; D=d; nth_element(a+l,a+mid,a+r+1); int o=mid; for(int i=0;i&lt;2;++i) mn[o][i]=mx[o][i]=a[o].p[i]; if(l&lt;=mid-1) &#123; ch[o][0]=BuildTree(l,mid-1,d^1); pushup(o,ch[o][0]); &#125; if(mid+1&lt;=r) &#123; ch[o][1]=BuildTree(mid+1,r,d^1); pushup(o,ch[o][1]); &#125; return o;&#125;void update(int x,int y,int r,int o)&#123; if(!o || flag[o] || x+r&lt;mn[o][0] || x-r&gt;mx[o][0] || y+r&lt;mn[o][1] || y-r&gt;mx[o][1]) return; double mxd=0; mxd=max(mxd,fabs(x-mn[o][0])); mxd=max(mxd,fabs(x-mx[o][0])); mxd=max(mxd,fabs(y-mn[o][1])); mxd=max(mxd,fabs(y-mx[o][1])); if(fcmp(mxd-r)&lt;=0) &#123; flag[o]=1; return; &#125; double curd=max(fabs(x-a[o].p[0]),fabs(y-a[o].p[1])); if(!marked[o] &amp;&amp; fcmp(curd-r)&lt;=0) marked[o]=1; update(x,y,r,ch[o][0]); update(x,y,r,ch[o][1]);&#125;int dfs(int o)&#123; if(flag[o]) &#123; marked[o]=1; marked[ch[o][0]]=marked[ch[o][1]]=1; flag[ch[o][0]]=flag[ch[o][1]]=1; &#125; int res=marked[o]; if(ch[o][0]) res+=dfs(ch[o][0]); if(ch[o][1]) res+=dfs(ch[o][1]); return res;&#125;int main()&#123; n=read(),A=read(),B=read(),C=read(); st=read(),ed=read(); for(int i=1;i&lt;=n;++i) Y0[i]=read(); for(int i=1;i&lt;=n;++i) Y1[i]=read(); for(int i=n;i&gt;=1;--i) &#123; for(it=s.begin();it!=s.end() &amp;&amp; it-&gt;first &lt; Y1[i];++it) &#123; int j=it-&gt;second; double t=(double)(Y0[j]-Y0[i])/(Y1[i]-Y1[j]); double ox=(t*ed+st)/(t+1); double oy=(t*Y1[j]+Y0[j])/(t+1); double x=ox+oy,y=ox-oy; a[++tot]=point(x,y); &#125; s.insert(mp(Y1[i],i)); &#125; int rt=BuildTree(1,tot,0); k=read(); for(int i=1;i&lt;=k;++i) &#123; int ox=read(),oy=read(),r=read(); int x=ox+oy,y=ox-oy; update(x,y,r,rt); &#125; ll ans=dfs(rt)*C; ll ans1=ans+tot*A; for(int i=1;i&lt;=n;++i) id[i]=i; sort(id+1,id+1+n,cmp); ll rep=n; for(int i=1;i&lt;=n;++i) if(!vis[i]) &#123; --rep; for(int j=i;!vis[j];j=id[j]) vis[j]=1; &#125; ll ans2=ans1+(tot-rep)*(B-A); if(ans1&gt;ans2) swap(ans1,ans2); printf("%lld %lld\n",ans1,ans2); return 0;&#125; 逼死强迫症 求必须用两块 $1\times 1$ 的方案,转化一下,设 $f_i$ 表示任意用砖,铺满前 $i$ 列的方案数, $g_i$ 表示只用 $1\times 2$ 的砖铺满前 $i$ 列的方案数.那么最后的答案就是 $f_n-g_n$ . $g$ 的转移很简单, $g_i=g_{i-1}+g_{i-2},g_0=1,g_1=1​$ . $f$ 的转移呢?多出来一列时,若不在这一列用 $1\times 1$ 的砖,那么方案数为 $f_{i-1}+f_{i-2}$ . 若在这一列用 $1\times 1$ 的砖,那么为了填满前 $i$ 列,另外一块 $1\times 1$ 也必须用,并且只能放在第 $1\sim i-2​$ 列. 若这两块砖中间还有偶数列,那么它们只能在同一行,否则,只能在不同的一行.看下面的图片感性理解: 那么左边那块 $1\times 1$ 的左边只能用 $1\times 2$ 填满,方案数用 $g$ 计算,右边只能有 $1$ 种填法. 枚举右边那块 $1\times 1$放在第 $1,2$ 行,左边那块 $1\times 1$ 放在第 $j$ 列. 整理一下,就有 $f_i=f_{i-1}+f_{i-2}+2\times \sum_{j=1}^{i-2} g_{j-1}$ . 边界有 $f_1=1,f_2=2$ .把 $g$ 的前缀和, $g,f$ 一起用矩阵快速幂优化转移即可. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;struct matrix&#123; int v[6][6]; matrix()&#123;memset(v,0,sizeof v);&#125; matrix operator * (const matrix &amp;rhs) const &#123; matrix res; for(int i=0;i&lt;6;++i) for(int j=0;j&lt;6;++j) for(int k=0;k&lt;6;++k) res.v[i][j]=add(res.v[i][j],mul(v[i][k],rhs.v[k][j])); return res; &#125;&#125;;matrix fpow(matrix a,int b)&#123; matrix res; for(int i=0;i&lt;6;++i) res.v[i][i]=1; while(b) &#123; if(b&amp;1) res=res*a; a=a*a; b&gt;&gt;=1; &#125; return res;&#125;matrix trans,st;void setv(int x,int y)&#123; trans.v[x][y]+=1;&#125;void init()&#123; st.v[0][0]=5; st.v[1][0]=2; st.v[2][0]=3; st.v[3][0]=2; st.v[4][0]=1; st.v[5][0]=1;&#125;int main()&#123; setv(0,0),setv(0,1),setv(0,4),setv(0,5),setv(0,4),setv(0,5); setv(1,0); setv(2,2),setv(2,3); setv(3,2); setv(4,3); setv(5,4),setv(5,5); int T=read(); while(T--) &#123; int n=read(); if(n&lt;=3) &#123; if(n==1) cout&lt;&lt;0&lt;&lt;endl; else if(n==2) cout&lt;&lt;0&lt;&lt;endl; else if(n==3) cout&lt;&lt;2&lt;&lt;endl; continue; &#125; init(); st=fpow(trans,n-3)*st; printf("%d\n",add(st.v[0][0],P-st.v[2][0])); &#125; return 0;&#125; 旅行者 考虑将所有 感兴趣的城市 划分到两个集合 $A,B$ 中,从 $S$ 向 $A$ 中每个点连 $0$ 边,从 $B$ 中每个点向 $T$ 中连 $0$ 边. 这样从 $S$ 到 $T$ 的最短路长度就是 $A$ 与 $B$ 中两两最短路的最小值. 怎样划分才能使每对 感兴趣的城市 都被算入贡献中呢? 考虑划分 $logn$ 轮,每一轮将二进制第 $i$ 位上为 $0$ 的点划入 $A$ 中,否则划入 $B$ 中.这样两个不同的城市在至少一轮中被划分进了不同的集合,一定能产生贡献. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const ll inf=1e18;inline ll read()&#123; ll out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10,MAXM=7e5+10;int ecnt,head[MAXN],to[MAXM],nx[MAXM],val[MAXM];void addedge(int u,int v,int w)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; val[ecnt]=w; head[u]=ecnt;&#125;void init()&#123; ecnt=0; memset(head,0,sizeof head);&#125;int n,m,k;int city[MAXN],orghead[MAXN];ll dis[MAXN];bool vis[MAXN];typedef pair&lt;ll,int&gt; pli;#define mp make_pairll dij(int S,int T)&#123; for(int i=1;i&lt;=n+2;++i) &#123; dis[i]=inf; vis[i]=false; &#125; dis[S]=0; priority_queue&lt;pli&gt; q; q.push(mp(0,S)); while(!q.empty()) &#123; int u=(q.top()).second; q.pop(); if(vis[u]) continue; vis[u]=true; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(dis[u]+val[i]&lt;dis[v]) &#123; dis[v]=dis[u]+val[i]; q.push(mp(-dis[v],v)); &#125; &#125; &#125; return dis[T];&#125;int main()&#123; int Cases=read(); while(Cases--) &#123; init(); n=read(),m=read(),k=read(); for(int i=1;i&lt;=m;++i) &#123; int u=read(),v=read(),w=read(); addedge(u,v,w); &#125; for(int i=1;i&lt;=k;++i) city[i]=read(); int rounds=1+(int)log2(n); int S=n+1,T=n+2; ll ans=inf; for(int p=0;p&lt;=rounds;++p) &#123; for(int i=1;i&lt;=k;++i) if((city[i]&gt;&gt;p)&amp;1) orghead[i]=head[city[i]]; for(int i=1;i&lt;=k;++i) if((city[i]&gt;&gt;p)&amp;1) addedge(city[i],T,0); else addedge(S,city[i],0); ans=min(ans,dij(S,T)); head[S]=0; for(int i=1;i&lt;=k;++i) if((city[i]&gt;&gt;p)&amp;1) head[city[i]]=orghead[i]; ecnt-=k; &#125; printf("%lld\n",ans); &#125; return 0;&#125; 旧词 先来考虑 $k=1$ 的部分,做法是将 $lca$ 处 $dep$ 的贡献摊到这个点到根的路径上. 具体来说将询问离线下来,按 $x$ 排序后就可以从小到大一个个加入点.每加入一个点的时候就把这个点到根的路径上点的权值都 $+1$ ,询问时就查询 $y$ 到根的路径上点的权值和. 考虑拓展到 $k&gt;1$ 的部分,沿用上面的思路,发现每次给路径上每个点权值 $+\ (dep_i^k-(dep_i-1)^k)$ 就好了. 这样就可以使 $lca$ 的权值恰好被摊到路径上,查询时仍然查询路径权值和就好了. 树剖+线段树维护一下,时间复杂度 $O(nlog^2n)$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353;inline int add(int a,int b)&#123; return (a + b &gt;= P)? (a + b - P) : (a + b);&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;const int MAXN=5e4+10;int n,k,Q;int ecnt=0,head[MAXN],to[MAXN&lt;&lt;1],nx[MAXN&lt;&lt;1];inline void addedge(int u,int v)&#123; ++ecnt; to[ecnt]=v; nx[ecnt]=head[u]; head[u]=ecnt;&#125;int siz[MAXN],mxson[MAXN],top[MAXN],fa[MAXN],dep[MAXN],dfn[MAXN],rnk[MAXN],idx=0;void dfs1(int u,int Fa)&#123; dep[u]=dep[Fa]+1; siz[u]=1; fa[u]=Fa; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==Fa) continue; dfs1(v,u); siz[u]+=siz[v]; if(siz[v]&gt;siz[mxson[u]]) mxson[u]=v; &#125;&#125;void dfs2(int u,int tp)&#123; top[u]=tp; dfn[u]=++idx; rnk[idx]=u; if(mxson[u]) dfs2(mxson[u],tp); for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; if(v==fa[u] || v==mxson[u]) continue; dfs2(v,v); &#125;&#125;struct SegTree&#123; struct node &#123; int l,r; int sum,delta,tag; &#125;Tree[MAXN&lt;&lt;2];#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1] void pushup(int o) &#123; root.sum=add(lson.sum,rson.sum); &#125; void modifiy(int o,int c) &#123; root.tag=add(root.tag,c); root.sum=add(root.sum,mul(c,root.delta)); &#125; void pushdown(int o) &#123; if(root.tag) &#123; modifiy(o&lt;&lt;1,root.tag); modifiy(o&lt;&lt;1|1,root.tag); root.tag=0; &#125; &#125; void BuildTree(int o,int l,int r) &#123; root.l=l,root.r=r; root.tag=0; root.sum=0; if(l==r) &#123; root.delta=add(fpow(dep[rnk[l]],k),P-fpow(dep[rnk[l]]-1,k)); return; &#125; int mid=(l+r)&gt;&gt;1; BuildTree(o&lt;&lt;1,l,mid); BuildTree(o&lt;&lt;1|1,mid+1,r); root.delta=add(lson.delta,rson.delta); &#125; void update(int o,int L,int R,int c) &#123; int l=root.l,r=root.r; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; modifiy(o,c); return; &#125; if(l&gt;R || L&gt;r) return; int mid=(l+r)&gt;&gt;1; pushdown(o); if(L&lt;=mid) update(o&lt;&lt;1,L,R,c); if(R&gt;mid) update(o&lt;&lt;1|1,L,R,c); pushup(o); &#125; int query(int o,int L,int R) &#123; int l=root.l,r=root.r; if(L&lt;=l &amp;&amp; r&lt;=R) return root.sum; if(l&gt;R || L&gt;r) return 0; int mid=(l+r)&gt;&gt;1; pushdown(o); int res=0; if(L&lt;=mid) res=add(res,query(o&lt;&lt;1,L,R)); if(R&gt;mid) res=add(res,query(o&lt;&lt;1|1,L,R)); return res; &#125;&#125;T;int ans[MAXN];struct query&#123; int x,y,id; bool operator &lt; (const query &amp;rhs) const &#123; return x&lt;rhs.x; &#125;&#125;q[MAXN];void path_upd(int x)&#123; while(top[x]!=1) &#123; T.update(1,dfn[top[x]],dfn[x],1); x=fa[top[x]]; &#125; T.update(1,dfn[top[x]],dfn[x],1);&#125;int path_query(int x)&#123; int res=0; while(top[x]!=1) &#123; res=add(res,T.query(1,dfn[top[x]],dfn[x])); x=fa[top[x]]; &#125; res=add(res,T.query(1,dfn[top[x]],dfn[x])); return res;&#125;int main()&#123; n=read(),Q=read(),k=read(); for(int i=2;i&lt;=n;++i) &#123; int f=read(); addedge(f,i); &#125; for(int i=1;i&lt;=Q;++i) &#123; q[i].x=read(); q[i].y=read(); q[i].id=i; &#125; sort(q+1,q+1+Q); dfs1(1,0); dfs2(1,1); T.BuildTree(1,1,n); int lstx=0; for(int i=1;i&lt;=Q;++i) &#123; int x=q[i].x,y=q[i].y; for(int j=lstx+1;j&lt;=x;++j) path_upd(j); ans[q[i].id]=path_query(y); lstx=x; &#125; for(int i=1;i&lt;=Q;++i) printf("%d\n",ans[i]); return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>线段树</tag>
        <tag>树链剖分</tag>
        <tag>矩阵优化</tag>
        <tag>最短路</tag>
        <tag>差分</tag>
        <tag>单调栈</tag>
        <tag>位运算</tag>
        <tag>kdtree</tag>
        <tag>棋牌</tag>
        <tag>逆序对</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tenka1 Programmer Contest 2019]]></title>
    <url>%2F2019%2F04%2F21%2FTenka1-Programmer-Contest-2019%2F</url>
    <content type="text"><![CDATA[感觉这场打得好烂… C Stones 比较弱智.最后一定是连续一段黑之后连续一段白.枚举一下这个分界位置就好了. 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=2e5+10;char s[MAXN];int sum1[MAXN],sum2[MAXN];int main()&#123; int n=read(); scanf("%s",s+1); int ans; for(int i=1;i&lt;=n;++i) &#123; if(s[i]=='.') ++sum1[i];//white else ++sum2[i]; sum1[i]+=sum1[i-1]; sum2[i]+=sum2[i-1]; &#125; ans=sum2[n]; for(int i=1;i&lt;=n;++i) ans=min(ans,i-sum1[i]+n-i-(sum2[n]-sum2[i-1])); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; D Three Colors 两个颜色一起 $dp$ 状态数目可能很大,考虑能不能每次只 $dp$ 一种颜色. 用所有染色方案 $3^n$ 减去不合法的方案数就好了. 记所有数的和为 $sum$ ,那么不合法的方案有 $R\geq sum/2,G\geq sum/2,B\geq sum/2$ 三种. 记 $f(i,j)$ 表示前 $i$ 个数,红色数之和为 $j$ 的方案数.另外两种颜色计算方法一样,直接 $\times 3$ . 注意若 $sum$ 为偶数,这里有两个颜色都恰好等于 $sum/2$ 的方案被减了两次,要加回来,这部分是 $g(n,sum/2)\cdot {3\choose 2}$ . $f$ 转移时可以填三种颜色,而 $g$ 只能填两种. 时间复杂度为 $O(n\cdot sum)$ ,实际肯定跑不满.空间可以滚动优化一下(其实 $f,g$ 用一个数组也就 $100\ MB$). 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;void upd(int &amp;x,int y)&#123; x+=y; x=(x%P+P)%P;&#125;const int MAXN=329;int a[MAXN],sum[MAXN],n;int ans=0;int f[2][MAXN*MAXN],g[2][MAXN*MAXN];int main()&#123; n=read(); for(int i=1; i&lt;=n; ++i) sum[i]=sum[i-1]+(a[i]=read()); ans=fpow(3,n); int cur=0; g[cur][0]=f[cur][0]=1; for(int i=1;i&lt;=n;++i) &#123; for(int j=0;j&lt;=sum[i];++j) f[cur^1][j]=g[cur^1][j]=0; for(int j=0;j&lt;=sum[i-1];++j) if(f[cur][j]) &#123; upd(f[cur^1][j+a[i]],f[cur][j]); upd(f[cur^1][j],mul(2,f[cur][j])); upd(g[cur^1][j+a[i]],g[cur][j]); upd(g[cur^1][j],g[cur][j]); &#125; cur^=1; &#125; for(int i=(sum[n]+1)&gt;&gt;1;i&lt;=sum[n];++i) upd(ans,-mul(3,f[cur][i])); if(!(sum[n]&amp;1)) upd(ans,mul(3,g[cur][sum[n]&gt;&gt;1])); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; E Polynomial Divisors 比赛时一直 $WA$ 后面几个点.心态有些崩.后来改了些莫名其妙的地方就过了??? 结论:题述性质成立当且仅当这个多项式在模 $p$ 意义下能被 $x^p-x$ 整除.于是只需要验证 $[2,n]$ 以内的质数,再加上所有 $a_i$ 的 $gcd$ 的质因数就好了. 证明:充分性显然.必要性:在模 $p$ 意义下, $0,1,\dots p-1$ 都是 $f$ 的根. 那么这个多项式一定有因式 $x(x-1)(x-2)\dots (x-(p-1))$. 这个因式的根与 $x^p-x$ 的根完全相同,而它们最高项系数也相同,在模 $p$ 意义下这两个式子是等价的.于是多项式 $f$ 就一定有因式 $x^p-x$ . 这部分的证明好像在 $math$ 那个题里面有? F Banned X 咕了.]]></content>
      <tags>
        <tag>atcoder</tag>
        <tag>dp计数</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[烷烃计数]]></title>
    <url>%2F2019%2F04%2F20%2F%E7%83%B7%E7%83%83%E8%AE%A1%E6%95%B0%2F</url>
    <content type="text"><![CDATA[大概 $OIer$ 上化学课都会想到这个吧? 今天化学课教烷烃的同分异构体,我:这烷烃不就是颗树嘛?同分异构体数目不就是无标号树的个数嘛? $prufer$ 序列随便搞一下就能算吧??? 然后发现一个碳旁边最多连四个碳,度数还要 $\leq 4$. 然后我就问旁边数竞小哥:你知道这个东西的通项嘛?他:我来找下规律.我:这东西(指数树)的规律大概率找不出来吧…他不信邪,结果找了一节课,未果,寻病终… 然后在 $dalao$ 们的博客中学习了一下.记 $f(i,j)$ 表示 $i$ 个点的有根树,根节点的度数为 $j$ 的方案数目. 在枚举儿子节点时,为了避免算重,按照子树大小从大到小来枚举.先枚举儿子中最大的子树大小 $size$ ,再枚举有 $k$ 个这样大小的儿子.记 $s=\sum_{i=0}^{j-1} f(size,i)$ ,即每个这样的子树都有 $s$ 种方案可选.那么给 $k$ 个子树安排一下方案,就相当于把 $k$ 个球放入 $s$ 个无差别盒子中,方案数为 ${s+k-1\choose k}$ . 那么转移方程就有 $f(i,j)=\sum f(i-k\times size,j-k)\cdot {s+k-1\choose k}$ . 如果是数烷基,就是无根树,直接就像上面这样算, $ans=\sum_{k=0}^3 f(n,k).​$ 如果数的是烷烃,就是无根树,所以钦定树的重心作为根节点.那么在转移时就要注意 $2\cdot size&lt;i$ ,保证根为重心. 另外,在最后计算答案时,注意到当 $n$ 为偶数时,它有两个重心,那么两边的子树可以交换,多乘上 $p_k={\sum_{k’=0}^{k-1}f(\frac n 2,k’)+1\choose 2}$. 最后就有 $ans=\sum_{k=0}^3 f(n,k)+[n\equiv 0\mod2]\cdot p_k$ .]]></content>
      <tags>
        <tag>dp计数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1140]]></title>
    <url>%2F2019%2F04%2F18%2FCF1140%2F</url>
    <content type="text"><![CDATA[$Div.2$ CF1140C Playlist 将元素按 $b$ 从大到小排序,然后从后往前依次加入,每加入一个元素时它的 $b$ 都是当前最小的. 此时需要钦定选择这个元素作为最小的 $b$ ,并在已有元素中选出 $k-1$ 个 $t$ 值最大的. 这个东西用个堆维护一下当前前 $k-1$ 大的 $t$ 值就好了. CF1140D Minimum Triangulation 肯定会有一个很直观的想法:全部都以 $1$ 为一个顶点,然后 $(1,2,3),(1,3,4) \dots (1,n-1,n)$ 这样来剖. 这样做的确是正确的,即权值一定是最小的.为什么呢? 考虑若有 $x&lt;y$ ,那么把方案 $(1,n,x),(n,x,y)$ 换成 $(1,n,y),(1,x,y)$ ,总权值会减小. 于是可以直接将 $x$ 换到 $n-1$ ,然后将 $(1,n-1,n)$ 这个三角形直接割掉,对剩下的 $n-1$ 边形继续做上述操作. 这样做的话,所有的方案就一定是 $(1,2,3),(1,3,4) \dots (1,n-1,n)$ 这样的形式了. 另一个做法是 $O(n^3)$ 的区间 $dp$ ? CF1140E Palindrome-less Arrays 任意位置都不能出现长度 $\geq 3$ 的奇回文串,其实也就等价于不出现长度为 $3$ 的回文串. 也就是说总有 $a_i\not=a_{i+2}$ .这样显然可以奇偶分开算,将两个序列各自的合法方案数目乘起来. 把奇(偶)数位置拿出来,就是要求相邻两个位置都不同的方案数. 把连续的一段 $-1$ 看成一块,考虑每一块 $(a,-1,-1,\dots,-1,b)$ 怎么算方案数.首尾可能会出现没有 $a,b$ 的情况,枚举第一个/最后一个元素,算中间的就可以了(其实这部分细节挺多的?).所以下面都假定 $a,b$ 存在. 每块的方案数只与 $-1$ 的个数 $x$ 以及 $a,b$ 是否相等有关.记 $f(x)$ 表示 $a\not =b$ 时的方案数, $g(x)$ 表示相等时. 若 $x$ 为奇,枚举最中间的元素,就有:$g(x)=g(x/2)^2+(k-1)f(x/2)^2,f(x)=2f(x/2)g(x/2) + (k-2)f(x/2)^2$ . 若 $x$ 为偶,枚举第一个元素即可将 $x$ 变为奇.$g(x)=(k-1)f(x-1),f(x)=g(x-1)+(k-2)f(x-1)$ . 边界显然有 $f(0)=1,g(0)=0$ . 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;const int MAXN=2e5+10;int k;int f[MAXN],g[MAXN];int F(int);int G(int);int calc(int l,int r,int *a,int n)&#123; if(r&gt;=n) &#123; int len=r-l-1,res=1; if(l&lt;0) --len,res=k; if(len==0) return res; int fx=F(len-1),gx=G(len-1); return mul(res,add(gx,mul(k-1,fx))); &#125; if(l&lt;0) &#123; if(r-l==1) return 1; int fx=F(r-l-2),gx=G(r-l-2); return add(gx,mul(k-1,fx)); &#125; return a[l]==a[r]?G(r-l-1):F(r-l-1);&#125;int solve(int *a,int n)&#123; int res=1,lst=-1; for(int i=0;i&lt;n;++i) &#123; if(a[i]==-1) continue; res=mul(res,calc(lst,i,a,n)); lst=i; &#125; res=mul(res,calc(lst,n,a,n)); return res;&#125;int n,a[MAXN],b[MAXN],siza,sizb;int main()&#123; n=read(); k=read(); for(int i=1;i&lt;=n;++i) &#123; f[i]=g[i]=-1; int x=read(); if(i&amp;1) a[siza++]=x; else b[sizb++]=x; &#125; int ans=1; ans=mul(ans,solve(a,siza)); if(ans) ans=mul(ans,solve(b,sizb)); cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125;int F(int x)&#123; if(!x) return 1; if(f[x]!=-1) return f[x]; int &amp;res=f[x]; if(x&amp;1) &#123; res=mul(2,mul(F(x&gt;&gt;1),G(x&gt;&gt;1))); res=add(res,mul(k-2,mul(F(x&gt;&gt;1),F(x&gt;&gt;1)))); return res; &#125; else return res=add(G(x-1),mul(k-2,F(x-1))); &#125;int G(int x)&#123; if(!x) return 0; if(g[x]!=-1) return g[x]; int &amp;res=g[x]; if(x&amp;1) &#123; res=mul(G(x&gt;&gt;1),G(x&gt;&gt;1)); res=add(res,mul(k-1,mul(F(x&gt;&gt;1),F(x&gt;&gt;1)))); return res; &#125; else return res=mul(k-1,F(x-1));&#125; CF1140F Extending Set of Points 可以发现它的 $Extend$ 操作就是将每三个点加一个点补成一个矩形,直到每个可补的位置都有点为止.这里的三个点必须要有两个点的连线是平行于坐标轴的. 给每个 $x,y$ 坐标都建一个节点,加入 $(x,y)$ 就将对应的两个节点连起来,容易发现每个连通分量的贡献为不同的 $x$ 坐标个数乘上不同的 $y$ 坐标个数,此时的答案就是每个连通分量的贡献之和. 这个东西用个并查集维护,插入点很简单,删除点似乎不太好做?此时可以想到线段树分治,用线段树给每个点影响的时间区间 $(l,r)$ 打上对应的标记就好了. 打好标记,算答案的时候,递归到一个节点时,就让上面的所有标记生效,退出时再撤销就好了. 注意这里有撤销操作,需要避免路径压缩的使用.用按秩合并优化就可以了. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;typedef pair&lt;int,int&gt; pii;const int MAXN=6e5+10;int siz[MAXN],sizx[MAXN],sizy[MAXN];#define tot(x) 1LL*sizx[x]*sizy[x]int fa[MAXN];int Find(int x)&#123; return x==fa[x]?x:Find(fa[x]);&#125;pii stk[MAXN];int tp=0;ll ans=0;void Merge(int x,int y)&#123; x=Find(x),y=Find(y); if(x==y) return; if(siz[x]&lt;siz[y]) swap(x,y); ans-=tot(x); ans-=tot(y); fa[y]=x; siz[x]+=siz[y],sizx[x]+=sizx[y],sizy[x]+=sizy[y]; ans+=tot(x); stk[++tp]=make_pair(x,y);&#125;void Split(int x,int y)&#123; ans-=tot(x); fa[y]=y; siz[x]-=siz[y],sizx[x]-=sizx[y],sizy[x]-=sizy[y]; ans+=tot(x); ans+=tot(y);&#125;int n;map&lt;pii,int&gt; mp;vector&lt;pii&gt; Tree[MAXN&lt;&lt;1];set&lt;pii&gt; s;#define root Tree[o]#define lson Tree[o&lt;&lt;1]#define rson Tree[o&lt;&lt;1|1]void modifiy(int o,int l,int r,int L,int R,pii c)&#123; if(l&gt;R || L&gt;r) return; if(L&lt;=l &amp;&amp; r&lt;=R) &#123; root.push_back(c); return; &#125; int mid=(l+r)&gt;&gt;1; if(L&lt;=mid) modifiy(o&lt;&lt;1,l,mid,L,R,c); if(R&gt;mid) modifiy(o&lt;&lt;1|1,mid+1,r,L,R,c);&#125;void solve(int o,int l,int r)&#123; int curt=tp; int sz=root.size(); for(int i=0;i&lt;sz;++i) Merge(root[i].first,root[i].second); if(l==r) printf("%I64d ",ans); else &#123; int mid=(l+r)&gt;&gt;1; solve(o&lt;&lt;1,l,mid); solve(o&lt;&lt;1|1,mid+1,r); &#125; while(tp&gt;curt) &#123; Split(stk[tp].first,stk[tp].second); --tp; &#125;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) &#123; int x=read(),y=read()+300001; fa[x]=x,siz[x]=1,sizx[x]=1; fa[y]=y,siz[y]=1,sizy[y]=1; pii k=make_pair(x,y); if(s.find(k)==s.end()) &#123; mp[k]=i; s.insert(k); &#125; else &#123; modifiy(1,1,n,mp[k],i-1,k); mp[k]=0; s.erase(k); &#125; &#125; set&lt;pii&gt;::iterator it; for(it=s.begin();it!=s.end();++it) &#123; pii k=*it; modifiy(1,1,n,mp[k],n,k); &#125; solve(1,1,n); return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>贪心</tag>
        <tag>codeforces</tag>
        <tag>并查集</tag>
        <tag>线段树分治</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190417]]></title>
    <url>%2F2019%2F04%2F18%2Ftest20190417%2F</url>
    <content type="text"><![CDATA[测试. $heap$ 有多少个节点数目为 $n​$ ,权值为 $1\sim n​$ 且互不相同的二叉堆?答案对 $10^9+7​$ 取模. $n\leq 10^9​$ . $O(n)$ 的做法十分简单, 先搞出每个节点的 $siz$ ,记 $f(i)$ 表示子树 $i$ 内用 $siz_i$ 个权值能形成的合法二叉堆数目. 转移显然有 $f(i)={siz_i\choose siz_{2i}}\cdot f(2i)\cdot f(2i+1)$ ,叶子节点 $f(i)=1$ . 把组合数拆开,算算贡献,可以发现 $f(1)=\frac {n!} {\prod siz_i}$ .考虑 $siz$ 连乘积怎么算. 注意到一个点的左右子树至少有一个是满的二叉树(每一层填满),那么就可以先求出每种满二叉树的答案,此时递归入另一个子树继续计算就可以了.这部分的时间复杂度为 $O(logn)​$ . 还有一个 $n!​$ 需要计算.分块打下表,就能很快求出啦. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=1e9+7;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int inv(int x)&#123; return fpow(x,P-2);&#125;int m=1000000;int calcfac(int x) &#123; int pos=x/m; int s=blockfac[pos]; for(int i=pos*m+1;i&lt;=x;++i) s=mul(s,i); return s;&#125;int n;map&lt;int,int&gt; mp;int solve(int x)//x个点,x个互异权值,siz连乘积&#123; if(x&lt;=1) return 1; if(mp.find(x)!=mp.end()) return mp[x]; int z=(int)(log2(x)); z=1&lt;&lt;z; int y=min(z-1,x-z/2); return mp[x]=mul(x,mul(solve(y),solve(x-y-1)));&#125;int main()&#123; freopen("heap.in","r",stdin); freopen("heap.out","w",stdout); n=read(); cout&lt;&lt;mul(calcfac(n),(inv(solve(n))))&lt;&lt;endl; return 0;&#125; 这里用了另一种等价的做法,意义不是很明显?略去了表的数据. $secret$ 待更. $tree$ 待更.]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>打表</tag>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test20190416]]></title>
    <url>%2F2019%2F04%2F17%2Ftest20190416%2F</url>
    <content type="text"><![CDATA[来自 $GDOI​$ 的模拟题? 题面 $graph$ 貌似是第一次在考试中遇到提答题? 这题看上去十分正常,却出成提答,就是让你乱搞的…题解给的做法就是退火之类的乱搞. 随便估价乱搞一下就可以获得 $80+$ 的好成绩? $guess$ 自己的联想发散能力还是有问题,没看出可以建网络流模型,只会打暴力… 正解:要求的就是所有合法配对方案中,出现原来配对情况的最小数目. 先离散化一下数字大小,建一个费用流的模型,从 $S$ 向左边每个数字连其在 $x$ 坐标中出现的次数作为流量, $0$ 作为费用的边. $y$ 坐标连类似的边连向 $T$ .中间对于每个原来有的配对,连一条流量为 $1$ ,费用为 $1$ 的边.这样就限制了不会出现重复的配对. 跑一遍 $mcmf$ 即为答案. $room$ 最开始想到最小割去了..然后发现好像不太现实,暴力转移的 $dp$ 倒是很普及… 设 $f[i][j][k]$ 表示已经走了前 $i$ 层,第 $i$ 层开的门分别为 $j,k​$ 时的最小体力花费. 这个东西显然可以 $O(nm^4)$ 大力转移. $f[1][j][k]=t[1][j]+t[1][k]$$f[i][j][k]=\min_{x\not = y} f[i-1][x][y]+K\cdot (|j-x|+|k-y|),2\leq i \leq n.​$ 后两维交换是没有影响的,所以在枚举是可以直接钦定 $j&lt;k,x&lt;y$ ,优化了 $16$ 倍常数.这样就有 $60pts$ 了. $100pts?$ 转移时允许在同层转移,形成一个类似前缀 $\min$ 的优化,即可做到 $O(nm^2)$ . 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;#define rg registerusing namespace std;typedef long long ll;const int inf=1e9;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=329;int n,m,K;int t[MAXN][MAXN];int f[MAXN][MAXN][MAXN];void solve()&#123; int ans=inf; memset(f,0x7f,sizeof f); for(rg int j=1;j&lt;m;++j) for(rg int k=j+1;k&lt;=m;++k) f[1][j][k]=t[1][j]+t[1][k]; for(rg int i=2;i&lt;=n;++i) &#123; for(rg int j=1;j&lt;m;++j) for(rg int k=j+1;k&lt;=m;++k) f[i][j][k]=min(K+min(f[i][j-1][k],f[i][j][k-1]),f[i-1][j][k]); for(rg int j=m-1;j&gt;=1;--j) for(int k=m;k&gt;j;--k) f[i][j][k]=min(f[i][j][k],K+min(f[i][j+1][k],f[i][j][k+1])); for(rg int j=1;j&lt;=m;++j) for(rg int k=j+1;k&lt;=m;++k) f[i][j][k]+=t[i][j]+t[i][k]; &#125; for(rg int j=1;j&lt;m;++j) for(rg int k=j+1;k&lt;=m;++k) ans=min(ans,f[n][j][k]); cout&lt;&lt;ans&lt;&lt;endl;&#125;int main()&#123; freopen("room.in","r",stdin); freopen("room.out","w",stdout); n=read(),m=read(),K=read(); for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) t[i][j]=read(); solve(); return 0;&#125; 可以滚掉第一维?空间没卡的话就随便吧…]]></content>
      <tags>
        <tag>网络流</tag>
        <tag>test</tag>
        <tag>近似算法</tag>
        <tag>前缀和优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CF1153]]></title>
    <url>%2F2019%2F04%2F16%2FCF1153%2F</url>
    <content type="text"><![CDATA[$Div.2$ CF1153B Serval and Toy Bricks 贪心+构造. 能放行 $\max$ 而不爆列 $\max$ 的位置都放行 $\max$ , 能放列 $\max$ 而不爆行 $\max$ 的位置都放列 $\max$ . 这样每个位置显然不会被定为两个不同的值.对于其他有而未放的位置直接都放 $1$ 就好了. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=128;int n,m,H;int a[MAXN],b[MAXN];int c[MAXN][MAXN],h[MAXN][MAXN];int main()&#123; n=read(),m=read(),H=read(); for(int i=1;i&lt;=m;++i) a[i]=read(); for(int i=1;i&lt;=n;++i) b[i]=read(); for(int i=1;i&lt;=n;++i) for(int j=1;j&lt;=m;++j) h[i][j]=read(); for(int i=1;i&lt;=n;++i) &#123; for(int j=1;j&lt;=m;++j) &#123; if(h[i][j]) &#123; if(a[j]&lt;=b[i]) c[i][j]=a[j]; else c[i][j]=b[i]; &#125; printf("%d ",c[i][j]); &#125; puts(""); &#125; return 0;&#125; CF1153C Serval and Parenthesis Sequence 贪心+构造.显然可以将左括号,右括号的权值分别赋为 $1,-1$. 那么容易发现题中限制条件就是权值前缀和 $sum(n)=0,sum(i)&gt;0,\forall i&lt;n$. 将所有未确定的位置赋为 $1$ ,可以算出 $sum(n)=k$ ,需要将 $\frac k 2$ 个位置改为 $-1$. 从后往前贪心改,能改的位置就改.判一下不合法的情况, $k$ 为奇数,负数或不够改. 改完后再从前往后 $check$ 一次就可以了. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include&lt;bits/stdc++.h&gt;#define GG return puts(":("),0;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=3e5+10;int n;char buf[MAXN];int a[MAXN];int main()&#123; n=read(); scanf("%s",buf+1); int k=0,tot=0; for(int i=1;i&lt;=n;++i) &#123; if(buf[i]==')') --k,a[i]=-1; else if(buf[i]=='(') ++k,a[i]=1; else ++k,a[i]=1,++tot; &#125; if(k&lt;0 || k%2==1 || k/2&gt;tot) GG for(int i=n;i&gt;=1 &amp;&amp; k&gt;0;--i) &#123; if(buf[i]=='?') a[i]=-1,k-=2; &#125; int sum=0; for(int i=1;i&lt;n;++i) &#123; sum+=a[i]; if(sum&lt;=0) GG &#125; for(int i=1;i&lt;=n;++i) &#123; if(a[i]==1) putchar('('); else putchar(')'); &#125; puts(""); return 0;&#125; CF1153D Serval and Rooted Tree 树形 $dp$ .(一定思维难度?) 考虑一颗子树,若其中有 $p$ 个叶子节点,任意选择 $p$ 个互不相同的权值,经过最优排列后,这个根节点的权值的相对大小,即排名,一定是确定的,即与选择了哪些权值无关. 那么记 $f_i$ 表示给子树 $i$ 中的叶子节点最优赋值后,节点 $i$ 上的权值是这些叶子节点权值中的第 $f_i$ 大. 对于叶子节点 ,显然 $f_u=1$ . 若操作符为 $\min$ ,可以证明感性理解, $f_u=\sum f_v$ .若操作符为 $\max$ ,可以证明感性理解, $f_u=\min f_v$ ,其中 $v$ 为 $u$ 的儿子. 共有 $k$ 个叶子节点,最后答案即为 $k+1-f_1$ ,即全部可用的权值的第 $f_1$ 大. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int MAXN=3e5+10;int head[MAXN],nx[MAXN],to[MAXN],ecnt=0;inline void addedge(int u,int v)&#123; ++ecnt; nx[ecnt]=head[u]; to[ecnt]=v; head[u]=ecnt;&#125;int n;int opt[MAXN],f[MAXN],outdeg[MAXN],k=0;void dfs(int u)&#123; if(!outdeg[u]) &#123; ++k; f[u]=1; return; &#125; if(opt[u]==1) f[u]=MAXN+1; for(int i=head[u];i;i=nx[i]) &#123; int v=to[i]; dfs(v); if(!opt[u]) f[u]+=f[v]; else f[u]=min(f[u],f[v]); &#125;&#125;int main()&#123; n=read(); for(int i=1;i&lt;=n;++i) opt[i]=read(); for(int i=2;i&lt;=n;++i) &#123; int fa=read(); addedge(fa,i); ++outdeg[fa]; &#125; dfs(1); cout&lt;&lt;k+1-f[1]&lt;&lt;endl; return 0;&#125; CF1153F Serval and Bonus Problem 概率/期望,计数, $dp$ . 随便在线段上钦定 $2n$ 个点,分割成 $2n+1$ 段区间,所以每段区间的期望长度就是 $\frac l {2n+1}$ .于是只需要再乘上一段区间至少被 $k$ 条线段覆盖的概率就好了. 设 $f(i,j)$ 表示考虑 $i$ 个端点,第 $i$ 个端点后面的区间恰好被 $j$ 条线段所覆盖的方案数.转移时枚举 $i$ 是作为左端点还是右端点, $O(n^2)$ 大力转移. 最后将所有合法方案数目求和,除以 $f(2n,0)$ 得到概率. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;inline int read()&#123; int out=0,fh=1; char jp=getchar(); while ((jp&gt;'9'||jp&lt;'0')&amp;&amp;jp!='-') jp=getchar(); if (jp=='-') fh=-1,jp=getchar(); while (jp&gt;='0'&amp;&amp;jp&lt;='9') out=out*10+jp-'0',jp=getchar(); return out*fh;&#125;const int P=998244353;inline int add(int a,int b)&#123; return (a + b) % P;&#125;inline int mul(int a,int b)&#123; return 1LL * a * b % P;&#125;int fpow(int a,int b)&#123; int res=1; while(b) &#123; if(b&amp;1) res=mul(res,a); a=mul(a,a); b&gt;&gt;=1; &#125; return res;&#125;int inv(int x)&#123; return fpow(x,P-2);&#125;const int MAXN=2019&lt;&lt;1;int n,l,k;int fac[MAXN];int f[MAXN][MAXN];int main()&#123; n=read(),k=read(); l=read(); int perl=mul(l,inv(2*n+1)); fac[0]=1; for(int i=1;i&lt;=n;++i) fac[i]=mul(fac[i-1],i); f[0][0]=1; for(int i=0;i&lt;2*n;++i) &#123; for(int j=n&lt;i?n:i;j&gt;=0;--j) &#123; f[i+1][j+1]=add(f[i+1][j+1],f[i][j]); if(j) f[i+1][j-1]=add(f[i+1][j-1],mul(f[i][j],j)); &#125; &#125; int ans=0; for(int i=1;i&lt;2*n;++i) for(int j=k;j&lt;=n;++j) &#123; int tmp=mul(f[i][j],f[2*n-i][j]); tmp=mul(tmp,fac[j]); ans=add(ans,tmp); &#125; cout&lt;&lt;mul(ans,mul(perl,inv(f[2*n][0]))); return 0;&#125;]]></content>
      <tags>
        <tag>dp计数</tag>
        <tag>贪心</tag>
        <tag>构造</tag>
        <tag>树形dp</tag>
        <tag>codeforces</tag>
        <tag>概率/期望</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SCOI2019游记]]></title>
    <url>%2F2019%2F04%2F11%2FSCOI2019%E6%B8%B8%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[梦之浮桥 $Day\ -3$ $NamelessOIer$ 在写退役记 .毕姥爷:你写一篇退役记,进队了来看,岂不是很爽? 奶一口 NamelessOIer 进队. $Day\ -2$ 怎么回事啊,考前天天考一些奥妙重重的数学题,自闭了. 我:省选前打几道数据结构题练练手.旁边的 achen :我刚刚写到数据结构写多了让人退役. 被钦点退役了. $Day\ -1$ 背了背笔试,据说 $SCOI$ 不上机笔试?快捷键警告. $Day\ 0$ 早上破天荒地去食堂吃了顿饭,也遇到了很多熟人.但大家的心境似乎不太一样呢… $noip$ 考完后还说着有半年才省选,转眼间也就到了呢… 怎么有点感冒啊,头倒不是很昏,就是一直流鼻涕… $Day\ 1$ 看完题,啥思路都没有…先写了后两个题的暴力,然后再看第一题. 发现其实就是一个像九连环或者汉诺塔之类的递归式子的题目？迅速写完 $50$ 分,然后开始想后面的部分. 可能这就是思维江化吧,觉得输入可能很大,就以为是读入的时候取模,高精是啥?推了很久,感觉很不可做.(不是自己都说了像九连环嘛…) 于是又把后面的部分分写了一点,大概还有 $15$ 分钟下考的样子?发现 $T1$ 的复杂度跑所有点都是可以的,带个高精就好了… 于是迅速 $rush$ 了一个高精,并且和前面的部分分情况做,又过了一次大样例. 预计 $50/100+20+30=100/150$ ,下午看分: $0+20+20=40$. $T3$ 挂了 $10分$ ,$T1$ 直接 $fst$ 了???怎么目前为止每次 $D1T1$ 都 $fst$ 啊??? 心态有些炸裂. $Day\ 2$ 也不指望能翻盘了.把自己能打的打好就可以了吧. 开题之后,误以为 $T1$ 非常普及,打了将近个一小时后发现是假的… 迅速写了个最暴力的 $O(n^3)$ 暴力,去看后面两个题. 姿势水平不够,依然只能打暴力. $T2$ 的暴力写了 $6kb$ , $T3$ 写了个暴力+线性基的部分分. 回过来看 $T1$ ,发现直接用最大子段和做是 $O(nm)$ 的,但我觉得直接把前面的线段树改一下,也就多个 $log$ 啊? 写完之后才发现这一档是 $n,m\leq 10^4$…测了一下自己的 $O(nmlogn)$ ,跑了 $7s,O2\ 1.7s$ ,但 $T1$ 偏偏 $2s$ ,无优化? 钦定卡常可还行?觉得自己改成 $O(nm)$ 也不太稳,于是就没有写,把 $T2$ 的树剖+树状数组的暴力再看了几遍… 预估 $20+40+40=100$ ,实际: $20+40+20=80$. $T3$ 线性基求秩咋挂的啊…感觉暴力挂掉的可能更大啊… 后记 已编辑并删除部分过激言论. 今年我们学校 achen 以女选手的身份进队,虽然以她的水平这次其实也有一些失误的? NamelessOIer 和 autoint都在 $40$ 名左右,刚好可以买 $D$ 的样子??? 各位, $NOIP\ 2019$ ,有缘再会.]]></content>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NOIP2018游记]]></title>
    <url>%2F2018%2F11%2F11%2FNOIP2018%E6%B8%B8%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[物语之始 $Day\ -1$ 上午考试…打开一看是noip2017的题,心态崩了…. xjb敲了一会,最后我的模拟 $FST$ 了… 下午开始巨tm难受,感冒了…头昏脑胀,慌得一匹… $Day\ 0$ 上午还是考试…结果是神仙题… 三道数学,T1压位高精努力打了一下,后面就乱搞了… 今天不应该出所有人都AK的题吗??? 下午坐车去成都… 晚上一直在看费用流和数学相关的东西,恍恍惚惚混过去了,感觉很慌… $Day\ 1$ 进了考场不让碰键盘鼠标就很难受… 开考的时候反而不是很紧张,因为在那里干坐了许久… 大致浏览了一遍…怎么没有%你题? 开始搞T1…搞不出来自己乱想了个东西,锤了一发,秒过大样例,就不管了… T2 像是大凯的疑惑…不过这题wys给我讲过升级版的…那道题是转化成图论跑最短路… 这道题连边权都不用考虑,一个 $bfs$ +时间戳优化卡常. 然后看 $T3​$ ,不会做. 开始打 $subtask$ ,打到11点的样子,打完了55分的 $subtask$ ,然后写个暴力开始逐个拍… day1 预估 $100+100+55=255.$ upd: T1我作了大死: 12while(!d[curp]) ++curp; 没有限制$curp\leq n$.在本机上这样写,溢出之后会访问奇怪的内存,不为0,就会自动跳出…所以我才丝毫没有发觉… 然而在Noi Linux环境下这样写就会导致全部RE… 这下凉的透彻.1=都很难说了. $Day\ 2$ T1先写了个树的 $60pts$ .然后基环树没想出来…一直在想 $O(nlogn)$ 的算法…据说是有的,但是我太菜了… T2我的状压,猜的结论是错的,死活过不了 $n=3$ 的样例…找了一波 $n=2$ 的规律,手算前面部分,$50pts$… T3 动态dp啊…然而时间不多了,也不太敢写…就写了个 $50pts$ 的暴力更新和 $18pts$ 的 $subtask$ . day2 预估 $60+50+68=178.​$ 后记 所以本来上个400应该还是没啥问题吧,然后T1原地爆炸… 目标从保$400pts$变到保1=…这是何等的凄凉… 现在只能给$CCF$上香…保住我的1=不爆炸….T1不RE还是别奢求了 等1920号公布成绩了. upd:凉凉.289.求不被卡1=. $D1T1$ 爆零,意料之中; $D1T3$ 被少爷机卡了 $25pts$ , $D2T3$ 的子任务应该是打炸了,只有 $44pts$ 的弱智分…]]></content>
      <tags>
        <tag>游记</tag>
      </tags>
  </entry>
</search>
